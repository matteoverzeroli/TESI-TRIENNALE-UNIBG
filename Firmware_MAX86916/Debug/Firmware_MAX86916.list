
Firmware_MAX86916.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e20  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007fa8  08007fa8  00017fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008008  08008008  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008010  08008010  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008010  08008010  00018010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008014  08008014  00018014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08008018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00001b7c  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001cfc  20001cfc  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   000174b1  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033db  00000000  00000000  00037661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  0003aa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d58  00000000  00000000  0003b8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000239b1  00000000  00000000  0003c630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000135c8  00000000  00000000  0005ffe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c775e  00000000  00000000  000735a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013ad07  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b64  00000000  00000000  0013ad5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007f90 	.word	0x08007f90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08007f90 	.word	0x08007f90

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <setSystemState>:
 *  Created on: Aug 26, 2021
 *      Author: Matteo Verzeroli
 */
#include "FSM.h"

void setSystemState(DISCOVERY_FSM discovery, SystemState state){
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	7138      	strb	r0, [r7, #4]
 80004c8:	460b      	mov	r3, r1
 80004ca:	71fb      	strb	r3, [r7, #7]
	discovery.state = state;
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	713b      	strb	r3, [r7, #4]
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <MAX86916_I2C_Write>:
MAX86916_Init_TypeDef ppg_config;

/**
 * Write MAX86916 register(s)
 */
bool MAX86916_I2C_Write(uint8_t regName, uint8_t* regValue, uint8_t numBytes) {
 80004dc:	b5b0      	push	{r4, r5, r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af02      	add	r7, sp, #8
 80004e2:	4603      	mov	r3, r0
 80004e4:	6039      	str	r1, [r7, #0]
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	4613      	mov	r3, r2
 80004ea:	71bb      	strb	r3, [r7, #6]
 80004ec:	466b      	mov	r3, sp
 80004ee:	461d      	mov	r5, r3
	uint8_t tx_buffer[numBytes + 1];
 80004f0:	79bb      	ldrb	r3, [r7, #6]
 80004f2:	1c5c      	adds	r4, r3, #1
 80004f4:	1e63      	subs	r3, r4, #1
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	4623      	mov	r3, r4
 80004fa:	4618      	mov	r0, r3
 80004fc:	f04f 0100 	mov.w	r1, #0
 8000500:	f04f 0200 	mov.w	r2, #0
 8000504:	f04f 0300 	mov.w	r3, #0
 8000508:	00cb      	lsls	r3, r1, #3
 800050a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800050e:	00c2      	lsls	r2, r0, #3
 8000510:	4623      	mov	r3, r4
 8000512:	4618      	mov	r0, r3
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	f04f 0200 	mov.w	r2, #0
 800051c:	f04f 0300 	mov.w	r3, #0
 8000520:	00cb      	lsls	r3, r1, #3
 8000522:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000526:	00c2      	lsls	r2, r0, #3
 8000528:	4623      	mov	r3, r4
 800052a:	3307      	adds	r3, #7
 800052c:	08db      	lsrs	r3, r3, #3
 800052e:	00db      	lsls	r3, r3, #3
 8000530:	ebad 0d03 	sub.w	sp, sp, r3
 8000534:	ab02      	add	r3, sp, #8
 8000536:	3300      	adds	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
	uint8_t i;
	tx_buffer[0] = regName;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	79fa      	ldrb	r2, [r7, #7]
 800053e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < numBytes; i++)
 8000540:	2300      	movs	r3, #0
 8000542:	75fb      	strb	r3, [r7, #23]
 8000544:	e00a      	b.n	800055c <MAX86916_I2C_Write+0x80>
		tx_buffer[i + 1] = regValue[i];
 8000546:	7dfb      	ldrb	r3, [r7, #23]
 8000548:	683a      	ldr	r2, [r7, #0]
 800054a:	441a      	add	r2, r3
 800054c:	7dfb      	ldrb	r3, [r7, #23]
 800054e:	3301      	adds	r3, #1
 8000550:	7811      	ldrb	r1, [r2, #0]
 8000552:	68fa      	ldr	r2, [r7, #12]
 8000554:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < numBytes; i++)
 8000556:	7dfb      	ldrb	r3, [r7, #23]
 8000558:	3301      	adds	r3, #1
 800055a:	75fb      	strb	r3, [r7, #23]
 800055c:	7dfa      	ldrb	r2, [r7, #23]
 800055e:	79bb      	ldrb	r3, [r7, #6]
 8000560:	429a      	cmp	r2, r3
 8000562:	d3f0      	bcc.n	8000546 <MAX86916_I2C_Write+0x6a>

	return HAL_I2C_Master_Transmit(&hi2c_ppg_max, MAX86916_I2C_ADDRESS, tx_buffer,
 8000564:	68fa      	ldr	r2, [r7, #12]
 8000566:	79bb      	ldrb	r3, [r7, #6]
 8000568:	b29b      	uxth	r3, r3
 800056a:	3301      	adds	r3, #1
 800056c:	b29b      	uxth	r3, r3
 800056e:	2164      	movs	r1, #100	; 0x64
 8000570:	9100      	str	r1, [sp, #0]
 8000572:	21ae      	movs	r1, #174	; 0xae
 8000574:	4806      	ldr	r0, [pc, #24]	; (8000590 <MAX86916_I2C_Write+0xb4>)
 8000576:	f001 fb79 	bl	8001c6c <HAL_I2C_Master_Transmit>
 800057a:	4603      	mov	r3, r0
			numBytes + 1, 100) == HAL_OK;
 800057c:	2b00      	cmp	r3, #0
 800057e:	bf0c      	ite	eq
 8000580:	2301      	moveq	r3, #1
 8000582:	2300      	movne	r3, #0
 8000584:	b2db      	uxtb	r3, r3
 8000586:	46ad      	mov	sp, r5
}
 8000588:	4618      	mov	r0, r3
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bdb0      	pop	{r4, r5, r7, pc}
 8000590:	200003cc 	.word	0x200003cc

08000594 <MAX86916_I2C_Read>:

/**
 * Read MAX86916 register(s)
 */
bool MAX86916_I2C_Read(uint8_t regName, uint8_t* readByte, uint8_t numBytes) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af02      	add	r7, sp, #8
 800059a:	4603      	mov	r3, r0
 800059c:	6039      	str	r1, [r7, #0]
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	bool res = true;
 80005a4:	2301      	movs	r3, #1
 80005a6:	73fb      	strb	r3, [r7, #15]
	res &= (HAL_I2C_Master_Transmit(&hi2c_ppg_max, MAX86916_I2C_ADDRESS, &regName,
 80005a8:	1dfa      	adds	r2, r7, #7
 80005aa:	2364      	movs	r3, #100	; 0x64
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2301      	movs	r3, #1
 80005b0:	21ae      	movs	r1, #174	; 0xae
 80005b2:	4816      	ldr	r0, [pc, #88]	; (800060c <MAX86916_I2C_Read+0x78>)
 80005b4:	f001 fb5a 	bl	8001c6c <HAL_I2C_Master_Transmit>
 80005b8:	4603      	mov	r3, r0
			1, 100) == HAL_OK);
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	bf0c      	ite	eq
 80005be:	2301      	moveq	r3, #1
 80005c0:	2300      	movne	r3, #0
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	461a      	mov	r2, r3
	res &= (HAL_I2C_Master_Transmit(&hi2c_ppg_max, MAX86916_I2C_ADDRESS, &regName,
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	4013      	ands	r3, r2
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	bf14      	ite	ne
 80005ce:	2301      	movne	r3, #1
 80005d0:	2300      	moveq	r3, #0
 80005d2:	73fb      	strb	r3, [r7, #15]
	res &= HAL_I2C_Master_Receive(&hi2c_ppg_max, MAX86916_I2C_ADDRESS, readByte,
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	2264      	movs	r2, #100	; 0x64
 80005da:	9200      	str	r2, [sp, #0]
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	21ae      	movs	r1, #174	; 0xae
 80005e0:	480a      	ldr	r0, [pc, #40]	; (800060c <MAX86916_I2C_Read+0x78>)
 80005e2:	f001 fc41 	bl	8001e68 <HAL_I2C_Master_Receive>
 80005e6:	4603      	mov	r3, r0
			numBytes, 100) == HAL_OK;
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	bf0c      	ite	eq
 80005ec:	2301      	moveq	r3, #1
 80005ee:	2300      	movne	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
	res &= HAL_I2C_Master_Receive(&hi2c_ppg_max, MAX86916_I2C_ADDRESS, readByte,
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	4013      	ands	r3, r2
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	bf14      	ite	ne
 80005fc:	2301      	movne	r3, #1
 80005fe:	2300      	moveq	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
	return res;
 8000602:	7bfb      	ldrb	r3, [r7, #15]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200003cc 	.word	0x200003cc

08000610 <MAX86916_Read_Part_ID>:

/**
 * Read sensor part ID
 */
uint8_t MAX86916_Read_Part_ID(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	uint8_t part_id;
	MAX86916_I2C_Read(MAX86916_REG_PART_ID, &part_id, 1);
 8000616:	1dfb      	adds	r3, r7, #7
 8000618:	2201      	movs	r2, #1
 800061a:	4619      	mov	r1, r3
 800061c:	20ff      	movs	r0, #255	; 0xff
 800061e:	f7ff ffb9 	bl	8000594 <MAX86916_I2C_Read>
	return part_id;
 8000622:	79fb      	ldrb	r3, [r7, #7]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <MAX86916_Check>:
}

/**
 * Check part ID, revision ID and whether all registers have been written successfully
 */
bool MAX86916_Check(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
	bool check = true;
 8000632:	2301      	movs	r3, #1
 8000634:	71fb      	strb	r3, [r7, #7]

	uint8_t reg_value, temp;

	// Read REV_ID e PART_ID to check if they are correct
	if (MAX86916_Read_Part_ID() != MAX86916_PART_ID_VALUE)
 8000636:	f7ff ffeb 	bl	8000610 <MAX86916_Read_Part_ID>
 800063a:	4603      	mov	r3, r0
 800063c:	2b2b      	cmp	r3, #43	; 0x2b
 800063e:	d001      	beq.n	8000644 <MAX86916_Check+0x18>
		check = false;
 8000640:	2300      	movs	r3, #0
 8000642:	71fb      	strb	r3, [r7, #7]

	// Check mode configuration 1
	check &= MAX86916_I2C_Read(MAX86916_REG_MODE_CONFIGURATION1, &reg_value, 1);
 8000644:	1d7b      	adds	r3, r7, #5
 8000646:	2201      	movs	r2, #1
 8000648:	4619      	mov	r1, r3
 800064a:	2009      	movs	r0, #9
 800064c:	f7ff ffa2 	bl	8000594 <MAX86916_I2C_Read>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	4013      	ands	r3, r2
 8000658:	2b00      	cmp	r3, #0
 800065a:	bf14      	ite	ne
 800065c:	2301      	movne	r3, #1
 800065e:	2300      	moveq	r3, #0
 8000660:	71fb      	strb	r3, [r7, #7]
	temp = ppg_config.shutdown | ppg_config.mode;
 8000662:	4b4a      	ldr	r3, [pc, #296]	; (800078c <MAX86916_Check+0x160>)
 8000664:	785a      	ldrb	r2, [r3, #1]
 8000666:	4b49      	ldr	r3, [pc, #292]	; (800078c <MAX86916_Check+0x160>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	4313      	orrs	r3, r2
 800066c:	71bb      	strb	r3, [r7, #6]
	if (reg_value != temp)
 800066e:	797b      	ldrb	r3, [r7, #5]
 8000670:	79ba      	ldrb	r2, [r7, #6]
 8000672:	429a      	cmp	r2, r3
 8000674:	d001      	beq.n	800067a <MAX86916_Check+0x4e>
		check = false;
 8000676:	2300      	movs	r3, #0
 8000678:	71fb      	strb	r3, [r7, #7]

	// Check mode configuration 2
	check &= MAX86916_I2C_Read(MAX86916_REG_MODE_CONFIGURATION2, &reg_value, 1);
 800067a:	1d7b      	adds	r3, r7, #5
 800067c:	2201      	movs	r2, #1
 800067e:	4619      	mov	r1, r3
 8000680:	200a      	movs	r0, #10
 8000682:	f7ff ff87 	bl	8000594 <MAX86916_I2C_Read>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4013      	ands	r3, r2
 800068e:	2b00      	cmp	r3, #0
 8000690:	bf14      	ite	ne
 8000692:	2301      	movne	r3, #1
 8000694:	2300      	moveq	r3, #0
 8000696:	71fb      	strb	r3, [r7, #7]
	temp = ppg_config.full_scale | ppg_config.frequency
 8000698:	4b3c      	ldr	r3, [pc, #240]	; (800078c <MAX86916_Check+0x160>)
 800069a:	789a      	ldrb	r2, [r3, #2]
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <MAX86916_Check+0x160>)
 800069e:	78db      	ldrb	r3, [r3, #3]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	b2da      	uxtb	r2, r3
			| ppg_config.pulse_width;
 80006a4:	4b39      	ldr	r3, [pc, #228]	; (800078c <MAX86916_Check+0x160>)
 80006a6:	791b      	ldrb	r3, [r3, #4]
	temp = ppg_config.full_scale | ppg_config.frequency
 80006a8:	4313      	orrs	r3, r2
 80006aa:	71bb      	strb	r3, [r7, #6]
	if (reg_value != temp)
 80006ac:	797b      	ldrb	r3, [r7, #5]
 80006ae:	79ba      	ldrb	r2, [r7, #6]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d001      	beq.n	80006b8 <MAX86916_Check+0x8c>
		check = false;
 80006b4:	2300      	movs	r3, #0
 80006b6:	71fb      	strb	r3, [r7, #7]

	// Check led pulse amplitudes
	check &= MAX86916_I2C_Read(MAX86916_REG_LED1_PULSE_AMPLITUDE, &reg_value, 1);
 80006b8:	1d7b      	adds	r3, r7, #5
 80006ba:	2201      	movs	r2, #1
 80006bc:	4619      	mov	r1, r3
 80006be:	200c      	movs	r0, #12
 80006c0:	f7ff ff68 	bl	8000594 <MAX86916_I2C_Read>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	4013      	ands	r3, r2
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	bf14      	ite	ne
 80006d0:	2301      	movne	r3, #1
 80006d2:	2300      	moveq	r3, #0
 80006d4:	71fb      	strb	r3, [r7, #7]
	temp = ppg_config.led_pa[0];
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <MAX86916_Check+0x160>)
 80006d8:	7a1b      	ldrb	r3, [r3, #8]
 80006da:	71bb      	strb	r3, [r7, #6]
	if (reg_value != temp)
 80006dc:	797b      	ldrb	r3, [r7, #5]
 80006de:	79ba      	ldrb	r2, [r7, #6]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d001      	beq.n	80006e8 <MAX86916_Check+0xbc>
		check = false;
 80006e4:	2300      	movs	r3, #0
 80006e6:	71fb      	strb	r3, [r7, #7]

	check &= MAX86916_I2C_Read(MAX86916_REG_LED2_PULSE_AMPLITUDE, &reg_value,1);
 80006e8:	1d7b      	adds	r3, r7, #5
 80006ea:	2201      	movs	r2, #1
 80006ec:	4619      	mov	r1, r3
 80006ee:	200d      	movs	r0, #13
 80006f0:	f7ff ff50 	bl	8000594 <MAX86916_I2C_Read>
 80006f4:	4603      	mov	r3, r0
 80006f6:	461a      	mov	r2, r3
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4013      	ands	r3, r2
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	bf14      	ite	ne
 8000700:	2301      	movne	r3, #1
 8000702:	2300      	moveq	r3, #0
 8000704:	71fb      	strb	r3, [r7, #7]
	temp = ppg_config.led_pa[1];
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <MAX86916_Check+0x160>)
 8000708:	7a5b      	ldrb	r3, [r3, #9]
 800070a:	71bb      	strb	r3, [r7, #6]
	if (reg_value != temp)
 800070c:	797b      	ldrb	r3, [r7, #5]
 800070e:	79ba      	ldrb	r2, [r7, #6]
 8000710:	429a      	cmp	r2, r3
 8000712:	d001      	beq.n	8000718 <MAX86916_Check+0xec>
		check = false;
 8000714:	2300      	movs	r3, #0
 8000716:	71fb      	strb	r3, [r7, #7]

	if (ppg_config.mode == MAX86916_MODE_FLEX) {
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MAX86916_Check+0x160>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b03      	cmp	r3, #3
 800071e:	d12f      	bne.n	8000780 <MAX86916_Check+0x154>
		check &= MAX86916_I2C_Read(MAX86916_REG_LED3_PULSE_AMPLITUDE, &reg_value, 1);
 8000720:	1d7b      	adds	r3, r7, #5
 8000722:	2201      	movs	r2, #1
 8000724:	4619      	mov	r1, r3
 8000726:	200e      	movs	r0, #14
 8000728:	f7ff ff34 	bl	8000594 <MAX86916_I2C_Read>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	4013      	ands	r3, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	bf14      	ite	ne
 8000738:	2301      	movne	r3, #1
 800073a:	2300      	moveq	r3, #0
 800073c:	71fb      	strb	r3, [r7, #7]
		temp = ppg_config.led_pa[2];
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MAX86916_Check+0x160>)
 8000740:	7a9b      	ldrb	r3, [r3, #10]
 8000742:	71bb      	strb	r3, [r7, #6]
		if (reg_value != temp)
 8000744:	797b      	ldrb	r3, [r7, #5]
 8000746:	79ba      	ldrb	r2, [r7, #6]
 8000748:	429a      	cmp	r2, r3
 800074a:	d001      	beq.n	8000750 <MAX86916_Check+0x124>
			check = false;
 800074c:	2300      	movs	r3, #0
 800074e:	71fb      	strb	r3, [r7, #7]
		
		check &= MAX86916_I2C_Read(MAX86916_REG_LED4_PULSE_AMPLITUDE, &reg_value, 1);
 8000750:	1d7b      	adds	r3, r7, #5
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	200f      	movs	r0, #15
 8000758:	f7ff ff1c 	bl	8000594 <MAX86916_I2C_Read>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	4013      	ands	r3, r2
 8000764:	2b00      	cmp	r3, #0
 8000766:	bf14      	ite	ne
 8000768:	2301      	movne	r3, #1
 800076a:	2300      	moveq	r3, #0
 800076c:	71fb      	strb	r3, [r7, #7]
		temp = ppg_config.led_pa[3];
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <MAX86916_Check+0x160>)
 8000770:	7adb      	ldrb	r3, [r3, #11]
 8000772:	71bb      	strb	r3, [r7, #6]
		if (reg_value != temp)
 8000774:	797b      	ldrb	r3, [r7, #5]
 8000776:	79ba      	ldrb	r2, [r7, #6]
 8000778:	429a      	cmp	r2, r3
 800077a:	d001      	beq.n	8000780 <MAX86916_Check+0x154>
			check = false;
 800077c:	2300      	movs	r3, #0
 800077e:	71fb      	strb	r3, [r7, #7]
	}

	return check;
 8000780:	79fb      	ldrb	r3, [r7, #7]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200003c0 	.word	0x200003c0

08000790 <MAX86916_Config>:
/**
 * Configuration of MAX86916 operation
 */
bool MAX86916_Config(MAX86916_Init_TypeDef initStruct) {
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b087      	sub	sp, #28
 8000794:	af00      	add	r7, sp, #0
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t temp;
	uint8_t fifo_config = 0x06;
 800079c:	2306      	movs	r3, #6
 800079e:	74fb      	strb	r3, [r7, #19]
	uint8_t led_seq1 = 0x21;
 80007a0:	2321      	movs	r3, #33	; 0x21
 80007a2:	74bb      	strb	r3, [r7, #18]
	uint8_t led_rge = 0x55;
 80007a4:	2355      	movs	r3, #85	; 0x55
 80007a6:	747b      	strb	r3, [r7, #17]
	
	bool result = true;
 80007a8:	2301      	movs	r3, #1
 80007aa:	75fb      	strb	r3, [r7, #23]

	//Store configuration parameters
	memcpy((uint8_t*) &ppg_config, (uint8_t*) &initStruct, sizeof(MAX86916_Init_TypeDef));
 80007ac:	4b9f      	ldr	r3, [pc, #636]	; (8000a2c <MAX86916_Config+0x29c>)
 80007ae:	461c      	mov	r4, r3
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007b4:	6020      	str	r0, [r4, #0]
 80007b6:	6061      	str	r1, [r4, #4]
 80007b8:	60a2      	str	r2, [r4, #8]

	// 1. MODE CONFIGURATION 1
	temp = initStruct.shutdown | initStruct.mode;
 80007ba:	797a      	ldrb	r2, [r7, #5]
 80007bc:	793b      	ldrb	r3, [r7, #4]
 80007be:	4313      	orrs	r3, r2
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	753b      	strb	r3, [r7, #20]
	//uint8_t prova = 0;
	result &= MAX86916_I2C_Write(MAX86916_REG_MODE_CONFIGURATION1, &temp, 1);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2201      	movs	r2, #1
 80007ca:	4619      	mov	r1, r3
 80007cc:	2009      	movs	r0, #9
 80007ce:	f7ff fe85 	bl	80004dc <MAX86916_I2C_Write>
 80007d2:	4603      	mov	r3, r0
 80007d4:	461a      	mov	r2, r3
 80007d6:	7dfb      	ldrb	r3, [r7, #23]
 80007d8:	4013      	ands	r3, r2
 80007da:	2b00      	cmp	r3, #0
 80007dc:	bf14      	ite	ne
 80007de:	2301      	movne	r3, #1
 80007e0:	2300      	moveq	r3, #0
 80007e2:	75fb      	strb	r3, [r7, #23]

	// 2. MODE CONFIGURATION 2
	temp = initStruct.full_scale | initStruct.frequency | initStruct.pulse_width;
 80007e4:	79ba      	ldrb	r2, [r7, #6]
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	7a3b      	ldrb	r3, [r7, #8]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	753b      	strb	r3, [r7, #20]
	result &= MAX86916_I2C_Write(MAX86916_REG_MODE_CONFIGURATION2, &temp, 1);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2201      	movs	r2, #1
 80007fa:	4619      	mov	r1, r3
 80007fc:	200a      	movs	r0, #10
 80007fe:	f7ff fe6d 	bl	80004dc <MAX86916_I2C_Write>
 8000802:	4603      	mov	r3, r0
 8000804:	461a      	mov	r2, r3
 8000806:	7dfb      	ldrb	r3, [r7, #23]
 8000808:	4013      	ands	r3, r2
 800080a:	2b00      	cmp	r3, #0
 800080c:	bf14      	ite	ne
 800080e:	2301      	movne	r3, #1
 8000810:	2300      	moveq	r3, #0
 8000812:	75fb      	strb	r3, [r7, #23]

	/*Configurazioni proibite da verificare*/
	// Forbidden configuration HR mode
	if (initStruct.mode == MAX86916_MODE_HR) {
 8000814:	793b      	ldrb	r3, [r7, #4]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d117      	bne.n	800084a <MAX86916_Config+0xba>
		if (initStruct.frequency > MAX86916_SR_400Hz && initStruct.pulse_width == MAX86916_PW_420)
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b0c      	cmp	r3, #12
 800081e:	d904      	bls.n	800082a <MAX86916_Config+0x9a>
 8000820:	7a3b      	ldrb	r3, [r7, #8]
 8000822:	2b03      	cmp	r3, #3
 8000824:	d101      	bne.n	800082a <MAX86916_Config+0x9a>
			initStruct.frequency = MAX86916_SR_400Hz;
 8000826:	230c      	movs	r3, #12
 8000828:	71fb      	strb	r3, [r7, #7]
		if (initStruct.frequency > MAX86916_SR_1000Hz && initStruct.pulse_width == MAX86916_PW_220)
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b14      	cmp	r3, #20
 800082e:	d904      	bls.n	800083a <MAX86916_Config+0xaa>
 8000830:	7a3b      	ldrb	r3, [r7, #8]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d101      	bne.n	800083a <MAX86916_Config+0xaa>
			initStruct.frequency = MAX86916_SR_1000Hz;
 8000836:	2314      	movs	r3, #20
 8000838:	71fb      	strb	r3, [r7, #7]
		if (initStruct.frequency > MAX86916_SR_1600Hz && initStruct.pulse_width == MAX86916_PW_120)
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b18      	cmp	r3, #24
 800083e:	d904      	bls.n	800084a <MAX86916_Config+0xba>
 8000840:	7a3b      	ldrb	r3, [r7, #8]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d101      	bne.n	800084a <MAX86916_Config+0xba>
			initStruct.frequency = MAX86916_SR_1600Hz;
 8000846:	2318      	movs	r3, #24
 8000848:	71fb      	strb	r3, [r7, #7]
	}

	// Forbidden configuration SPO2 mode
	if (initStruct.mode == MAX86916_MODE_SPO2) {
 800084a:	793b      	ldrb	r3, [r7, #4]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d11f      	bne.n	8000890 <MAX86916_Config+0x100>
		if (initStruct.frequency > MAX86916_SR_200Hz && initStruct.pulse_width == MAX86916_PW_420)
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	2b08      	cmp	r3, #8
 8000854:	d904      	bls.n	8000860 <MAX86916_Config+0xd0>
 8000856:	7a3b      	ldrb	r3, [r7, #8]
 8000858:	2b03      	cmp	r3, #3
 800085a:	d101      	bne.n	8000860 <MAX86916_Config+0xd0>
			initStruct.frequency = MAX86916_SR_200Hz;
 800085c:	2308      	movs	r3, #8
 800085e:	71fb      	strb	r3, [r7, #7]
		if (initStruct.frequency > MAX86916_SR_400Hz && initStruct.pulse_width == MAX86916_PW_220)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2b0c      	cmp	r3, #12
 8000864:	d904      	bls.n	8000870 <MAX86916_Config+0xe0>
 8000866:	7a3b      	ldrb	r3, [r7, #8]
 8000868:	2b02      	cmp	r3, #2
 800086a:	d101      	bne.n	8000870 <MAX86916_Config+0xe0>
			initStruct.frequency = MAX86916_SR_400Hz;
 800086c:	230c      	movs	r3, #12
 800086e:	71fb      	strb	r3, [r7, #7]
		if (initStruct.frequency > MAX86916_SR_1000Hz && initStruct.pulse_width == MAX86916_PW_120)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b14      	cmp	r3, #20
 8000874:	d904      	bls.n	8000880 <MAX86916_Config+0xf0>
 8000876:	7a3b      	ldrb	r3, [r7, #8]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d101      	bne.n	8000880 <MAX86916_Config+0xf0>
			initStruct.frequency = MAX86916_SR_1000Hz;
 800087c:	2314      	movs	r3, #20
 800087e:	71fb      	strb	r3, [r7, #7]
		if (initStruct.frequency > MAX86916_SR_1600Hz && initStruct.pulse_width == MAX86916_PW_70)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b18      	cmp	r3, #24
 8000884:	d904      	bls.n	8000890 <MAX86916_Config+0x100>
 8000886:	7a3b      	ldrb	r3, [r7, #8]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d101      	bne.n	8000890 <MAX86916_Config+0x100>
			initStruct.frequency = MAX86916_SR_1600Hz;
 800088c:	2318      	movs	r3, #24
 800088e:	71fb      	strb	r3, [r7, #7]
	}

	// Forbidden configuration Flex mode
	if (initStruct.mode == MAX86916_MODE_FLEX) {
 8000890:	793b      	ldrb	r3, [r7, #4]
 8000892:	2b03      	cmp	r3, #3
 8000894:	d11f      	bne.n	80008d6 <MAX86916_Config+0x146>
			if (initStruct.frequency > MAX86916_SR_100Hz && initStruct.pulse_width == MAX86916_PW_420)
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b04      	cmp	r3, #4
 800089a:	d904      	bls.n	80008a6 <MAX86916_Config+0x116>
 800089c:	7a3b      	ldrb	r3, [r7, #8]
 800089e:	2b03      	cmp	r3, #3
 80008a0:	d101      	bne.n	80008a6 <MAX86916_Config+0x116>
				initStruct.frequency = MAX86916_SR_100Hz;
 80008a2:	2304      	movs	r3, #4
 80008a4:	71fb      	strb	r3, [r7, #7]
			if (initStruct.frequency > MAX86916_SR_200Hz && initStruct.pulse_width == MAX86916_PW_220)
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b08      	cmp	r3, #8
 80008aa:	d904      	bls.n	80008b6 <MAX86916_Config+0x126>
 80008ac:	7a3b      	ldrb	r3, [r7, #8]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d101      	bne.n	80008b6 <MAX86916_Config+0x126>
				initStruct.frequency = MAX86916_SR_200Hz;
 80008b2:	2308      	movs	r3, #8
 80008b4:	71fb      	strb	r3, [r7, #7]
			if (initStruct.frequency > MAX86916_SR_400Hz && initStruct.pulse_width == MAX86916_PW_120)
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b0c      	cmp	r3, #12
 80008ba:	d904      	bls.n	80008c6 <MAX86916_Config+0x136>
 80008bc:	7a3b      	ldrb	r3, [r7, #8]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d101      	bne.n	80008c6 <MAX86916_Config+0x136>
				initStruct.frequency = MAX86916_SR_400Hz;
 80008c2:	230c      	movs	r3, #12
 80008c4:	71fb      	strb	r3, [r7, #7]
			if (initStruct.frequency > MAX86916_SR_800Hz && initStruct.pulse_width == MAX86916_PW_70)
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b10      	cmp	r3, #16
 80008ca:	d904      	bls.n	80008d6 <MAX86916_Config+0x146>
 80008cc:	7a3b      	ldrb	r3, [r7, #8]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d101      	bne.n	80008d6 <MAX86916_Config+0x146>
				initStruct.frequency = MAX86916_SR_800Hz;
 80008d2:	2310      	movs	r3, #16
 80008d4:	71fb      	strb	r3, [r7, #7]
	}

	// 3. LED PULSE AMPLITUDE
	result &= MAX86916_I2C_Write(MAX86916_REG_LED1_PULSE_AMPLITUDE, initStruct.led_pa, 2);
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	3308      	adds	r3, #8
 80008da:	2202      	movs	r2, #2
 80008dc:	4619      	mov	r1, r3
 80008de:	200c      	movs	r0, #12
 80008e0:	f7ff fdfc 	bl	80004dc <MAX86916_I2C_Write>
 80008e4:	4603      	mov	r3, r0
 80008e6:	461a      	mov	r2, r3
 80008e8:	7dfb      	ldrb	r3, [r7, #23]
 80008ea:	4013      	ands	r3, r2
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	bf14      	ite	ne
 80008f0:	2301      	movne	r3, #1
 80008f2:	2300      	moveq	r3, #0
 80008f4:	75fb      	strb	r3, [r7, #23]
	result &= MAX86916_I2C_Write(MAX86916_REG_LED_SEQUENCE1, &led_seq1, 1);
 80008f6:	f107 0312 	add.w	r3, r7, #18
 80008fa:	2201      	movs	r2, #1
 80008fc:	4619      	mov	r1, r3
 80008fe:	2013      	movs	r0, #19
 8000900:	f7ff fdec 	bl	80004dc <MAX86916_I2C_Write>
 8000904:	4603      	mov	r3, r0
 8000906:	461a      	mov	r2, r3
 8000908:	7dfb      	ldrb	r3, [r7, #23]
 800090a:	4013      	ands	r3, r2
 800090c:	2b00      	cmp	r3, #0
 800090e:	bf14      	ite	ne
 8000910:	2301      	movne	r3, #1
 8000912:	2300      	moveq	r3, #0
 8000914:	75fb      	strb	r3, [r7, #23]
	result &= MAX86916_I2C_Write(MAX86916_REG_LED_RANGE, &led_rge, 1);
 8000916:	f107 0311 	add.w	r3, r7, #17
 800091a:	2201      	movs	r2, #1
 800091c:	4619      	mov	r1, r3
 800091e:	2011      	movs	r0, #17
 8000920:	f7ff fddc 	bl	80004dc <MAX86916_I2C_Write>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	7dfb      	ldrb	r3, [r7, #23]
 800092a:	4013      	ands	r3, r2
 800092c:	2b00      	cmp	r3, #0
 800092e:	bf14      	ite	ne
 8000930:	2301      	movne	r3, #1
 8000932:	2300      	moveq	r3, #0
 8000934:	75fb      	strb	r3, [r7, #23]

	// Configure LED3 and LED4 amplitude and Flex-Mode control registers if FLEX_MODE is enabled
	if (initStruct.mode == MAX86916_MODE_FLEX) {
 8000936:	793b      	ldrb	r3, [r7, #4]
 8000938:	2b03      	cmp	r3, #3
 800093a:	d122      	bne.n	8000982 <MAX86916_Config+0x1f2>
		temp = 0x43;
 800093c:	2343      	movs	r3, #67	; 0x43
 800093e:	753b      	strb	r3, [r7, #20]
		result &= MAX86916_I2C_Write(MAX86916_REG_LED_SEQUENCE2, &temp, 1);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2201      	movs	r2, #1
 8000946:	4619      	mov	r1, r3
 8000948:	2014      	movs	r0, #20
 800094a:	f7ff fdc7 	bl	80004dc <MAX86916_I2C_Write>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	7dfb      	ldrb	r3, [r7, #23]
 8000954:	4013      	ands	r3, r2
 8000956:	2b00      	cmp	r3, #0
 8000958:	bf14      	ite	ne
 800095a:	2301      	movne	r3, #1
 800095c:	2300      	moveq	r3, #0
 800095e:	75fb      	strb	r3, [r7, #23]
		result &= MAX86916_I2C_Write(MAX86916_REG_LED3_PULSE_AMPLITUDE, initStruct.led_pa + 2, 2);
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	3308      	adds	r3, #8
 8000964:	3302      	adds	r3, #2
 8000966:	2202      	movs	r2, #2
 8000968:	4619      	mov	r1, r3
 800096a:	200e      	movs	r0, #14
 800096c:	f7ff fdb6 	bl	80004dc <MAX86916_I2C_Write>
 8000970:	4603      	mov	r3, r0
 8000972:	461a      	mov	r2, r3
 8000974:	7dfb      	ldrb	r3, [r7, #23]
 8000976:	4013      	ands	r3, r2
 8000978:	2b00      	cmp	r3, #0
 800097a:	bf14      	ite	ne
 800097c:	2301      	movne	r3, #1
 800097e:	2300      	moveq	r3, #0
 8000980:	75fb      	strb	r3, [r7, #23]
	}

	// 4. FIFO CONFIGURATION
	if (initStruct.fifo_a_full > 15) {
 8000982:	7afb      	ldrb	r3, [r7, #11]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d901      	bls.n	800098c <MAX86916_Config+0x1fc>
		initStruct.fifo_a_full = 15;
 8000988:	230f      	movs	r3, #15
 800098a:	72fb      	strb	r3, [r7, #11]
	}
	temp = initStruct.fifo_avg | initStruct.fifo_rollover | initStruct.fifo_a_full;
 800098c:	7a7a      	ldrb	r2, [r7, #9]
 800098e:	7abb      	ldrb	r3, [r7, #10]
 8000990:	4313      	orrs	r3, r2
 8000992:	b2da      	uxtb	r2, r3
 8000994:	7afb      	ldrb	r3, [r7, #11]
 8000996:	4313      	orrs	r3, r2
 8000998:	b2db      	uxtb	r3, r3
 800099a:	753b      	strb	r3, [r7, #20]
	result &= MAX86916_I2C_Write(MAX86916_REG_FIFO_CONFIGURATION, &fifo_config, 1);
 800099c:	f107 0313 	add.w	r3, r7, #19
 80009a0:	2201      	movs	r2, #1
 80009a2:	4619      	mov	r1, r3
 80009a4:	2008      	movs	r0, #8
 80009a6:	f7ff fd99 	bl	80004dc <MAX86916_I2C_Write>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	7dfb      	ldrb	r3, [r7, #23]
 80009b0:	4013      	ands	r3, r2
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	bf14      	ite	ne
 80009b6:	2301      	movne	r3, #1
 80009b8:	2300      	moveq	r3, #0
 80009ba:	75fb      	strb	r3, [r7, #23]

	// 5. CLEAR FIFO
	MAX86916_Clear_Fifo();
 80009bc:	f000 f892 	bl	8000ae4 <MAX86916_Clear_Fifo>

	// SAVE SETTINGS
	ppg_config.mode = ppg_config.mode;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MAX86916_Config+0x29c>)
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MAX86916_Config+0x29c>)
 80009c6:	701a      	strb	r2, [r3, #0]
	ppg_config.shutdown = initStruct.shutdown;
 80009c8:	797a      	ldrb	r2, [r7, #5]
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MAX86916_Config+0x29c>)
 80009cc:	705a      	strb	r2, [r3, #1]
	ppg_config.full_scale = initStruct.full_scale;
 80009ce:	79ba      	ldrb	r2, [r7, #6]
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MAX86916_Config+0x29c>)
 80009d2:	709a      	strb	r2, [r3, #2]
	ppg_config.frequency = initStruct.frequency;
 80009d4:	79fa      	ldrb	r2, [r7, #7]
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MAX86916_Config+0x29c>)
 80009d8:	70da      	strb	r2, [r3, #3]
	ppg_config.pulse_width = initStruct.pulse_width;
 80009da:	7a3a      	ldrb	r2, [r7, #8]
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MAX86916_Config+0x29c>)
 80009de:	711a      	strb	r2, [r3, #4]
	uint8_t i;
	for (i = 0; i < 4; i++) {
 80009e0:	2300      	movs	r3, #0
 80009e2:	75bb      	strb	r3, [r7, #22]
 80009e4:	e00d      	b.n	8000a02 <MAX86916_Config+0x272>
		ppg_config.led_pa[i] = initStruct.led_pa[i];
 80009e6:	7dba      	ldrb	r2, [r7, #22]
 80009e8:	7dbb      	ldrb	r3, [r7, #22]
 80009ea:	f107 0118 	add.w	r1, r7, #24
 80009ee:	440a      	add	r2, r1
 80009f0:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 80009f4:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <MAX86916_Config+0x29c>)
 80009f6:	4413      	add	r3, r2
 80009f8:	460a      	mov	r2, r1
 80009fa:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < 4; i++) {
 80009fc:	7dbb      	ldrb	r3, [r7, #22]
 80009fe:	3301      	adds	r3, #1
 8000a00:	75bb      	strb	r3, [r7, #22]
 8000a02:	7dbb      	ldrb	r3, [r7, #22]
 8000a04:	2b03      	cmp	r3, #3
 8000a06:	d9ee      	bls.n	80009e6 <MAX86916_Config+0x256>
	}

	// Check if registers have been written
	bool flag = MAX86916_Check();
 8000a08:	f7ff fe10 	bl	800062c <MAX86916_Check>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	757b      	strb	r3, [r7, #21]
	if (flag == false)
 8000a10:	7d7b      	ldrb	r3, [r7, #21]
 8000a12:	f083 0301 	eor.w	r3, r3, #1
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MAX86916_Config+0x290>
		return false;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	e000      	b.n	8000a22 <MAX86916_Config+0x292>

	return true;
 8000a20:	2301      	movs	r3, #1
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	371c      	adds	r7, #28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd90      	pop	{r4, r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200003c0 	.word	0x200003c0

08000a30 <MAX86916_Read_Sample_Flex_Mode>:

/**
 * Read data when the module is configured in flex mode
 */

bool MAX86916_Read_Sample_Flex_Mode(uint8_t* raw_ired, uint8_t* raw_red, uint8_t* raw_green, uint8_t* raw_blue) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	603b      	str	r3, [r7, #0]
	uint8_t temp[12];
	bool result = true;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	77fb      	strb	r3, [r7, #31]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a42:	b672      	cpsid	i
}
 8000a44:	bf00      	nop
	__disable_irq();
	result &= MAX86916_I2C_Read(MAX86916_REG_FIFO_DATA, temp, 12);
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	2007      	movs	r0, #7
 8000a50:	f7ff fda0 	bl	8000594 <MAX86916_I2C_Read>
 8000a54:	4603      	mov	r3, r0
 8000a56:	461a      	mov	r2, r3
 8000a58:	7ffb      	ldrb	r3, [r7, #31]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	bf14      	ite	ne
 8000a60:	2301      	movne	r3, #1
 8000a62:	2300      	moveq	r3, #0
 8000a64:	77fb      	strb	r3, [r7, #31]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a66:	b662      	cpsie	i
}
 8000a68:	bf00      	nop
	__enable_irq();
	raw_ired[0] = temp[0] & 0x07;
 8000a6a:	7c3b      	ldrb	r3, [r7, #16]
 8000a6c:	f003 0307 	and.w	r3, r3, #7
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	701a      	strb	r2, [r3, #0]
	raw_ired[1] = temp[1];
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	7c7a      	ldrb	r2, [r7, #17]
 8000a7c:	701a      	strb	r2, [r3, #0]
	raw_ired[2] = temp[2];
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3302      	adds	r3, #2
 8000a82:	7cba      	ldrb	r2, [r7, #18]
 8000a84:	701a      	strb	r2, [r3, #0]
	raw_red[0] = temp[3] & 0x07;
 8000a86:	7cfb      	ldrb	r3, [r7, #19]
 8000a88:	f003 0307 	and.w	r3, r3, #7
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	701a      	strb	r2, [r3, #0]
	raw_red[1] = temp[4];
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	3301      	adds	r3, #1
 8000a96:	7d3a      	ldrb	r2, [r7, #20]
 8000a98:	701a      	strb	r2, [r3, #0]
	raw_red[2] = temp[5];
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	7d7a      	ldrb	r2, [r7, #21]
 8000aa0:	701a      	strb	r2, [r3, #0]
	raw_green[0] = temp[6] & 0x07;
 8000aa2:	7dbb      	ldrb	r3, [r7, #22]
 8000aa4:	f003 0307 	and.w	r3, r3, #7
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	701a      	strb	r2, [r3, #0]
	raw_green[1] = temp[7];
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	7dfa      	ldrb	r2, [r7, #23]
 8000ab4:	701a      	strb	r2, [r3, #0]
	raw_green[2] = temp[8];
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3302      	adds	r3, #2
 8000aba:	7e3a      	ldrb	r2, [r7, #24]
 8000abc:	701a      	strb	r2, [r3, #0]
	raw_blue[0] = temp[9] & 0x07;
 8000abe:	7e7b      	ldrb	r3, [r7, #25]
 8000ac0:	f003 0307 	and.w	r3, r3, #7
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	701a      	strb	r2, [r3, #0]
	raw_blue[1] = temp[10];
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	3301      	adds	r3, #1
 8000ace:	7eba      	ldrb	r2, [r7, #26]
 8000ad0:	701a      	strb	r2, [r3, #0]
	raw_blue[2] = temp[11];
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	7efa      	ldrb	r2, [r7, #27]
 8000ad8:	701a      	strb	r2, [r3, #0]

	return result;
 8000ada:	7ffb      	ldrb	r3, [r7, #31]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3720      	adds	r7, #32
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <MAX86916_Clear_Fifo>:
}

/**
 * Clear Fifo registers
 */
bool MAX86916_Clear_Fifo(void) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
	uint8_t reset = 0x00;
 8000aea:	2300      	movs	r3, #0
 8000aec:	71bb      	strb	r3, [r7, #6]
	bool result = true;
 8000aee:	2301      	movs	r3, #1
 8000af0:	71fb      	strb	r3, [r7, #7]
	result &= MAX86916_I2C_Write(MAX86916_REG_FIFO_WRITE_PTR, &reset, 1);
 8000af2:	1dbb      	adds	r3, r7, #6
 8000af4:	2201      	movs	r2, #1
 8000af6:	4619      	mov	r1, r3
 8000af8:	2004      	movs	r0, #4
 8000afa:	f7ff fcef 	bl	80004dc <MAX86916_I2C_Write>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	4013      	ands	r3, r2
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bf14      	ite	ne
 8000b0a:	2301      	movne	r3, #1
 8000b0c:	2300      	moveq	r3, #0
 8000b0e:	71fb      	strb	r3, [r7, #7]
	result &= MAX86916_I2C_Write(MAX86916_REG_FIFO_OVERFLOW_COUNTER, &reset, 1);
 8000b10:	1dbb      	adds	r3, r7, #6
 8000b12:	2201      	movs	r2, #1
 8000b14:	4619      	mov	r1, r3
 8000b16:	2005      	movs	r0, #5
 8000b18:	f7ff fce0 	bl	80004dc <MAX86916_I2C_Write>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	461a      	mov	r2, r3
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	4013      	ands	r3, r2
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf14      	ite	ne
 8000b28:	2301      	movne	r3, #1
 8000b2a:	2300      	moveq	r3, #0
 8000b2c:	71fb      	strb	r3, [r7, #7]
	result &= MAX86916_I2C_Write(MAX86916_REG_FIFO_READ_PTR, &reset, 1);
 8000b2e:	1dbb      	adds	r3, r7, #6
 8000b30:	2201      	movs	r2, #1
 8000b32:	4619      	mov	r1, r3
 8000b34:	2006      	movs	r0, #6
 8000b36:	f7ff fcd1 	bl	80004dc <MAX86916_I2C_Write>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	4013      	ands	r3, r2
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	bf14      	ite	ne
 8000b46:	2301      	movne	r3, #1
 8000b48:	2300      	moveq	r3, #0
 8000b4a:	71fb      	strb	r3, [r7, #7]
	return result;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5e:	f000 fbbf 	bl	80012e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b62:	f000 f88b 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b66:	f000 f923 	bl	8000db0 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000b6a:	f000 f8f3 	bl	8000d54 <MX_I2C3_Init>
  MX_USB_DEVICE_Init();
 8000b6e:	f006 fcbb 	bl	80074e8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(500);
 8000b72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b76:	f000 fc25 	bl	80013c4 <HAL_Delay>

	DISCOVERY_FSM discovery;

	setSystemState(discovery, SYS_START_UP);
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	7b38      	ldrb	r0, [r7, #12]
 8000b7e:	f7ff fc9f 	bl	80004c0 <setSystemState>

	MAX86916_Init_TypeDef ppg_init;

	if (MAX86916_Read_Part_ID() == MAX86916_PART_ID_VALUE) {
 8000b82:	f7ff fd45 	bl	8000610 <MAX86916_Read_Part_ID>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b2b      	cmp	r3, #43	; 0x2b
 8000b8a:	d11d      	bne.n	8000bc8 <main+0x70>

		ppg_init.fifo_a_full = 0x0F;
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	71fb      	strb	r3, [r7, #7]
		ppg_init.fifo_avg = MAX86916_FIFO_AVG_1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	717b      	strb	r3, [r7, #5]
		ppg_init.fifo_rollover = MAX86916_FIFO_ROLLOVER_OFF;
 8000b94:	2300      	movs	r3, #0
 8000b96:	71bb      	strb	r3, [r7, #6]
		ppg_init.frequency = MAX86916_SR_100Hz;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	70fb      	strb	r3, [r7, #3]
		ppg_init.full_scale = MAX86916_FS_16384;
 8000b9c:	2340      	movs	r3, #64	; 0x40
 8000b9e:	70bb      	strb	r3, [r7, #2]
		ppg_init.led_pa[0] = 0x05; //ired PA
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	723b      	strb	r3, [r7, #8]
		ppg_init.led_pa[1] = 0x05; //red PA
 8000ba4:	2305      	movs	r3, #5
 8000ba6:	727b      	strb	r3, [r7, #9]
		ppg_init.led_pa[2] = 0x05; //green PA
 8000ba8:	2305      	movs	r3, #5
 8000baa:	72bb      	strb	r3, [r7, #10]
		ppg_init.led_pa[3] = 0x05; //blue PA
 8000bac:	2305      	movs	r3, #5
 8000bae:	72fb      	strb	r3, [r7, #11]
		ppg_init.mode = MAX86916_MODE_FLEX;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	703b      	strb	r3, [r7, #0]
		ppg_init.pulse_width = MAX86916_PW_420;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	713b      	strb	r3, [r7, #4]
		ppg_init.shutdown = MAX86916_SHDNMODE_SHUTDOWN;
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	707b      	strb	r3, [r7, #1]
		MAX86916_Config(ppg_init);
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bc2:	f7ff fde5 	bl	8000790 <MAX86916_Config>
 8000bc6:	e001      	b.n	8000bcc <main+0x74>
	} else {
		discovery.state = SYS_ERROR;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	733b      	strb	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {

		switch (discovery.state){
 8000bcc:	7b3b      	ldrb	r3, [r7, #12]
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	d850      	bhi.n	8000c74 <main+0x11c>
 8000bd2:	a201      	add	r2, pc, #4	; (adr r2, 8000bd8 <main+0x80>)
 8000bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd8:	08000c15 	.word	0x08000c15
 8000bdc:	08000bed 	.word	0x08000bed
 8000be0:	08000c75 	.word	0x08000c75
 8000be4:	08000c49 	.word	0x08000c49
 8000be8:	08000c67 	.word	0x08000c67
		case SYS_START_UP:

			HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf2:	4821      	ldr	r0, [pc, #132]	; (8000c78 <main+0x120>)
 8000bf4:	f000 feb8 	bl	8001968 <HAL_GPIO_WritePin>

			if(MAX86916_Config(ppg_init))
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bfe:	f7ff fdc7 	bl	8000790 <MAX86916_Config>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d002      	beq.n	8000c0e <main+0xb6>
				discovery.state = SYS_IDLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	733b      	strb	r3, [r7, #12]
			else
				discovery.state = SYS_ERROR;
			break;
 8000c0c:	e033      	b.n	8000c76 <main+0x11e>
				discovery.state = SYS_ERROR;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	733b      	strb	r3, [r7, #12]
			break;
 8000c12:	e030      	b.n	8000c76 <main+0x11e>
		case SYS_IDLE:
			HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1a:	4817      	ldr	r0, [pc, #92]	; (8000c78 <main+0x120>)
 8000c1c:	f000 fea4 	bl	8001968 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port,LD4_Pin,GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c26:	4814      	ldr	r0, [pc, #80]	; (8000c78 <main+0x120>)
 8000c28:	f000 fe9e 	bl	8001968 <HAL_GPIO_WritePin>

			HAL_Delay(5000);
 8000c2c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c30:	f000 fbc8 	bl	80013c4 <HAL_Delay>
			discovery.state = SYS_STREAM; //inserire il pulsante al posto del delay
 8000c34:	2303      	movs	r3, #3
 8000c36:	733b      	strb	r3, [r7, #12]
			ppg_init.shutdown = MAX86916_SHDNMODE_ON;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	707b      	strb	r3, [r7, #1]
			MAX86916_Config(ppg_init);
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c42:	f7ff fda5 	bl	8000790 <MAX86916_Config>

			break;
 8000c46:	e016      	b.n	8000c76 <main+0x11e>
		case SYS_STREAM:
			HAL_GPIO_WritePin(LD4_GPIO_Port,LD4_Pin,GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4e:	480a      	ldr	r0, [pc, #40]	; (8000c78 <main+0x120>)
 8000c50:	f000 fe8a 	bl	8001968 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD6_GPIO_Port,LD6_Pin,GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c5a:	4807      	ldr	r0, [pc, #28]	; (8000c78 <main+0x120>)
 8000c5c:	f000 fe84 	bl	8001968 <HAL_GPIO_WritePin>

			if (!readDataFromPPGAndSendUSB()){
 8000c60:	f000 f9ee 	bl	8001040 <readDataFromPPGAndSendUSB>
				//discovery.state = SYS_ERROR; //da verificare perchè da errore
			}
			break;
 8000c64:	e007      	b.n	8000c76 <main+0x11e>
		case SYS_ERROR:
			HAL_GPIO_WritePin(LD5_GPIO_Port,LD5_Pin,GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <main+0x120>)
 8000c6e:	f000 fe7b 	bl	8001968 <HAL_GPIO_WritePin>
			break;
 8000c72:	e000      	b.n	8000c76 <main+0x11e>
		default:
			break;
 8000c74:	bf00      	nop
		switch (discovery.state){
 8000c76:	e7a9      	b.n	8000bcc <main+0x74>
 8000c78:	40020c00 	.word	0x40020c00

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b094      	sub	sp, #80	; 0x50
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0320 	add.w	r3, r7, #32
 8000c86:	2230      	movs	r2, #48	; 0x30
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f007 f978 	bl	8007f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <SystemClock_Config+0xd0>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a28      	ldr	r2, [pc, #160]	; (8000d4c <SystemClock_Config+0xd0>)
 8000caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cae:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb0:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <SystemClock_Config+0xd0>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <SystemClock_Config+0xd4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a22      	ldr	r2, [pc, #136]	; (8000d50 <SystemClock_Config+0xd4>)
 8000cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <SystemClock_Config+0xd4>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce6:	2310      	movs	r3, #16
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cea:	2302      	movs	r3, #2
 8000cec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cf8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cfc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d02:	2307      	movs	r3, #7
 8000d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d06:	f107 0320 	add.w	r3, r7, #32
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 ff82 	bl	8003c14 <HAL_RCC_OscConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d16:	f000 f9d3 	bl	80010c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f003 f9e5 	bl	8004104 <HAL_RCC_ClockConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000d40:	f000 f9be 	bl	80010c0 <Error_Handler>
  }
}
 8000d44:	bf00      	nop
 8000d46:	3750      	adds	r7, #80	; 0x50
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40007000 	.word	0x40007000

08000d54 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_I2C3_Init+0x50>)
 8000d5a:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <MX_I2C3_Init+0x54>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_I2C3_Init+0x50>)
 8000d60:	4a12      	ldr	r2, [pc, #72]	; (8000dac <MX_I2C3_Init+0x58>)
 8000d62:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_I2C3_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_I2C3_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_I2C3_Init+0x50>)
 8000d72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d76:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <MX_I2C3_Init+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_I2C3_Init+0x50>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <MX_I2C3_Init+0x50>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_I2C3_Init+0x50>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <MX_I2C3_Init+0x50>)
 8000d92:	f000 fe27 	bl	80019e4 <HAL_I2C_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000d9c:	f000 f990 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200003cc 	.word	0x200003cc
 8000da8:	40005c00 	.word	0x40005c00
 8000dac:	000186a0 	.word	0x000186a0

08000db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	; 0x30
 8000db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
 8000dca:	4b97      	ldr	r3, [pc, #604]	; (8001028 <MX_GPIO_Init+0x278>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a96      	ldr	r2, [pc, #600]	; (8001028 <MX_GPIO_Init+0x278>)
 8000dd0:	f043 0310 	orr.w	r3, r3, #16
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b94      	ldr	r3, [pc, #592]	; (8001028 <MX_GPIO_Init+0x278>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0310 	and.w	r3, r3, #16
 8000dde:	61bb      	str	r3, [r7, #24]
 8000de0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	4b90      	ldr	r3, [pc, #576]	; (8001028 <MX_GPIO_Init+0x278>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a8f      	ldr	r2, [pc, #572]	; (8001028 <MX_GPIO_Init+0x278>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b8d      	ldr	r3, [pc, #564]	; (8001028 <MX_GPIO_Init+0x278>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b89      	ldr	r3, [pc, #548]	; (8001028 <MX_GPIO_Init+0x278>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a88      	ldr	r2, [pc, #544]	; (8001028 <MX_GPIO_Init+0x278>)
 8000e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b86      	ldr	r3, [pc, #536]	; (8001028 <MX_GPIO_Init+0x278>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b82      	ldr	r3, [pc, #520]	; (8001028 <MX_GPIO_Init+0x278>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a81      	ldr	r2, [pc, #516]	; (8001028 <MX_GPIO_Init+0x278>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b7f      	ldr	r3, [pc, #508]	; (8001028 <MX_GPIO_Init+0x278>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	4b7b      	ldr	r3, [pc, #492]	; (8001028 <MX_GPIO_Init+0x278>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a7a      	ldr	r2, [pc, #488]	; (8001028 <MX_GPIO_Init+0x278>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b78      	ldr	r3, [pc, #480]	; (8001028 <MX_GPIO_Init+0x278>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	4b74      	ldr	r3, [pc, #464]	; (8001028 <MX_GPIO_Init+0x278>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a73      	ldr	r2, [pc, #460]	; (8001028 <MX_GPIO_Init+0x278>)
 8000e5c:	f043 0308 	orr.w	r3, r3, #8
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b71      	ldr	r3, [pc, #452]	; (8001028 <MX_GPIO_Init+0x278>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2108      	movs	r1, #8
 8000e72:	486e      	ldr	r0, [pc, #440]	; (800102c <MX_GPIO_Init+0x27c>)
 8000e74:	f000 fd78 	bl	8001968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	486c      	ldr	r0, [pc, #432]	; (8001030 <MX_GPIO_Init+0x280>)
 8000e7e:	f000 fd73 	bl	8001968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e82:	2200      	movs	r2, #0
 8000e84:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000e88:	486a      	ldr	r0, [pc, #424]	; (8001034 <MX_GPIO_Init+0x284>)
 8000e8a:	f000 fd6d 	bl	8001968 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000e8e:	2308      	movs	r3, #8
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4861      	ldr	r0, [pc, #388]	; (800102c <MX_GPIO_Init+0x27c>)
 8000ea6:	f000 fbc3 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	485b      	ldr	r0, [pc, #364]	; (8001030 <MX_GPIO_Init+0x280>)
 8000ec2:	f000 fbb5 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ec6:	2308      	movs	r3, #8
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4853      	ldr	r0, [pc, #332]	; (8001030 <MX_GPIO_Init+0x280>)
 8000ee2:	f000 fba5 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	484f      	ldr	r0, [pc, #316]	; (8001038 <MX_GPIO_Init+0x288>)
 8000efc:	f000 fb98 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f00:	2310      	movs	r3, #16
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f10:	2306      	movs	r3, #6
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4847      	ldr	r0, [pc, #284]	; (8001038 <MX_GPIO_Init+0x288>)
 8000f1c:	f000 fb88 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f20:	23e0      	movs	r3, #224	; 0xe0
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f30:	2305      	movs	r3, #5
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	4619      	mov	r1, r3
 8000f3a:	483f      	ldr	r0, [pc, #252]	; (8001038 <MX_GPIO_Init+0x288>)
 8000f3c:	f000 fb78 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f40:	2304      	movs	r3, #4
 8000f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4619      	mov	r1, r3
 8000f52:	483a      	ldr	r0, [pc, #232]	; (800103c <MX_GPIO_Init+0x28c>)
 8000f54:	f000 fb6c 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4831      	ldr	r0, [pc, #196]	; (800103c <MX_GPIO_Init+0x28c>)
 8000f76:	f000 fb5b 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f7a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000f7e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	4828      	ldr	r0, [pc, #160]	; (8001034 <MX_GPIO_Init+0x284>)
 8000f94:	f000 fb4c 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f98:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000faa:	2306      	movs	r3, #6
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	481e      	ldr	r0, [pc, #120]	; (8001030 <MX_GPIO_Init+0x280>)
 8000fb6:	f000 fb3b 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000fba:	2320      	movs	r3, #32
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4819      	ldr	r0, [pc, #100]	; (8001034 <MX_GPIO_Init+0x284>)
 8000fce:	f000 fb2f 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000fd2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd8:	2312      	movs	r3, #18
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	4813      	ldr	r0, [pc, #76]	; (800103c <MX_GPIO_Init+0x28c>)
 8000ff0:	f000 fb1e 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ff8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ffc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	4808      	ldr	r0, [pc, #32]	; (800102c <MX_GPIO_Init+0x27c>)
 800100a:	f000 fb11 	bl	8001630 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2006      	movs	r0, #6
 8001014:	f000 fad5 	bl	80015c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001018:	2006      	movs	r0, #6
 800101a:	f000 faee 	bl	80015fa <HAL_NVIC_EnableIRQ>

}
 800101e:	bf00      	nop
 8001020:	3730      	adds	r7, #48	; 0x30
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40021000 	.word	0x40021000
 8001030:	40020800 	.word	0x40020800
 8001034:	40020c00 	.word	0x40020c00
 8001038:	40020000 	.word	0x40020000
 800103c:	40020400 	.word	0x40020400

08001040 <readDataFromPPGAndSendUSB>:

/* USER CODE BEGIN 4 */
bool readDataFromPPGAndSendUSB(){
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
	uint8_t samples[18] = {0};
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	819a      	strh	r2, [r3, #12]
	bool result = true;
 8001058:	2301      	movs	r3, #1
 800105a:	75fb      	strb	r3, [r7, #23]

	samples[0] = '?';
 800105c:	233f      	movs	r3, #63	; 0x3f
 800105e:	713b      	strb	r3, [r7, #4]
	samples[1] = '!';
 8001060:	2321      	movs	r3, #33	; 0x21
 8001062:	717b      	strb	r3, [r7, #5]

	result &= MAX86916_Read_Sample_Flex_Mode(samples + 3, samples + 7, samples + 11, samples + 15);
 8001064:	1d38      	adds	r0, r7, #4
 8001066:	3003      	adds	r0, #3
 8001068:	1d39      	adds	r1, r7, #4
 800106a:	3107      	adds	r1, #7
 800106c:	1d3a      	adds	r2, r7, #4
 800106e:	320b      	adds	r2, #11
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	330f      	adds	r3, #15
 8001074:	f7ff fcdc 	bl	8000a30 <MAX86916_Read_Sample_Flex_Mode>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	7dfb      	ldrb	r3, [r7, #23]
 800107e:	4013      	ands	r3, r2
 8001080:	2b00      	cmp	r3, #0
 8001082:	bf14      	ite	ne
 8001084:	2301      	movne	r3, #1
 8001086:	2300      	moveq	r3, #0
 8001088:	75fb      	strb	r3, [r7, #23]

	result &= CDC_Transmit_FS(samples, 18) == USBD_OK;
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2112      	movs	r1, #18
 800108e:	4618      	mov	r0, r3
 8001090:	f006 fae8 	bl	8007664 <CDC_Transmit_FS>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	bf0c      	ite	eq
 800109a:	2301      	moveq	r3, #1
 800109c:	2300      	movne	r3, #0
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	bf14      	ite	ne
 80010aa:	2301      	movne	r3, #1
 80010ac:	2300      	moveq	r3, #0
 80010ae:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010b0:	200a      	movs	r0, #10
 80010b2:	f000 f987 	bl	80013c4 <HAL_Delay>

	return result;
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010c8:	e7fe      	b.n	80010c8 <Error_Handler+0x8>
	...

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_MspInit+0x4c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_MspInit+0x4c>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_MspInit+0x4c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <HAL_MspInit+0x4c>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_MspInit+0x4c>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800110a:	2007      	movs	r0, #7
 800110c:	f000 fa4e 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40023800 	.word	0x40023800

0800111c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a29      	ldr	r2, [pc, #164]	; (80011e0 <HAL_I2C_MspInit+0xc4>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d14b      	bne.n	80011d6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <HAL_I2C_MspInit+0xc8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a27      	ldr	r2, [pc, #156]	; (80011e4 <HAL_I2C_MspInit+0xc8>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <HAL_I2C_MspInit+0xc8>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <HAL_I2C_MspInit+0xc8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <HAL_I2C_MspInit+0xc8>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <HAL_I2C_MspInit+0xc8>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800117c:	2312      	movs	r3, #18
 800117e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001180:	2301      	movs	r3, #1
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001184:	2301      	movs	r3, #1
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001188:	2304      	movs	r3, #4
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	4815      	ldr	r0, [pc, #84]	; (80011e8 <HAL_I2C_MspInit+0xcc>)
 8001194:	f000 fa4c 	bl	8001630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119e:	2312      	movs	r3, #18
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011a6:	2301      	movs	r3, #1
 80011a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011aa:	2304      	movs	r3, #4
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	480d      	ldr	r0, [pc, #52]	; (80011ec <HAL_I2C_MspInit+0xd0>)
 80011b6:	f000 fa3b 	bl	8001630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_I2C_MspInit+0xc8>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <HAL_I2C_MspInit+0xc8>)
 80011c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_I2C_MspInit+0xc8>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80011d6:	bf00      	nop
 80011d8:	3728      	adds	r7, #40	; 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40005c00 	.word	0x40005c00
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020000 	.word	0x40020000

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123c:	f000 f8a2 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001248:	2001      	movs	r0, #1
 800124a:	f000 fba7 	bl	800199c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <OTG_FS_IRQHandler+0x10>)
 800125a:	f001 fca8 	bl	8002bae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200018f4 	.word	0x200018f4

08001268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <Reset_Handler>:
 800128c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c4 <LoopFillZerobss+0x12>
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <LoopFillZerobss+0x16>)
 8001292:	490e      	ldr	r1, [pc, #56]	; (80012cc <LoopFillZerobss+0x1a>)
 8001294:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <LoopFillZerobss+0x1e>)
 8001296:	2300      	movs	r3, #0
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:
 800129a:	58d4      	ldr	r4, [r2, r3]
 800129c:	50c4      	str	r4, [r0, r3]
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:
 80012a0:	18c4      	adds	r4, r0, r3
 80012a2:	428c      	cmp	r4, r1
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <LoopFillZerobss+0x22>)
 80012a8:	4c0b      	ldr	r4, [pc, #44]	; (80012d8 <LoopFillZerobss+0x26>)
 80012aa:	2300      	movs	r3, #0
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:
 80012b2:	42a2      	cmp	r2, r4
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>
 80012b6:	f7ff ffd7 	bl	8001268 <SystemInit>
 80012ba:	f006 fe3d 	bl	8007f38 <__libc_init_array>
 80012be:	f7ff fc4b 	bl	8000b58 <main>
 80012c2:	4770      	bx	lr
 80012c4:	20020000 	.word	0x20020000
 80012c8:	20000000 	.word	0x20000000
 80012cc:	20000180 	.word	0x20000180
 80012d0:	08008018 	.word	0x08008018
 80012d4:	20000180 	.word	0x20000180
 80012d8:	20001cfc 	.word	0x20001cfc

080012dc <ADC_IRQHandler>:
 80012dc:	e7fe      	b.n	80012dc <ADC_IRQHandler>
	...

080012e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <HAL_Init+0x40>)
 80012ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_Init+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <HAL_Init+0x40>)
 80012f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_Init+0x40>)
 8001302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001308:	2003      	movs	r0, #3
 800130a:	f000 f94f 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130e:	2000      	movs	r0, #0
 8001310:	f000 f808 	bl	8001324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001314:	f7ff feda 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023c00 	.word	0x40023c00

08001324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x54>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_InitTick+0x58>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f967 	bl	8001616 <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00e      	b.n	8001370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d80a      	bhi.n	800136e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f000 f92f 	bl	80015c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_InitTick+0x5c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000000 	.word	0x20000000
 800137c:	20000008 	.word	0x20000008
 8001380:	20000004 	.word	0x20000004

08001384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x20>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_IncTick+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_IncTick+0x24>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000008 	.word	0x20000008
 80013a8:	20000420 	.word	0x20000420

080013ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_GetTick+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000420 	.word	0x20000420

080013c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013cc:	f7ff ffee 	bl	80013ac <HAL_GetTick>
 80013d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d005      	beq.n	80013ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_Delay+0x44>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ea:	bf00      	nop
 80013ec:	f7ff ffde 	bl	80013ac <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d8f7      	bhi.n	80013ec <HAL_Delay+0x28>
  {
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000008 	.word	0x20000008

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001434:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143e:	4a04      	ldr	r2, [pc, #16]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	60d3      	str	r3, [r2, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	2b00      	cmp	r3, #0
 8001480:	db0b      	blt.n	800149a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f003 021f 	and.w	r2, r3, #31
 8001488:	4907      	ldr	r1, [pc, #28]	; (80014a8 <__NVIC_EnableIRQ+0x38>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	2001      	movs	r0, #1
 8001492:	fa00 f202 	lsl.w	r2, r0, r2
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000e100 	.word	0xe000e100

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	; (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f7ff ff8e 	bl	80014ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff29 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d4:	f7ff ff3e 	bl	8001454 <__NVIC_GetPriorityGrouping>
 80015d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	f7ff ff8e 	bl	8001500 <NVIC_EncodePriority>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff5d 	bl	80014ac <__NVIC_SetPriority>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff31 	bl	8001470 <__NVIC_EnableIRQ>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ffa2 	bl	8001568 <SysTick_Config>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
 800164a:	e16b      	b.n	8001924 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800164c:	2201      	movs	r2, #1
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	429a      	cmp	r2, r3
 8001666:	f040 815a 	bne.w	800191e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	2b01      	cmp	r3, #1
 8001674:	d005      	beq.n	8001682 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800167e:	2b02      	cmp	r3, #2
 8001680:	d130      	bne.n	80016e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	2203      	movs	r2, #3
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b8:	2201      	movs	r2, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	f003 0201 	and.w	r2, r3, #1
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d017      	beq.n	8001720 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	2203      	movs	r2, #3
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d123      	bne.n	8001774 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	08da      	lsrs	r2, r3, #3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3208      	adds	r2, #8
 8001734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	220f      	movs	r2, #15
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	08da      	lsrs	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3208      	adds	r2, #8
 800176e:	69b9      	ldr	r1, [r7, #24]
 8001770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0203 	and.w	r2, r3, #3
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80b4 	beq.w	800191e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b60      	ldr	r3, [pc, #384]	; (800193c <HAL_GPIO_Init+0x30c>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	4a5f      	ldr	r2, [pc, #380]	; (800193c <HAL_GPIO_Init+0x30c>)
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c4:	6453      	str	r3, [r2, #68]	; 0x44
 80017c6:	4b5d      	ldr	r3, [pc, #372]	; (800193c <HAL_GPIO_Init+0x30c>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017d2:	4a5b      	ldr	r2, [pc, #364]	; (8001940 <HAL_GPIO_Init+0x310>)
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	3302      	adds	r3, #2
 80017da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	220f      	movs	r2, #15
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a52      	ldr	r2, [pc, #328]	; (8001944 <HAL_GPIO_Init+0x314>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d02b      	beq.n	8001856 <HAL_GPIO_Init+0x226>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a51      	ldr	r2, [pc, #324]	; (8001948 <HAL_GPIO_Init+0x318>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d025      	beq.n	8001852 <HAL_GPIO_Init+0x222>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a50      	ldr	r2, [pc, #320]	; (800194c <HAL_GPIO_Init+0x31c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d01f      	beq.n	800184e <HAL_GPIO_Init+0x21e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4f      	ldr	r2, [pc, #316]	; (8001950 <HAL_GPIO_Init+0x320>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d019      	beq.n	800184a <HAL_GPIO_Init+0x21a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4e      	ldr	r2, [pc, #312]	; (8001954 <HAL_GPIO_Init+0x324>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d013      	beq.n	8001846 <HAL_GPIO_Init+0x216>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4d      	ldr	r2, [pc, #308]	; (8001958 <HAL_GPIO_Init+0x328>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00d      	beq.n	8001842 <HAL_GPIO_Init+0x212>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4c      	ldr	r2, [pc, #304]	; (800195c <HAL_GPIO_Init+0x32c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d007      	beq.n	800183e <HAL_GPIO_Init+0x20e>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4b      	ldr	r2, [pc, #300]	; (8001960 <HAL_GPIO_Init+0x330>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d101      	bne.n	800183a <HAL_GPIO_Init+0x20a>
 8001836:	2307      	movs	r3, #7
 8001838:	e00e      	b.n	8001858 <HAL_GPIO_Init+0x228>
 800183a:	2308      	movs	r3, #8
 800183c:	e00c      	b.n	8001858 <HAL_GPIO_Init+0x228>
 800183e:	2306      	movs	r3, #6
 8001840:	e00a      	b.n	8001858 <HAL_GPIO_Init+0x228>
 8001842:	2305      	movs	r3, #5
 8001844:	e008      	b.n	8001858 <HAL_GPIO_Init+0x228>
 8001846:	2304      	movs	r3, #4
 8001848:	e006      	b.n	8001858 <HAL_GPIO_Init+0x228>
 800184a:	2303      	movs	r3, #3
 800184c:	e004      	b.n	8001858 <HAL_GPIO_Init+0x228>
 800184e:	2302      	movs	r3, #2
 8001850:	e002      	b.n	8001858 <HAL_GPIO_Init+0x228>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_GPIO_Init+0x228>
 8001856:	2300      	movs	r3, #0
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	f002 0203 	and.w	r2, r2, #3
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	4093      	lsls	r3, r2
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001868:	4935      	ldr	r1, [pc, #212]	; (8001940 <HAL_GPIO_Init+0x310>)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001876:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <HAL_GPIO_Init+0x334>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800189a:	4a32      	ldr	r2, [pc, #200]	; (8001964 <HAL_GPIO_Init+0x334>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018a0:	4b30      	ldr	r3, [pc, #192]	; (8001964 <HAL_GPIO_Init+0x334>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018c4:	4a27      	ldr	r2, [pc, #156]	; (8001964 <HAL_GPIO_Init+0x334>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <HAL_GPIO_Init+0x334>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ee:	4a1d      	ldr	r2, [pc, #116]	; (8001964 <HAL_GPIO_Init+0x334>)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_GPIO_Init+0x334>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001918:	4a12      	ldr	r2, [pc, #72]	; (8001964 <HAL_GPIO_Init+0x334>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3301      	adds	r3, #1
 8001922:	61fb      	str	r3, [r7, #28]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	2b0f      	cmp	r3, #15
 8001928:	f67f ae90 	bls.w	800164c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3724      	adds	r7, #36	; 0x24
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	40013800 	.word	0x40013800
 8001944:	40020000 	.word	0x40020000
 8001948:	40020400 	.word	0x40020400
 800194c:	40020800 	.word	0x40020800
 8001950:	40020c00 	.word	0x40020c00
 8001954:	40021000 	.word	0x40021000
 8001958:	40021400 	.word	0x40021400
 800195c:	40021800 	.word	0x40021800
 8001960:	40021c00 	.word	0x40021c00
 8001964:	40013c00 	.word	0x40013c00

08001968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]
 8001974:	4613      	mov	r3, r2
 8001976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001978:	787b      	ldrb	r3, [r7, #1]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800197e:	887a      	ldrh	r2, [r7, #2]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001984:	e003      	b.n	800198e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001986:	887b      	ldrh	r3, [r7, #2]
 8001988:	041a      	lsls	r2, r3, #16
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	619a      	str	r2, [r3, #24]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d006      	beq.n	80019c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f806 	bl	80019cc <HAL_GPIO_EXTI_Callback>
  }
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40013c00 	.word	0x40013c00

080019cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e12b      	b.n	8001c4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d106      	bne.n	8001a10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fb86 	bl	800111c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2224      	movs	r2, #36	; 0x24
 8001a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0201 	bic.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a48:	f002 fd30 	bl	80044ac <HAL_RCC_GetPCLK1Freq>
 8001a4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4a81      	ldr	r2, [pc, #516]	; (8001c58 <HAL_I2C_Init+0x274>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d807      	bhi.n	8001a68 <HAL_I2C_Init+0x84>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4a80      	ldr	r2, [pc, #512]	; (8001c5c <HAL_I2C_Init+0x278>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	bf94      	ite	ls
 8001a60:	2301      	movls	r3, #1
 8001a62:	2300      	movhi	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	e006      	b.n	8001a76 <HAL_I2C_Init+0x92>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4a7d      	ldr	r2, [pc, #500]	; (8001c60 <HAL_I2C_Init+0x27c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	bf94      	ite	ls
 8001a70:	2301      	movls	r3, #1
 8001a72:	2300      	movhi	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e0e7      	b.n	8001c4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4a78      	ldr	r2, [pc, #480]	; (8001c64 <HAL_I2C_Init+0x280>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	0c9b      	lsrs	r3, r3, #18
 8001a88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	4a6a      	ldr	r2, [pc, #424]	; (8001c58 <HAL_I2C_Init+0x274>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d802      	bhi.n	8001ab8 <HAL_I2C_Init+0xd4>
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	e009      	b.n	8001acc <HAL_I2C_Init+0xe8>
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	4a69      	ldr	r2, [pc, #420]	; (8001c68 <HAL_I2C_Init+0x284>)
 8001ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac8:	099b      	lsrs	r3, r3, #6
 8001aca:	3301      	adds	r3, #1
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	430b      	orrs	r3, r1
 8001ad2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ade:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	495c      	ldr	r1, [pc, #368]	; (8001c58 <HAL_I2C_Init+0x274>)
 8001ae8:	428b      	cmp	r3, r1
 8001aea:	d819      	bhi.n	8001b20 <HAL_I2C_Init+0x13c>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1e59      	subs	r1, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001afa:	1c59      	adds	r1, r3, #1
 8001afc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b00:	400b      	ands	r3, r1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00a      	beq.n	8001b1c <HAL_I2C_Init+0x138>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1e59      	subs	r1, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b14:	3301      	adds	r3, #1
 8001b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b1a:	e051      	b.n	8001bc0 <HAL_I2C_Init+0x1dc>
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	e04f      	b.n	8001bc0 <HAL_I2C_Init+0x1dc>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d111      	bne.n	8001b4c <HAL_I2C_Init+0x168>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1e58      	subs	r0, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6859      	ldr	r1, [r3, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	440b      	add	r3, r1
 8001b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf0c      	ite	eq
 8001b44:	2301      	moveq	r3, #1
 8001b46:	2300      	movne	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	e012      	b.n	8001b72 <HAL_I2C_Init+0x18e>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1e58      	subs	r0, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6859      	ldr	r1, [r3, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	0099      	lsls	r1, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b62:	3301      	adds	r3, #1
 8001b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bf0c      	ite	eq
 8001b6c:	2301      	moveq	r3, #1
 8001b6e:	2300      	movne	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_I2C_Init+0x196>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e022      	b.n	8001bc0 <HAL_I2C_Init+0x1dc>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10e      	bne.n	8001ba0 <HAL_I2C_Init+0x1bc>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1e58      	subs	r0, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6859      	ldr	r1, [r3, #4]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	440b      	add	r3, r1
 8001b90:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b94:	3301      	adds	r3, #1
 8001b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b9e:	e00f      	b.n	8001bc0 <HAL_I2C_Init+0x1dc>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1e58      	subs	r0, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6859      	ldr	r1, [r3, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	0099      	lsls	r1, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	6809      	ldr	r1, [r1, #0]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69da      	ldr	r2, [r3, #28]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6911      	ldr	r1, [r2, #16]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68d2      	ldr	r2, [r2, #12]
 8001bfa:	4311      	orrs	r1, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	430b      	orrs	r3, r1
 8001c02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	000186a0 	.word	0x000186a0
 8001c5c:	001e847f 	.word	0x001e847f
 8001c60:	003d08ff 	.word	0x003d08ff
 8001c64:	431bde83 	.word	0x431bde83
 8001c68:	10624dd3 	.word	0x10624dd3

08001c6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	461a      	mov	r2, r3
 8001c78:	460b      	mov	r3, r1
 8001c7a:	817b      	strh	r3, [r7, #10]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c80:	f7ff fb94 	bl	80013ac <HAL_GetTick>
 8001c84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b20      	cmp	r3, #32
 8001c90:	f040 80e0 	bne.w	8001e54 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2319      	movs	r3, #25
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4970      	ldr	r1, [pc, #448]	; (8001e60 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 fc58 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001caa:	2302      	movs	r3, #2
 8001cac:	e0d3      	b.n	8001e56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_I2C_Master_Transmit+0x50>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e0cc      	b.n	8001e56 <HAL_I2C_Master_Transmit+0x1ea>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d007      	beq.n	8001ce2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f042 0201 	orr.w	r2, r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cf0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2221      	movs	r2, #33	; 0x21
 8001cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2210      	movs	r2, #16
 8001cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	893a      	ldrh	r2, [r7, #8]
 8001d12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4a50      	ldr	r2, [pc, #320]	; (8001e64 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d24:	8979      	ldrh	r1, [r7, #10]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	6a3a      	ldr	r2, [r7, #32]
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 fac2 	bl	80022b4 <I2C_MasterRequestWrite>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e08d      	b.n	8001e56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d50:	e066      	b.n	8001e20 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	6a39      	ldr	r1, [r7, #32]
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 fcd2 	bl	8002700 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00d      	beq.n	8001d7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d107      	bne.n	8001d7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e06b      	b.n	8001e56 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	781a      	ldrb	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d11b      	bne.n	8001df4 <HAL_I2C_Master_Transmit+0x188>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d017      	beq.n	8001df4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	781a      	ldrb	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	6a39      	ldr	r1, [r7, #32]
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 fcc2 	bl	8002782 <I2C_WaitOnBTFFlagUntilTimeout>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00d      	beq.n	8001e20 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d107      	bne.n	8001e1c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e1a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e01a      	b.n	8001e56 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d194      	bne.n	8001d52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	e000      	b.n	8001e56 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e54:	2302      	movs	r3, #2
  }
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	00100002 	.word	0x00100002
 8001e64:	ffff0000 	.word	0xffff0000

08001e68 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	; 0x30
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	461a      	mov	r2, r3
 8001e74:	460b      	mov	r3, r1
 8001e76:	817b      	strh	r3, [r7, #10]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e7c:	f7ff fa96 	bl	80013ac <HAL_GetTick>
 8001e80:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b20      	cmp	r3, #32
 8001e8c:	f040 820b 	bne.w	80022a6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2319      	movs	r3, #25
 8001e96:	2201      	movs	r2, #1
 8001e98:	497c      	ldr	r1, [pc, #496]	; (800208c <HAL_I2C_Master_Receive+0x224>)
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 fb5a 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e1fe      	b.n	80022a8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_I2C_Master_Receive+0x50>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e1f7      	b.n	80022a8 <HAL_I2C_Master_Receive+0x440>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d007      	beq.n	8001ede <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 0201 	orr.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2222      	movs	r2, #34	; 0x22
 8001ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2210      	movs	r2, #16
 8001efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	893a      	ldrh	r2, [r7, #8]
 8001f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4a5c      	ldr	r2, [pc, #368]	; (8002090 <HAL_I2C_Master_Receive+0x228>)
 8001f1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f20:	8979      	ldrh	r1, [r7, #10]
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 fa46 	bl	80023b8 <I2C_MasterRequestRead>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e1b8      	b.n	80022a8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d113      	bne.n	8001f66 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	623b      	str	r3, [r7, #32]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	623b      	str	r3, [r7, #32]
 8001f52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e18c      	b.n	8002280 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d11b      	bne.n	8001fa6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	e16c      	b.n	8002280 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d11b      	bne.n	8001fe6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fbc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	61bb      	str	r3, [r7, #24]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	e14c      	b.n	8002280 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ff4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800200c:	e138      	b.n	8002280 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002012:	2b03      	cmp	r3, #3
 8002014:	f200 80f1 	bhi.w	80021fa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201c:	2b01      	cmp	r3, #1
 800201e:	d123      	bne.n	8002068 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002022:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 fbed 	bl	8002804 <I2C_WaitOnRXNEFlagUntilTimeout>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e139      	b.n	80022a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205c:	b29b      	uxth	r3, r3
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002066:	e10b      	b.n	8002280 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206c:	2b02      	cmp	r3, #2
 800206e:	d14e      	bne.n	800210e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002076:	2200      	movs	r2, #0
 8002078:	4906      	ldr	r1, [pc, #24]	; (8002094 <HAL_I2C_Master_Receive+0x22c>)
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 fa6a 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d008      	beq.n	8002098 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e10e      	b.n	80022a8 <HAL_I2C_Master_Receive+0x440>
 800208a:	bf00      	nop
 800208c:	00100002 	.word	0x00100002
 8002090:	ffff0000 	.word	0xffff0000
 8002094:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800210c:	e0b8      	b.n	8002280 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002114:	2200      	movs	r2, #0
 8002116:	4966      	ldr	r1, [pc, #408]	; (80022b0 <HAL_I2C_Master_Receive+0x448>)
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 fa1b 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0bf      	b.n	80022a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002136:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002160:	b29b      	uxth	r3, r3
 8002162:	3b01      	subs	r3, #1
 8002164:	b29a      	uxth	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002170:	2200      	movs	r2, #0
 8002172:	494f      	ldr	r1, [pc, #316]	; (80022b0 <HAL_I2C_Master_Receive+0x448>)
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f9ed 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e091      	b.n	80022a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691a      	ldr	r2, [r3, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021f8:	e042      	b.n	8002280 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 fb00 	bl	8002804 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e04c      	b.n	80022a8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002236:	b29b      	uxth	r3, r3
 8002238:	3b01      	subs	r3, #1
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b04      	cmp	r3, #4
 800224c:	d118      	bne.n	8002280 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002276:	b29b      	uxth	r3, r3
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002284:	2b00      	cmp	r3, #0
 8002286:	f47f aec2 	bne.w	800200e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e000      	b.n	80022a8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80022a6:	2302      	movs	r3, #2
  }
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3728      	adds	r7, #40	; 0x28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	00010004 	.word	0x00010004

080022b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	460b      	mov	r3, r1
 80022c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d006      	beq.n	80022de <I2C_MasterRequestWrite+0x2a>
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d003      	beq.n	80022de <I2C_MasterRequestWrite+0x2a>
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022dc:	d108      	bne.n	80022f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e00b      	b.n	8002308 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	2b12      	cmp	r3, #18
 80022f6:	d107      	bne.n	8002308 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002306:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 f91d 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00d      	beq.n	800233c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800232e:	d103      	bne.n	8002338 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002336:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e035      	b.n	80023a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002344:	d108      	bne.n	8002358 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002346:	897b      	ldrh	r3, [r7, #10]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002354:	611a      	str	r2, [r3, #16]
 8002356:	e01b      	b.n	8002390 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002358:	897b      	ldrh	r3, [r7, #10]
 800235a:	11db      	asrs	r3, r3, #7
 800235c:	b2db      	uxtb	r3, r3
 800235e:	f003 0306 	and.w	r3, r3, #6
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f063 030f 	orn	r3, r3, #15
 8002368:	b2da      	uxtb	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	490e      	ldr	r1, [pc, #56]	; (80023b0 <I2C_MasterRequestWrite+0xfc>)
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 f943 	bl	8002602 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e010      	b.n	80023a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002386:	897b      	ldrh	r3, [r7, #10]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	4907      	ldr	r1, [pc, #28]	; (80023b4 <I2C_MasterRequestWrite+0x100>)
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f933 	bl	8002602 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	00010008 	.word	0x00010008
 80023b4:	00010002 	.word	0x00010002

080023b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af02      	add	r7, sp, #8
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	460b      	mov	r3, r1
 80023c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d006      	beq.n	80023f2 <I2C_MasterRequestRead+0x3a>
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d003      	beq.n	80023f2 <I2C_MasterRequestRead+0x3a>
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023f0:	d108      	bne.n	8002404 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	e00b      	b.n	800241c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	2b11      	cmp	r3, #17
 800240a:	d107      	bne.n	800241c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800241a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f893 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00d      	beq.n	8002450 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002442:	d103      	bne.n	800244c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800244a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e079      	b.n	8002544 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002458:	d108      	bne.n	800246c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800245a:	897b      	ldrh	r3, [r7, #10]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	b2da      	uxtb	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	611a      	str	r2, [r3, #16]
 800246a:	e05f      	b.n	800252c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800246c:	897b      	ldrh	r3, [r7, #10]
 800246e:	11db      	asrs	r3, r3, #7
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f003 0306 	and.w	r3, r3, #6
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f063 030f 	orn	r3, r3, #15
 800247c:	b2da      	uxtb	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	4930      	ldr	r1, [pc, #192]	; (800254c <I2C_MasterRequestRead+0x194>)
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f8b9 	bl	8002602 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e054      	b.n	8002544 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800249a:	897b      	ldrh	r3, [r7, #10]
 800249c:	b2da      	uxtb	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	4929      	ldr	r1, [pc, #164]	; (8002550 <I2C_MasterRequestRead+0x198>)
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 f8a9 	bl	8002602 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e044      	b.n	8002544 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 f831 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00d      	beq.n	8002514 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002506:	d103      	bne.n	8002510 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e017      	b.n	8002544 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002514:	897b      	ldrh	r3, [r7, #10]
 8002516:	11db      	asrs	r3, r3, #7
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f003 0306 	and.w	r3, r3, #6
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f063 030e 	orn	r3, r3, #14
 8002524:	b2da      	uxtb	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	4907      	ldr	r1, [pc, #28]	; (8002550 <I2C_MasterRequestRead+0x198>)
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f865 	bl	8002602 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	00010008 	.word	0x00010008
 8002550:	00010002 	.word	0x00010002

08002554 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	4613      	mov	r3, r2
 8002562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002564:	e025      	b.n	80025b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256c:	d021      	beq.n	80025b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800256e:	f7fe ff1d 	bl	80013ac <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d302      	bcc.n	8002584 <I2C_WaitOnFlagUntilTimeout+0x30>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d116      	bne.n	80025b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f043 0220 	orr.w	r2, r3, #32
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e023      	b.n	80025fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	0c1b      	lsrs	r3, r3, #16
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d10d      	bne.n	80025d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	43da      	mvns	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4013      	ands	r3, r2
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf0c      	ite	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	2300      	movne	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	e00c      	b.n	80025f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	43da      	mvns	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4013      	ands	r3, r2
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	bf0c      	ite	eq
 80025ea:	2301      	moveq	r3, #1
 80025ec:	2300      	movne	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d0b6      	beq.n	8002566 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002610:	e051      	b.n	80026b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002620:	d123      	bne.n	800266a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002630:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800263a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f043 0204 	orr.w	r2, r3, #4
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e046      	b.n	80026f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d021      	beq.n	80026b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002672:	f7fe fe9b 	bl	80013ac <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	429a      	cmp	r2, r3
 8002680:	d302      	bcc.n	8002688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d116      	bne.n	80026b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f043 0220 	orr.w	r2, r3, #32
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e020      	b.n	80026f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	0c1b      	lsrs	r3, r3, #16
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d10c      	bne.n	80026da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	43da      	mvns	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4013      	ands	r3, r2
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	bf14      	ite	ne
 80026d2:	2301      	movne	r3, #1
 80026d4:	2300      	moveq	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	e00b      	b.n	80026f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	43da      	mvns	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	4013      	ands	r3, r2
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf14      	ite	ne
 80026ec:	2301      	movne	r3, #1
 80026ee:	2300      	moveq	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d18d      	bne.n	8002612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800270c:	e02d      	b.n	800276a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f8ce 	bl	80028b0 <I2C_IsAcknowledgeFailed>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e02d      	b.n	800277a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002724:	d021      	beq.n	800276a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002726:	f7fe fe41 	bl	80013ac <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	429a      	cmp	r2, r3
 8002734:	d302      	bcc.n	800273c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d116      	bne.n	800276a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f043 0220 	orr.w	r2, r3, #32
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e007      	b.n	800277a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002774:	2b80      	cmp	r3, #128	; 0x80
 8002776:	d1ca      	bne.n	800270e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800278e:	e02d      	b.n	80027ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f88d 	bl	80028b0 <I2C_IsAcknowledgeFailed>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e02d      	b.n	80027fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a6:	d021      	beq.n	80027ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a8:	f7fe fe00 	bl	80013ac <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d302      	bcc.n	80027be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d116      	bne.n	80027ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f043 0220 	orr.w	r2, r3, #32
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e007      	b.n	80027fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d1ca      	bne.n	8002790 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002810:	e042      	b.n	8002898 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b10      	cmp	r3, #16
 800281e:	d119      	bne.n	8002854 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0210 	mvn.w	r2, #16
 8002828:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e029      	b.n	80028a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002854:	f7fe fdaa 	bl	80013ac <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	429a      	cmp	r2, r3
 8002862:	d302      	bcc.n	800286a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d116      	bne.n	8002898 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	f043 0220 	orr.w	r2, r3, #32
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e007      	b.n	80028a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a2:	2b40      	cmp	r3, #64	; 0x40
 80028a4:	d1b5      	bne.n	8002812 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c6:	d11b      	bne.n	8002900 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f043 0204 	orr.w	r2, r3, #4
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800290e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002910:	b08f      	sub	sp, #60	; 0x3c
 8002912:	af0a      	add	r7, sp, #40	; 0x28
 8002914:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e10f      	b.n	8002b40 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f004 ffda 	bl	80078f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2203      	movs	r2, #3
 8002944:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d102      	bne.n	800295a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f001 fecd 	bl	80046fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	603b      	str	r3, [r7, #0]
 800296a:	687e      	ldr	r6, [r7, #4]
 800296c:	466d      	mov	r5, sp
 800296e:	f106 0410 	add.w	r4, r6, #16
 8002972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800297a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800297e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002982:	1d33      	adds	r3, r6, #4
 8002984:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002986:	6838      	ldr	r0, [r7, #0]
 8002988:	f001 fda4 	bl	80044d4 <USB_CoreInit>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2202      	movs	r2, #2
 8002996:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0d0      	b.n	8002b40 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f001 febb 	bl	8004720 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	73fb      	strb	r3, [r7, #15]
 80029ae:	e04a      	b.n	8002a46 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029b0:	7bfa      	ldrb	r2, [r7, #15]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	333d      	adds	r3, #61	; 0x3d
 80029c0:	2201      	movs	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	333c      	adds	r3, #60	; 0x3c
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	b298      	uxth	r0, r3
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	3342      	adds	r3, #66	; 0x42
 80029ec:	4602      	mov	r2, r0
 80029ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	333f      	adds	r3, #63	; 0x3f
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	3344      	adds	r3, #68	; 0x44
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	3348      	adds	r3, #72	; 0x48
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a2c:	7bfa      	ldrb	r2, [r7, #15]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	3350      	adds	r3, #80	; 0x50
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	3301      	adds	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d3af      	bcc.n	80029b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a50:	2300      	movs	r3, #0
 8002a52:	73fb      	strb	r3, [r7, #15]
 8002a54:	e044      	b.n	8002ae0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a56:	7bfa      	ldrb	r2, [r7, #15]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a6c:	7bfa      	ldrb	r2, [r7, #15]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a98:	7bfa      	ldrb	r2, [r7, #15]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ac4:	7bfa      	ldrb	r2, [r7, #15]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	3301      	adds	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d3b5      	bcc.n	8002a56 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	687e      	ldr	r6, [r7, #4]
 8002af2:	466d      	mov	r5, sp
 8002af4:	f106 0410 	add.w	r4, r6, #16
 8002af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002afe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b04:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b08:	1d33      	adds	r3, r6, #4
 8002b0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b0c:	6838      	ldr	r0, [r7, #0]
 8002b0e:	f001 fe53 	bl	80047b8 <USB_DevInit>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e00d      	b.n	8002b40 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f002 fecf 	bl	80058dc <USB_DevDisconnect>

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b48 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_PCD_Start+0x1c>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e020      	b.n	8002ba6 <HAL_PCD_Start+0x5e>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d109      	bne.n	8002b88 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d005      	beq.n	8002b88 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f001 fda5 	bl	80046dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f002 fe7f 	bl	800589a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bae:	b590      	push	{r4, r7, lr}
 8002bb0:	b08d      	sub	sp, #52	; 0x34
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f002 ff3d 	bl	8005a44 <USB_GetMode>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f040 839d 	bne.w	800330c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f002 fea1 	bl	800591e <USB_ReadInterrupts>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 8393 	beq.w	800330a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f002 fe98 	bl	800591e <USB_ReadInterrupts>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d107      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f002 0202 	and.w	r2, r2, #2
 8002c06:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f002 fe86 	bl	800591e <USB_ReadInterrupts>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b10      	cmp	r3, #16
 8002c1a:	d161      	bne.n	8002ce0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0210 	bic.w	r2, r2, #16
 8002c2a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	f003 020f 	and.w	r2, r3, #15
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	3304      	adds	r3, #4
 8002c4a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	0c5b      	lsrs	r3, r3, #17
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d124      	bne.n	8002ca2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d035      	beq.n	8002cd0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	091b      	lsrs	r3, r3, #4
 8002c6c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	6a38      	ldr	r0, [r7, #32]
 8002c78:	f002 fcbd 	bl	80055f6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	091b      	lsrs	r3, r3, #4
 8002c84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c88:	441a      	add	r2, r3
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c9a:	441a      	add	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	619a      	str	r2, [r3, #24]
 8002ca0:	e016      	b.n	8002cd0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	0c5b      	lsrs	r3, r3, #17
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	2b06      	cmp	r3, #6
 8002cac:	d110      	bne.n	8002cd0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	6a38      	ldr	r0, [r7, #32]
 8002cba:	f002 fc9c 	bl	80055f6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cca:	441a      	add	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699a      	ldr	r2, [r3, #24]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0210 	orr.w	r2, r2, #16
 8002cde:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f002 fe1a 	bl	800591e <USB_ReadInterrupts>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cf0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cf4:	d16e      	bne.n	8002dd4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f002 fe20 	bl	8005944 <USB_ReadDevAllOutEpInterrupt>
 8002d04:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d06:	e062      	b.n	8002dce <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d057      	beq.n	8002dc2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f002 fe45 	bl	80059ac <USB_ReadDevOutEPInterrupt>
 8002d22:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00c      	beq.n	8002d48 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fdb0 	bl	80038a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00c      	beq.n	8002d6c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2308      	movs	r3, #8
 8002d62:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 feaa 	bl	8003ac0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d008      	beq.n	8002d88 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d82:	461a      	mov	r2, r3
 8002d84:	2310      	movs	r3, #16
 8002d86:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d008      	beq.n	8002da4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2320      	movs	r3, #32
 8002da2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dc0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d199      	bne.n	8002d08 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f002 fda0 	bl	800591e <USB_ReadInterrupts>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002de8:	f040 80c0 	bne.w	8002f6c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f002 fdc1 	bl	8005978 <USB_ReadDevAllInEpInterrupt>
 8002df6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002dfc:	e0b2      	b.n	8002f64 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80a7 	beq.w	8002f58 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f002 fde7 	bl	80059e8 <USB_ReadDevInEPInterrupt>
 8002e1a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d057      	beq.n	8002ed6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	f003 030f 	and.w	r3, r3, #15
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69f9      	ldr	r1, [r7, #28]
 8002e42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e46:	4013      	ands	r3, r2
 8002e48:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e56:	461a      	mov	r2, r3
 8002e58:	2301      	movs	r3, #1
 8002e5a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d132      	bne.n	8002eca <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	3348      	adds	r3, #72	; 0x48
 8002e74:	6819      	ldr	r1, [r3, #0]
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4403      	add	r3, r0
 8002e84:	3344      	adds	r3, #68	; 0x44
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4419      	add	r1, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8e:	4613      	mov	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4403      	add	r3, r0
 8002e98:	3348      	adds	r3, #72	; 0x48
 8002e9a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d113      	bne.n	8002eca <HAL_PCD_IRQHandler+0x31c>
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	3350      	adds	r3, #80	; 0x50
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d108      	bne.n	8002eca <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	f002 fdef 	bl	8005aa8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f004 fd9e 	bl	8007a12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eec:	461a      	mov	r2, r3
 8002eee:	2308      	movs	r3, #8
 8002ef0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2310      	movs	r3, #16
 8002f0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f24:	461a      	mov	r2, r3
 8002f26:	2340      	movs	r3, #64	; 0x40
 8002f28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f40:	461a      	mov	r2, r3
 8002f42:	2302      	movs	r3, #2
 8002f44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fc1b 	bl	800378e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f47f af49 	bne.w	8002dfe <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f002 fcd4 	bl	800591e <USB_ReadInterrupts>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f80:	d122      	bne.n	8002fc8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d108      	bne.n	8002fb2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fa8:	2100      	movs	r1, #0
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fe26 	bl	8003bfc <HAL_PCDEx_LPM_Callback>
 8002fb0:	e002      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f004 fda4 	bl	8007b00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002fc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f002 fca6 	bl	800591e <USB_ReadInterrupts>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fdc:	d112      	bne.n	8003004 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d102      	bne.n	8002ff4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f004 fd60 	bl	8007ab4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003002:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f002 fc88 	bl	800591e <USB_ReadInterrupts>
 800300e:	4603      	mov	r3, r0
 8003010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003018:	f040 80c7 	bne.w	80031aa <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800302a:	f023 0301 	bic.w	r3, r3, #1
 800302e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2110      	movs	r1, #16
 8003036:	4618      	mov	r0, r3
 8003038:	f001 fd22 	bl	8004a80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800303c:	2300      	movs	r3, #0
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003040:	e056      	b.n	80030f0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	4413      	add	r3, r2
 800304a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800304e:	461a      	mov	r2, r3
 8003050:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003054:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003066:	0151      	lsls	r1, r2, #5
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	440a      	add	r2, r1
 800306c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003070:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003074:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003086:	0151      	lsls	r1, r2, #5
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	440a      	add	r2, r1
 800308c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003090:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003094:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a2:	461a      	mov	r2, r3
 80030a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ba:	0151      	lsls	r1, r2, #5
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	440a      	add	r2, r1
 80030c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80030ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030da:	0151      	lsls	r1, r2, #5
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	440a      	add	r2, r1
 80030e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ec:	3301      	adds	r3, #1
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d3a3      	bcc.n	8003042 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003108:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800310c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	2b00      	cmp	r3, #0
 8003114:	d016      	beq.n	8003144 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003126:	f043 030b 	orr.w	r3, r3, #11
 800312a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800313c:	f043 030b 	orr.w	r3, r3, #11
 8003140:	6453      	str	r3, [r2, #68]	; 0x44
 8003142:	e015      	b.n	8003170 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003152:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003156:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800315a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800316a:	f043 030b 	orr.w	r3, r3, #11
 800316e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800317e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003182:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003194:	461a      	mov	r2, r3
 8003196:	f002 fc87 	bl	8005aa8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80031a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f002 fbb5 	bl	800591e <USB_ReadInterrupts>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031be:	d124      	bne.n	800320a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f002 fc4b 	bl	8005a60 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f001 fcb3 	bl	8004b3a <USB_GetDevSpeed>
 80031d4:	4603      	mov	r3, r0
 80031d6:	461a      	mov	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681c      	ldr	r4, [r3, #0]
 80031e0:	f001 f958 	bl	8004494 <HAL_RCC_GetHCLKFreq>
 80031e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	4620      	mov	r0, r4
 80031f0:	f001 f9d2 	bl	8004598 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f004 fc34 	bl	8007a62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003208:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f002 fb85 	bl	800591e <USB_ReadInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b08      	cmp	r3, #8
 800321c:	d10a      	bne.n	8003234 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f004 fc11 	bl	8007a46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f002 0208 	and.w	r2, r2, #8
 8003232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f002 fb70 	bl	800591e <USB_ReadInterrupts>
 800323e:	4603      	mov	r3, r0
 8003240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003248:	d10f      	bne.n	800326a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	b2db      	uxtb	r3, r3
 8003252:	4619      	mov	r1, r3
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f004 fc73 	bl	8007b40 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695a      	ldr	r2, [r3, #20]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003268:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f002 fb55 	bl	800591e <USB_ReadInterrupts>
 8003274:	4603      	mov	r3, r0
 8003276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800327a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800327e:	d10f      	bne.n	80032a0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	b2db      	uxtb	r3, r3
 8003288:	4619      	mov	r1, r3
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f004 fc46 	bl	8007b1c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800329e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f002 fb3a 	bl	800591e <USB_ReadInterrupts>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b4:	d10a      	bne.n	80032cc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f004 fc54 	bl	8007b64 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80032ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f002 fb24 	bl	800591e <USB_ReadInterrupts>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d115      	bne.n	800330c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f004 fc44 	bl	8007b80 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6859      	ldr	r1, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	430a      	orrs	r2, r1
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	e000      	b.n	800330c <HAL_PCD_IRQHandler+0x75e>
      return;
 800330a:	bf00      	nop
    }
  }
}
 800330c:	3734      	adds	r7, #52	; 0x34
 800330e:	46bd      	mov	sp, r7
 8003310:	bd90      	pop	{r4, r7, pc}

08003312 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_PCD_SetAddress+0x1a>
 8003328:	2302      	movs	r3, #2
 800332a:	e013      	b.n	8003354 <HAL_PCD_SetAddress+0x42>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f002 fa82 	bl	800584e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	4608      	mov	r0, r1
 8003366:	4611      	mov	r1, r2
 8003368:	461a      	mov	r2, r3
 800336a:	4603      	mov	r3, r0
 800336c:	70fb      	strb	r3, [r7, #3]
 800336e:	460b      	mov	r3, r1
 8003370:	803b      	strh	r3, [r7, #0]
 8003372:	4613      	mov	r3, r2
 8003374:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800337a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800337e:	2b00      	cmp	r3, #0
 8003380:	da0f      	bge.n	80033a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	f003 020f 	and.w	r2, r3, #15
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	3338      	adds	r3, #56	; 0x38
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	4413      	add	r3, r2
 8003396:	3304      	adds	r3, #4
 8003398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2201      	movs	r2, #1
 800339e:	705a      	strb	r2, [r3, #1]
 80033a0:	e00f      	b.n	80033c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a2:	78fb      	ldrb	r3, [r7, #3]
 80033a4:	f003 020f 	and.w	r2, r3, #15
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	4413      	add	r3, r2
 80033b8:	3304      	adds	r3, #4
 80033ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80033ce:	883a      	ldrh	r2, [r7, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	78ba      	ldrb	r2, [r7, #2]
 80033d8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	785b      	ldrb	r3, [r3, #1]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d004      	beq.n	80033ec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033ec:	78bb      	ldrb	r3, [r7, #2]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d102      	bne.n	80033f8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_PCD_EP_Open+0xaa>
 8003402:	2302      	movs	r3, #2
 8003404:	e00e      	b.n	8003424 <HAL_PCD_EP_Open+0xc8>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68f9      	ldr	r1, [r7, #12]
 8003414:	4618      	mov	r0, r3
 8003416:	f001 fbb5 	bl	8004b84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003422:	7afb      	ldrb	r3, [r7, #11]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800343c:	2b00      	cmp	r3, #0
 800343e:	da0f      	bge.n	8003460 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	f003 020f 	and.w	r2, r3, #15
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	3338      	adds	r3, #56	; 0x38
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	4413      	add	r3, r2
 8003454:	3304      	adds	r3, #4
 8003456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	705a      	strb	r2, [r3, #1]
 800345e:	e00f      	b.n	8003480 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	f003 020f 	and.w	r2, r3, #15
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	4413      	add	r3, r2
 8003476:	3304      	adds	r3, #4
 8003478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	b2da      	uxtb	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_PCD_EP_Close+0x6e>
 8003496:	2302      	movs	r3, #2
 8003498:	e00e      	b.n	80034b8 <HAL_PCD_EP_Close+0x8c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68f9      	ldr	r1, [r7, #12]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f001 fbf3 	bl	8004c94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	460b      	mov	r3, r1
 80034ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034d0:	7afb      	ldrb	r3, [r7, #11]
 80034d2:	f003 020f 	and.w	r2, r3, #15
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4413      	add	r3, r2
 80034e6:	3304      	adds	r3, #4
 80034e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2200      	movs	r2, #0
 80034fa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2200      	movs	r2, #0
 8003500:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003502:	7afb      	ldrb	r3, [r7, #11]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	b2da      	uxtb	r2, r3
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d102      	bne.n	800351c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800351c:	7afb      	ldrb	r3, [r7, #11]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	461a      	mov	r2, r3
 8003532:	6979      	ldr	r1, [r7, #20]
 8003534:	f001 fece 	bl	80052d4 <USB_EP0StartXfer>
 8003538:	e008      	b.n	800354c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	6979      	ldr	r1, [r7, #20]
 8003548:	f001 fc80 	bl	8004e4c <USB_EPStartXfer>
  }

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	460b      	mov	r3, r1
 8003560:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	f003 020f 	and.w	r2, r3, #15
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003578:	681b      	ldr	r3, [r3, #0]
}
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b086      	sub	sp, #24
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	460b      	mov	r3, r1
 8003594:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003596:	7afb      	ldrb	r3, [r7, #11]
 8003598:	f003 020f 	and.w	r2, r3, #15
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	3338      	adds	r3, #56	; 0x38
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4413      	add	r3, r2
 80035aa:	3304      	adds	r3, #4
 80035ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2200      	movs	r2, #0
 80035be:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2201      	movs	r2, #1
 80035c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d102      	bne.n	80035e0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035e0:	7afb      	ldrb	r3, [r7, #11]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	6979      	ldr	r1, [r7, #20]
 80035f8:	f001 fe6c 	bl	80052d4 <USB_EP0StartXfer>
 80035fc:	e008      	b.n	8003610 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	6979      	ldr	r1, [r7, #20]
 800360c:	f001 fc1e 	bl	8004e4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003626:	78fb      	ldrb	r3, [r7, #3]
 8003628:	f003 020f 	and.w	r2, r3, #15
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	429a      	cmp	r2, r3
 8003632:	d901      	bls.n	8003638 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e050      	b.n	80036da <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003638:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800363c:	2b00      	cmp	r3, #0
 800363e:	da0f      	bge.n	8003660 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	f003 020f 	and.w	r2, r3, #15
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	3338      	adds	r3, #56	; 0x38
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4413      	add	r3, r2
 8003654:	3304      	adds	r3, #4
 8003656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	705a      	strb	r2, [r3, #1]
 800365e:	e00d      	b.n	800367c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	3304      	adds	r3, #4
 8003674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	b2da      	uxtb	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_PCD_EP_SetStall+0x82>
 8003698:	2302      	movs	r3, #2
 800369a:	e01e      	b.n	80036da <HAL_PCD_EP_SetStall+0xc0>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68f9      	ldr	r1, [r7, #12]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 fffb 	bl	80056a6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10a      	bne.n	80036d0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	b2d9      	uxtb	r1, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036ca:	461a      	mov	r2, r3
 80036cc:	f002 f9ec 	bl	8005aa8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	460b      	mov	r3, r1
 80036ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	f003 020f 	and.w	r2, r3, #15
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d901      	bls.n	8003700 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e042      	b.n	8003786 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003704:	2b00      	cmp	r3, #0
 8003706:	da0f      	bge.n	8003728 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	f003 020f 	and.w	r2, r3, #15
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	3338      	adds	r3, #56	; 0x38
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	4413      	add	r3, r2
 800371c:	3304      	adds	r3, #4
 800371e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	705a      	strb	r2, [r3, #1]
 8003726:	e00f      	b.n	8003748 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	f003 020f 	and.w	r2, r3, #15
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	3304      	adds	r3, #4
 8003740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800374e:	78fb      	ldrb	r3, [r7, #3]
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	b2da      	uxtb	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_PCD_EP_ClrStall+0x86>
 8003764:	2302      	movs	r3, #2
 8003766:	e00e      	b.n	8003786 <HAL_PCD_EP_ClrStall+0xa4>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68f9      	ldr	r1, [r7, #12]
 8003776:	4618      	mov	r0, r3
 8003778:	f002 f803 	bl	8005782 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b08a      	sub	sp, #40	; 0x28
 8003792:	af02      	add	r7, sp, #8
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	3338      	adds	r3, #56	; 0x38
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	4413      	add	r3, r2
 80037b2:	3304      	adds	r3, #4
 80037b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d901      	bls.n	80037c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e06c      	b.n	80038a0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d902      	bls.n	80037e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	3303      	adds	r3, #3
 80037e6:	089b      	lsrs	r3, r3, #2
 80037e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037ea:	e02b      	b.n	8003844 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d902      	bls.n	8003808 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	3303      	adds	r3, #3
 800380c:	089b      	lsrs	r3, r3, #2
 800380e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	68d9      	ldr	r1, [r3, #12]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	b2da      	uxtb	r2, r3
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003820:	b2db      	uxtb	r3, r3
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	4603      	mov	r3, r0
 8003826:	6978      	ldr	r0, [r7, #20]
 8003828:	f001 fea7 	bl	800557a <USB_WritePacket>

    ep->xfer_buff  += len;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	441a      	add	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	699a      	ldr	r2, [r3, #24]
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	441a      	add	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	4413      	add	r3, r2
 800384c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	b29b      	uxth	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	429a      	cmp	r2, r3
 8003858:	d809      	bhi.n	800386e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003862:	429a      	cmp	r2, r3
 8003864:	d203      	bcs.n	800386e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1be      	bne.n	80037ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	695a      	ldr	r2, [r3, #20]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	429a      	cmp	r2, r3
 8003878:	d811      	bhi.n	800389e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	2201      	movs	r2, #1
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	43db      	mvns	r3, r3
 8003894:	6939      	ldr	r1, [r7, #16]
 8003896:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800389a:	4013      	ands	r3, r2
 800389c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3720      	adds	r7, #32
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	333c      	adds	r3, #60	; 0x3c
 80038c0:	3304      	adds	r3, #4
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	f040 80a0 	bne.w	8003a20 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d015      	beq.n	8003916 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4a72      	ldr	r2, [pc, #456]	; (8003ab8 <PCD_EP_OutXfrComplete_int+0x210>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	f240 80dd 	bls.w	8003aae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 80d7 	beq.w	8003aae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390c:	461a      	mov	r2, r3
 800390e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003912:	6093      	str	r3, [r2, #8]
 8003914:	e0cb      	b.n	8003aae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d009      	beq.n	8003934 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392c:	461a      	mov	r2, r3
 800392e:	2320      	movs	r3, #32
 8003930:	6093      	str	r3, [r2, #8]
 8003932:	e0bc      	b.n	8003aae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800393a:	2b00      	cmp	r3, #0
 800393c:	f040 80b7 	bne.w	8003aae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a5d      	ldr	r2, [pc, #372]	; (8003ab8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d90f      	bls.n	8003968 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395e:	461a      	mov	r2, r3
 8003960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003964:	6093      	str	r3, [r2, #8]
 8003966:	e0a2      	b.n	8003aae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800397a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	0159      	lsls	r1, r3, #5
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	440b      	add	r3, r1
 8003984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800398e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4403      	add	r3, r0
 800399e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80039a2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039b6:	6819      	ldr	r1, [r3, #0]
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4403      	add	r3, r0
 80039c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4419      	add	r1, r3
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	4613      	mov	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4403      	add	r3, r0
 80039dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039e0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d114      	bne.n	8003a12 <PCD_EP_OutXfrComplete_int+0x16a>
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d108      	bne.n	8003a12 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	f002 f84b 	bl	8005aa8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	4619      	mov	r1, r3
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f003 ffdf 	bl	80079dc <HAL_PCD_DataOutStageCallback>
 8003a1e:	e046      	b.n	8003aae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4a26      	ldr	r2, [pc, #152]	; (8003abc <PCD_EP_OutXfrComplete_int+0x214>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d124      	bne.n	8003a72 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a44:	6093      	str	r3, [r2, #8]
 8003a46:	e032      	b.n	8003aae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2320      	movs	r3, #32
 8003a62:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	4619      	mov	r1, r3
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f003 ffb6 	bl	80079dc <HAL_PCD_DataOutStageCallback>
 8003a70:	e01d      	b.n	8003aae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d114      	bne.n	8003aa2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d108      	bne.n	8003aa2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	f002 f803 	bl	8005aa8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f003 ff97 	bl	80079dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	4f54300a 	.word	0x4f54300a
 8003abc:	4f54310a 	.word	0x4f54310a

08003ac0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	333c      	adds	r3, #60	; 0x3c
 8003ad8:	3304      	adds	r3, #4
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4a15      	ldr	r2, [pc, #84]	; (8003b48 <PCD_EP_OutSetupPacket_int+0x88>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d90e      	bls.n	8003b14 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d009      	beq.n	8003b14 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b12:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f003 ff4f 	bl	80079b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4a0a      	ldr	r2, [pc, #40]	; (8003b48 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d90c      	bls.n	8003b3c <PCD_EP_OutSetupPacket_int+0x7c>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d108      	bne.n	8003b3c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b34:	461a      	mov	r2, r3
 8003b36:	2101      	movs	r1, #1
 8003b38:	f001 ffb6 	bl	8005aa8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	4f54300a 	.word	0x4f54300a

08003b4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	70fb      	strb	r3, [r7, #3]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d107      	bne.n	8003b7a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b6a:	883b      	ldrh	r3, [r7, #0]
 8003b6c:	0419      	lsls	r1, r3, #16
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28
 8003b78:	e028      	b.n	8003bcc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	0c1b      	lsrs	r3, r3, #16
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	4413      	add	r3, r2
 8003b86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	73fb      	strb	r3, [r7, #15]
 8003b8c:	e00d      	b.n	8003baa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	3340      	adds	r3, #64	; 0x40
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
 8003baa:	7bfa      	ldrb	r2, [r7, #15]
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d3ec      	bcc.n	8003b8e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003bb4:	883b      	ldrh	r3, [r7, #0]
 8003bb6:	0418      	lsls	r0, r3, #16
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6819      	ldr	r1, [r3, #0]
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	4302      	orrs	r2, r0
 8003bc4:	3340      	adds	r3, #64	; 0x40
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	460b      	mov	r3, r1
 8003be4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	887a      	ldrh	r2, [r7, #2]
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e264      	b.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d075      	beq.n	8003d1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c32:	4ba3      	ldr	r3, [pc, #652]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d00c      	beq.n	8003c58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c3e:	4ba0      	ldr	r3, [pc, #640]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d112      	bne.n	8003c70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c4a:	4b9d      	ldr	r3, [pc, #628]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c56:	d10b      	bne.n	8003c70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c58:	4b99      	ldr	r3, [pc, #612]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d05b      	beq.n	8003d1c <HAL_RCC_OscConfig+0x108>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d157      	bne.n	8003d1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e23f      	b.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c78:	d106      	bne.n	8003c88 <HAL_RCC_OscConfig+0x74>
 8003c7a:	4b91      	ldr	r3, [pc, #580]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a90      	ldr	r2, [pc, #576]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e01d      	b.n	8003cc4 <HAL_RCC_OscConfig+0xb0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0x98>
 8003c92:	4b8b      	ldr	r3, [pc, #556]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a8a      	ldr	r2, [pc, #552]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b88      	ldr	r3, [pc, #544]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a87      	ldr	r2, [pc, #540]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e00b      	b.n	8003cc4 <HAL_RCC_OscConfig+0xb0>
 8003cac:	4b84      	ldr	r3, [pc, #528]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a83      	ldr	r2, [pc, #524]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	4b81      	ldr	r3, [pc, #516]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a80      	ldr	r2, [pc, #512]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d013      	beq.n	8003cf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7fd fb6e 	bl	80013ac <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd4:	f7fd fb6a 	bl	80013ac <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b64      	cmp	r3, #100	; 0x64
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e204      	b.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce6:	4b76      	ldr	r3, [pc, #472]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0xc0>
 8003cf2:	e014      	b.n	8003d1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7fd fb5a 	bl	80013ac <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cfc:	f7fd fb56 	bl	80013ac <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b64      	cmp	r3, #100	; 0x64
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e1f0      	b.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0e:	4b6c      	ldr	r3, [pc, #432]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0xe8>
 8003d1a:	e000      	b.n	8003d1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d063      	beq.n	8003df2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d2a:	4b65      	ldr	r3, [pc, #404]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d36:	4b62      	ldr	r3, [pc, #392]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d11c      	bne.n	8003d7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d42:	4b5f      	ldr	r3, [pc, #380]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d116      	bne.n	8003d7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4e:	4b5c      	ldr	r3, [pc, #368]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d005      	beq.n	8003d66 <HAL_RCC_OscConfig+0x152>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d001      	beq.n	8003d66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e1c4      	b.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d66:	4b56      	ldr	r3, [pc, #344]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4952      	ldr	r1, [pc, #328]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7a:	e03a      	b.n	8003df2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d020      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d84:	4b4f      	ldr	r3, [pc, #316]	; (8003ec4 <HAL_RCC_OscConfig+0x2b0>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8a:	f7fd fb0f 	bl	80013ac <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d92:	f7fd fb0b 	bl	80013ac <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e1a5      	b.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da4:	4b46      	ldr	r3, [pc, #280]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db0:	4b43      	ldr	r3, [pc, #268]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4940      	ldr	r1, [pc, #256]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	600b      	str	r3, [r1, #0]
 8003dc4:	e015      	b.n	8003df2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc6:	4b3f      	ldr	r3, [pc, #252]	; (8003ec4 <HAL_RCC_OscConfig+0x2b0>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7fd faee 	bl	80013ac <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd4:	f7fd faea 	bl	80013ac <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e184      	b.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de6:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d030      	beq.n	8003e60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d016      	beq.n	8003e34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e06:	4b30      	ldr	r3, [pc, #192]	; (8003ec8 <HAL_RCC_OscConfig+0x2b4>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7fd face 	bl	80013ac <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e14:	f7fd faca 	bl	80013ac <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e164      	b.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e26:	4b26      	ldr	r3, [pc, #152]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0x200>
 8003e32:	e015      	b.n	8003e60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e34:	4b24      	ldr	r3, [pc, #144]	; (8003ec8 <HAL_RCC_OscConfig+0x2b4>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3a:	f7fd fab7 	bl	80013ac <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e42:	f7fd fab3 	bl	80013ac <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e14d      	b.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e54:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1f0      	bne.n	8003e42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80a0 	beq.w	8003fae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e72:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	4a0e      	ldr	r2, [pc, #56]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <HAL_RCC_OscConfig+0x2b8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d121      	bne.n	8003eee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eaa:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <HAL_RCC_OscConfig+0x2b8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a07      	ldr	r2, [pc, #28]	; (8003ecc <HAL_RCC_OscConfig+0x2b8>)
 8003eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eb6:	f7fd fa79 	bl	80013ac <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebc:	e011      	b.n	8003ee2 <HAL_RCC_OscConfig+0x2ce>
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	42470000 	.word	0x42470000
 8003ec8:	42470e80 	.word	0x42470e80
 8003ecc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed0:	f7fd fa6c 	bl	80013ac <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e106      	b.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee2:	4b85      	ldr	r3, [pc, #532]	; (80040f8 <HAL_RCC_OscConfig+0x4e4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d106      	bne.n	8003f04 <HAL_RCC_OscConfig+0x2f0>
 8003ef6:	4b81      	ldr	r3, [pc, #516]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efa:	4a80      	ldr	r2, [pc, #512]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	6713      	str	r3, [r2, #112]	; 0x70
 8003f02:	e01c      	b.n	8003f3e <HAL_RCC_OscConfig+0x32a>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b05      	cmp	r3, #5
 8003f0a:	d10c      	bne.n	8003f26 <HAL_RCC_OscConfig+0x312>
 8003f0c:	4b7b      	ldr	r3, [pc, #492]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	4a7a      	ldr	r2, [pc, #488]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8003f12:	f043 0304 	orr.w	r3, r3, #4
 8003f16:	6713      	str	r3, [r2, #112]	; 0x70
 8003f18:	4b78      	ldr	r3, [pc, #480]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1c:	4a77      	ldr	r2, [pc, #476]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	6713      	str	r3, [r2, #112]	; 0x70
 8003f24:	e00b      	b.n	8003f3e <HAL_RCC_OscConfig+0x32a>
 8003f26:	4b75      	ldr	r3, [pc, #468]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	4a74      	ldr	r2, [pc, #464]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	6713      	str	r3, [r2, #112]	; 0x70
 8003f32:	4b72      	ldr	r3, [pc, #456]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	4a71      	ldr	r2, [pc, #452]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8003f38:	f023 0304 	bic.w	r3, r3, #4
 8003f3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d015      	beq.n	8003f72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f46:	f7fd fa31 	bl	80013ac <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4c:	e00a      	b.n	8003f64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fd fa2d 	bl	80013ac <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e0c5      	b.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f64:	4b65      	ldr	r3, [pc, #404]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0ee      	beq.n	8003f4e <HAL_RCC_OscConfig+0x33a>
 8003f70:	e014      	b.n	8003f9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f72:	f7fd fa1b 	bl	80013ac <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f78:	e00a      	b.n	8003f90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7a:	f7fd fa17 	bl	80013ac <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e0af      	b.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f90:	4b5a      	ldr	r3, [pc, #360]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ee      	bne.n	8003f7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d105      	bne.n	8003fae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa2:	4b56      	ldr	r3, [pc, #344]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	4a55      	ldr	r2, [pc, #340]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8003fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 809b 	beq.w	80040ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fb8:	4b50      	ldr	r3, [pc, #320]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d05c      	beq.n	800407e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d141      	bne.n	8004050 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fcc:	4b4c      	ldr	r3, [pc, #304]	; (8004100 <HAL_RCC_OscConfig+0x4ec>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd2:	f7fd f9eb 	bl	80013ac <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fda:	f7fd f9e7 	bl	80013ac <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e081      	b.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fec:	4b43      	ldr	r3, [pc, #268]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f0      	bne.n	8003fda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69da      	ldr	r2, [r3, #28]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	019b      	lsls	r3, r3, #6
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	085b      	lsrs	r3, r3, #1
 8004010:	3b01      	subs	r3, #1
 8004012:	041b      	lsls	r3, r3, #16
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	061b      	lsls	r3, r3, #24
 800401c:	4937      	ldr	r1, [pc, #220]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 800401e:	4313      	orrs	r3, r2
 8004020:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004022:	4b37      	ldr	r3, [pc, #220]	; (8004100 <HAL_RCC_OscConfig+0x4ec>)
 8004024:	2201      	movs	r2, #1
 8004026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004028:	f7fd f9c0 	bl	80013ac <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004030:	f7fd f9bc 	bl	80013ac <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e056      	b.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004042:	4b2e      	ldr	r3, [pc, #184]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x41c>
 800404e:	e04e      	b.n	80040ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004050:	4b2b      	ldr	r3, [pc, #172]	; (8004100 <HAL_RCC_OscConfig+0x4ec>)
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004056:	f7fd f9a9 	bl	80013ac <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405e:	f7fd f9a5 	bl	80013ac <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e03f      	b.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004070:	4b22      	ldr	r3, [pc, #136]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1f0      	bne.n	800405e <HAL_RCC_OscConfig+0x44a>
 800407c:	e037      	b.n	80040ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e032      	b.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800408a:	4b1c      	ldr	r3, [pc, #112]	; (80040fc <HAL_RCC_OscConfig+0x4e8>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d028      	beq.n	80040ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d121      	bne.n	80040ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d11a      	bne.n	80040ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040ba:	4013      	ands	r3, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d111      	bne.n	80040ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	3b01      	subs	r3, #1
 80040d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d107      	bne.n	80040ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d001      	beq.n	80040ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40007000 	.word	0x40007000
 80040fc:	40023800 	.word	0x40023800
 8004100:	42470060 	.word	0x42470060

08004104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0cc      	b.n	80042b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004118:	4b68      	ldr	r3, [pc, #416]	; (80042bc <HAL_RCC_ClockConfig+0x1b8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d90c      	bls.n	8004140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004126:	4b65      	ldr	r3, [pc, #404]	; (80042bc <HAL_RCC_ClockConfig+0x1b8>)
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800412e:	4b63      	ldr	r3, [pc, #396]	; (80042bc <HAL_RCC_ClockConfig+0x1b8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d001      	beq.n	8004140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e0b8      	b.n	80042b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d020      	beq.n	800418e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004158:	4b59      	ldr	r3, [pc, #356]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	4a58      	ldr	r2, [pc, #352]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b00      	cmp	r3, #0
 800416e:	d005      	beq.n	800417c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004170:	4b53      	ldr	r3, [pc, #332]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	4a52      	ldr	r2, [pc, #328]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800417a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800417c:	4b50      	ldr	r3, [pc, #320]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	494d      	ldr	r1, [pc, #308]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	4313      	orrs	r3, r2
 800418c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d044      	beq.n	8004224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d107      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a2:	4b47      	ldr	r3, [pc, #284]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d119      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e07f      	b.n	80042b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d003      	beq.n	80041c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d107      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c2:	4b3f      	ldr	r3, [pc, #252]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d109      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e06f      	b.n	80042b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d2:	4b3b      	ldr	r3, [pc, #236]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e067      	b.n	80042b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041e2:	4b37      	ldr	r3, [pc, #220]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f023 0203 	bic.w	r2, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4934      	ldr	r1, [pc, #208]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041f4:	f7fd f8da 	bl	80013ac <HAL_GetTick>
 80041f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fa:	e00a      	b.n	8004212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041fc:	f7fd f8d6 	bl	80013ac <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f241 3288 	movw	r2, #5000	; 0x1388
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e04f      	b.n	80042b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004212:	4b2b      	ldr	r3, [pc, #172]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 020c 	and.w	r2, r3, #12
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	429a      	cmp	r2, r3
 8004222:	d1eb      	bne.n	80041fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004224:	4b25      	ldr	r3, [pc, #148]	; (80042bc <HAL_RCC_ClockConfig+0x1b8>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d20c      	bcs.n	800424c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	4b22      	ldr	r3, [pc, #136]	; (80042bc <HAL_RCC_ClockConfig+0x1b8>)
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800423a:	4b20      	ldr	r3, [pc, #128]	; (80042bc <HAL_RCC_ClockConfig+0x1b8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d001      	beq.n	800424c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e032      	b.n	80042b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004258:	4b19      	ldr	r3, [pc, #100]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4916      	ldr	r1, [pc, #88]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	4313      	orrs	r3, r2
 8004268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004276:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	490e      	ldr	r1, [pc, #56]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	4313      	orrs	r3, r2
 8004288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800428a:	f000 f821 	bl	80042d0 <HAL_RCC_GetSysClockFreq>
 800428e:	4602      	mov	r2, r0
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	490a      	ldr	r1, [pc, #40]	; (80042c4 <HAL_RCC_ClockConfig+0x1c0>)
 800429c:	5ccb      	ldrb	r3, [r1, r3]
 800429e:	fa22 f303 	lsr.w	r3, r2, r3
 80042a2:	4a09      	ldr	r2, [pc, #36]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 80042a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042a6:	4b09      	ldr	r3, [pc, #36]	; (80042cc <HAL_RCC_ClockConfig+0x1c8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fd f83a 	bl	8001324 <HAL_InitTick>

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40023c00 	.word	0x40023c00
 80042c0:	40023800 	.word	0x40023800
 80042c4:	08007ff0 	.word	0x08007ff0
 80042c8:	20000000 	.word	0x20000000
 80042cc:	20000004 	.word	0x20000004

080042d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	607b      	str	r3, [r7, #4]
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	2300      	movs	r3, #0
 80042e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042e8:	4b67      	ldr	r3, [pc, #412]	; (8004488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 030c 	and.w	r3, r3, #12
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d00d      	beq.n	8004310 <HAL_RCC_GetSysClockFreq+0x40>
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	f200 80bd 	bhi.w	8004474 <HAL_RCC_GetSysClockFreq+0x1a4>
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <HAL_RCC_GetSysClockFreq+0x34>
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d003      	beq.n	800430a <HAL_RCC_GetSysClockFreq+0x3a>
 8004302:	e0b7      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004304:	4b61      	ldr	r3, [pc, #388]	; (800448c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004306:	60bb      	str	r3, [r7, #8]
       break;
 8004308:	e0b7      	b.n	800447a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800430a:	4b61      	ldr	r3, [pc, #388]	; (8004490 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800430c:	60bb      	str	r3, [r7, #8]
      break;
 800430e:	e0b4      	b.n	800447a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004310:	4b5d      	ldr	r3, [pc, #372]	; (8004488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004318:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800431a:	4b5b      	ldr	r3, [pc, #364]	; (8004488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d04d      	beq.n	80043c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004326:	4b58      	ldr	r3, [pc, #352]	; (8004488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	099b      	lsrs	r3, r3, #6
 800432c:	461a      	mov	r2, r3
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004336:	f04f 0100 	mov.w	r1, #0
 800433a:	ea02 0800 	and.w	r8, r2, r0
 800433e:	ea03 0901 	and.w	r9, r3, r1
 8004342:	4640      	mov	r0, r8
 8004344:	4649      	mov	r1, r9
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	014b      	lsls	r3, r1, #5
 8004350:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004354:	0142      	lsls	r2, r0, #5
 8004356:	4610      	mov	r0, r2
 8004358:	4619      	mov	r1, r3
 800435a:	ebb0 0008 	subs.w	r0, r0, r8
 800435e:	eb61 0109 	sbc.w	r1, r1, r9
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	018b      	lsls	r3, r1, #6
 800436c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004370:	0182      	lsls	r2, r0, #6
 8004372:	1a12      	subs	r2, r2, r0
 8004374:	eb63 0301 	sbc.w	r3, r3, r1
 8004378:	f04f 0000 	mov.w	r0, #0
 800437c:	f04f 0100 	mov.w	r1, #0
 8004380:	00d9      	lsls	r1, r3, #3
 8004382:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004386:	00d0      	lsls	r0, r2, #3
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	eb12 0208 	adds.w	r2, r2, r8
 8004390:	eb43 0309 	adc.w	r3, r3, r9
 8004394:	f04f 0000 	mov.w	r0, #0
 8004398:	f04f 0100 	mov.w	r1, #0
 800439c:	0259      	lsls	r1, r3, #9
 800439e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80043a2:	0250      	lsls	r0, r2, #9
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4610      	mov	r0, r2
 80043aa:	4619      	mov	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	461a      	mov	r2, r3
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	f7fb ff08 	bl	80001c8 <__aeabi_uldivmod>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4613      	mov	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	e04a      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c2:	4b31      	ldr	r3, [pc, #196]	; (8004488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	099b      	lsrs	r3, r3, #6
 80043c8:	461a      	mov	r2, r3
 80043ca:	f04f 0300 	mov.w	r3, #0
 80043ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043d2:	f04f 0100 	mov.w	r1, #0
 80043d6:	ea02 0400 	and.w	r4, r2, r0
 80043da:	ea03 0501 	and.w	r5, r3, r1
 80043de:	4620      	mov	r0, r4
 80043e0:	4629      	mov	r1, r5
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	014b      	lsls	r3, r1, #5
 80043ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043f0:	0142      	lsls	r2, r0, #5
 80043f2:	4610      	mov	r0, r2
 80043f4:	4619      	mov	r1, r3
 80043f6:	1b00      	subs	r0, r0, r4
 80043f8:	eb61 0105 	sbc.w	r1, r1, r5
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	018b      	lsls	r3, r1, #6
 8004406:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800440a:	0182      	lsls	r2, r0, #6
 800440c:	1a12      	subs	r2, r2, r0
 800440e:	eb63 0301 	sbc.w	r3, r3, r1
 8004412:	f04f 0000 	mov.w	r0, #0
 8004416:	f04f 0100 	mov.w	r1, #0
 800441a:	00d9      	lsls	r1, r3, #3
 800441c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004420:	00d0      	lsls	r0, r2, #3
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	1912      	adds	r2, r2, r4
 8004428:	eb45 0303 	adc.w	r3, r5, r3
 800442c:	f04f 0000 	mov.w	r0, #0
 8004430:	f04f 0100 	mov.w	r1, #0
 8004434:	0299      	lsls	r1, r3, #10
 8004436:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800443a:	0290      	lsls	r0, r2, #10
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4610      	mov	r0, r2
 8004442:	4619      	mov	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	461a      	mov	r2, r3
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	f7fb febc 	bl	80001c8 <__aeabi_uldivmod>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4613      	mov	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004458:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	0c1b      	lsrs	r3, r3, #16
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	3301      	adds	r3, #1
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004470:	60bb      	str	r3, [r7, #8]
      break;
 8004472:	e002      	b.n	800447a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004476:	60bb      	str	r3, [r7, #8]
      break;
 8004478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800447a:	68bb      	ldr	r3, [r7, #8]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004486:	bf00      	nop
 8004488:	40023800 	.word	0x40023800
 800448c:	00f42400 	.word	0x00f42400
 8004490:	007a1200 	.word	0x007a1200

08004494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004498:	4b03      	ldr	r3, [pc, #12]	; (80044a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800449a:	681b      	ldr	r3, [r3, #0]
}
 800449c:	4618      	mov	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	20000000 	.word	0x20000000

080044ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044b0:	f7ff fff0 	bl	8004494 <HAL_RCC_GetHCLKFreq>
 80044b4:	4602      	mov	r2, r0
 80044b6:	4b05      	ldr	r3, [pc, #20]	; (80044cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	0a9b      	lsrs	r3, r3, #10
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	4903      	ldr	r1, [pc, #12]	; (80044d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044c2:	5ccb      	ldrb	r3, [r1, r3]
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40023800 	.word	0x40023800
 80044d0:	08008000 	.word	0x08008000

080044d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044d4:	b084      	sub	sp, #16
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	f107 001c 	add.w	r0, r7, #28
 80044e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d122      	bne.n	8004532 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004516:	2b01      	cmp	r3, #1
 8004518:	d105      	bne.n	8004526 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f001 fb1c 	bl	8005b64 <USB_CoreReset>
 800452c:	4603      	mov	r3, r0
 800452e:	73fb      	strb	r3, [r7, #15]
 8004530:	e01a      	b.n	8004568 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f001 fb10 	bl	8005b64 <USB_CoreReset>
 8004544:	4603      	mov	r3, r0
 8004546:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	639a      	str	r2, [r3, #56]	; 0x38
 800455a:	e005      	b.n	8004568 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	2b01      	cmp	r3, #1
 800456c:	d10b      	bne.n	8004586 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f043 0206 	orr.w	r2, r3, #6
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004586:	7bfb      	ldrb	r3, [r7, #15]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004592:	b004      	add	sp, #16
 8004594:	4770      	bx	lr
	...

08004598 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	4613      	mov	r3, r2
 80045a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d165      	bne.n	8004678 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4a41      	ldr	r2, [pc, #260]	; (80046b4 <USB_SetTurnaroundTime+0x11c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d906      	bls.n	80045c2 <USB_SetTurnaroundTime+0x2a>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4a40      	ldr	r2, [pc, #256]	; (80046b8 <USB_SetTurnaroundTime+0x120>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d202      	bcs.n	80045c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80045bc:	230f      	movs	r3, #15
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	e062      	b.n	8004688 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	4a3c      	ldr	r2, [pc, #240]	; (80046b8 <USB_SetTurnaroundTime+0x120>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d306      	bcc.n	80045d8 <USB_SetTurnaroundTime+0x40>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4a3b      	ldr	r2, [pc, #236]	; (80046bc <USB_SetTurnaroundTime+0x124>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d202      	bcs.n	80045d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80045d2:	230e      	movs	r3, #14
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	e057      	b.n	8004688 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4a38      	ldr	r2, [pc, #224]	; (80046bc <USB_SetTurnaroundTime+0x124>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d306      	bcc.n	80045ee <USB_SetTurnaroundTime+0x56>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4a37      	ldr	r2, [pc, #220]	; (80046c0 <USB_SetTurnaroundTime+0x128>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d202      	bcs.n	80045ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80045e8:	230d      	movs	r3, #13
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	e04c      	b.n	8004688 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	4a33      	ldr	r2, [pc, #204]	; (80046c0 <USB_SetTurnaroundTime+0x128>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d306      	bcc.n	8004604 <USB_SetTurnaroundTime+0x6c>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	4a32      	ldr	r2, [pc, #200]	; (80046c4 <USB_SetTurnaroundTime+0x12c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d802      	bhi.n	8004604 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80045fe:	230c      	movs	r3, #12
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	e041      	b.n	8004688 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4a2f      	ldr	r2, [pc, #188]	; (80046c4 <USB_SetTurnaroundTime+0x12c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d906      	bls.n	800461a <USB_SetTurnaroundTime+0x82>
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4a2e      	ldr	r2, [pc, #184]	; (80046c8 <USB_SetTurnaroundTime+0x130>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d802      	bhi.n	800461a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004614:	230b      	movs	r3, #11
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	e036      	b.n	8004688 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4a2a      	ldr	r2, [pc, #168]	; (80046c8 <USB_SetTurnaroundTime+0x130>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d906      	bls.n	8004630 <USB_SetTurnaroundTime+0x98>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	4a29      	ldr	r2, [pc, #164]	; (80046cc <USB_SetTurnaroundTime+0x134>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d802      	bhi.n	8004630 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800462a:	230a      	movs	r3, #10
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	e02b      	b.n	8004688 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4a26      	ldr	r2, [pc, #152]	; (80046cc <USB_SetTurnaroundTime+0x134>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d906      	bls.n	8004646 <USB_SetTurnaroundTime+0xae>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4a25      	ldr	r2, [pc, #148]	; (80046d0 <USB_SetTurnaroundTime+0x138>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d202      	bcs.n	8004646 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004640:	2309      	movs	r3, #9
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	e020      	b.n	8004688 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	4a21      	ldr	r2, [pc, #132]	; (80046d0 <USB_SetTurnaroundTime+0x138>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d306      	bcc.n	800465c <USB_SetTurnaroundTime+0xc4>
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	4a20      	ldr	r2, [pc, #128]	; (80046d4 <USB_SetTurnaroundTime+0x13c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d802      	bhi.n	800465c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004656:	2308      	movs	r3, #8
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	e015      	b.n	8004688 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4a1d      	ldr	r2, [pc, #116]	; (80046d4 <USB_SetTurnaroundTime+0x13c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d906      	bls.n	8004672 <USB_SetTurnaroundTime+0xda>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4a1c      	ldr	r2, [pc, #112]	; (80046d8 <USB_SetTurnaroundTime+0x140>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d202      	bcs.n	8004672 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800466c:	2307      	movs	r3, #7
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	e00a      	b.n	8004688 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004672:	2306      	movs	r3, #6
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	e007      	b.n	8004688 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d102      	bne.n	8004684 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800467e:	2309      	movs	r3, #9
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	e001      	b.n	8004688 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004684:	2309      	movs	r3, #9
 8004686:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	029b      	lsls	r3, r3, #10
 800469c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80046a0:	431a      	orrs	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	00d8acbf 	.word	0x00d8acbf
 80046b8:	00e4e1c0 	.word	0x00e4e1c0
 80046bc:	00f42400 	.word	0x00f42400
 80046c0:	01067380 	.word	0x01067380
 80046c4:	011a499f 	.word	0x011a499f
 80046c8:	01312cff 	.word	0x01312cff
 80046cc:	014ca43f 	.word	0x014ca43f
 80046d0:	016e3600 	.word	0x016e3600
 80046d4:	01a6ab1f 	.word	0x01a6ab1f
 80046d8:	01e84800 	.word	0x01e84800

080046dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f043 0201 	orr.w	r2, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f023 0201 	bic.w	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800473c:	78fb      	ldrb	r3, [r7, #3]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d115      	bne.n	800476e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800474e:	2001      	movs	r0, #1
 8004750:	f7fc fe38 	bl	80013c4 <HAL_Delay>
      ms++;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3301      	adds	r3, #1
 8004758:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f001 f972 	bl	8005a44 <USB_GetMode>
 8004760:	4603      	mov	r3, r0
 8004762:	2b01      	cmp	r3, #1
 8004764:	d01e      	beq.n	80047a4 <USB_SetCurrentMode+0x84>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b31      	cmp	r3, #49	; 0x31
 800476a:	d9f0      	bls.n	800474e <USB_SetCurrentMode+0x2e>
 800476c:	e01a      	b.n	80047a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d115      	bne.n	80047a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004780:	2001      	movs	r0, #1
 8004782:	f7fc fe1f 	bl	80013c4 <HAL_Delay>
      ms++;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3301      	adds	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f001 f959 	bl	8005a44 <USB_GetMode>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <USB_SetCurrentMode+0x84>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b31      	cmp	r3, #49	; 0x31
 800479c:	d9f0      	bls.n	8004780 <USB_SetCurrentMode+0x60>
 800479e:	e001      	b.n	80047a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e005      	b.n	80047b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b32      	cmp	r3, #50	; 0x32
 80047a8:	d101      	bne.n	80047ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047b8:	b084      	sub	sp, #16
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b086      	sub	sp, #24
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047d2:	2300      	movs	r3, #0
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	e009      	b.n	80047ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	3340      	adds	r3, #64	; 0x40
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	2200      	movs	r2, #0
 80047e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	3301      	adds	r3, #1
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	2b0e      	cmp	r3, #14
 80047f0:	d9f2      	bls.n	80047d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d11c      	bne.n	8004832 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004806:	f043 0302 	orr.w	r3, r3, #2
 800480a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	639a      	str	r2, [r3, #56]	; 0x38
 8004830:	e00b      	b.n	800484a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004850:	461a      	mov	r2, r3
 8004852:	2300      	movs	r3, #0
 8004854:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485c:	4619      	mov	r1, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004864:	461a      	mov	r2, r3
 8004866:	680b      	ldr	r3, [r1, #0]
 8004868:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800486a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486c:	2b01      	cmp	r3, #1
 800486e:	d10c      	bne.n	800488a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004876:	2100      	movs	r1, #0
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f945 	bl	8004b08 <USB_SetDevSpeed>
 800487e:	e008      	b.n	8004892 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004880:	2101      	movs	r1, #1
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f940 	bl	8004b08 <USB_SetDevSpeed>
 8004888:	e003      	b.n	8004892 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800488a:	2103      	movs	r1, #3
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f93b 	bl	8004b08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004892:	2110      	movs	r1, #16
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f8f3 	bl	8004a80 <USB_FlushTxFifo>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f90f 	bl	8004ac8 <USB_FlushRxFifo>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ba:	461a      	mov	r2, r3
 80048bc:	2300      	movs	r3, #0
 80048be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c6:	461a      	mov	r2, r3
 80048c8:	2300      	movs	r3, #0
 80048ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d2:	461a      	mov	r2, r3
 80048d4:	2300      	movs	r3, #0
 80048d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048d8:	2300      	movs	r3, #0
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	e043      	b.n	8004966 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048f4:	d118      	bne.n	8004928 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10a      	bne.n	8004912 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004908:	461a      	mov	r2, r3
 800490a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	e013      	b.n	800493a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491e:	461a      	mov	r2, r3
 8004920:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e008      	b.n	800493a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	461a      	mov	r2, r3
 8004936:	2300      	movs	r3, #0
 8004938:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4413      	add	r3, r2
 8004942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004946:	461a      	mov	r2, r3
 8004948:	2300      	movs	r3, #0
 800494a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	461a      	mov	r2, r3
 800495a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800495e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	3301      	adds	r3, #1
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	429a      	cmp	r2, r3
 800496c:	d3b7      	bcc.n	80048de <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800496e:	2300      	movs	r3, #0
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	e043      	b.n	80049fc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800498a:	d118      	bne.n	80049be <USB_DevInit+0x206>
    {
      if (i == 0U)
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10a      	bne.n	80049a8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499e:	461a      	mov	r2, r3
 80049a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	e013      	b.n	80049d0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b4:	461a      	mov	r2, r3
 80049b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	e008      	b.n	80049d0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ca:	461a      	mov	r2, r3
 80049cc:	2300      	movs	r3, #0
 80049ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049dc:	461a      	mov	r2, r3
 80049de:	2300      	movs	r3, #0
 80049e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ee:	461a      	mov	r2, r3
 80049f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	3301      	adds	r3, #1
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d3b7      	bcc.n	8004974 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d105      	bne.n	8004a38 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f043 0210 	orr.w	r2, r3, #16
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699a      	ldr	r2, [r3, #24]
 8004a3c:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <USB_DevInit+0x2c4>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d005      	beq.n	8004a56 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	f043 0208 	orr.w	r2, r3, #8
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d107      	bne.n	8004a6c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a64:	f043 0304 	orr.w	r3, r3, #4
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a78:	b004      	add	sp, #16
 8004a7a:	4770      	bx	lr
 8004a7c:	803c3800 	.word	0x803c3800

08004a80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	019b      	lsls	r3, r3, #6
 8004a92:	f043 0220 	orr.w	r2, r3, #32
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	4a08      	ldr	r2, [pc, #32]	; (8004ac4 <USB_FlushTxFifo+0x44>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d901      	bls.n	8004aaa <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e006      	b.n	8004ab8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d0f1      	beq.n	8004a9a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	00030d40 	.word	0x00030d40

08004ac8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2210      	movs	r2, #16
 8004ad8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3301      	adds	r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	4a08      	ldr	r2, [pc, #32]	; (8004b04 <USB_FlushRxFifo+0x3c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d901      	bls.n	8004aea <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e006      	b.n	8004af8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b10      	cmp	r3, #16
 8004af4:	d0f1      	beq.n	8004ada <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	00030d40 	.word	0x00030d40

08004b08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	68f9      	ldr	r1, [r7, #12]
 8004b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b087      	sub	sp, #28
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 0306 	and.w	r3, r3, #6
 8004b52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d102      	bne.n	8004b60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	75fb      	strb	r3, [r7, #23]
 8004b5e:	e00a      	b.n	8004b76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d002      	beq.n	8004b6c <USB_GetDevSpeed+0x32>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b06      	cmp	r3, #6
 8004b6a:	d102      	bne.n	8004b72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	75fb      	strb	r3, [r7, #23]
 8004b70:	e001      	b.n	8004b76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b72:	230f      	movs	r3, #15
 8004b74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	785b      	ldrb	r3, [r3, #1]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d13a      	bne.n	8004c16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	68f9      	ldr	r1, [r7, #12]
 8004bba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d155      	bne.n	8004c84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	78db      	ldrb	r3, [r3, #3]
 8004bf2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bf4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	059b      	lsls	r3, r3, #22
 8004bfa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	0151      	lsls	r1, r2, #5
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	440a      	add	r2, r1
 8004c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	e036      	b.n	8004c84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1c:	69da      	ldr	r2, [r3, #28]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	2101      	movs	r1, #1
 8004c28:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2c:	041b      	lsls	r3, r3, #16
 8004c2e:	68f9      	ldr	r1, [r7, #12]
 8004c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c34:	4313      	orrs	r3, r2
 8004c36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d11a      	bne.n	8004c84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	78db      	ldrb	r3, [r3, #3]
 8004c68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c6a:	430b      	orrs	r3, r1
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	0151      	lsls	r1, r2, #5
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	440a      	add	r2, r1
 8004c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
	...

08004c94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	785b      	ldrb	r3, [r3, #1]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d161      	bne.n	8004d74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cc6:	d11f      	bne.n	8004d08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	0151      	lsls	r1, r2, #5
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	440a      	add	r2, r1
 8004cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ce6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	2101      	movs	r1, #1
 8004d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	43db      	mvns	r3, r3
 8004d22:	68f9      	ldr	r1, [r7, #12]
 8004d24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d28:	4013      	ands	r3, r2
 8004d2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	43db      	mvns	r3, r3
 8004d46:	68f9      	ldr	r1, [r7, #12]
 8004d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	0159      	lsls	r1, r3, #5
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	440b      	add	r3, r1
 8004d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4b35      	ldr	r3, [pc, #212]	; (8004e44 <USB_DeactivateEndpoint+0x1b0>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	600b      	str	r3, [r1, #0]
 8004d72:	e060      	b.n	8004e36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d8a:	d11f      	bne.n	8004dcc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004daa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	2101      	movs	r1, #1
 8004dde:	fa01 f303 	lsl.w	r3, r1, r3
 8004de2:	041b      	lsls	r3, r3, #16
 8004de4:	43db      	mvns	r3, r3
 8004de6:	68f9      	ldr	r1, [r7, #12]
 8004de8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dec:	4013      	ands	r3, r2
 8004dee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df6:	69da      	ldr	r2, [r3, #28]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	2101      	movs	r1, #1
 8004e02:	fa01 f303 	lsl.w	r3, r1, r3
 8004e06:	041b      	lsls	r3, r3, #16
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	68f9      	ldr	r1, [r7, #12]
 8004e0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e10:	4013      	ands	r3, r2
 8004e12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	0159      	lsls	r1, r3, #5
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	440b      	add	r3, r1
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <USB_DeactivateEndpoint+0x1b4>)
 8004e32:	4013      	ands	r3, r2
 8004e34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	ec337800 	.word	0xec337800
 8004e48:	eff37800 	.word	0xeff37800

08004e4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	; 0x28
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	4613      	mov	r3, r2
 8004e58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	785b      	ldrb	r3, [r3, #1]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	f040 815c 	bne.w	8005126 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d132      	bne.n	8004edc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	0151      	lsls	r1, r2, #5
 8004e88:	69fa      	ldr	r2, [r7, #28]
 8004e8a:	440a      	add	r2, r1
 8004e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	69fa      	ldr	r2, [r7, #28]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed4:	0cdb      	lsrs	r3, r3, #19
 8004ed6:	04db      	lsls	r3, r3, #19
 8004ed8:	6113      	str	r3, [r2, #16]
 8004eda:	e074      	b.n	8004fc6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	0151      	lsls	r1, r2, #5
 8004eee:	69fa      	ldr	r2, [r7, #28]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef6:	0cdb      	lsrs	r3, r3, #19
 8004ef8:	04db      	lsls	r3, r3, #19
 8004efa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	6959      	ldr	r1, [r3, #20]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	440b      	add	r3, r1
 8004f38:	1e59      	subs	r1, r3, #1
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f42:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f44:	4b9d      	ldr	r3, [pc, #628]	; (80051bc <USB_EPStartXfer+0x370>)
 8004f46:	400b      	ands	r3, r1
 8004f48:	69b9      	ldr	r1, [r7, #24]
 8004f4a:	0148      	lsls	r0, r1, #5
 8004f4c:	69f9      	ldr	r1, [r7, #28]
 8004f4e:	4401      	add	r1, r0
 8004f50:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f54:	4313      	orrs	r3, r2
 8004f56:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f6e:	69b9      	ldr	r1, [r7, #24]
 8004f70:	0148      	lsls	r0, r1, #5
 8004f72:	69f9      	ldr	r1, [r7, #28]
 8004f74:	4401      	add	r1, r0
 8004f76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	78db      	ldrb	r3, [r3, #3]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d11f      	bne.n	8004fc6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	0151      	lsls	r1, r2, #5
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	440a      	add	r2, r1
 8004f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004fa4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fc4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d14b      	bne.n	8005064 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d009      	beq.n	8004fe8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	78db      	ldrb	r3, [r3, #3]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d128      	bne.n	8005042 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d110      	bne.n	8005022 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	0151      	lsls	r1, r2, #5
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	440a      	add	r2, r1
 8005016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800501a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	e00f      	b.n	8005042 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	0151      	lsls	r1, r2, #5
 8005034:	69fa      	ldr	r2, [r7, #28]
 8005036:	440a      	add	r2, r1
 8005038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005040:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	0151      	lsls	r1, r2, #5
 8005054:	69fa      	ldr	r2, [r7, #28]
 8005056:	440a      	add	r2, r1
 8005058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e12f      	b.n	80052c4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	0151      	lsls	r1, r2, #5
 8005076:	69fa      	ldr	r2, [r7, #28]
 8005078:	440a      	add	r2, r1
 800507a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005082:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	78db      	ldrb	r3, [r3, #3]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d015      	beq.n	80050b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8117 	beq.w	80052c4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	2101      	movs	r1, #1
 80050a8:	fa01 f303 	lsl.w	r3, r1, r3
 80050ac:	69f9      	ldr	r1, [r7, #28]
 80050ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050b2:	4313      	orrs	r3, r2
 80050b4:	634b      	str	r3, [r1, #52]	; 0x34
 80050b6:	e105      	b.n	80052c4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d110      	bne.n	80050ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	0151      	lsls	r1, r2, #5
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	440a      	add	r2, r1
 80050de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	e00f      	b.n	800510a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	0151      	lsls	r1, r2, #5
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	440a      	add	r2, r1
 8005100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005108:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	68d9      	ldr	r1, [r3, #12]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	781a      	ldrb	r2, [r3, #0]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	b298      	uxth	r0, r3
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	4603      	mov	r3, r0
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fa2b 	bl	800557a <USB_WritePacket>
 8005124:	e0ce      	b.n	80052c4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005140:	0cdb      	lsrs	r3, r3, #19
 8005142:	04db      	lsls	r3, r3, #19
 8005144:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	0151      	lsls	r1, r2, #5
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	440a      	add	r2, r1
 800515c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005160:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005164:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005168:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d126      	bne.n	80051c0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005188:	69b9      	ldr	r1, [r7, #24]
 800518a:	0148      	lsls	r0, r1, #5
 800518c:	69f9      	ldr	r1, [r7, #28]
 800518e:	4401      	add	r1, r0
 8005190:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005194:	4313      	orrs	r3, r2
 8005196:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051b6:	6113      	str	r3, [r2, #16]
 80051b8:	e036      	b.n	8005228 <USB_EPStartXfer+0x3dc>
 80051ba:	bf00      	nop
 80051bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	695a      	ldr	r2, [r3, #20]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	4413      	add	r3, r2
 80051ca:	1e5a      	subs	r2, r3, #1
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	8afb      	ldrh	r3, [r7, #22]
 80051e6:	04d9      	lsls	r1, r3, #19
 80051e8:	4b39      	ldr	r3, [pc, #228]	; (80052d0 <USB_EPStartXfer+0x484>)
 80051ea:	400b      	ands	r3, r1
 80051ec:	69b9      	ldr	r1, [r7, #24]
 80051ee:	0148      	lsls	r0, r1, #5
 80051f0:	69f9      	ldr	r1, [r7, #28]
 80051f2:	4401      	add	r1, r0
 80051f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051f8:	4313      	orrs	r3, r2
 80051fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005208:	691a      	ldr	r2, [r3, #16]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	8af9      	ldrh	r1, [r7, #22]
 8005210:	fb01 f303 	mul.w	r3, r1, r3
 8005214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005218:	69b9      	ldr	r1, [r7, #24]
 800521a:	0148      	lsls	r0, r1, #5
 800521c:	69f9      	ldr	r1, [r7, #28]
 800521e:	4401      	add	r1, r0
 8005220:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005224:	4313      	orrs	r3, r2
 8005226:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d10d      	bne.n	800524a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d009      	beq.n	800524a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	68d9      	ldr	r1, [r3, #12]
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	460a      	mov	r2, r1
 8005248:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	78db      	ldrb	r3, [r3, #3]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d128      	bne.n	80052a4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d110      	bne.n	8005284 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	0151      	lsls	r1, r2, #5
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	440a      	add	r2, r1
 8005278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800527c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	e00f      	b.n	80052a4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	440a      	add	r2, r1
 800529a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800529e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	1ff80000 	.word	0x1ff80000

080052d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	4613      	mov	r3, r2
 80052e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	f040 80cd 	bne.w	8005490 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d132      	bne.n	8005364 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	440a      	add	r2, r1
 8005314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005318:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800531c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005320:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	440a      	add	r2, r1
 8005338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005340:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	0151      	lsls	r1, r2, #5
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	440a      	add	r2, r1
 8005358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800535c:	0cdb      	lsrs	r3, r3, #19
 800535e:	04db      	lsls	r3, r3, #19
 8005360:	6113      	str	r3, [r2, #16]
 8005362:	e04e      	b.n	8005402 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	440a      	add	r2, r1
 800537a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537e:	0cdb      	lsrs	r3, r3, #19
 8005380:	04db      	lsls	r3, r3, #19
 8005382:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	440a      	add	r2, r1
 800539a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	695a      	ldr	r2, [r3, #20]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d903      	bls.n	80053bc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e8:	691a      	ldr	r2, [r3, #16]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f2:	6939      	ldr	r1, [r7, #16]
 80053f4:	0148      	lsls	r0, r1, #5
 80053f6:	6979      	ldr	r1, [r7, #20]
 80053f8:	4401      	add	r1, r0
 80053fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053fe:	4313      	orrs	r3, r2
 8005400:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d11e      	bne.n	8005446 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d009      	beq.n	8005424 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541c:	461a      	mov	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	440a      	add	r2, r1
 800543a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800543e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	e092      	b.n	800556c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	0151      	lsls	r1, r2, #5
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	440a      	add	r2, r1
 800545c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005460:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005464:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d07e      	beq.n	800556c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	2101      	movs	r1, #1
 8005480:	fa01 f303 	lsl.w	r3, r1, r3
 8005484:	6979      	ldr	r1, [r7, #20]
 8005486:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800548a:	4313      	orrs	r3, r2
 800548c:	634b      	str	r3, [r1, #52]	; 0x34
 800548e:	e06d      	b.n	800556c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	0151      	lsls	r1, r2, #5
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	440a      	add	r2, r1
 80054a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054aa:	0cdb      	lsrs	r3, r3, #19
 80054ac:	04db      	lsls	r3, r3, #19
 80054ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	0151      	lsls	r1, r2, #5
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	440a      	add	r2, r1
 80054c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054d2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005502:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800551a:	6939      	ldr	r1, [r7, #16]
 800551c:	0148      	lsls	r0, r1, #5
 800551e:	6979      	ldr	r1, [r7, #20]
 8005520:	4401      	add	r1, r0
 8005522:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005526:	4313      	orrs	r3, r2
 8005528:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d10d      	bne.n	800554c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d009      	beq.n	800554c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	68d9      	ldr	r1, [r3, #12]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005548:	460a      	mov	r2, r1
 800554a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	0151      	lsls	r1, r2, #5
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	440a      	add	r2, r1
 8005562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005566:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800556a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800557a:	b480      	push	{r7}
 800557c:	b089      	sub	sp, #36	; 0x24
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	4611      	mov	r1, r2
 8005586:	461a      	mov	r2, r3
 8005588:	460b      	mov	r3, r1
 800558a:	71fb      	strb	r3, [r7, #7]
 800558c:	4613      	mov	r3, r2
 800558e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005598:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800559c:	2b00      	cmp	r3, #0
 800559e:	d123      	bne.n	80055e8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055a0:	88bb      	ldrh	r3, [r7, #4]
 80055a2:	3303      	adds	r3, #3
 80055a4:	089b      	lsrs	r3, r3, #2
 80055a6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055a8:	2300      	movs	r3, #0
 80055aa:	61bb      	str	r3, [r7, #24]
 80055ac:	e018      	b.n	80055e0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	031a      	lsls	r2, r3, #12
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ba:	461a      	mov	r2, r3
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	3301      	adds	r3, #1
 80055c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	3301      	adds	r3, #1
 80055cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	3301      	adds	r3, #1
 80055d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	3301      	adds	r3, #1
 80055d8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	3301      	adds	r3, #1
 80055de:	61bb      	str	r3, [r7, #24]
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d3e2      	bcc.n	80055ae <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3724      	adds	r7, #36	; 0x24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b08b      	sub	sp, #44	; 0x2c
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	4613      	mov	r3, r2
 8005602:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800560c:	88fb      	ldrh	r3, [r7, #6]
 800560e:	089b      	lsrs	r3, r3, #2
 8005610:	b29b      	uxth	r3, r3
 8005612:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005614:	88fb      	ldrh	r3, [r7, #6]
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800561c:	2300      	movs	r3, #0
 800561e:	623b      	str	r3, [r7, #32]
 8005620:	e014      	b.n	800564c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	601a      	str	r2, [r3, #0]
    pDest++;
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	3301      	adds	r3, #1
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	3301      	adds	r3, #1
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	3301      	adds	r3, #1
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	3301      	adds	r3, #1
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	3301      	adds	r3, #1
 800564a:	623b      	str	r3, [r7, #32]
 800564c:	6a3a      	ldr	r2, [r7, #32]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	429a      	cmp	r2, r3
 8005652:	d3e6      	bcc.n	8005622 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005654:	8bfb      	ldrh	r3, [r7, #30]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d01e      	beq.n	8005698 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005664:	461a      	mov	r2, r3
 8005666:	f107 0310 	add.w	r3, r7, #16
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	b2db      	uxtb	r3, r3
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	fa22 f303 	lsr.w	r3, r2, r3
 800567a:	b2da      	uxtb	r2, r3
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	701a      	strb	r2, [r3, #0]
      i++;
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	3301      	adds	r3, #1
 8005684:	623b      	str	r3, [r7, #32]
      pDest++;
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	3301      	adds	r3, #1
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800568c:	8bfb      	ldrh	r3, [r7, #30]
 800568e:	3b01      	subs	r3, #1
 8005690:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005692:	8bfb      	ldrh	r3, [r7, #30]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1ea      	bne.n	800566e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800569a:	4618      	mov	r0, r3
 800569c:	372c      	adds	r7, #44	; 0x2c
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b085      	sub	sp, #20
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	785b      	ldrb	r3, [r3, #1]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d12c      	bne.n	800571c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	db12      	blt.n	80056fa <USB_EPSetStall+0x54>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00f      	beq.n	80056fa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	0151      	lsls	r1, r2, #5
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	440a      	add	r2, r1
 80056f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056f8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	0151      	lsls	r1, r2, #5
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	440a      	add	r2, r1
 8005710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005714:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	e02b      	b.n	8005774 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	db12      	blt.n	8005754 <USB_EPSetStall+0xae>
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00f      	beq.n	8005754 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	0151      	lsls	r1, r2, #5
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	440a      	add	r2, r1
 800574a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800574e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005752:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	0151      	lsls	r1, r2, #5
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	440a      	add	r2, r1
 800576a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800576e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005772:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005782:	b480      	push	{r7}
 8005784:	b085      	sub	sp, #20
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	785b      	ldrb	r3, [r3, #1]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d128      	bne.n	80057f0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	0151      	lsls	r1, r2, #5
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	440a      	add	r2, r1
 80057b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	78db      	ldrb	r3, [r3, #3]
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d003      	beq.n	80057ce <USB_EPClearStall+0x4c>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	78db      	ldrb	r3, [r3, #3]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d138      	bne.n	8005840 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	0151      	lsls	r1, r2, #5
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	440a      	add	r2, r1
 80057e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	e027      	b.n	8005840 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	0151      	lsls	r1, r2, #5
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	440a      	add	r2, r1
 8005806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800580a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800580e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	78db      	ldrb	r3, [r3, #3]
 8005814:	2b03      	cmp	r3, #3
 8005816:	d003      	beq.n	8005820 <USB_EPClearStall+0x9e>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	78db      	ldrb	r3, [r3, #3]
 800581c:	2b02      	cmp	r3, #2
 800581e:	d10f      	bne.n	8005840 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	0151      	lsls	r1, r2, #5
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	440a      	add	r2, r1
 8005836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800583a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800583e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800584e:	b480      	push	{r7}
 8005850:	b085      	sub	sp, #20
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	460b      	mov	r3, r1
 8005858:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800586c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005870:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	78fb      	ldrb	r3, [r7, #3]
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005882:	68f9      	ldr	r1, [r7, #12]
 8005884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005888:	4313      	orrs	r3, r2
 800588a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800589a:	b480      	push	{r7}
 800589c:	b085      	sub	sp, #20
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058b4:	f023 0303 	bic.w	r3, r3, #3
 80058b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058c8:	f023 0302 	bic.w	r3, r3, #2
 80058cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058f6:	f023 0303 	bic.w	r3, r3, #3
 80058fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800590a:	f043 0302 	orr.w	r3, r3, #2
 800590e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800591e:	b480      	push	{r7}
 8005920:	b085      	sub	sp, #20
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4013      	ands	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005936:	68fb      	ldr	r3, [r7, #12]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	4013      	ands	r3, r2
 8005966:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	0c1b      	lsrs	r3, r3, #16
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	4013      	ands	r3, r2
 800599a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	b29b      	uxth	r3, r3
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80059bc:	78fb      	ldrb	r3, [r7, #3]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	4013      	ands	r3, r2
 80059d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059da:	68bb      	ldr	r3, [r7, #8]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
 8005a18:	01db      	lsls	r3, r3, #7
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a22:	78fb      	ldrb	r3, [r7, #3]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4013      	ands	r3, r2
 8005a34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a36:	68bb      	ldr	r3, [r7, #8]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	f003 0301 	and.w	r3, r3, #1
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a7a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a7e:	f023 0307 	bic.w	r3, r3, #7
 8005a82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
	...

08005aa8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	333c      	adds	r3, #60	; 0x3c
 8005abe:	3304      	adds	r3, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	4a26      	ldr	r2, [pc, #152]	; (8005b60 <USB_EP0_OutStart+0xb8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d90a      	bls.n	8005ae2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005adc:	d101      	bne.n	8005ae2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	e037      	b.n	8005b52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2300      	movs	r3, #0
 8005aec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005afc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b10:	f043 0318 	orr.w	r3, r3, #24
 8005b14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005b28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b2a:	7afb      	ldrb	r3, [r7, #11]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d10f      	bne.n	8005b50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b36:	461a      	mov	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	371c      	adds	r7, #28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	4f54300a 	.word	0x4f54300a

08005b64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3301      	adds	r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	4a13      	ldr	r2, [pc, #76]	; (8005bc4 <USB_CoreReset+0x60>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d901      	bls.n	8005b80 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e01a      	b.n	8005bb6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	daf3      	bge.n	8005b70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f043 0201 	orr.w	r2, r3, #1
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	4a09      	ldr	r2, [pc, #36]	; (8005bc4 <USB_CoreReset+0x60>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d901      	bls.n	8005ba8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e006      	b.n	8005bb6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d0f1      	beq.n	8005b98 <USB_CoreReset+0x34>

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	00030d40 	.word	0x00030d40

08005bc8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005bd4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005bd8:	f002 f96a 	bl	8007eb0 <USBD_static_malloc>
 8005bdc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d105      	bne.n	8005bf0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005bec:	2302      	movs	r3, #2
 8005bee:	e066      	b.n	8005cbe <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	7c1b      	ldrb	r3, [r3, #16]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d119      	bne.n	8005c34 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c04:	2202      	movs	r2, #2
 8005c06:	2181      	movs	r1, #129	; 0x81
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f002 f82e 	bl	8007c6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c18:	2202      	movs	r2, #2
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f002 f824 	bl	8007c6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2210      	movs	r2, #16
 8005c2e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005c32:	e016      	b.n	8005c62 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c34:	2340      	movs	r3, #64	; 0x40
 8005c36:	2202      	movs	r2, #2
 8005c38:	2181      	movs	r1, #129	; 0x81
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f002 f815 	bl	8007c6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c46:	2340      	movs	r3, #64	; 0x40
 8005c48:	2202      	movs	r2, #2
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f002 f80c 	bl	8007c6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2210      	movs	r2, #16
 8005c5e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005c62:	2308      	movs	r3, #8
 8005c64:	2203      	movs	r2, #3
 8005c66:	2182      	movs	r1, #130	; 0x82
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f001 fffe 	bl	8007c6a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	7c1b      	ldrb	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d109      	bne.n	8005cac <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f002 f8cf 	bl	8007e48 <USBD_LL_PrepareReceive>
 8005caa:	e007      	b.n	8005cbc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cb2:	2340      	movs	r3, #64	; 0x40
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f002 f8c6 	bl	8007e48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b082      	sub	sp, #8
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005cd2:	2181      	movs	r1, #129	; 0x81
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f001 ffee 	bl	8007cb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f001 ffe7 	bl	8007cb6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005cf0:	2182      	movs	r1, #130	; 0x82
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f001 ffdf 	bl	8007cb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00e      	beq.n	8005d30 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d22:	4618      	mov	r0, r3
 8005d24:	f002 f8d2 	bl	8007ecc <USBD_static_free>
    pdev->pClassData = NULL;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d4c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e0af      	b.n	8005ec4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d03f      	beq.n	8005df0 <USBD_CDC_Setup+0xb4>
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	f040 809f 	bne.w	8005eb4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	88db      	ldrh	r3, [r3, #6]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d02e      	beq.n	8005ddc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	b25b      	sxtb	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	da16      	bge.n	8005db6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005d94:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	88d2      	ldrh	r2, [r2, #6]
 8005d9a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	88db      	ldrh	r3, [r3, #6]
 8005da0:	2b07      	cmp	r3, #7
 8005da2:	bf28      	it	cs
 8005da4:	2307      	movcs	r3, #7
 8005da6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	89fa      	ldrh	r2, [r7, #14]
 8005dac:	4619      	mov	r1, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f001 fb19 	bl	80073e6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005db4:	e085      	b.n	8005ec2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	785a      	ldrb	r2, [r3, #1]
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	88db      	ldrh	r3, [r3, #6]
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005dcc:	6939      	ldr	r1, [r7, #16]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	88db      	ldrh	r3, [r3, #6]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f001 fb32 	bl	800743e <USBD_CtlPrepareRx>
      break;
 8005dda:	e072      	b.n	8005ec2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	7850      	ldrb	r0, [r2, #1]
 8005de8:	2200      	movs	r2, #0
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	4798      	blx	r3
      break;
 8005dee:	e068      	b.n	8005ec2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	2b0b      	cmp	r3, #11
 8005df6:	d852      	bhi.n	8005e9e <USBD_CDC_Setup+0x162>
 8005df8:	a201      	add	r2, pc, #4	; (adr r2, 8005e00 <USBD_CDC_Setup+0xc4>)
 8005dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfe:	bf00      	nop
 8005e00:	08005e31 	.word	0x08005e31
 8005e04:	08005ead 	.word	0x08005ead
 8005e08:	08005e9f 	.word	0x08005e9f
 8005e0c:	08005e9f 	.word	0x08005e9f
 8005e10:	08005e9f 	.word	0x08005e9f
 8005e14:	08005e9f 	.word	0x08005e9f
 8005e18:	08005e9f 	.word	0x08005e9f
 8005e1c:	08005e9f 	.word	0x08005e9f
 8005e20:	08005e9f 	.word	0x08005e9f
 8005e24:	08005e9f 	.word	0x08005e9f
 8005e28:	08005e5b 	.word	0x08005e5b
 8005e2c:	08005e85 	.word	0x08005e85
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d107      	bne.n	8005e4c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005e3c:	f107 030a 	add.w	r3, r7, #10
 8005e40:	2202      	movs	r2, #2
 8005e42:	4619      	mov	r1, r3
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f001 face 	bl	80073e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e4a:	e032      	b.n	8005eb2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f001 fa58 	bl	8007304 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e54:	2303      	movs	r3, #3
 8005e56:	75fb      	strb	r3, [r7, #23]
          break;
 8005e58:	e02b      	b.n	8005eb2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d107      	bne.n	8005e76 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e66:	f107 030d 	add.w	r3, r7, #13
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f001 fab9 	bl	80073e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e74:	e01d      	b.n	8005eb2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f001 fa43 	bl	8007304 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	75fb      	strb	r3, [r7, #23]
          break;
 8005e82:	e016      	b.n	8005eb2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d00f      	beq.n	8005eb0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f001 fa36 	bl	8007304 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005e9c:	e008      	b.n	8005eb0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f001 fa2f 	bl	8007304 <USBD_CtlError>
          ret = USBD_FAIL;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	75fb      	strb	r3, [r7, #23]
          break;
 8005eaa:	e002      	b.n	8005eb2 <USBD_CDC_Setup+0x176>
          break;
 8005eac:	bf00      	nop
 8005eae:	e008      	b.n	8005ec2 <USBD_CDC_Setup+0x186>
          break;
 8005eb0:	bf00      	nop
      }
      break;
 8005eb2:	e006      	b.n	8005ec2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f001 fa24 	bl	8007304 <USBD_CtlError>
      ret = USBD_FAIL;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8005ec0:	bf00      	nop
  }

  return (uint8_t)ret;
 8005ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005ede:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e04f      	b.n	8005f8e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ef4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005ef6:	78fa      	ldrb	r2, [r7, #3]
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	4613      	mov	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	440b      	add	r3, r1
 8005f04:	3318      	adds	r3, #24
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d029      	beq.n	8005f60 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005f0c:	78fa      	ldrb	r2, [r7, #3]
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	4613      	mov	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	440b      	add	r3, r1
 8005f1a:	3318      	adds	r3, #24
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	78f9      	ldrb	r1, [r7, #3]
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	460b      	mov	r3, r1
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	1a5b      	subs	r3, r3, r1
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4403      	add	r3, r0
 8005f2c:	3344      	adds	r3, #68	; 0x44
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f34:	fb03 f301 	mul.w	r3, r3, r1
 8005f38:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d110      	bne.n	8005f60 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005f3e:	78fa      	ldrb	r2, [r7, #3]
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	4613      	mov	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	3318      	adds	r3, #24
 8005f4e:	2200      	movs	r2, #0
 8005f50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f52:	78f9      	ldrb	r1, [r7, #3]
 8005f54:	2300      	movs	r3, #0
 8005f56:	2200      	movs	r2, #0
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f001 ff54 	bl	8007e06 <USBD_LL_Transmit>
 8005f5e:	e015      	b.n	8005f8c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00b      	beq.n	8005f8c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005f88:	78fa      	ldrb	r2, [r7, #3]
 8005f8a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fa8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e015      	b.n	8005fe4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 ff64 	bl	8007e8a <USBD_LL_GetRxDataSize>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005fde:	4611      	mov	r1, r2
 8005fe0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ffa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006002:	2303      	movs	r3, #3
 8006004:	e01b      	b.n	800603e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d015      	beq.n	800603c <USBD_CDC_EP0_RxReady+0x50>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006016:	2bff      	cmp	r3, #255	; 0xff
 8006018:	d010      	beq.n	800603c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006028:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006030:	b292      	uxth	r2, r2
 8006032:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	22ff      	movs	r2, #255	; 0xff
 8006038:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2243      	movs	r2, #67	; 0x43
 8006054:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006056:	4b03      	ldr	r3, [pc, #12]	; (8006064 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006058:	4618      	mov	r0, r3
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	20000094 	.word	0x20000094

08006068 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2243      	movs	r2, #67	; 0x43
 8006074:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006076:	4b03      	ldr	r3, [pc, #12]	; (8006084 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006078:	4618      	mov	r0, r3
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	20000050 	.word	0x20000050

08006088 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2243      	movs	r2, #67	; 0x43
 8006094:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006096:	4b03      	ldr	r3, [pc, #12]	; (80060a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006098:	4618      	mov	r0, r3
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	200000d8 	.word	0x200000d8

080060a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	220a      	movs	r2, #10
 80060b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80060b6:	4b03      	ldr	r3, [pc, #12]	; (80060c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	2000000c 	.word	0x2000000c

080060c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80060d8:	2303      	movs	r3, #3
 80060da:	e004      	b.n	80060e6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b087      	sub	sp, #28
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	60f8      	str	r0, [r7, #12]
 80060fa:	60b9      	str	r1, [r7, #8]
 80060fc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006104:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800610c:	2303      	movs	r3, #3
 800610e:	e008      	b.n	8006122 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	371c      	adds	r7, #28
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800612e:	b480      	push	{r7}
 8006130:	b085      	sub	sp, #20
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800613e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006146:	2303      	movs	r3, #3
 8006148:	e004      	b.n	8006154 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800616e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006170:	2301      	movs	r3, #1
 8006172:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800617e:	2303      	movs	r3, #3
 8006180:	e01a      	b.n	80061b8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006188:	2b00      	cmp	r3, #0
 800618a:	d114      	bne.n	80061b6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2201      	movs	r2, #1
 8006190:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80061aa:	2181      	movs	r1, #129	; 0x81
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f001 fe2a 	bl	8007e06 <USBD_LL_Transmit>

    ret = USBD_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80061da:	2303      	movs	r3, #3
 80061dc:	e016      	b.n	800620c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	7c1b      	ldrb	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d109      	bne.n	80061fa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061f0:	2101      	movs	r1, #1
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f001 fe28 	bl	8007e48 <USBD_LL_PrepareReceive>
 80061f8:	e007      	b.n	800620a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006200:	2340      	movs	r3, #64	; 0x40
 8006202:	2101      	movs	r1, #1
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f001 fe1f 	bl	8007e48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	4613      	mov	r3, r2
 8006220:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006228:	2303      	movs	r3, #3
 800622a:	e01f      	b.n	800626c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	79fa      	ldrb	r2, [r7, #7]
 800625e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f001 fc9b 	bl	8007b9c <USBD_LL_Init>
 8006266:	4603      	mov	r3, r0
 8006268:	75fb      	strb	r3, [r7, #23]

  return ret;
 800626a:	7dfb      	ldrb	r3, [r7, #23]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006288:	2303      	movs	r3, #3
 800628a:	e016      	b.n	80062ba <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00b      	beq.n	80062b8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a8:	f107 020e 	add.w	r2, r7, #14
 80062ac:	4610      	mov	r0, r2
 80062ae:	4798      	blx	r3
 80062b0:	4602      	mov	r2, r0
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b082      	sub	sp, #8
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 fcb2 	bl	8007c34 <USBD_LL_Start>
 80062d0:	4603      	mov	r3, r0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80062fc:	2303      	movs	r3, #3
 80062fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006306:	2b00      	cmp	r3, #0
 8006308:	d009      	beq.n	800631e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	78fa      	ldrb	r2, [r7, #3]
 8006314:	4611      	mov	r1, r2
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	4798      	blx	r3
 800631a:	4603      	mov	r3, r0
 800631c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800631e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633a:	2b00      	cmp	r3, #0
 800633c:	d007      	beq.n	800634e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	78fa      	ldrb	r2, [r7, #3]
 8006348:	4611      	mov	r1, r2
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	4798      	blx	r3
  }

  return USBD_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	4618      	mov	r0, r3
 800636c:	f000 ff90 	bl	8007290 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800637e:	461a      	mov	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800638c:	f003 031f 	and.w	r3, r3, #31
 8006390:	2b02      	cmp	r3, #2
 8006392:	d01a      	beq.n	80063ca <USBD_LL_SetupStage+0x72>
 8006394:	2b02      	cmp	r3, #2
 8006396:	d822      	bhi.n	80063de <USBD_LL_SetupStage+0x86>
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <USBD_LL_SetupStage+0x4a>
 800639c:	2b01      	cmp	r3, #1
 800639e:	d00a      	beq.n	80063b6 <USBD_LL_SetupStage+0x5e>
 80063a0:	e01d      	b.n	80063de <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063a8:	4619      	mov	r1, r3
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fa62 	bl	8006874 <USBD_StdDevReq>
 80063b0:	4603      	mov	r3, r0
 80063b2:	73fb      	strb	r3, [r7, #15]
      break;
 80063b4:	e020      	b.n	80063f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063bc:	4619      	mov	r1, r3
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fac6 	bl	8006950 <USBD_StdItfReq>
 80063c4:	4603      	mov	r3, r0
 80063c6:	73fb      	strb	r3, [r7, #15]
      break;
 80063c8:	e016      	b.n	80063f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fb05 	bl	80069e2 <USBD_StdEPReq>
 80063d8:	4603      	mov	r3, r0
 80063da:	73fb      	strb	r3, [r7, #15]
      break;
 80063dc:	e00c      	b.n	80063f8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	4619      	mov	r1, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f001 fc81 	bl	8007cf4 <USBD_LL_StallEP>
 80063f2:	4603      	mov	r3, r0
 80063f4:	73fb      	strb	r3, [r7, #15]
      break;
 80063f6:	bf00      	nop
  }

  return ret;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b086      	sub	sp, #24
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	460b      	mov	r3, r1
 800640c:	607a      	str	r2, [r7, #4]
 800640e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006410:	7afb      	ldrb	r3, [r7, #11]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d138      	bne.n	8006488 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800641c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006424:	2b03      	cmp	r3, #3
 8006426:	d14a      	bne.n	80064be <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	429a      	cmp	r2, r3
 8006432:	d913      	bls.n	800645c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	1ad2      	subs	r2, r2, r3
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	4293      	cmp	r3, r2
 800644c:	bf28      	it	cs
 800644e:	4613      	movcs	r3, r2
 8006450:	461a      	mov	r2, r3
 8006452:	6879      	ldr	r1, [r7, #4]
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f001 f80f 	bl	8007478 <USBD_CtlContinueRx>
 800645a:	e030      	b.n	80064be <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b03      	cmp	r3, #3
 8006466:	d10b      	bne.n	8006480 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f001 f80a 	bl	800749a <USBD_CtlSendStatus>
 8006486:	e01a      	b.n	80064be <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b03      	cmp	r3, #3
 8006492:	d114      	bne.n	80064be <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00e      	beq.n	80064be <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	7afa      	ldrb	r2, [r7, #11]
 80064aa:	4611      	mov	r1, r2
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	4798      	blx	r3
 80064b0:	4603      	mov	r3, r0
 80064b2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80064b4:	7dfb      	ldrb	r3, [r7, #23]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
 80064bc:	e000      	b.n	80064c0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	460b      	mov	r3, r1
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80064d6:	7afb      	ldrb	r3, [r7, #11]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d16b      	bne.n	80065b4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	3314      	adds	r3, #20
 80064e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d156      	bne.n	800659a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d914      	bls.n	8006522 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	1ad2      	subs	r2, r2, r3
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	461a      	mov	r2, r3
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 ff84 	bl	800741c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006514:	2300      	movs	r3, #0
 8006516:	2200      	movs	r2, #0
 8006518:	2100      	movs	r1, #0
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f001 fc94 	bl	8007e48 <USBD_LL_PrepareReceive>
 8006520:	e03b      	b.n	800659a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	429a      	cmp	r2, r3
 800652c:	d11c      	bne.n	8006568 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006536:	429a      	cmp	r2, r3
 8006538:	d316      	bcc.n	8006568 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006544:	429a      	cmp	r2, r3
 8006546:	d20f      	bcs.n	8006568 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006548:	2200      	movs	r2, #0
 800654a:	2100      	movs	r1, #0
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 ff65 	bl	800741c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800655a:	2300      	movs	r3, #0
 800655c:	2200      	movs	r2, #0
 800655e:	2100      	movs	r1, #0
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f001 fc71 	bl	8007e48 <USBD_LL_PrepareReceive>
 8006566:	e018      	b.n	800659a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b03      	cmp	r3, #3
 8006572:	d10b      	bne.n	800658c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d005      	beq.n	800658c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800658c:	2180      	movs	r1, #128	; 0x80
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f001 fbb0 	bl	8007cf4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 ff93 	bl	80074c0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d122      	bne.n	80065ea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f7ff fe98 	bl	80062da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80065b2:	e01a      	b.n	80065ea <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d114      	bne.n	80065ea <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00e      	beq.n	80065ea <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	7afa      	ldrb	r2, [r7, #11]
 80065d6:	4611      	mov	r1, r2
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	4798      	blx	r3
 80065dc:	4603      	mov	r3, r0
 80065de:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80065e0:	7dfb      	ldrb	r3, [r7, #23]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80065e6:	7dfb      	ldrb	r3, [r7, #23]
 80065e8:	e000      	b.n	80065ec <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006624:	2303      	movs	r3, #3
 8006626:	e02f      	b.n	8006688 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00f      	beq.n	8006652 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d009      	beq.n	8006652 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6852      	ldr	r2, [r2, #4]
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	4611      	mov	r1, r2
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006652:	2340      	movs	r3, #64	; 0x40
 8006654:	2200      	movs	r2, #0
 8006656:	2100      	movs	r1, #0
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 fb06 	bl	8007c6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2240      	movs	r2, #64	; 0x40
 800666a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800666e:	2340      	movs	r3, #64	; 0x40
 8006670:	2200      	movs	r2, #0
 8006672:	2180      	movs	r1, #128	; 0x80
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 faf8 	bl	8007c6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2240      	movs	r2, #64	; 0x40
 8006684:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	78fa      	ldrb	r2, [r7, #3]
 80066a0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2204      	movs	r2, #4
 80066ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d106      	bne.n	80066fe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800671e:	2303      	movs	r3, #3
 8006720:	e012      	b.n	8006748 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b03      	cmp	r3, #3
 800672c:	d10b      	bne.n	8006746 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d005      	beq.n	8006746 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	460b      	mov	r3, r1
 800675a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006766:	2303      	movs	r3, #3
 8006768:	e014      	b.n	8006794 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b03      	cmp	r3, #3
 8006774:	d10d      	bne.n	8006792 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	78fa      	ldrb	r2, [r7, #3]
 800678c:	4611      	mov	r1, r2
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e014      	b.n	80067e0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d10d      	bne.n	80067de <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d007      	beq.n	80067de <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	78fa      	ldrb	r2, [r7, #3]
 80067d8:	4611      	mov	r1, r2
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006814:	2b00      	cmp	r3, #0
 8006816:	d009      	beq.n	800682c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6852      	ldr	r2, [r2, #4]
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	4611      	mov	r1, r2
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	4798      	blx	r3
  }

  return USBD_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006836:	b480      	push	{r7}
 8006838:	b087      	sub	sp, #28
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	3301      	adds	r3, #1
 800684c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006854:	8a3b      	ldrh	r3, [r7, #16]
 8006856:	021b      	lsls	r3, r3, #8
 8006858:	b21a      	sxth	r2, r3
 800685a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800685e:	4313      	orrs	r3, r2
 8006860:	b21b      	sxth	r3, r3
 8006862:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006864:	89fb      	ldrh	r3, [r7, #14]
}
 8006866:	4618      	mov	r0, r3
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
	...

08006874 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800688a:	2b40      	cmp	r3, #64	; 0x40
 800688c:	d005      	beq.n	800689a <USBD_StdDevReq+0x26>
 800688e:	2b40      	cmp	r3, #64	; 0x40
 8006890:	d853      	bhi.n	800693a <USBD_StdDevReq+0xc6>
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00b      	beq.n	80068ae <USBD_StdDevReq+0x3a>
 8006896:	2b20      	cmp	r3, #32
 8006898:	d14f      	bne.n	800693a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	4798      	blx	r3
 80068a8:	4603      	mov	r3, r0
 80068aa:	73fb      	strb	r3, [r7, #15]
      break;
 80068ac:	e04a      	b.n	8006944 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	785b      	ldrb	r3, [r3, #1]
 80068b2:	2b09      	cmp	r3, #9
 80068b4:	d83b      	bhi.n	800692e <USBD_StdDevReq+0xba>
 80068b6:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <USBD_StdDevReq+0x48>)
 80068b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068bc:	08006911 	.word	0x08006911
 80068c0:	08006925 	.word	0x08006925
 80068c4:	0800692f 	.word	0x0800692f
 80068c8:	0800691b 	.word	0x0800691b
 80068cc:	0800692f 	.word	0x0800692f
 80068d0:	080068ef 	.word	0x080068ef
 80068d4:	080068e5 	.word	0x080068e5
 80068d8:	0800692f 	.word	0x0800692f
 80068dc:	08006907 	.word	0x08006907
 80068e0:	080068f9 	.word	0x080068f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f9de 	bl	8006ca8 <USBD_GetDescriptor>
          break;
 80068ec:	e024      	b.n	8006938 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fb43 	bl	8006f7c <USBD_SetAddress>
          break;
 80068f6:	e01f      	b.n	8006938 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80068f8:	6839      	ldr	r1, [r7, #0]
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fb82 	bl	8007004 <USBD_SetConfig>
 8006900:	4603      	mov	r3, r0
 8006902:	73fb      	strb	r3, [r7, #15]
          break;
 8006904:	e018      	b.n	8006938 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fc21 	bl	8007150 <USBD_GetConfig>
          break;
 800690e:	e013      	b.n	8006938 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fc52 	bl	80071bc <USBD_GetStatus>
          break;
 8006918:	e00e      	b.n	8006938 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fc81 	bl	8007224 <USBD_SetFeature>
          break;
 8006922:	e009      	b.n	8006938 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006924:	6839      	ldr	r1, [r7, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fc90 	bl	800724c <USBD_ClrFeature>
          break;
 800692c:	e004      	b.n	8006938 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fce7 	bl	8007304 <USBD_CtlError>
          break;
 8006936:	bf00      	nop
      }
      break;
 8006938:	e004      	b.n	8006944 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fce1 	bl	8007304 <USBD_CtlError>
      break;
 8006942:	bf00      	nop
  }

  return ret;
 8006944:	7bfb      	ldrb	r3, [r7, #15]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop

08006950 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006966:	2b40      	cmp	r3, #64	; 0x40
 8006968:	d005      	beq.n	8006976 <USBD_StdItfReq+0x26>
 800696a:	2b40      	cmp	r3, #64	; 0x40
 800696c:	d82f      	bhi.n	80069ce <USBD_StdItfReq+0x7e>
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <USBD_StdItfReq+0x26>
 8006972:	2b20      	cmp	r3, #32
 8006974:	d12b      	bne.n	80069ce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800697c:	b2db      	uxtb	r3, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	2b02      	cmp	r3, #2
 8006982:	d81d      	bhi.n	80069c0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	889b      	ldrh	r3, [r3, #4]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b01      	cmp	r3, #1
 800698c:	d813      	bhi.n	80069b6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	4798      	blx	r3
 800699c:	4603      	mov	r3, r0
 800699e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	88db      	ldrh	r3, [r3, #6]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d110      	bne.n	80069ca <USBD_StdItfReq+0x7a>
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10d      	bne.n	80069ca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fd73 	bl	800749a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80069b4:	e009      	b.n	80069ca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fca3 	bl	8007304 <USBD_CtlError>
          break;
 80069be:	e004      	b.n	80069ca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fc9e 	bl	8007304 <USBD_CtlError>
          break;
 80069c8:	e000      	b.n	80069cc <USBD_StdItfReq+0x7c>
          break;
 80069ca:	bf00      	nop
      }
      break;
 80069cc:	e004      	b.n	80069d8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fc97 	bl	8007304 <USBD_CtlError>
      break;
 80069d6:	bf00      	nop
  }

  return ret;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	889b      	ldrh	r3, [r3, #4]
 80069f4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069fe:	2b40      	cmp	r3, #64	; 0x40
 8006a00:	d007      	beq.n	8006a12 <USBD_StdEPReq+0x30>
 8006a02:	2b40      	cmp	r3, #64	; 0x40
 8006a04:	f200 8145 	bhi.w	8006c92 <USBD_StdEPReq+0x2b0>
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00c      	beq.n	8006a26 <USBD_StdEPReq+0x44>
 8006a0c:	2b20      	cmp	r3, #32
 8006a0e:	f040 8140 	bne.w	8006c92 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	4798      	blx	r3
 8006a20:	4603      	mov	r3, r0
 8006a22:	73fb      	strb	r3, [r7, #15]
      break;
 8006a24:	e13a      	b.n	8006c9c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	785b      	ldrb	r3, [r3, #1]
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d007      	beq.n	8006a3e <USBD_StdEPReq+0x5c>
 8006a2e:	2b03      	cmp	r3, #3
 8006a30:	f300 8129 	bgt.w	8006c86 <USBD_StdEPReq+0x2a4>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d07f      	beq.n	8006b38 <USBD_StdEPReq+0x156>
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d03c      	beq.n	8006ab6 <USBD_StdEPReq+0xd4>
 8006a3c:	e123      	b.n	8006c86 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d002      	beq.n	8006a50 <USBD_StdEPReq+0x6e>
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d016      	beq.n	8006a7c <USBD_StdEPReq+0x9a>
 8006a4e:	e02c      	b.n	8006aaa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00d      	beq.n	8006a72 <USBD_StdEPReq+0x90>
 8006a56:	7bbb      	ldrb	r3, [r7, #14]
 8006a58:	2b80      	cmp	r3, #128	; 0x80
 8006a5a:	d00a      	beq.n	8006a72 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a5c:	7bbb      	ldrb	r3, [r7, #14]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 f947 	bl	8007cf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a66:	2180      	movs	r1, #128	; 0x80
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 f943 	bl	8007cf4 <USBD_LL_StallEP>
 8006a6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a70:	e020      	b.n	8006ab4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fc45 	bl	8007304 <USBD_CtlError>
              break;
 8006a7a:	e01b      	b.n	8006ab4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	885b      	ldrh	r3, [r3, #2]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10e      	bne.n	8006aa2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a84:	7bbb      	ldrb	r3, [r7, #14]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00b      	beq.n	8006aa2 <USBD_StdEPReq+0xc0>
 8006a8a:	7bbb      	ldrb	r3, [r7, #14]
 8006a8c:	2b80      	cmp	r3, #128	; 0x80
 8006a8e:	d008      	beq.n	8006aa2 <USBD_StdEPReq+0xc0>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	88db      	ldrh	r3, [r3, #6]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d104      	bne.n	8006aa2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a98:	7bbb      	ldrb	r3, [r7, #14]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 f929 	bl	8007cf4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fcf9 	bl	800749a <USBD_CtlSendStatus>

              break;
 8006aa8:	e004      	b.n	8006ab4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fc29 	bl	8007304 <USBD_CtlError>
              break;
 8006ab2:	bf00      	nop
          }
          break;
 8006ab4:	e0ec      	b.n	8006c90 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d002      	beq.n	8006ac8 <USBD_StdEPReq+0xe6>
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d016      	beq.n	8006af4 <USBD_StdEPReq+0x112>
 8006ac6:	e030      	b.n	8006b2a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00d      	beq.n	8006aea <USBD_StdEPReq+0x108>
 8006ace:	7bbb      	ldrb	r3, [r7, #14]
 8006ad0:	2b80      	cmp	r3, #128	; 0x80
 8006ad2:	d00a      	beq.n	8006aea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ad4:	7bbb      	ldrb	r3, [r7, #14]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 f90b 	bl	8007cf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ade:	2180      	movs	r1, #128	; 0x80
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f001 f907 	bl	8007cf4 <USBD_LL_StallEP>
 8006ae6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ae8:	e025      	b.n	8006b36 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fc09 	bl	8007304 <USBD_CtlError>
              break;
 8006af2:	e020      	b.n	8006b36 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	885b      	ldrh	r3, [r3, #2]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d11b      	bne.n	8006b34 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006afc:	7bbb      	ldrb	r3, [r7, #14]
 8006afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d004      	beq.n	8006b10 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b06:	7bbb      	ldrb	r3, [r7, #14]
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f001 f911 	bl	8007d32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fcc2 	bl	800749a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	4798      	blx	r3
 8006b24:	4603      	mov	r3, r0
 8006b26:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006b28:	e004      	b.n	8006b34 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fbe9 	bl	8007304 <USBD_CtlError>
              break;
 8006b32:	e000      	b.n	8006b36 <USBD_StdEPReq+0x154>
              break;
 8006b34:	bf00      	nop
          }
          break;
 8006b36:	e0ab      	b.n	8006c90 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d002      	beq.n	8006b4a <USBD_StdEPReq+0x168>
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	d032      	beq.n	8006bae <USBD_StdEPReq+0x1cc>
 8006b48:	e097      	b.n	8006c7a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d007      	beq.n	8006b60 <USBD_StdEPReq+0x17e>
 8006b50:	7bbb      	ldrb	r3, [r7, #14]
 8006b52:	2b80      	cmp	r3, #128	; 0x80
 8006b54:	d004      	beq.n	8006b60 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fbd3 	bl	8007304 <USBD_CtlError>
                break;
 8006b5e:	e091      	b.n	8006c84 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	da0b      	bge.n	8006b80 <USBD_StdEPReq+0x19e>
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b6e:	4613      	mov	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	3310      	adds	r3, #16
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	e00b      	b.n	8006b98 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b80:	7bbb      	ldrb	r3, [r7, #14]
 8006b82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	4413      	add	r3, r2
 8006b96:	3304      	adds	r3, #4
 8006b98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fc1d 	bl	80073e6 <USBD_CtlSendData>
              break;
 8006bac:	e06a      	b.n	8006c84 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006bae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	da11      	bge.n	8006bda <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006bb6:	7bbb      	ldrb	r3, [r7, #14]
 8006bb8:	f003 020f 	and.w	r2, r3, #15
 8006bbc:	6879      	ldr	r1, [r7, #4]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	440b      	add	r3, r1
 8006bc8:	3324      	adds	r3, #36	; 0x24
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d117      	bne.n	8006c00 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fb96 	bl	8007304 <USBD_CtlError>
                  break;
 8006bd8:	e054      	b.n	8006c84 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006bda:	7bbb      	ldrb	r3, [r7, #14]
 8006bdc:	f003 020f 	and.w	r2, r3, #15
 8006be0:	6879      	ldr	r1, [r7, #4]
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	440b      	add	r3, r1
 8006bec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d104      	bne.n	8006c00 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fb83 	bl	8007304 <USBD_CtlError>
                  break;
 8006bfe:	e041      	b.n	8006c84 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	da0b      	bge.n	8006c20 <USBD_StdEPReq+0x23e>
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	3310      	adds	r3, #16
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	e00b      	b.n	8006c38 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c26:	4613      	mov	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	4413      	add	r3, r2
 8006c36:	3304      	adds	r3, #4
 8006c38:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c3a:	7bbb      	ldrb	r3, [r7, #14]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <USBD_StdEPReq+0x264>
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	2b80      	cmp	r3, #128	; 0x80
 8006c44:	d103      	bne.n	8006c4e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	e00e      	b.n	8006c6c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c4e:	7bbb      	ldrb	r3, [r7, #14]
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f001 f88c 	bl	8007d70 <USBD_LL_IsStallEP>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2201      	movs	r2, #1
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	e002      	b.n	8006c6c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fbb7 	bl	80073e6 <USBD_CtlSendData>
              break;
 8006c78:	e004      	b.n	8006c84 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fb41 	bl	8007304 <USBD_CtlError>
              break;
 8006c82:	bf00      	nop
          }
          break;
 8006c84:	e004      	b.n	8006c90 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fb3b 	bl	8007304 <USBD_CtlError>
          break;
 8006c8e:	bf00      	nop
      }
      break;
 8006c90:	e004      	b.n	8006c9c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fb35 	bl	8007304 <USBD_CtlError>
      break;
 8006c9a:	bf00      	nop
  }

  return ret;
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
	...

08006ca8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	885b      	ldrh	r3, [r3, #2]
 8006cc2:	0a1b      	lsrs	r3, r3, #8
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	2b06      	cmp	r3, #6
 8006cca:	f200 8128 	bhi.w	8006f1e <USBD_GetDescriptor+0x276>
 8006cce:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <USBD_GetDescriptor+0x2c>)
 8006cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd4:	08006cf1 	.word	0x08006cf1
 8006cd8:	08006d09 	.word	0x08006d09
 8006cdc:	08006d49 	.word	0x08006d49
 8006ce0:	08006f1f 	.word	0x08006f1f
 8006ce4:	08006f1f 	.word	0x08006f1f
 8006ce8:	08006ebf 	.word	0x08006ebf
 8006cec:	08006eeb 	.word	0x08006eeb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	7c12      	ldrb	r2, [r2, #16]
 8006cfc:	f107 0108 	add.w	r1, r7, #8
 8006d00:	4610      	mov	r0, r2
 8006d02:	4798      	blx	r3
 8006d04:	60f8      	str	r0, [r7, #12]
      break;
 8006d06:	e112      	b.n	8006f2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	7c1b      	ldrb	r3, [r3, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10d      	bne.n	8006d2c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d18:	f107 0208 	add.w	r2, r7, #8
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	4798      	blx	r3
 8006d20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	3301      	adds	r3, #1
 8006d26:	2202      	movs	r2, #2
 8006d28:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d2a:	e100      	b.n	8006f2e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	f107 0208 	add.w	r2, r7, #8
 8006d38:	4610      	mov	r0, r2
 8006d3a:	4798      	blx	r3
 8006d3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	3301      	adds	r3, #1
 8006d42:	2202      	movs	r2, #2
 8006d44:	701a      	strb	r2, [r3, #0]
      break;
 8006d46:	e0f2      	b.n	8006f2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	885b      	ldrh	r3, [r3, #2]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b05      	cmp	r3, #5
 8006d50:	f200 80ac 	bhi.w	8006eac <USBD_GetDescriptor+0x204>
 8006d54:	a201      	add	r2, pc, #4	; (adr r2, 8006d5c <USBD_GetDescriptor+0xb4>)
 8006d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5a:	bf00      	nop
 8006d5c:	08006d75 	.word	0x08006d75
 8006d60:	08006da9 	.word	0x08006da9
 8006d64:	08006ddd 	.word	0x08006ddd
 8006d68:	08006e11 	.word	0x08006e11
 8006d6c:	08006e45 	.word	0x08006e45
 8006d70:	08006e79 	.word	0x08006e79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00b      	beq.n	8006d98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	7c12      	ldrb	r2, [r2, #16]
 8006d8c:	f107 0108 	add.w	r1, r7, #8
 8006d90:	4610      	mov	r0, r2
 8006d92:	4798      	blx	r3
 8006d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d96:	e091      	b.n	8006ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fab2 	bl	8007304 <USBD_CtlError>
            err++;
 8006da0:	7afb      	ldrb	r3, [r7, #11]
 8006da2:	3301      	adds	r3, #1
 8006da4:	72fb      	strb	r3, [r7, #11]
          break;
 8006da6:	e089      	b.n	8006ebc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00b      	beq.n	8006dcc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	7c12      	ldrb	r2, [r2, #16]
 8006dc0:	f107 0108 	add.w	r1, r7, #8
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	4798      	blx	r3
 8006dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dca:	e077      	b.n	8006ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fa98 	bl	8007304 <USBD_CtlError>
            err++;
 8006dd4:	7afb      	ldrb	r3, [r7, #11]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dda:	e06f      	b.n	8006ebc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00b      	beq.n	8006e00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	7c12      	ldrb	r2, [r2, #16]
 8006df4:	f107 0108 	add.w	r1, r7, #8
 8006df8:	4610      	mov	r0, r2
 8006dfa:	4798      	blx	r3
 8006dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dfe:	e05d      	b.n	8006ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fa7e 	bl	8007304 <USBD_CtlError>
            err++;
 8006e08:	7afb      	ldrb	r3, [r7, #11]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e0e:	e055      	b.n	8006ebc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00b      	beq.n	8006e34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	7c12      	ldrb	r2, [r2, #16]
 8006e28:	f107 0108 	add.w	r1, r7, #8
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	4798      	blx	r3
 8006e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e32:	e043      	b.n	8006ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fa64 	bl	8007304 <USBD_CtlError>
            err++;
 8006e3c:	7afb      	ldrb	r3, [r7, #11]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	72fb      	strb	r3, [r7, #11]
          break;
 8006e42:	e03b      	b.n	8006ebc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00b      	beq.n	8006e68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	7c12      	ldrb	r2, [r2, #16]
 8006e5c:	f107 0108 	add.w	r1, r7, #8
 8006e60:	4610      	mov	r0, r2
 8006e62:	4798      	blx	r3
 8006e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e66:	e029      	b.n	8006ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa4a 	bl	8007304 <USBD_CtlError>
            err++;
 8006e70:	7afb      	ldrb	r3, [r7, #11]
 8006e72:	3301      	adds	r3, #1
 8006e74:	72fb      	strb	r3, [r7, #11]
          break;
 8006e76:	e021      	b.n	8006ebc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00b      	beq.n	8006e9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	7c12      	ldrb	r2, [r2, #16]
 8006e90:	f107 0108 	add.w	r1, r7, #8
 8006e94:	4610      	mov	r0, r2
 8006e96:	4798      	blx	r3
 8006e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e9a:	e00f      	b.n	8006ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fa30 	bl	8007304 <USBD_CtlError>
            err++;
 8006ea4:	7afb      	ldrb	r3, [r7, #11]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eaa:	e007      	b.n	8006ebc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fa28 	bl	8007304 <USBD_CtlError>
          err++;
 8006eb4:	7afb      	ldrb	r3, [r7, #11]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006eba:	bf00      	nop
      }
      break;
 8006ebc:	e037      	b.n	8006f2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	7c1b      	ldrb	r3, [r3, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d109      	bne.n	8006eda <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ece:	f107 0208 	add.w	r2, r7, #8
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	4798      	blx	r3
 8006ed6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ed8:	e029      	b.n	8006f2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fa11 	bl	8007304 <USBD_CtlError>
        err++;
 8006ee2:	7afb      	ldrb	r3, [r7, #11]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ee8:	e021      	b.n	8006f2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	7c1b      	ldrb	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10d      	bne.n	8006f0e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efa:	f107 0208 	add.w	r2, r7, #8
 8006efe:	4610      	mov	r0, r2
 8006f00:	4798      	blx	r3
 8006f02:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3301      	adds	r3, #1
 8006f08:	2207      	movs	r2, #7
 8006f0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f0c:	e00f      	b.n	8006f2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f9f7 	bl	8007304 <USBD_CtlError>
        err++;
 8006f16:	7afb      	ldrb	r3, [r7, #11]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f1c:	e007      	b.n	8006f2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f1e:	6839      	ldr	r1, [r7, #0]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f9ef 	bl	8007304 <USBD_CtlError>
      err++;
 8006f26:	7afb      	ldrb	r3, [r7, #11]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f2c:	bf00      	nop
  }

  if (err != 0U)
 8006f2e:	7afb      	ldrb	r3, [r7, #11]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d11e      	bne.n	8006f72 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	88db      	ldrh	r3, [r3, #6]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d016      	beq.n	8006f6a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006f3c:	893b      	ldrh	r3, [r7, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00e      	beq.n	8006f60 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	88da      	ldrh	r2, [r3, #6]
 8006f46:	893b      	ldrh	r3, [r7, #8]
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	bf28      	it	cs
 8006f4c:	4613      	movcs	r3, r2
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f52:	893b      	ldrh	r3, [r7, #8]
 8006f54:	461a      	mov	r2, r3
 8006f56:	68f9      	ldr	r1, [r7, #12]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fa44 	bl	80073e6 <USBD_CtlSendData>
 8006f5e:	e009      	b.n	8006f74 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006f60:	6839      	ldr	r1, [r7, #0]
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f9ce 	bl	8007304 <USBD_CtlError>
 8006f68:	e004      	b.n	8006f74 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fa95 	bl	800749a <USBD_CtlSendStatus>
 8006f70:	e000      	b.n	8006f74 <USBD_GetDescriptor+0x2cc>
    return;
 8006f72:	bf00      	nop
  }
}
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop

08006f7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	889b      	ldrh	r3, [r3, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d131      	bne.n	8006ff2 <USBD_SetAddress+0x76>
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	88db      	ldrh	r3, [r3, #6]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d12d      	bne.n	8006ff2 <USBD_SetAddress+0x76>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	885b      	ldrh	r3, [r3, #2]
 8006f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f9c:	d829      	bhi.n	8006ff2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	885b      	ldrh	r3, [r3, #2]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d104      	bne.n	8006fc0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f9a3 	bl	8007304 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fbe:	e01d      	b.n	8006ffc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	7bfa      	ldrb	r2, [r7, #15]
 8006fc4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fefb 	bl	8007dc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fa61 	bl	800749a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d004      	beq.n	8006fe8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe6:	e009      	b.n	8006ffc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff0:	e004      	b.n	8006ffc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f985 	bl	8007304 <USBD_CtlError>
  }
}
 8006ffa:	bf00      	nop
 8006ffc:	bf00      	nop
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	885b      	ldrh	r3, [r3, #2]
 8007016:	b2da      	uxtb	r2, r3
 8007018:	4b4c      	ldr	r3, [pc, #304]	; (800714c <USBD_SetConfig+0x148>)
 800701a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800701c:	4b4b      	ldr	r3, [pc, #300]	; (800714c <USBD_SetConfig+0x148>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d905      	bls.n	8007030 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f96c 	bl	8007304 <USBD_CtlError>
    return USBD_FAIL;
 800702c:	2303      	movs	r3, #3
 800702e:	e088      	b.n	8007142 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b02      	cmp	r3, #2
 800703a:	d002      	beq.n	8007042 <USBD_SetConfig+0x3e>
 800703c:	2b03      	cmp	r3, #3
 800703e:	d025      	beq.n	800708c <USBD_SetConfig+0x88>
 8007040:	e071      	b.n	8007126 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007042:	4b42      	ldr	r3, [pc, #264]	; (800714c <USBD_SetConfig+0x148>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d01c      	beq.n	8007084 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800704a:	4b40      	ldr	r3, [pc, #256]	; (800714c <USBD_SetConfig+0x148>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007054:	4b3d      	ldr	r3, [pc, #244]	; (800714c <USBD_SetConfig+0x148>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff f948 	bl	80062f0 <USBD_SetClassConfig>
 8007060:	4603      	mov	r3, r0
 8007062:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d004      	beq.n	8007074 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f949 	bl	8007304 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007072:	e065      	b.n	8007140 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fa10 	bl	800749a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2203      	movs	r2, #3
 800707e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007082:	e05d      	b.n	8007140 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fa08 	bl	800749a <USBD_CtlSendStatus>
      break;
 800708a:	e059      	b.n	8007140 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800708c:	4b2f      	ldr	r3, [pc, #188]	; (800714c <USBD_SetConfig+0x148>)
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d112      	bne.n	80070ba <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800709c:	4b2b      	ldr	r3, [pc, #172]	; (800714c <USBD_SetConfig+0x148>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070a6:	4b29      	ldr	r3, [pc, #164]	; (800714c <USBD_SetConfig+0x148>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff f93b 	bl	8006328 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f9f1 	bl	800749a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070b8:	e042      	b.n	8007140 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80070ba:	4b24      	ldr	r3, [pc, #144]	; (800714c <USBD_SetConfig+0x148>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d02a      	beq.n	800711e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	4619      	mov	r1, r3
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff f929 	bl	8006328 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80070d6:	4b1d      	ldr	r3, [pc, #116]	; (800714c <USBD_SetConfig+0x148>)
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070e0:	4b1a      	ldr	r3, [pc, #104]	; (800714c <USBD_SetConfig+0x148>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7ff f902 	bl	80062f0 <USBD_SetClassConfig>
 80070ec:	4603      	mov	r3, r0
 80070ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00f      	beq.n	8007116 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f903 	bl	8007304 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7ff f90e 	bl	8006328 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007114:	e014      	b.n	8007140 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f9bf 	bl	800749a <USBD_CtlSendStatus>
      break;
 800711c:	e010      	b.n	8007140 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f9bb 	bl	800749a <USBD_CtlSendStatus>
      break;
 8007124:	e00c      	b.n	8007140 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f8eb 	bl	8007304 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800712e:	4b07      	ldr	r3, [pc, #28]	; (800714c <USBD_SetConfig+0x148>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff f8f7 	bl	8006328 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800713a:	2303      	movs	r3, #3
 800713c:	73fb      	strb	r3, [r7, #15]
      break;
 800713e:	bf00      	nop
  }

  return ret;
 8007140:	7bfb      	ldrb	r3, [r7, #15]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	2000019c 	.word	0x2000019c

08007150 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	88db      	ldrh	r3, [r3, #6]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d004      	beq.n	800716c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f8cd 	bl	8007304 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800716a:	e023      	b.n	80071b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b02      	cmp	r3, #2
 8007176:	dc02      	bgt.n	800717e <USBD_GetConfig+0x2e>
 8007178:	2b00      	cmp	r3, #0
 800717a:	dc03      	bgt.n	8007184 <USBD_GetConfig+0x34>
 800717c:	e015      	b.n	80071aa <USBD_GetConfig+0x5a>
 800717e:	2b03      	cmp	r3, #3
 8007180:	d00b      	beq.n	800719a <USBD_GetConfig+0x4a>
 8007182:	e012      	b.n	80071aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3308      	adds	r3, #8
 800718e:	2201      	movs	r2, #1
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f927 	bl	80073e6 <USBD_CtlSendData>
        break;
 8007198:	e00c      	b.n	80071b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	3304      	adds	r3, #4
 800719e:	2201      	movs	r2, #1
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f91f 	bl	80073e6 <USBD_CtlSendData>
        break;
 80071a8:	e004      	b.n	80071b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f8a9 	bl	8007304 <USBD_CtlError>
        break;
 80071b2:	bf00      	nop
}
 80071b4:	bf00      	nop
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	3b01      	subs	r3, #1
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d81e      	bhi.n	8007212 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	88db      	ldrh	r3, [r3, #6]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d004      	beq.n	80071e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f890 	bl	8007304 <USBD_CtlError>
        break;
 80071e4:	e01a      	b.n	800721c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d005      	beq.n	8007202 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f043 0202 	orr.w	r2, r3, #2
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	330c      	adds	r3, #12
 8007206:	2202      	movs	r2, #2
 8007208:	4619      	mov	r1, r3
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f8eb 	bl	80073e6 <USBD_CtlSendData>
      break;
 8007210:	e004      	b.n	800721c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f875 	bl	8007304 <USBD_CtlError>
      break;
 800721a:	bf00      	nop
  }
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	885b      	ldrh	r3, [r3, #2]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d106      	bne.n	8007244 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f92b 	bl	800749a <USBD_CtlSendStatus>
  }
}
 8007244:	bf00      	nop
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800725c:	b2db      	uxtb	r3, r3
 800725e:	3b01      	subs	r3, #1
 8007260:	2b02      	cmp	r3, #2
 8007262:	d80b      	bhi.n	800727c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	885b      	ldrh	r3, [r3, #2]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d10c      	bne.n	8007286 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f910 	bl	800749a <USBD_CtlSendStatus>
      }
      break;
 800727a:	e004      	b.n	8007286 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f840 	bl	8007304 <USBD_CtlError>
      break;
 8007284:	e000      	b.n	8007288 <USBD_ClrFeature+0x3c>
      break;
 8007286:	bf00      	nop
  }
}
 8007288:	bf00      	nop
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	781a      	ldrb	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3301      	adds	r3, #1
 80072aa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	781a      	ldrb	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3301      	adds	r3, #1
 80072b8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f7ff fabb 	bl	8006836 <SWAPBYTE>
 80072c0:	4603      	mov	r3, r0
 80072c2:	461a      	mov	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3301      	adds	r3, #1
 80072cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	3301      	adds	r3, #1
 80072d2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f7ff faae 	bl	8006836 <SWAPBYTE>
 80072da:	4603      	mov	r3, r0
 80072dc:	461a      	mov	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3301      	adds	r3, #1
 80072e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	3301      	adds	r3, #1
 80072ec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f7ff faa1 	bl	8006836 <SWAPBYTE>
 80072f4:	4603      	mov	r3, r0
 80072f6:	461a      	mov	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	80da      	strh	r2, [r3, #6]
}
 80072fc:	bf00      	nop
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800730e:	2180      	movs	r1, #128	; 0x80
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fcef 	bl	8007cf4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007316:	2100      	movs	r1, #0
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fceb 	bl	8007cf4 <USBD_LL_StallEP>
}
 800731e:	bf00      	nop
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b086      	sub	sp, #24
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d036      	beq.n	80073aa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007340:	6938      	ldr	r0, [r7, #16]
 8007342:	f000 f836 	bl	80073b2 <USBD_GetLen>
 8007346:	4603      	mov	r3, r0
 8007348:	3301      	adds	r3, #1
 800734a:	b29b      	uxth	r3, r3
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	b29a      	uxth	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007354:	7dfb      	ldrb	r3, [r7, #23]
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	4413      	add	r3, r2
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	7812      	ldrb	r2, [r2, #0]
 800735e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007360:	7dfb      	ldrb	r3, [r7, #23]
 8007362:	3301      	adds	r3, #1
 8007364:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007366:	7dfb      	ldrb	r3, [r7, #23]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	4413      	add	r3, r2
 800736c:	2203      	movs	r2, #3
 800736e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007370:	7dfb      	ldrb	r3, [r7, #23]
 8007372:	3301      	adds	r3, #1
 8007374:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007376:	e013      	b.n	80073a0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007378:	7dfb      	ldrb	r3, [r7, #23]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	4413      	add	r3, r2
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	7812      	ldrb	r2, [r2, #0]
 8007382:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	3301      	adds	r3, #1
 8007388:	613b      	str	r3, [r7, #16]
    idx++;
 800738a:	7dfb      	ldrb	r3, [r7, #23]
 800738c:	3301      	adds	r3, #1
 800738e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007390:	7dfb      	ldrb	r3, [r7, #23]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	4413      	add	r3, r2
 8007396:	2200      	movs	r2, #0
 8007398:	701a      	strb	r2, [r3, #0]
    idx++;
 800739a:	7dfb      	ldrb	r3, [r7, #23]
 800739c:	3301      	adds	r3, #1
 800739e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e7      	bne.n	8007378 <USBD_GetString+0x52>
 80073a8:	e000      	b.n	80073ac <USBD_GetString+0x86>
    return;
 80073aa:	bf00      	nop
  }
}
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b085      	sub	sp, #20
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80073c2:	e005      	b.n	80073d0 <USBD_GetLen+0x1e>
  {
    len++;
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	3301      	adds	r3, #1
 80073c8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	3301      	adds	r3, #1
 80073ce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1f5      	bne.n	80073c4 <USBD_GetLen+0x12>
  }

  return len;
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2202      	movs	r2, #2
 80073f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	2100      	movs	r1, #0
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 fcfa 	bl	8007e06 <USBD_LL_Transmit>

  return USBD_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	2100      	movs	r1, #0
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 fce9 	bl	8007e06 <USBD_LL_Transmit>

  return USBD_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2203      	movs	r2, #3
 800744e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	2100      	movs	r1, #0
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 fced 	bl	8007e48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	2100      	movs	r1, #0
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 fcdc 	bl	8007e48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b082      	sub	sp, #8
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2204      	movs	r2, #4
 80074a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074aa:	2300      	movs	r3, #0
 80074ac:	2200      	movs	r2, #0
 80074ae:	2100      	movs	r1, #0
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fca8 	bl	8007e06 <USBD_LL_Transmit>

  return USBD_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2205      	movs	r2, #5
 80074cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074d0:	2300      	movs	r3, #0
 80074d2:	2200      	movs	r2, #0
 80074d4:	2100      	movs	r1, #0
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fcb6 	bl	8007e48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
	...

080074e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074ec:	2200      	movs	r2, #0
 80074ee:	4912      	ldr	r1, [pc, #72]	; (8007538 <MX_USB_DEVICE_Init+0x50>)
 80074f0:	4812      	ldr	r0, [pc, #72]	; (800753c <MX_USB_DEVICE_Init+0x54>)
 80074f2:	f7fe fe8f 	bl	8006214 <USBD_Init>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074fc:	f7f9 fde0 	bl	80010c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007500:	490f      	ldr	r1, [pc, #60]	; (8007540 <MX_USB_DEVICE_Init+0x58>)
 8007502:	480e      	ldr	r0, [pc, #56]	; (800753c <MX_USB_DEVICE_Init+0x54>)
 8007504:	f7fe feb6 	bl	8006274 <USBD_RegisterClass>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800750e:	f7f9 fdd7 	bl	80010c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007512:	490c      	ldr	r1, [pc, #48]	; (8007544 <MX_USB_DEVICE_Init+0x5c>)
 8007514:	4809      	ldr	r0, [pc, #36]	; (800753c <MX_USB_DEVICE_Init+0x54>)
 8007516:	f7fe fdd7 	bl	80060c8 <USBD_CDC_RegisterInterface>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007520:	f7f9 fdce 	bl	80010c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007524:	4805      	ldr	r0, [pc, #20]	; (800753c <MX_USB_DEVICE_Init+0x54>)
 8007526:	f7fe fecc 	bl	80062c2 <USBD_Start>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007530:	f7f9 fdc6 	bl	80010c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007534:	bf00      	nop
 8007536:	bd80      	pop	{r7, pc}
 8007538:	20000130 	.word	0x20000130
 800753c:	20000424 	.word	0x20000424
 8007540:	20000018 	.word	0x20000018
 8007544:	2000011c 	.word	0x2000011c

08007548 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800754c:	2200      	movs	r2, #0
 800754e:	4905      	ldr	r1, [pc, #20]	; (8007564 <CDC_Init_FS+0x1c>)
 8007550:	4805      	ldr	r0, [pc, #20]	; (8007568 <CDC_Init_FS+0x20>)
 8007552:	f7fe fdce 	bl	80060f2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007556:	4905      	ldr	r1, [pc, #20]	; (800756c <CDC_Init_FS+0x24>)
 8007558:	4803      	ldr	r0, [pc, #12]	; (8007568 <CDC_Init_FS+0x20>)
 800755a:	f7fe fde8 	bl	800612e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800755e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007560:	4618      	mov	r0, r3
 8007562:	bd80      	pop	{r7, pc}
 8007564:	20000ef4 	.word	0x20000ef4
 8007568:	20000424 	.word	0x20000424
 800756c:	200006f4 	.word	0x200006f4

08007570 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007570:	b480      	push	{r7}
 8007572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007574:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007576:	4618      	mov	r0, r3
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	4603      	mov	r3, r0
 8007588:	6039      	str	r1, [r7, #0]
 800758a:	71fb      	strb	r3, [r7, #7]
 800758c:	4613      	mov	r3, r2
 800758e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007590:	79fb      	ldrb	r3, [r7, #7]
 8007592:	2b23      	cmp	r3, #35	; 0x23
 8007594:	d84a      	bhi.n	800762c <CDC_Control_FS+0xac>
 8007596:	a201      	add	r2, pc, #4	; (adr r2, 800759c <CDC_Control_FS+0x1c>)
 8007598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759c:	0800762d 	.word	0x0800762d
 80075a0:	0800762d 	.word	0x0800762d
 80075a4:	0800762d 	.word	0x0800762d
 80075a8:	0800762d 	.word	0x0800762d
 80075ac:	0800762d 	.word	0x0800762d
 80075b0:	0800762d 	.word	0x0800762d
 80075b4:	0800762d 	.word	0x0800762d
 80075b8:	0800762d 	.word	0x0800762d
 80075bc:	0800762d 	.word	0x0800762d
 80075c0:	0800762d 	.word	0x0800762d
 80075c4:	0800762d 	.word	0x0800762d
 80075c8:	0800762d 	.word	0x0800762d
 80075cc:	0800762d 	.word	0x0800762d
 80075d0:	0800762d 	.word	0x0800762d
 80075d4:	0800762d 	.word	0x0800762d
 80075d8:	0800762d 	.word	0x0800762d
 80075dc:	0800762d 	.word	0x0800762d
 80075e0:	0800762d 	.word	0x0800762d
 80075e4:	0800762d 	.word	0x0800762d
 80075e8:	0800762d 	.word	0x0800762d
 80075ec:	0800762d 	.word	0x0800762d
 80075f0:	0800762d 	.word	0x0800762d
 80075f4:	0800762d 	.word	0x0800762d
 80075f8:	0800762d 	.word	0x0800762d
 80075fc:	0800762d 	.word	0x0800762d
 8007600:	0800762d 	.word	0x0800762d
 8007604:	0800762d 	.word	0x0800762d
 8007608:	0800762d 	.word	0x0800762d
 800760c:	0800762d 	.word	0x0800762d
 8007610:	0800762d 	.word	0x0800762d
 8007614:	0800762d 	.word	0x0800762d
 8007618:	0800762d 	.word	0x0800762d
 800761c:	0800762d 	.word	0x0800762d
 8007620:	0800762d 	.word	0x0800762d
 8007624:	0800762d 	.word	0x0800762d
 8007628:	0800762d 	.word	0x0800762d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800762c:	bf00      	nop
  }

  return (USBD_OK);
 800762e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007630:	4618      	mov	r0, r3
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	4805      	ldr	r0, [pc, #20]	; (8007660 <CDC_Receive_FS+0x24>)
 800764a:	f7fe fd70 	bl	800612e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800764e:	4804      	ldr	r0, [pc, #16]	; (8007660 <CDC_Receive_FS+0x24>)
 8007650:	f7fe fdb6 	bl	80061c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007654:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20000424 	.word	0x20000424

08007664 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007674:	4b0d      	ldr	r3, [pc, #52]	; (80076ac <CDC_Transmit_FS+0x48>)
 8007676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800767a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007686:	2301      	movs	r3, #1
 8007688:	e00b      	b.n	80076a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800768a:	887b      	ldrh	r3, [r7, #2]
 800768c:	461a      	mov	r2, r3
 800768e:	6879      	ldr	r1, [r7, #4]
 8007690:	4806      	ldr	r0, [pc, #24]	; (80076ac <CDC_Transmit_FS+0x48>)
 8007692:	f7fe fd2e 	bl	80060f2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007696:	4805      	ldr	r0, [pc, #20]	; (80076ac <CDC_Transmit_FS+0x48>)
 8007698:	f7fe fd62 	bl	8006160 <USBD_CDC_TransmitPacket>
 800769c:	4603      	mov	r3, r0
 800769e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20000424 	.word	0x20000424

080076b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	4613      	mov	r3, r2
 80076bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80076c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	371c      	adds	r7, #28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
	...

080076d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	4603      	mov	r3, r0
 80076dc:	6039      	str	r1, [r7, #0]
 80076de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2212      	movs	r2, #18
 80076e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076e6:	4b03      	ldr	r3, [pc, #12]	; (80076f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	2000014c 	.word	0x2000014c

080076f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	4603      	mov	r3, r0
 8007700:	6039      	str	r1, [r7, #0]
 8007702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2204      	movs	r2, #4
 8007708:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800770a:	4b03      	ldr	r3, [pc, #12]	; (8007718 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800770c:	4618      	mov	r0, r3
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	20000160 	.word	0x20000160

0800771c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	4603      	mov	r3, r0
 8007724:	6039      	str	r1, [r7, #0]
 8007726:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007728:	79fb      	ldrb	r3, [r7, #7]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d105      	bne.n	800773a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	4907      	ldr	r1, [pc, #28]	; (8007750 <USBD_FS_ProductStrDescriptor+0x34>)
 8007732:	4808      	ldr	r0, [pc, #32]	; (8007754 <USBD_FS_ProductStrDescriptor+0x38>)
 8007734:	f7ff fdf7 	bl	8007326 <USBD_GetString>
 8007738:	e004      	b.n	8007744 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	4904      	ldr	r1, [pc, #16]	; (8007750 <USBD_FS_ProductStrDescriptor+0x34>)
 800773e:	4805      	ldr	r0, [pc, #20]	; (8007754 <USBD_FS_ProductStrDescriptor+0x38>)
 8007740:	f7ff fdf1 	bl	8007326 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007744:	4b02      	ldr	r3, [pc, #8]	; (8007750 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	200016f4 	.word	0x200016f4
 8007754:	08007fa8 	.word	0x08007fa8

08007758 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	4603      	mov	r3, r0
 8007760:	6039      	str	r1, [r7, #0]
 8007762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	4904      	ldr	r1, [pc, #16]	; (8007778 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007768:	4804      	ldr	r0, [pc, #16]	; (800777c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800776a:	f7ff fddc 	bl	8007326 <USBD_GetString>
  return USBD_StrDesc;
 800776e:	4b02      	ldr	r3, [pc, #8]	; (8007778 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	200016f4 	.word	0x200016f4
 800777c:	08007fc0 	.word	0x08007fc0

08007780 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	4603      	mov	r3, r0
 8007788:	6039      	str	r1, [r7, #0]
 800778a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	221a      	movs	r2, #26
 8007790:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007792:	f000 f843 	bl	800781c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007796:	4b02      	ldr	r3, [pc, #8]	; (80077a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007798:	4618      	mov	r0, r3
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	20000164 	.word	0x20000164

080077a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	4603      	mov	r3, r0
 80077ac:	6039      	str	r1, [r7, #0]
 80077ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80077b0:	79fb      	ldrb	r3, [r7, #7]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d105      	bne.n	80077c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	4907      	ldr	r1, [pc, #28]	; (80077d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077ba:	4808      	ldr	r0, [pc, #32]	; (80077dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80077bc:	f7ff fdb3 	bl	8007326 <USBD_GetString>
 80077c0:	e004      	b.n	80077cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	4904      	ldr	r1, [pc, #16]	; (80077d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077c6:	4805      	ldr	r0, [pc, #20]	; (80077dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80077c8:	f7ff fdad 	bl	8007326 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077cc:	4b02      	ldr	r3, [pc, #8]	; (80077d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	200016f4 	.word	0x200016f4
 80077dc:	08007fd4 	.word	0x08007fd4

080077e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	6039      	str	r1, [r7, #0]
 80077ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077ec:	79fb      	ldrb	r3, [r7, #7]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d105      	bne.n	80077fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	4907      	ldr	r1, [pc, #28]	; (8007814 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077f6:	4808      	ldr	r0, [pc, #32]	; (8007818 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077f8:	f7ff fd95 	bl	8007326 <USBD_GetString>
 80077fc:	e004      	b.n	8007808 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	4904      	ldr	r1, [pc, #16]	; (8007814 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007802:	4805      	ldr	r0, [pc, #20]	; (8007818 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007804:	f7ff fd8f 	bl	8007326 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007808:	4b02      	ldr	r3, [pc, #8]	; (8007814 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800780a:	4618      	mov	r0, r3
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	200016f4 	.word	0x200016f4
 8007818:	08007fe0 	.word	0x08007fe0

0800781c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007822:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <Get_SerialNum+0x44>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007828:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <Get_SerialNum+0x48>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800782e:	4b0e      	ldr	r3, [pc, #56]	; (8007868 <Get_SerialNum+0x4c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4413      	add	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d009      	beq.n	8007856 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007842:	2208      	movs	r2, #8
 8007844:	4909      	ldr	r1, [pc, #36]	; (800786c <Get_SerialNum+0x50>)
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 f814 	bl	8007874 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800784c:	2204      	movs	r2, #4
 800784e:	4908      	ldr	r1, [pc, #32]	; (8007870 <Get_SerialNum+0x54>)
 8007850:	68b8      	ldr	r0, [r7, #8]
 8007852:	f000 f80f 	bl	8007874 <IntToUnicode>
  }
}
 8007856:	bf00      	nop
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	1fff7a10 	.word	0x1fff7a10
 8007864:	1fff7a14 	.word	0x1fff7a14
 8007868:	1fff7a18 	.word	0x1fff7a18
 800786c:	20000166 	.word	0x20000166
 8007870:	20000176 	.word	0x20000176

08007874 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	4613      	mov	r3, r2
 8007880:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007882:	2300      	movs	r3, #0
 8007884:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007886:	2300      	movs	r3, #0
 8007888:	75fb      	strb	r3, [r7, #23]
 800788a:	e027      	b.n	80078dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	0f1b      	lsrs	r3, r3, #28
 8007890:	2b09      	cmp	r3, #9
 8007892:	d80b      	bhi.n	80078ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	0f1b      	lsrs	r3, r3, #28
 8007898:	b2da      	uxtb	r2, r3
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	005b      	lsls	r3, r3, #1
 800789e:	4619      	mov	r1, r3
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	440b      	add	r3, r1
 80078a4:	3230      	adds	r2, #48	; 0x30
 80078a6:	b2d2      	uxtb	r2, r2
 80078a8:	701a      	strb	r2, [r3, #0]
 80078aa:	e00a      	b.n	80078c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	0f1b      	lsrs	r3, r3, #28
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
 80078b4:	005b      	lsls	r3, r3, #1
 80078b6:	4619      	mov	r1, r3
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	440b      	add	r3, r1
 80078bc:	3237      	adds	r2, #55	; 0x37
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	011b      	lsls	r3, r3, #4
 80078c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	3301      	adds	r3, #1
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	4413      	add	r3, r2
 80078d2:	2200      	movs	r2, #0
 80078d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
 80078d8:	3301      	adds	r3, #1
 80078da:	75fb      	strb	r3, [r7, #23]
 80078dc:	7dfa      	ldrb	r2, [r7, #23]
 80078de:	79fb      	ldrb	r3, [r7, #7]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d3d3      	bcc.n	800788c <IntToUnicode+0x18>
  }
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	371c      	adds	r7, #28
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
	...

080078f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b08a      	sub	sp, #40	; 0x28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078fc:	f107 0314 	add.w	r3, r7, #20
 8007900:	2200      	movs	r2, #0
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	605a      	str	r2, [r3, #4]
 8007906:	609a      	str	r2, [r3, #8]
 8007908:	60da      	str	r2, [r3, #12]
 800790a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007914:	d147      	bne.n	80079a6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007916:	2300      	movs	r3, #0
 8007918:	613b      	str	r3, [r7, #16]
 800791a:	4b25      	ldr	r3, [pc, #148]	; (80079b0 <HAL_PCD_MspInit+0xbc>)
 800791c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791e:	4a24      	ldr	r2, [pc, #144]	; (80079b0 <HAL_PCD_MspInit+0xbc>)
 8007920:	f043 0301 	orr.w	r3, r3, #1
 8007924:	6313      	str	r3, [r2, #48]	; 0x30
 8007926:	4b22      	ldr	r3, [pc, #136]	; (80079b0 <HAL_PCD_MspInit+0xbc>)
 8007928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	613b      	str	r3, [r7, #16]
 8007930:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007932:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007938:	2300      	movs	r3, #0
 800793a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800793c:	2300      	movs	r3, #0
 800793e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007940:	f107 0314 	add.w	r3, r7, #20
 8007944:	4619      	mov	r1, r3
 8007946:	481b      	ldr	r0, [pc, #108]	; (80079b4 <HAL_PCD_MspInit+0xc0>)
 8007948:	f7f9 fe72 	bl	8001630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800794c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007952:	2302      	movs	r3, #2
 8007954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007956:	2300      	movs	r3, #0
 8007958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800795a:	2300      	movs	r3, #0
 800795c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800795e:	230a      	movs	r3, #10
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007962:	f107 0314 	add.w	r3, r7, #20
 8007966:	4619      	mov	r1, r3
 8007968:	4812      	ldr	r0, [pc, #72]	; (80079b4 <HAL_PCD_MspInit+0xc0>)
 800796a:	f7f9 fe61 	bl	8001630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800796e:	4b10      	ldr	r3, [pc, #64]	; (80079b0 <HAL_PCD_MspInit+0xbc>)
 8007970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007972:	4a0f      	ldr	r2, [pc, #60]	; (80079b0 <HAL_PCD_MspInit+0xbc>)
 8007974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007978:	6353      	str	r3, [r2, #52]	; 0x34
 800797a:	2300      	movs	r3, #0
 800797c:	60fb      	str	r3, [r7, #12]
 800797e:	4b0c      	ldr	r3, [pc, #48]	; (80079b0 <HAL_PCD_MspInit+0xbc>)
 8007980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007982:	4a0b      	ldr	r2, [pc, #44]	; (80079b0 <HAL_PCD_MspInit+0xbc>)
 8007984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007988:	6453      	str	r3, [r2, #68]	; 0x44
 800798a:	4b09      	ldr	r3, [pc, #36]	; (80079b0 <HAL_PCD_MspInit+0xbc>)
 800798c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007992:	60fb      	str	r3, [r7, #12]
 8007994:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007996:	2200      	movs	r2, #0
 8007998:	2100      	movs	r1, #0
 800799a:	2043      	movs	r0, #67	; 0x43
 800799c:	f7f9 fe11 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80079a0:	2043      	movs	r0, #67	; 0x43
 80079a2:	f7f9 fe2a 	bl	80015fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80079a6:	bf00      	nop
 80079a8:	3728      	adds	r7, #40	; 0x28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	40023800 	.word	0x40023800
 80079b4:	40020000 	.word	0x40020000

080079b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80079cc:	4619      	mov	r1, r3
 80079ce:	4610      	mov	r0, r2
 80079d0:	f7fe fcc2 	bl	8006358 <USBD_LL_SetupStage>
}
 80079d4:	bf00      	nop
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	460b      	mov	r3, r1
 80079e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80079ee:	78fa      	ldrb	r2, [r7, #3]
 80079f0:	6879      	ldr	r1, [r7, #4]
 80079f2:	4613      	mov	r3, r2
 80079f4:	00db      	lsls	r3, r3, #3
 80079f6:	1a9b      	subs	r3, r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	440b      	add	r3, r1
 80079fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	78fb      	ldrb	r3, [r7, #3]
 8007a04:	4619      	mov	r1, r3
 8007a06:	f7fe fcfc 	bl	8006402 <USBD_LL_DataOutStage>
}
 8007a0a:	bf00      	nop
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b082      	sub	sp, #8
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007a24:	78fa      	ldrb	r2, [r7, #3]
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	1a9b      	subs	r3, r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	440b      	add	r3, r1
 8007a32:	3348      	adds	r3, #72	; 0x48
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	78fb      	ldrb	r3, [r7, #3]
 8007a38:	4619      	mov	r1, r3
 8007a3a:	f7fe fd45 	bl	80064c8 <USBD_LL_DataInStage>
}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b082      	sub	sp, #8
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fe fe59 	bl	800670c <USBD_LL_SOF>
}
 8007a5a:	bf00      	nop
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b084      	sub	sp, #16
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d102      	bne.n	8007a7c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007a76:	2300      	movs	r3, #0
 8007a78:	73fb      	strb	r3, [r7, #15]
 8007a7a:	e008      	b.n	8007a8e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d102      	bne.n	8007a8a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007a84:	2301      	movs	r3, #1
 8007a86:	73fb      	strb	r3, [r7, #15]
 8007a88:	e001      	b.n	8007a8e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007a8a:	f7f9 fb19 	bl	80010c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a94:	7bfa      	ldrb	r2, [r7, #15]
 8007a96:	4611      	mov	r1, r2
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fe fdf9 	bl	8006690 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7fe fda5 	bl	80065f4 <USBD_LL_Reset>
}
 8007aaa:	bf00      	nop
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
	...

08007ab4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fe fdf4 	bl	80066b0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	6812      	ldr	r2, [r2, #0]
 8007ad6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ada:	f043 0301 	orr.w	r3, r3, #1
 8007ade:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d005      	beq.n	8007af4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ae8:	4b04      	ldr	r3, [pc, #16]	; (8007afc <HAL_PCD_SuspendCallback+0x48>)
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	4a03      	ldr	r2, [pc, #12]	; (8007afc <HAL_PCD_SuspendCallback+0x48>)
 8007aee:	f043 0306 	orr.w	r3, r3, #6
 8007af2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	e000ed00 	.word	0xe000ed00

08007b00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fe fde4 	bl	80066dc <USBD_LL_Resume>
}
 8007b14:	bf00      	nop
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b2e:	78fa      	ldrb	r2, [r7, #3]
 8007b30:	4611      	mov	r1, r2
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fe fe32 	bl	800679c <USBD_LL_IsoOUTIncomplete>
}
 8007b38:	bf00      	nop
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b52:	78fa      	ldrb	r2, [r7, #3]
 8007b54:	4611      	mov	r1, r2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe fdfa 	bl	8006750 <USBD_LL_IsoINIncomplete>
}
 8007b5c:	bf00      	nop
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fe fe38 	bl	80067e8 <USBD_LL_DevConnected>
}
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fe fe35 	bl	80067fe <USBD_LL_DevDisconnected>
}
 8007b94:	bf00      	nop
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d13c      	bne.n	8007c26 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007bac:	4a20      	ldr	r2, [pc, #128]	; (8007c30 <USBD_LL_Init+0x94>)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a1e      	ldr	r2, [pc, #120]	; (8007c30 <USBD_LL_Init+0x94>)
 8007bb8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007bbc:	4b1c      	ldr	r3, [pc, #112]	; (8007c30 <USBD_LL_Init+0x94>)
 8007bbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007bc2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007bc4:	4b1a      	ldr	r3, [pc, #104]	; (8007c30 <USBD_LL_Init+0x94>)
 8007bc6:	2204      	movs	r2, #4
 8007bc8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007bca:	4b19      	ldr	r3, [pc, #100]	; (8007c30 <USBD_LL_Init+0x94>)
 8007bcc:	2202      	movs	r2, #2
 8007bce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007bd0:	4b17      	ldr	r3, [pc, #92]	; (8007c30 <USBD_LL_Init+0x94>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007bd6:	4b16      	ldr	r3, [pc, #88]	; (8007c30 <USBD_LL_Init+0x94>)
 8007bd8:	2202      	movs	r2, #2
 8007bda:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007bdc:	4b14      	ldr	r3, [pc, #80]	; (8007c30 <USBD_LL_Init+0x94>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007be2:	4b13      	ldr	r3, [pc, #76]	; (8007c30 <USBD_LL_Init+0x94>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007be8:	4b11      	ldr	r3, [pc, #68]	; (8007c30 <USBD_LL_Init+0x94>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007bee:	4b10      	ldr	r3, [pc, #64]	; (8007c30 <USBD_LL_Init+0x94>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007bf4:	4b0e      	ldr	r3, [pc, #56]	; (8007c30 <USBD_LL_Init+0x94>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007bfa:	480d      	ldr	r0, [pc, #52]	; (8007c30 <USBD_LL_Init+0x94>)
 8007bfc:	f7fa fe87 	bl	800290e <HAL_PCD_Init>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007c06:	f7f9 fa5b 	bl	80010c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007c0a:	2180      	movs	r1, #128	; 0x80
 8007c0c:	4808      	ldr	r0, [pc, #32]	; (8007c30 <USBD_LL_Init+0x94>)
 8007c0e:	f7fb ffe4 	bl	8003bda <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007c12:	2240      	movs	r2, #64	; 0x40
 8007c14:	2100      	movs	r1, #0
 8007c16:	4806      	ldr	r0, [pc, #24]	; (8007c30 <USBD_LL_Init+0x94>)
 8007c18:	f7fb ff98 	bl	8003b4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007c1c:	2280      	movs	r2, #128	; 0x80
 8007c1e:	2101      	movs	r1, #1
 8007c20:	4803      	ldr	r0, [pc, #12]	; (8007c30 <USBD_LL_Init+0x94>)
 8007c22:	f7fb ff93 	bl	8003b4c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	200018f4 	.word	0x200018f4

08007c34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c40:	2300      	movs	r3, #0
 8007c42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fa ff7c 	bl	8002b48 <HAL_PCD_Start>
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 f942 	bl	8007ee0 <USBD_Get_USB_Status>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	4608      	mov	r0, r1
 8007c74:	4611      	mov	r1, r2
 8007c76:	461a      	mov	r2, r3
 8007c78:	4603      	mov	r3, r0
 8007c7a:	70fb      	strb	r3, [r7, #3]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	70bb      	strb	r3, [r7, #2]
 8007c80:	4613      	mov	r3, r2
 8007c82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c84:	2300      	movs	r3, #0
 8007c86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c92:	78bb      	ldrb	r3, [r7, #2]
 8007c94:	883a      	ldrh	r2, [r7, #0]
 8007c96:	78f9      	ldrb	r1, [r7, #3]
 8007c98:	f7fb fb60 	bl	800335c <HAL_PCD_EP_Open>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 f91c 	bl	8007ee0 <USBD_Get_USB_Status>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cac:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cd0:	78fa      	ldrb	r2, [r7, #3]
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fb fba9 	bl	800342c <HAL_PCD_EP_Close>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 f8fd 	bl	8007ee0 <USBD_Get_USB_Status>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cea:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d00:	2300      	movs	r3, #0
 8007d02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d0e:	78fa      	ldrb	r2, [r7, #3]
 8007d10:	4611      	mov	r1, r2
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fb fc81 	bl	800361a <HAL_PCD_EP_SetStall>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 f8de 	bl	8007ee0 <USBD_Get_USB_Status>
 8007d24:	4603      	mov	r3, r0
 8007d26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d28:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d4c:	78fa      	ldrb	r2, [r7, #3]
 8007d4e:	4611      	mov	r1, r2
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fb fcc6 	bl	80036e2 <HAL_PCD_EP_ClrStall>
 8007d56:	4603      	mov	r3, r0
 8007d58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 f8bf 	bl	8007ee0 <USBD_Get_USB_Status>
 8007d62:	4603      	mov	r3, r0
 8007d64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	da0b      	bge.n	8007da4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d8c:	78fb      	ldrb	r3, [r7, #3]
 8007d8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d92:	68f9      	ldr	r1, [r7, #12]
 8007d94:	4613      	mov	r3, r2
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	1a9b      	subs	r3, r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	440b      	add	r3, r1
 8007d9e:	333e      	adds	r3, #62	; 0x3e
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	e00b      	b.n	8007dbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007da4:	78fb      	ldrb	r3, [r7, #3]
 8007da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007daa:	68f9      	ldr	r1, [r7, #12]
 8007dac:	4613      	mov	r3, r2
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	1a9b      	subs	r3, r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	440b      	add	r3, r1
 8007db6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007dba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007de2:	78fa      	ldrb	r2, [r7, #3]
 8007de4:	4611      	mov	r1, r2
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fb fa93 	bl	8003312 <HAL_PCD_SetAddress>
 8007dec:	4603      	mov	r3, r0
 8007dee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 f874 	bl	8007ee0 <USBD_Get_USB_Status>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b086      	sub	sp, #24
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	60f8      	str	r0, [r7, #12]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
 8007e12:	460b      	mov	r3, r1
 8007e14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e24:	7af9      	ldrb	r1, [r7, #11]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	f7fb fbac 	bl	8003586 <HAL_PCD_EP_Transmit>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 f853 	bl	8007ee0 <USBD_Get_USB_Status>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3718      	adds	r7, #24
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	607a      	str	r2, [r7, #4]
 8007e52:	603b      	str	r3, [r7, #0]
 8007e54:	460b      	mov	r3, r1
 8007e56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e66:	7af9      	ldrb	r1, [r7, #11]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	f7fb fb28 	bl	80034c0 <HAL_PCD_EP_Receive>
 8007e70:	4603      	mov	r3, r0
 8007e72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e74:	7dfb      	ldrb	r3, [r7, #23]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 f832 	bl	8007ee0 <USBD_Get_USB_Status>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e80:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b082      	sub	sp, #8
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	460b      	mov	r3, r1
 8007e94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e9c:	78fa      	ldrb	r2, [r7, #3]
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fb fb58 	bl	8003556 <HAL_PCD_EP_GetRxCount>
 8007ea6:	4603      	mov	r3, r0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007eb8:	4b03      	ldr	r3, [pc, #12]	; (8007ec8 <USBD_static_malloc+0x18>)
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	200001a0 	.word	0x200001a0

08007ecc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]

}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007eee:	79fb      	ldrb	r3, [r7, #7]
 8007ef0:	2b03      	cmp	r3, #3
 8007ef2:	d817      	bhi.n	8007f24 <USBD_Get_USB_Status+0x44>
 8007ef4:	a201      	add	r2, pc, #4	; (adr r2, 8007efc <USBD_Get_USB_Status+0x1c>)
 8007ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efa:	bf00      	nop
 8007efc:	08007f0d 	.word	0x08007f0d
 8007f00:	08007f13 	.word	0x08007f13
 8007f04:	08007f19 	.word	0x08007f19
 8007f08:	08007f1f 	.word	0x08007f1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f10:	e00b      	b.n	8007f2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f12:	2303      	movs	r3, #3
 8007f14:	73fb      	strb	r3, [r7, #15]
    break;
 8007f16:	e008      	b.n	8007f2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f1c:	e005      	b.n	8007f2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	73fb      	strb	r3, [r7, #15]
    break;
 8007f22:	e002      	b.n	8007f2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f24:	2303      	movs	r3, #3
 8007f26:	73fb      	strb	r3, [r7, #15]
    break;
 8007f28:	bf00      	nop
  }
  return usb_status;
 8007f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <__libc_init_array>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	4d0d      	ldr	r5, [pc, #52]	; (8007f70 <__libc_init_array+0x38>)
 8007f3c:	4c0d      	ldr	r4, [pc, #52]	; (8007f74 <__libc_init_array+0x3c>)
 8007f3e:	1b64      	subs	r4, r4, r5
 8007f40:	10a4      	asrs	r4, r4, #2
 8007f42:	2600      	movs	r6, #0
 8007f44:	42a6      	cmp	r6, r4
 8007f46:	d109      	bne.n	8007f5c <__libc_init_array+0x24>
 8007f48:	4d0b      	ldr	r5, [pc, #44]	; (8007f78 <__libc_init_array+0x40>)
 8007f4a:	4c0c      	ldr	r4, [pc, #48]	; (8007f7c <__libc_init_array+0x44>)
 8007f4c:	f000 f820 	bl	8007f90 <_init>
 8007f50:	1b64      	subs	r4, r4, r5
 8007f52:	10a4      	asrs	r4, r4, #2
 8007f54:	2600      	movs	r6, #0
 8007f56:	42a6      	cmp	r6, r4
 8007f58:	d105      	bne.n	8007f66 <__libc_init_array+0x2e>
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
 8007f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f60:	4798      	blx	r3
 8007f62:	3601      	adds	r6, #1
 8007f64:	e7ee      	b.n	8007f44 <__libc_init_array+0xc>
 8007f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f6a:	4798      	blx	r3
 8007f6c:	3601      	adds	r6, #1
 8007f6e:	e7f2      	b.n	8007f56 <__libc_init_array+0x1e>
 8007f70:	08008010 	.word	0x08008010
 8007f74:	08008010 	.word	0x08008010
 8007f78:	08008010 	.word	0x08008010
 8007f7c:	08008014 	.word	0x08008014

08007f80 <memset>:
 8007f80:	4402      	add	r2, r0
 8007f82:	4603      	mov	r3, r0
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d100      	bne.n	8007f8a <memset+0xa>
 8007f88:	4770      	bx	lr
 8007f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f8e:	e7f9      	b.n	8007f84 <memset+0x4>

08007f90 <_init>:
 8007f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f92:	bf00      	nop
 8007f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f96:	bc08      	pop	{r3}
 8007f98:	469e      	mov	lr, r3
 8007f9a:	4770      	bx	lr

08007f9c <_fini>:
 8007f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9e:	bf00      	nop
 8007fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa2:	bc08      	pop	{r3}
 8007fa4:	469e      	mov	lr, r3
 8007fa6:	4770      	bx	lr
