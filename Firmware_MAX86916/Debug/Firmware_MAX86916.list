
Firmware_MAX86916.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b84  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007d0c  08007d0c  00017d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d74  08007d74  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08007d74  08007d74  00017d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d7c  08007d7c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d7c  08007d7c  00017d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d80  08007d80  00017d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00001b7c  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001cfc  20001cfc  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   000170d1  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000330b  00000000  00000000  00037281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  0003a590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d38  00000000  00000000  0003b3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002398c  00000000  00000000  0003c130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013487  00000000  00000000  0005fabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c764c  00000000  00000000  00072f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013a58f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003aec  00000000  00000000  0013a5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007cf4 	.word	0x08007cf4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08007cf4 	.word	0x08007cf4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MAX86916_I2C_Write>:
MAX86916_Init_TypeDef ppg_config;

/**
 * Write MAX86916 register(s)
 */
bool MAX86916_I2C_Write(uint8_t regName, uint8_t* regValue, uint8_t numBytes) {
 80004c0:	b5b0      	push	{r4, r5, r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
 80004cc:	4613      	mov	r3, r2
 80004ce:	71bb      	strb	r3, [r7, #6]
 80004d0:	466b      	mov	r3, sp
 80004d2:	461d      	mov	r5, r3
	uint8_t tx_buffer[numBytes + 1];
 80004d4:	79bb      	ldrb	r3, [r7, #6]
 80004d6:	1c5c      	adds	r4, r3, #1
 80004d8:	1e63      	subs	r3, r4, #1
 80004da:	613b      	str	r3, [r7, #16]
 80004dc:	4623      	mov	r3, r4
 80004de:	4618      	mov	r0, r3
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	f04f 0200 	mov.w	r2, #0
 80004e8:	f04f 0300 	mov.w	r3, #0
 80004ec:	00cb      	lsls	r3, r1, #3
 80004ee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80004f2:	00c2      	lsls	r2, r0, #3
 80004f4:	4623      	mov	r3, r4
 80004f6:	4618      	mov	r0, r3
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	f04f 0200 	mov.w	r2, #0
 8000500:	f04f 0300 	mov.w	r3, #0
 8000504:	00cb      	lsls	r3, r1, #3
 8000506:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800050a:	00c2      	lsls	r2, r0, #3
 800050c:	4623      	mov	r3, r4
 800050e:	3307      	adds	r3, #7
 8000510:	08db      	lsrs	r3, r3, #3
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	ebad 0d03 	sub.w	sp, sp, r3
 8000518:	ab02      	add	r3, sp, #8
 800051a:	3300      	adds	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
	uint8_t i;
	tx_buffer[0] = regName;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	79fa      	ldrb	r2, [r7, #7]
 8000522:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < numBytes; i++)
 8000524:	2300      	movs	r3, #0
 8000526:	75fb      	strb	r3, [r7, #23]
 8000528:	e00a      	b.n	8000540 <MAX86916_I2C_Write+0x80>
		tx_buffer[i + 1] = regValue[i];
 800052a:	7dfb      	ldrb	r3, [r7, #23]
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	441a      	add	r2, r3
 8000530:	7dfb      	ldrb	r3, [r7, #23]
 8000532:	3301      	adds	r3, #1
 8000534:	7811      	ldrb	r1, [r2, #0]
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < numBytes; i++)
 800053a:	7dfb      	ldrb	r3, [r7, #23]
 800053c:	3301      	adds	r3, #1
 800053e:	75fb      	strb	r3, [r7, #23]
 8000540:	7dfa      	ldrb	r2, [r7, #23]
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	429a      	cmp	r2, r3
 8000546:	d3f0      	bcc.n	800052a <MAX86916_I2C_Write+0x6a>

	return HAL_I2C_Master_Transmit(&hi2c_ppg_max, MAX86916_I2C_ADDRESS, tx_buffer,
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	79bb      	ldrb	r3, [r7, #6]
 800054c:	b29b      	uxth	r3, r3
 800054e:	3301      	adds	r3, #1
 8000550:	b29b      	uxth	r3, r3
 8000552:	2164      	movs	r1, #100	; 0x64
 8000554:	9100      	str	r1, [sp, #0]
 8000556:	21ae      	movs	r1, #174	; 0xae
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <MAX86916_I2C_Write+0xb4>)
 800055a:	f001 fa39 	bl	80019d0 <HAL_I2C_Master_Transmit>
 800055e:	4603      	mov	r3, r0
			numBytes + 1, 100) == HAL_OK;
 8000560:	2b00      	cmp	r3, #0
 8000562:	bf0c      	ite	eq
 8000564:	2301      	moveq	r3, #1
 8000566:	2300      	movne	r3, #0
 8000568:	b2db      	uxtb	r3, r3
 800056a:	46ad      	mov	sp, r5
}
 800056c:	4618      	mov	r0, r3
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bdb0      	pop	{r4, r5, r7, pc}
 8000574:	200003cc 	.word	0x200003cc

08000578 <MAX86916_I2C_Read>:

/**
 * Read MAX86916 register(s)
 */
bool MAX86916_I2C_Read(uint8_t regName, uint8_t* readByte, uint8_t numBytes) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af02      	add	r7, sp, #8
 800057e:	4603      	mov	r3, r0
 8000580:	6039      	str	r1, [r7, #0]
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	4613      	mov	r3, r2
 8000586:	71bb      	strb	r3, [r7, #6]
	bool res = true;
 8000588:	2301      	movs	r3, #1
 800058a:	73fb      	strb	r3, [r7, #15]
	res &= (HAL_I2C_Master_Transmit(&hi2c_ppg_max, MAX86916_I2C_ADDRESS, &regName,
 800058c:	1dfa      	adds	r2, r7, #7
 800058e:	2364      	movs	r3, #100	; 0x64
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2301      	movs	r3, #1
 8000594:	21ae      	movs	r1, #174	; 0xae
 8000596:	4816      	ldr	r0, [pc, #88]	; (80005f0 <MAX86916_I2C_Read+0x78>)
 8000598:	f001 fa1a 	bl	80019d0 <HAL_I2C_Master_Transmit>
 800059c:	4603      	mov	r3, r0
			1, 100) == HAL_OK);
 800059e:	2b00      	cmp	r3, #0
 80005a0:	bf0c      	ite	eq
 80005a2:	2301      	moveq	r3, #1
 80005a4:	2300      	movne	r3, #0
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	461a      	mov	r2, r3
	res &= (HAL_I2C_Master_Transmit(&hi2c_ppg_max, MAX86916_I2C_ADDRESS, &regName,
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	4013      	ands	r3, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	bf14      	ite	ne
 80005b2:	2301      	movne	r3, #1
 80005b4:	2300      	moveq	r3, #0
 80005b6:	73fb      	strb	r3, [r7, #15]
	res &= HAL_I2C_Master_Receive(&hi2c_ppg_max, MAX86916_I2C_ADDRESS, readByte,
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	2264      	movs	r2, #100	; 0x64
 80005be:	9200      	str	r2, [sp, #0]
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	21ae      	movs	r1, #174	; 0xae
 80005c4:	480a      	ldr	r0, [pc, #40]	; (80005f0 <MAX86916_I2C_Read+0x78>)
 80005c6:	f001 fb01 	bl	8001bcc <HAL_I2C_Master_Receive>
 80005ca:	4603      	mov	r3, r0
			numBytes, 100) == HAL_OK;
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	bf0c      	ite	eq
 80005d0:	2301      	moveq	r3, #1
 80005d2:	2300      	movne	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	461a      	mov	r2, r3
	res &= HAL_I2C_Master_Receive(&hi2c_ppg_max, MAX86916_I2C_ADDRESS, readByte,
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	4013      	ands	r3, r2
 80005dc:	2b00      	cmp	r3, #0
 80005de:	bf14      	ite	ne
 80005e0:	2301      	movne	r3, #1
 80005e2:	2300      	moveq	r3, #0
 80005e4:	73fb      	strb	r3, [r7, #15]
	return res;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200003cc 	.word	0x200003cc

080005f4 <MAX86916_Read_Part_ID>:

/**
 * Read sensor part ID
 */
uint8_t MAX86916_Read_Part_ID(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
	uint8_t part_id;
	MAX86916_I2C_Read(MAX86916_REG_PART_ID, &part_id, 1);
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	2201      	movs	r2, #1
 80005fe:	4619      	mov	r1, r3
 8000600:	20ff      	movs	r0, #255	; 0xff
 8000602:	f7ff ffb9 	bl	8000578 <MAX86916_I2C_Read>
	return part_id;
 8000606:	79fb      	ldrb	r3, [r7, #7]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <MAX86916_Check>:
}

/**
 * Check part ID, revision ID and whether all registers have been written successfully
 */
bool MAX86916_Check(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	bool check = true;
 8000616:	2301      	movs	r3, #1
 8000618:	71fb      	strb	r3, [r7, #7]

	uint8_t reg_value, temp;

	// Read REV_ID e PART_ID to check if they are correct
	if (MAX86916_Read_Part_ID() != MAX86916_PART_ID_VALUE)
 800061a:	f7ff ffeb 	bl	80005f4 <MAX86916_Read_Part_ID>
 800061e:	4603      	mov	r3, r0
 8000620:	2b2b      	cmp	r3, #43	; 0x2b
 8000622:	d001      	beq.n	8000628 <MAX86916_Check+0x18>
		check = false;
 8000624:	2300      	movs	r3, #0
 8000626:	71fb      	strb	r3, [r7, #7]

	// Check mode configuration 1
	check &= MAX86916_I2C_Read(MAX86916_REG_MODE_CONFIGURATION1, &reg_value, 1);
 8000628:	1d7b      	adds	r3, r7, #5
 800062a:	2201      	movs	r2, #1
 800062c:	4619      	mov	r1, r3
 800062e:	2009      	movs	r0, #9
 8000630:	f7ff ffa2 	bl	8000578 <MAX86916_I2C_Read>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	4013      	ands	r3, r2
 800063c:	2b00      	cmp	r3, #0
 800063e:	bf14      	ite	ne
 8000640:	2301      	movne	r3, #1
 8000642:	2300      	moveq	r3, #0
 8000644:	71fb      	strb	r3, [r7, #7]
	temp = ppg_config.shutdown | ppg_config.mode;
 8000646:	4b4a      	ldr	r3, [pc, #296]	; (8000770 <MAX86916_Check+0x160>)
 8000648:	785a      	ldrb	r2, [r3, #1]
 800064a:	4b49      	ldr	r3, [pc, #292]	; (8000770 <MAX86916_Check+0x160>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4313      	orrs	r3, r2
 8000650:	71bb      	strb	r3, [r7, #6]
	if (reg_value != temp)
 8000652:	797b      	ldrb	r3, [r7, #5]
 8000654:	79ba      	ldrb	r2, [r7, #6]
 8000656:	429a      	cmp	r2, r3
 8000658:	d001      	beq.n	800065e <MAX86916_Check+0x4e>
		check = false;
 800065a:	2300      	movs	r3, #0
 800065c:	71fb      	strb	r3, [r7, #7]

	// Check mode configuration 2
	check &= MAX86916_I2C_Read(MAX86916_REG_MODE_CONFIGURATION2, &reg_value, 1);
 800065e:	1d7b      	adds	r3, r7, #5
 8000660:	2201      	movs	r2, #1
 8000662:	4619      	mov	r1, r3
 8000664:	200a      	movs	r0, #10
 8000666:	f7ff ff87 	bl	8000578 <MAX86916_I2C_Read>
 800066a:	4603      	mov	r3, r0
 800066c:	461a      	mov	r2, r3
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4013      	ands	r3, r2
 8000672:	2b00      	cmp	r3, #0
 8000674:	bf14      	ite	ne
 8000676:	2301      	movne	r3, #1
 8000678:	2300      	moveq	r3, #0
 800067a:	71fb      	strb	r3, [r7, #7]
	temp = ppg_config.full_scale | ppg_config.frequency
 800067c:	4b3c      	ldr	r3, [pc, #240]	; (8000770 <MAX86916_Check+0x160>)
 800067e:	789a      	ldrb	r2, [r3, #2]
 8000680:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <MAX86916_Check+0x160>)
 8000682:	78db      	ldrb	r3, [r3, #3]
 8000684:	4313      	orrs	r3, r2
 8000686:	b2da      	uxtb	r2, r3
			| ppg_config.pulse_width;
 8000688:	4b39      	ldr	r3, [pc, #228]	; (8000770 <MAX86916_Check+0x160>)
 800068a:	791b      	ldrb	r3, [r3, #4]
	temp = ppg_config.full_scale | ppg_config.frequency
 800068c:	4313      	orrs	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	if (reg_value != temp)
 8000690:	797b      	ldrb	r3, [r7, #5]
 8000692:	79ba      	ldrb	r2, [r7, #6]
 8000694:	429a      	cmp	r2, r3
 8000696:	d001      	beq.n	800069c <MAX86916_Check+0x8c>
		check = false;
 8000698:	2300      	movs	r3, #0
 800069a:	71fb      	strb	r3, [r7, #7]

	// Check led pulse amplitudes
	check &= MAX86916_I2C_Read(MAX86916_REG_LED1_PULSE_AMPLITUDE, &reg_value, 1);
 800069c:	1d7b      	adds	r3, r7, #5
 800069e:	2201      	movs	r2, #1
 80006a0:	4619      	mov	r1, r3
 80006a2:	200c      	movs	r0, #12
 80006a4:	f7ff ff68 	bl	8000578 <MAX86916_I2C_Read>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	4013      	ands	r3, r2
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	bf14      	ite	ne
 80006b4:	2301      	movne	r3, #1
 80006b6:	2300      	moveq	r3, #0
 80006b8:	71fb      	strb	r3, [r7, #7]
	temp = ppg_config.led_pa[0];
 80006ba:	4b2d      	ldr	r3, [pc, #180]	; (8000770 <MAX86916_Check+0x160>)
 80006bc:	7a1b      	ldrb	r3, [r3, #8]
 80006be:	71bb      	strb	r3, [r7, #6]
	if (reg_value != temp)
 80006c0:	797b      	ldrb	r3, [r7, #5]
 80006c2:	79ba      	ldrb	r2, [r7, #6]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d001      	beq.n	80006cc <MAX86916_Check+0xbc>
		check = false;
 80006c8:	2300      	movs	r3, #0
 80006ca:	71fb      	strb	r3, [r7, #7]

	check &= MAX86916_I2C_Read(MAX86916_REG_LED2_PULSE_AMPLITUDE, &reg_value,1);
 80006cc:	1d7b      	adds	r3, r7, #5
 80006ce:	2201      	movs	r2, #1
 80006d0:	4619      	mov	r1, r3
 80006d2:	200d      	movs	r0, #13
 80006d4:	f7ff ff50 	bl	8000578 <MAX86916_I2C_Read>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	4013      	ands	r3, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf14      	ite	ne
 80006e4:	2301      	movne	r3, #1
 80006e6:	2300      	moveq	r3, #0
 80006e8:	71fb      	strb	r3, [r7, #7]
	temp = ppg_config.led_pa[1];
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <MAX86916_Check+0x160>)
 80006ec:	7a5b      	ldrb	r3, [r3, #9]
 80006ee:	71bb      	strb	r3, [r7, #6]
	if (reg_value != temp)
 80006f0:	797b      	ldrb	r3, [r7, #5]
 80006f2:	79ba      	ldrb	r2, [r7, #6]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d001      	beq.n	80006fc <MAX86916_Check+0xec>
		check = false;
 80006f8:	2300      	movs	r3, #0
 80006fa:	71fb      	strb	r3, [r7, #7]

	if (ppg_config.mode == MAX86916_MODE_FLEX) {
 80006fc:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MAX86916_Check+0x160>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d12f      	bne.n	8000764 <MAX86916_Check+0x154>
		check &= MAX86916_I2C_Read(MAX86916_REG_LED3_PULSE_AMPLITUDE, &reg_value, 1);
 8000704:	1d7b      	adds	r3, r7, #5
 8000706:	2201      	movs	r2, #1
 8000708:	4619      	mov	r1, r3
 800070a:	200e      	movs	r0, #14
 800070c:	f7ff ff34 	bl	8000578 <MAX86916_I2C_Read>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	4013      	ands	r3, r2
 8000718:	2b00      	cmp	r3, #0
 800071a:	bf14      	ite	ne
 800071c:	2301      	movne	r3, #1
 800071e:	2300      	moveq	r3, #0
 8000720:	71fb      	strb	r3, [r7, #7]
		temp = ppg_config.led_pa[2];
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MAX86916_Check+0x160>)
 8000724:	7a9b      	ldrb	r3, [r3, #10]
 8000726:	71bb      	strb	r3, [r7, #6]
		if (reg_value != temp)
 8000728:	797b      	ldrb	r3, [r7, #5]
 800072a:	79ba      	ldrb	r2, [r7, #6]
 800072c:	429a      	cmp	r2, r3
 800072e:	d001      	beq.n	8000734 <MAX86916_Check+0x124>
			check = false;
 8000730:	2300      	movs	r3, #0
 8000732:	71fb      	strb	r3, [r7, #7]
		
		check &= MAX86916_I2C_Read(MAX86916_REG_LED4_PULSE_AMPLITUDE, &reg_value, 1);
 8000734:	1d7b      	adds	r3, r7, #5
 8000736:	2201      	movs	r2, #1
 8000738:	4619      	mov	r1, r3
 800073a:	200f      	movs	r0, #15
 800073c:	f7ff ff1c 	bl	8000578 <MAX86916_I2C_Read>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4013      	ands	r3, r2
 8000748:	2b00      	cmp	r3, #0
 800074a:	bf14      	ite	ne
 800074c:	2301      	movne	r3, #1
 800074e:	2300      	moveq	r3, #0
 8000750:	71fb      	strb	r3, [r7, #7]
		temp = ppg_config.led_pa[3];
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MAX86916_Check+0x160>)
 8000754:	7adb      	ldrb	r3, [r3, #11]
 8000756:	71bb      	strb	r3, [r7, #6]
		if (reg_value != temp)
 8000758:	797b      	ldrb	r3, [r7, #5]
 800075a:	79ba      	ldrb	r2, [r7, #6]
 800075c:	429a      	cmp	r2, r3
 800075e:	d001      	beq.n	8000764 <MAX86916_Check+0x154>
			check = false;
 8000760:	2300      	movs	r3, #0
 8000762:	71fb      	strb	r3, [r7, #7]
	}

	return check;
 8000764:	79fb      	ldrb	r3, [r7, #7]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200003c0 	.word	0x200003c0

08000774 <MAX86916_Config>:
/**
 * Configuration of MAX86916 operation
 */
bool MAX86916_Config(MAX86916_Init_TypeDef initStruct) {
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b087      	sub	sp, #28
 8000778:	af00      	add	r7, sp, #0
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t temp;
	uint8_t fifo_config = 0x06;
 8000780:	2306      	movs	r3, #6
 8000782:	74fb      	strb	r3, [r7, #19]
	uint8_t led_seq1 = 0x21;
 8000784:	2321      	movs	r3, #33	; 0x21
 8000786:	74bb      	strb	r3, [r7, #18]
	uint8_t led_rge = 0x55;
 8000788:	2355      	movs	r3, #85	; 0x55
 800078a:	747b      	strb	r3, [r7, #17]
	
	bool result = true;
 800078c:	2301      	movs	r3, #1
 800078e:	75fb      	strb	r3, [r7, #23]

	//Store configuration parameters
	memcpy((uint8_t*) &ppg_config, (uint8_t*) &initStruct, sizeof(MAX86916_Init_TypeDef));
 8000790:	4b8d      	ldr	r3, [pc, #564]	; (80009c8 <MAX86916_Config+0x254>)
 8000792:	461c      	mov	r4, r3
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000798:	6020      	str	r0, [r4, #0]
 800079a:	6061      	str	r1, [r4, #4]
 800079c:	60a2      	str	r2, [r4, #8]

	// 1. MODE CONFIGURATION 1
	temp = initStruct.shutdown | initStruct.mode;
 800079e:	797a      	ldrb	r2, [r7, #5]
 80007a0:	793b      	ldrb	r3, [r7, #4]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	753b      	strb	r3, [r7, #20]
	//uint8_t prova = 0;
	result &= MAX86916_I2C_Write(MAX86916_REG_MODE_CONFIGURATION1, &temp, 1);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2201      	movs	r2, #1
 80007ae:	4619      	mov	r1, r3
 80007b0:	2009      	movs	r0, #9
 80007b2:	f7ff fe85 	bl	80004c0 <MAX86916_I2C_Write>
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	7dfb      	ldrb	r3, [r7, #23]
 80007bc:	4013      	ands	r3, r2
 80007be:	2b00      	cmp	r3, #0
 80007c0:	bf14      	ite	ne
 80007c2:	2301      	movne	r3, #1
 80007c4:	2300      	moveq	r3, #0
 80007c6:	75fb      	strb	r3, [r7, #23]

	// 2. MODE CONFIGURATION 2
	temp = initStruct.full_scale | initStruct.frequency | initStruct.pulse_width;
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	7a3b      	ldrb	r3, [r7, #8]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	753b      	strb	r3, [r7, #20]
	result &= MAX86916_I2C_Write(MAX86916_REG_MODE_CONFIGURATION2, &temp, 1);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2201      	movs	r2, #1
 80007de:	4619      	mov	r1, r3
 80007e0:	200a      	movs	r0, #10
 80007e2:	f7ff fe6d 	bl	80004c0 <MAX86916_I2C_Write>
 80007e6:	4603      	mov	r3, r0
 80007e8:	461a      	mov	r2, r3
 80007ea:	7dfb      	ldrb	r3, [r7, #23]
 80007ec:	4013      	ands	r3, r2
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	bf14      	ite	ne
 80007f2:	2301      	movne	r3, #1
 80007f4:	2300      	moveq	r3, #0
 80007f6:	75fb      	strb	r3, [r7, #23]

	// Forbidden configuration (table 12) HR mode
	if (initStruct.mode == MAX86916_MODE_HR) {
 80007f8:	793b      	ldrb	r3, [r7, #4]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d117      	bne.n	800082e <MAX86916_Config+0xba>
		if (initStruct.frequency > MAX86916_SR_1000Hz && initStruct.pulse_width == MAX86916_PW_420)
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b14      	cmp	r3, #20
 8000802:	d904      	bls.n	800080e <MAX86916_Config+0x9a>
 8000804:	7a3b      	ldrb	r3, [r7, #8]
 8000806:	2b03      	cmp	r3, #3
 8000808:	d101      	bne.n	800080e <MAX86916_Config+0x9a>
			initStruct.frequency = MAX86916_SR_1000Hz;
 800080a:	2314      	movs	r3, #20
 800080c:	71fb      	strb	r3, [r7, #7]
		if (initStruct.frequency > MAX86916_SR_1600Hz && initStruct.pulse_width == MAX86916_PW_220)
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b18      	cmp	r3, #24
 8000812:	d904      	bls.n	800081e <MAX86916_Config+0xaa>
 8000814:	7a3b      	ldrb	r3, [r7, #8]
 8000816:	2b02      	cmp	r3, #2
 8000818:	d101      	bne.n	800081e <MAX86916_Config+0xaa>
			initStruct.frequency = MAX86916_SR_1600Hz;
 800081a:	2318      	movs	r3, #24
 800081c:	71fb      	strb	r3, [r7, #7]
		if (initStruct.frequency > MAX86916_SR_1600Hz && initStruct.pulse_width == MAX86916_PW_120)
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b18      	cmp	r3, #24
 8000822:	d904      	bls.n	800082e <MAX86916_Config+0xba>
 8000824:	7a3b      	ldrb	r3, [r7, #8]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d101      	bne.n	800082e <MAX86916_Config+0xba>
			initStruct.frequency = MAX86916_SR_1600Hz;
 800082a:	2318      	movs	r3, #24
 800082c:	71fb      	strb	r3, [r7, #7]
	}

	// Forbidden configuration (table 11) SPO2 mode
	if (initStruct.mode == MAX86916_MODE_SPO2) {
 800082e:	793b      	ldrb	r3, [r7, #4]
 8000830:	2b02      	cmp	r3, #2
 8000832:	d11f      	bne.n	8000874 <MAX86916_Config+0x100>
		if (initStruct.frequency > MAX86916_SR_400Hz && initStruct.pulse_width == MAX86916_PW_420)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	2b0c      	cmp	r3, #12
 8000838:	d904      	bls.n	8000844 <MAX86916_Config+0xd0>
 800083a:	7a3b      	ldrb	r3, [r7, #8]
 800083c:	2b03      	cmp	r3, #3
 800083e:	d101      	bne.n	8000844 <MAX86916_Config+0xd0>
			initStruct.frequency = MAX86916_SR_400Hz;
 8000840:	230c      	movs	r3, #12
 8000842:	71fb      	strb	r3, [r7, #7]
		if (initStruct.frequency > MAX86916_SR_800Hz && initStruct.pulse_width == MAX86916_PW_220)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b10      	cmp	r3, #16
 8000848:	d904      	bls.n	8000854 <MAX86916_Config+0xe0>
 800084a:	7a3b      	ldrb	r3, [r7, #8]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d101      	bne.n	8000854 <MAX86916_Config+0xe0>
			initStruct.frequency = MAX86916_SR_800Hz;
 8000850:	2310      	movs	r3, #16
 8000852:	71fb      	strb	r3, [r7, #7]
		if (initStruct.frequency > MAX86916_SR_1000Hz && initStruct.pulse_width == MAX86916_PW_120)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b14      	cmp	r3, #20
 8000858:	d904      	bls.n	8000864 <MAX86916_Config+0xf0>
 800085a:	7a3b      	ldrb	r3, [r7, #8]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d101      	bne.n	8000864 <MAX86916_Config+0xf0>
			initStruct.frequency = MAX86916_SR_1000Hz;
 8000860:	2314      	movs	r3, #20
 8000862:	71fb      	strb	r3, [r7, #7]
		if (initStruct.frequency > MAX86916_SR_1600Hz && initStruct.pulse_width == MAX86916_PW_70)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	2b18      	cmp	r3, #24
 8000868:	d904      	bls.n	8000874 <MAX86916_Config+0x100>
 800086a:	7a3b      	ldrb	r3, [r7, #8]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d101      	bne.n	8000874 <MAX86916_Config+0x100>
			initStruct.frequency = MAX86916_SR_1600Hz;
 8000870:	2318      	movs	r3, #24
 8000872:	71fb      	strb	r3, [r7, #7]
	}

	// 3. LED PULSE AMPLITUDE
	result &= MAX86916_I2C_Write(MAX86916_REG_LED1_PULSE_AMPLITUDE, initStruct.led_pa, 2);
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	3308      	adds	r3, #8
 8000878:	2202      	movs	r2, #2
 800087a:	4619      	mov	r1, r3
 800087c:	200c      	movs	r0, #12
 800087e:	f7ff fe1f 	bl	80004c0 <MAX86916_I2C_Write>
 8000882:	4603      	mov	r3, r0
 8000884:	461a      	mov	r2, r3
 8000886:	7dfb      	ldrb	r3, [r7, #23]
 8000888:	4013      	ands	r3, r2
 800088a:	2b00      	cmp	r3, #0
 800088c:	bf14      	ite	ne
 800088e:	2301      	movne	r3, #1
 8000890:	2300      	moveq	r3, #0
 8000892:	75fb      	strb	r3, [r7, #23]
	result &= MAX86916_I2C_Write(MAX86916_REG_LED_SEQUENCE1, &led_seq1, 1);
 8000894:	f107 0312 	add.w	r3, r7, #18
 8000898:	2201      	movs	r2, #1
 800089a:	4619      	mov	r1, r3
 800089c:	2013      	movs	r0, #19
 800089e:	f7ff fe0f 	bl	80004c0 <MAX86916_I2C_Write>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	7dfb      	ldrb	r3, [r7, #23]
 80008a8:	4013      	ands	r3, r2
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	bf14      	ite	ne
 80008ae:	2301      	movne	r3, #1
 80008b0:	2300      	moveq	r3, #0
 80008b2:	75fb      	strb	r3, [r7, #23]
	result &= MAX86916_I2C_Write(MAX86916_REG_LED_RANGE, &led_rge, 1);
 80008b4:	f107 0311 	add.w	r3, r7, #17
 80008b8:	2201      	movs	r2, #1
 80008ba:	4619      	mov	r1, r3
 80008bc:	2011      	movs	r0, #17
 80008be:	f7ff fdff 	bl	80004c0 <MAX86916_I2C_Write>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	7dfb      	ldrb	r3, [r7, #23]
 80008c8:	4013      	ands	r3, r2
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	bf14      	ite	ne
 80008ce:	2301      	movne	r3, #1
 80008d0:	2300      	moveq	r3, #0
 80008d2:	75fb      	strb	r3, [r7, #23]

	// Configure LED3 and LED4 amplitude and Multi-LED control registers if MULTI_LED_MODE is enabled
	if (initStruct.mode == MAX86916_MODE_FLEX) {
 80008d4:	793b      	ldrb	r3, [r7, #4]
 80008d6:	2b03      	cmp	r3, #3
 80008d8:	d122      	bne.n	8000920 <MAX86916_Config+0x1ac>
		temp = 0x43;
 80008da:	2343      	movs	r3, #67	; 0x43
 80008dc:	753b      	strb	r3, [r7, #20]
		result &= MAX86916_I2C_Write(MAX86916_REG_LED_SEQUENCE2, &temp, 1);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	2201      	movs	r2, #1
 80008e4:	4619      	mov	r1, r3
 80008e6:	2014      	movs	r0, #20
 80008e8:	f7ff fdea 	bl	80004c0 <MAX86916_I2C_Write>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	7dfb      	ldrb	r3, [r7, #23]
 80008f2:	4013      	ands	r3, r2
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	bf14      	ite	ne
 80008f8:	2301      	movne	r3, #1
 80008fa:	2300      	moveq	r3, #0
 80008fc:	75fb      	strb	r3, [r7, #23]
		result &= MAX86916_I2C_Write(MAX86916_REG_LED3_PULSE_AMPLITUDE, initStruct.led_pa + 2, 2);
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	3308      	adds	r3, #8
 8000902:	3302      	adds	r3, #2
 8000904:	2202      	movs	r2, #2
 8000906:	4619      	mov	r1, r3
 8000908:	200e      	movs	r0, #14
 800090a:	f7ff fdd9 	bl	80004c0 <MAX86916_I2C_Write>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	7dfb      	ldrb	r3, [r7, #23]
 8000914:	4013      	ands	r3, r2
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf14      	ite	ne
 800091a:	2301      	movne	r3, #1
 800091c:	2300      	moveq	r3, #0
 800091e:	75fb      	strb	r3, [r7, #23]
	}

	// 4. FIFO CONFIGURATION
	if (initStruct.fifo_a_full > 15) {
 8000920:	7afb      	ldrb	r3, [r7, #11]
 8000922:	2b0f      	cmp	r3, #15
 8000924:	d901      	bls.n	800092a <MAX86916_Config+0x1b6>
		initStruct.fifo_a_full = 15;
 8000926:	230f      	movs	r3, #15
 8000928:	72fb      	strb	r3, [r7, #11]
	}
	temp = initStruct.fifo_avg | initStruct.fifo_rollover | initStruct.fifo_a_full;
 800092a:	7a7a      	ldrb	r2, [r7, #9]
 800092c:	7abb      	ldrb	r3, [r7, #10]
 800092e:	4313      	orrs	r3, r2
 8000930:	b2da      	uxtb	r2, r3
 8000932:	7afb      	ldrb	r3, [r7, #11]
 8000934:	4313      	orrs	r3, r2
 8000936:	b2db      	uxtb	r3, r3
 8000938:	753b      	strb	r3, [r7, #20]
	result &= MAX86916_I2C_Write(MAX86916_REG_FIFO_CONFIGURATION, &fifo_config, 1);
 800093a:	f107 0313 	add.w	r3, r7, #19
 800093e:	2201      	movs	r2, #1
 8000940:	4619      	mov	r1, r3
 8000942:	2008      	movs	r0, #8
 8000944:	f7ff fdbc 	bl	80004c0 <MAX86916_I2C_Write>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	7dfb      	ldrb	r3, [r7, #23]
 800094e:	4013      	ands	r3, r2
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf14      	ite	ne
 8000954:	2301      	movne	r3, #1
 8000956:	2300      	moveq	r3, #0
 8000958:	75fb      	strb	r3, [r7, #23]

	// 5. CLEAR FIFO
	MAX86916_Clear_Fifo();
 800095a:	f000 f837 	bl	80009cc <MAX86916_Clear_Fifo>

	// SAVE SETTINGS
	ppg_config.mode = ppg_config.mode;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MAX86916_Config+0x254>)
 8000960:	781a      	ldrb	r2, [r3, #0]
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MAX86916_Config+0x254>)
 8000964:	701a      	strb	r2, [r3, #0]
	ppg_config.shutdown = initStruct.shutdown;
 8000966:	797a      	ldrb	r2, [r7, #5]
 8000968:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MAX86916_Config+0x254>)
 800096a:	705a      	strb	r2, [r3, #1]
	ppg_config.full_scale = initStruct.full_scale;
 800096c:	79ba      	ldrb	r2, [r7, #6]
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MAX86916_Config+0x254>)
 8000970:	709a      	strb	r2, [r3, #2]
	ppg_config.frequency = initStruct.frequency;
 8000972:	79fa      	ldrb	r2, [r7, #7]
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MAX86916_Config+0x254>)
 8000976:	70da      	strb	r2, [r3, #3]
	ppg_config.pulse_width = initStruct.pulse_width;
 8000978:	7a3a      	ldrb	r2, [r7, #8]
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MAX86916_Config+0x254>)
 800097c:	711a      	strb	r2, [r3, #4]
	uint8_t i;
	for (i = 0; i < 3; i++) {
 800097e:	2300      	movs	r3, #0
 8000980:	75bb      	strb	r3, [r7, #22]
 8000982:	e00d      	b.n	80009a0 <MAX86916_Config+0x22c>
		ppg_config.led_pa[i] = initStruct.led_pa[i];
 8000984:	7dba      	ldrb	r2, [r7, #22]
 8000986:	7dbb      	ldrb	r3, [r7, #22]
 8000988:	f107 0118 	add.w	r1, r7, #24
 800098c:	440a      	add	r2, r1
 800098e:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8000992:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <MAX86916_Config+0x254>)
 8000994:	4413      	add	r3, r2
 8000996:	460a      	mov	r2, r1
 8000998:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < 3; i++) {
 800099a:	7dbb      	ldrb	r3, [r7, #22]
 800099c:	3301      	adds	r3, #1
 800099e:	75bb      	strb	r3, [r7, #22]
 80009a0:	7dbb      	ldrb	r3, [r7, #22]
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d9ee      	bls.n	8000984 <MAX86916_Config+0x210>
	}

	// Check if registers have been written
	bool flag = MAX86916_Check();
 80009a6:	f7ff fe33 	bl	8000610 <MAX86916_Check>
 80009aa:	4603      	mov	r3, r0
 80009ac:	757b      	strb	r3, [r7, #21]
	if (flag == false)
 80009ae:	7d7b      	ldrb	r3, [r7, #21]
 80009b0:	f083 0301 	eor.w	r3, r3, #1
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MAX86916_Config+0x24a>
		return false;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <MAX86916_Config+0x24c>

	return true;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	371c      	adds	r7, #28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd90      	pop	{r4, r7, pc}
 80009c8:	200003c0 	.word	0x200003c0

080009cc <MAX86916_Clear_Fifo>:
}

/**
 * Clear Fifo registers
 */
bool MAX86916_Clear_Fifo(void) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
	uint8_t reset = 0x00;
 80009d2:	2300      	movs	r3, #0
 80009d4:	71bb      	strb	r3, [r7, #6]
	bool result = true;
 80009d6:	2301      	movs	r3, #1
 80009d8:	71fb      	strb	r3, [r7, #7]
	result &= MAX86916_I2C_Write(MAX86916_REG_FIFO_WRITE_PTR, &reset, 1);
 80009da:	1dbb      	adds	r3, r7, #6
 80009dc:	2201      	movs	r2, #1
 80009de:	4619      	mov	r1, r3
 80009e0:	2004      	movs	r0, #4
 80009e2:	f7ff fd6d 	bl	80004c0 <MAX86916_I2C_Write>
 80009e6:	4603      	mov	r3, r0
 80009e8:	461a      	mov	r2, r3
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4013      	ands	r3, r2
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	bf14      	ite	ne
 80009f2:	2301      	movne	r3, #1
 80009f4:	2300      	moveq	r3, #0
 80009f6:	71fb      	strb	r3, [r7, #7]
	result &= MAX86916_I2C_Write(MAX86916_REG_FIFO_OVERFLOW_COUNTER, &reset, 1);
 80009f8:	1dbb      	adds	r3, r7, #6
 80009fa:	2201      	movs	r2, #1
 80009fc:	4619      	mov	r1, r3
 80009fe:	2005      	movs	r0, #5
 8000a00:	f7ff fd5e 	bl	80004c0 <MAX86916_I2C_Write>
 8000a04:	4603      	mov	r3, r0
 8000a06:	461a      	mov	r2, r3
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	bf14      	ite	ne
 8000a10:	2301      	movne	r3, #1
 8000a12:	2300      	moveq	r3, #0
 8000a14:	71fb      	strb	r3, [r7, #7]
	result &= MAX86916_I2C_Write(MAX86916_REG_FIFO_READ_PTR, &reset, 1);
 8000a16:	1dbb      	adds	r3, r7, #6
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	2006      	movs	r0, #6
 8000a1e:	f7ff fd4f 	bl	80004c0 <MAX86916_I2C_Write>
 8000a22:	4603      	mov	r3, r0
 8000a24:	461a      	mov	r2, r3
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	bf14      	ite	ne
 8000a2e:	2301      	movne	r3, #1
 8000a30:	2300      	moveq	r3, #0
 8000a32:	71fb      	strb	r3, [r7, #7]
	return result;
 8000a34:	79fb      	ldrb	r3, [r7, #7]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a46:	f000 fb21 	bl	800108c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a4a:	f000 f83d 	bl	8000ac8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a4e:	f000 f8d5 	bl	8000bfc <MX_GPIO_Init>
	MX_I2C3_Init();
 8000a52:	f000 f8a5 	bl	8000ba0 <MX_I2C3_Init>
	MX_USB_DEVICE_Init();
 8000a56:	f006 fbf9 	bl	800724c <MX_USB_DEVICE_Init>

	/* USER CODE BEGIN 2 */
	HAL_Delay(500);
 8000a5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a5e:	f000 fb87 	bl	8001170 <HAL_Delay>
	MAX86916_Init_TypeDef ppg_init;
	if (MAX86916_Read_Part_ID() == MAX86916_PART_ID_VALUE) {
 8000a62:	f7ff fdc7 	bl	80005f4 <MAX86916_Read_Part_ID>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b2b      	cmp	r3, #43	; 0x2b
 8000a6a:	d11c      	bne.n	8000aa6 <main+0x66>

		ppg_init.fifo_a_full = 0x0F;
 8000a6c:	230f      	movs	r3, #15
 8000a6e:	72fb      	strb	r3, [r7, #11]
		ppg_init.fifo_avg = MAX86916_FIFO_AVG_1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	727b      	strb	r3, [r7, #9]
		ppg_init.fifo_rollover = MAX86916_FIFO_ROLLOVER_OFF;
 8000a74:	2300      	movs	r3, #0
 8000a76:	72bb      	strb	r3, [r7, #10]
		ppg_init.frequency = MAX86916_SR_100Hz;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	71fb      	strb	r3, [r7, #7]
		ppg_init.full_scale = MAX86916_FS_16384;
 8000a7c:	2340      	movs	r3, #64	; 0x40
 8000a7e:	71bb      	strb	r3, [r7, #6]
		ppg_init.led_pa[0] = 0x05;
 8000a80:	2305      	movs	r3, #5
 8000a82:	733b      	strb	r3, [r7, #12]
		ppg_init.led_pa[1] = 0x05;
 8000a84:	2305      	movs	r3, #5
 8000a86:	737b      	strb	r3, [r7, #13]
		ppg_init.led_pa[2] = 0x05;
 8000a88:	2305      	movs	r3, #5
 8000a8a:	73bb      	strb	r3, [r7, #14]
		ppg_init.led_pa[3] = 0x05;
 8000a8c:	2305      	movs	r3, #5
 8000a8e:	73fb      	strb	r3, [r7, #15]
		ppg_init.mode = MAX86916_MODE_FLEX;
 8000a90:	2303      	movs	r3, #3
 8000a92:	713b      	strb	r3, [r7, #4]
		ppg_init.pulse_width = MAX86916_PW_420;
 8000a94:	2303      	movs	r3, #3
 8000a96:	723b      	strb	r3, [r7, #8]
		ppg_init.shutdown = MAX86916_SHDNMODE_SHUTDOWN;
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	717b      	strb	r3, [r7, #5]
		MAX86916_Config(ppg_init);
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000aa2:	f7ff fe67 	bl	8000774 <MAX86916_Config>
	}
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	ppg_init.shutdown = MAX86916_SHDNMODE_ON;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	717b      	strb	r3, [r7, #5]
	MAX86916_Config(ppg_init);
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ab0:	f7ff fe60 	bl	8000774 <MAX86916_Config>
	while (1) {
		//Codice che legge da PPG i campioni ~ 2ms?
		CDC_Transmit_FS("CIAO", 4);
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <main+0x84>)
 8000ab8:	f006 fc86 	bl	80073c8 <CDC_Transmit_FS>
		HAL_Delay(10);
 8000abc:	200a      	movs	r0, #10
 8000abe:	f000 fb57 	bl	8001170 <HAL_Delay>
	while (1) {
 8000ac2:	e7f7      	b.n	8000ab4 <main+0x74>
 8000ac4:	08007d0c 	.word	0x08007d0c

08000ac8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b094      	sub	sp, #80	; 0x50
 8000acc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ace:	f107 0320 	add.w	r3, r7, #32
 8000ad2:	2230      	movs	r2, #48	; 0x30
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f007 f904 	bl	8007ce4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <SystemClock_Config+0xd0>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4a28      	ldr	r2, [pc, #160]	; (8000b98 <SystemClock_Config+0xd0>)
 8000af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
 8000afc:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <SystemClock_Config+0xd0>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <SystemClock_Config+0xd4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <SystemClock_Config+0xd4>)
 8000b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <SystemClock_Config+0xd4>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000b24:	2303      	movs	r3, #3
 8000b26:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b32:	2310      	movs	r3, #16
 8000b34:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b36:	2302      	movs	r3, #2
 8000b38:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000b40:	2308      	movs	r3, #8
 8000b42:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000b44:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b48:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b4e:	2307      	movs	r3, #7
 8000b50:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b52:	f107 0320 	add.w	r3, r7, #32
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 ff0e 	bl	8003978 <HAL_RCC_OscConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0x9e>
		Error_Handler();
 8000b62:	f000 f98b 	bl	8000e7c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b66:	230f      	movs	r3, #15
 8000b68:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 f971 	bl	8003e68 <HAL_RCC_ClockConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0xc8>
		Error_Handler();
 8000b8c:	f000 f976 	bl	8000e7c <Error_Handler>
	}
}
 8000b90:	bf00      	nop
 8000b92:	3750      	adds	r7, #80	; 0x50
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40007000 	.word	0x40007000

08000ba0 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000ba6:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <MX_I2C3_Init+0x54>)
 8000ba8:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000bac:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <MX_I2C3_Init+0x58>)
 8000bae:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000bbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bc2:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_I2C3_Init+0x50>)
 8000bde:	f000 fdb3 	bl	8001748 <HAL_I2C_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_I2C3_Init+0x4c>
		Error_Handler();
 8000be8:	f000 f948 	bl	8000e7c <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200003cc 	.word	0x200003cc
 8000bf4:	40005c00 	.word	0x40005c00
 8000bf8:	000186a0 	.word	0x000186a0

08000bfc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08c      	sub	sp, #48	; 0x30
 8000c00:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
 8000c16:	4b93      	ldr	r3, [pc, #588]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a92      	ldr	r2, [pc, #584]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c1c:	f043 0310 	orr.w	r3, r3, #16
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b90      	ldr	r3, [pc, #576]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0310 	and.w	r3, r3, #16
 8000c2a:	61bb      	str	r3, [r7, #24]
 8000c2c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	4b8c      	ldr	r3, [pc, #560]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a8b      	ldr	r2, [pc, #556]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b89      	ldr	r3, [pc, #548]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b85      	ldr	r3, [pc, #532]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a84      	ldr	r2, [pc, #528]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b82      	ldr	r3, [pc, #520]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b7e      	ldr	r3, [pc, #504]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a7d      	ldr	r2, [pc, #500]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b7b      	ldr	r3, [pc, #492]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b77      	ldr	r3, [pc, #476]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a76      	ldr	r2, [pc, #472]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b74      	ldr	r3, [pc, #464]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b70      	ldr	r3, [pc, #448]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a6f      	ldr	r2, [pc, #444]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b6d      	ldr	r3, [pc, #436]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	486a      	ldr	r0, [pc, #424]	; (8000e68 <MX_GPIO_Init+0x26c>)
 8000cc0:	f000 fd28 	bl	8001714 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4868      	ldr	r0, [pc, #416]	; (8000e6c <MX_GPIO_Init+0x270>)
 8000cca:	f000 fd23 	bl	8001714 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000cd4:	4866      	ldr	r0, [pc, #408]	; (8000e70 <MX_GPIO_Init+0x274>)
 8000cd6:	f000 fd1d 	bl	8001714 <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000cda:	2308      	movs	r3, #8
 8000cdc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	485d      	ldr	r0, [pc, #372]	; (8000e68 <MX_GPIO_Init+0x26c>)
 8000cf2:	f000 fb73 	bl	80013dc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4857      	ldr	r0, [pc, #348]	; (8000e6c <MX_GPIO_Init+0x270>)
 8000d0e:	f000 fb65 	bl	80013dc <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d12:	2308      	movs	r3, #8
 8000d14:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d22:	2305      	movs	r3, #5
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	484f      	ldr	r0, [pc, #316]	; (8000e6c <MX_GPIO_Init+0x270>)
 8000d2e:	f000 fb55 	bl	80013dc <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000d32:	2301      	movs	r3, #1
 8000d34:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d3a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	484b      	ldr	r0, [pc, #300]	; (8000e74 <MX_GPIO_Init+0x278>)
 8000d48:	f000 fb48 	bl	80013dc <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d4c:	2310      	movs	r3, #16
 8000d4e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d5c:	2306      	movs	r3, #6
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	4843      	ldr	r0, [pc, #268]	; (8000e74 <MX_GPIO_Init+0x278>)
 8000d68:	f000 fb38 	bl	80013dc <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 8000d6c:	23e0      	movs	r3, #224	; 0xe0
 8000d6e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d7c:	2305      	movs	r3, #5
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	483b      	ldr	r0, [pc, #236]	; (8000e74 <MX_GPIO_Init+0x278>)
 8000d88:	f000 fb28 	bl	80013dc <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4836      	ldr	r0, [pc, #216]	; (8000e78 <MX_GPIO_Init+0x27c>)
 8000da0:	f000 fb1c 	bl	80013dc <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000db6:	2305      	movs	r3, #5
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	482d      	ldr	r0, [pc, #180]	; (8000e78 <MX_GPIO_Init+0x27c>)
 8000dc2:	f000 fb0b 	bl	80013dc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000dc6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000dca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4824      	ldr	r0, [pc, #144]	; (8000e70 <MX_GPIO_Init+0x274>)
 8000de0:	f000 fafc 	bl	80013dc <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 8000de4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000de8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000df6:	2306      	movs	r3, #6
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	481a      	ldr	r0, [pc, #104]	; (8000e6c <MX_GPIO_Init+0x270>)
 8000e02:	f000 faeb 	bl	80013dc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e06:	2320      	movs	r3, #32
 8000e08:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	4815      	ldr	r0, [pc, #84]	; (8000e70 <MX_GPIO_Init+0x274>)
 8000e1a:	f000 fadf 	bl	80013dc <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin | Audio_SDA_Pin;
 8000e1e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e22:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e24:	2312      	movs	r3, #18
 8000e26:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e30:	2304      	movs	r3, #4
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480f      	ldr	r0, [pc, #60]	; (8000e78 <MX_GPIO_Init+0x27c>)
 8000e3c:	f000 face 	bl	80013dc <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e44:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e48:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	4804      	ldr	r0, [pc, #16]	; (8000e68 <MX_GPIO_Init+0x26c>)
 8000e56:	f000 fac1 	bl	80013dc <HAL_GPIO_Init>

}
 8000e5a:	bf00      	nop
 8000e5c:	3730      	adds	r7, #48	; 0x30
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40020800 	.word	0x40020800
 8000e70:	40020c00 	.word	0x40020c00
 8000e74:	40020000 	.word	0x40020000
 8000e78:	40020400 	.word	0x40020400

08000e7c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e84:	e7fe      	b.n	8000e84 <Error_Handler+0x8>
	...

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a08      	ldr	r2, [pc, #32]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ec6:	2007      	movs	r0, #7
 8000ec8:	f000 fa46 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800

08000ed8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a29      	ldr	r2, [pc, #164]	; (8000f9c <HAL_I2C_MspInit+0xc4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d14b      	bne.n	8000f92 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a27      	ldr	r2, [pc, #156]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a20      	ldr	r2, [pc, #128]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f38:	2312      	movs	r3, #18
 8000f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f40:	2301      	movs	r3, #1
 8000f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f44:	2304      	movs	r3, #4
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4815      	ldr	r0, [pc, #84]	; (8000fa4 <HAL_I2C_MspInit+0xcc>)
 8000f50:	f000 fa44 	bl	80013dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5a:	2312      	movs	r3, #18
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f62:	2301      	movs	r3, #1
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f66:	2304      	movs	r3, #4
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <HAL_I2C_MspInit+0xd0>)
 8000f72:	f000 fa33 	bl	80013dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	; 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40005c00 	.word	0x40005c00
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40020000 	.word	0x40020000

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <MemManage_Handler+0x4>

08000fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <BusFault_Handler+0x4>

08000fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <UsageFault_Handler+0x4>

08000fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff8:	f000 f89a 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <OTG_FS_IRQHandler+0x10>)
 8001006:	f001 fc84 	bl	8002912 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200018f4 	.word	0x200018f4

08001014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <SystemInit+0x20>)
 800101a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <SystemInit+0x20>)
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001070 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800103e:	490e      	ldr	r1, [pc, #56]	; (8001078 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001040:	4a0e      	ldr	r2, [pc, #56]	; (800107c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001044:	e002      	b.n	800104c <LoopCopyDataInit>

08001046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104a:	3304      	adds	r3, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800104c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001050:	d3f9      	bcc.n	8001046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001054:	4c0b      	ldr	r4, [pc, #44]	; (8001084 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001058:	e001      	b.n	800105e <LoopFillZerobss>

0800105a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800105c:	3204      	adds	r2, #4

0800105e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001060:	d3fb      	bcc.n	800105a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001062:	f7ff ffd7 	bl	8001014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001066:	f006 fe19 	bl	8007c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106a:	f7ff fce9 	bl	8000a40 <main>
  bx  lr    
 800106e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001070:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001078:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800107c:	08007d84 	.word	0x08007d84
  ldr r2, =_sbss
 8001080:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001084:	20001cfc 	.word	0x20001cfc

08001088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC_IRQHandler>
	...

0800108c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_Init+0x40>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <HAL_Init+0x40>)
 8001096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800109a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_Init+0x40>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_Init+0x40>)
 80010a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_Init+0x40>)
 80010ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b4:	2003      	movs	r0, #3
 80010b6:	f000 f94f 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 f808 	bl	80010d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c0:	f7ff fee2 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023c00 	.word	0x40023c00

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_InitTick+0x54>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x58>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f967 	bl	80013c2 <HAL_SYSTICK_Config>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00e      	b.n	800111c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	d80a      	bhi.n	800111a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001104:	2200      	movs	r2, #0
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f000 f92f 	bl	800136e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001110:	4a06      	ldr	r2, [pc, #24]	; (800112c <HAL_InitTick+0x5c>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000000 	.word	0x20000000
 8001128:	20000008 	.word	0x20000008
 800112c:	20000004 	.word	0x20000004

08001130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_IncTick+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_IncTick+0x24>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000008 	.word	0x20000008
 8001154:	20000420 	.word	0x20000420

08001158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <HAL_GetTick+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000420 	.word	0x20000420

08001170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001178:	f7ff ffee 	bl	8001158 <HAL_GetTick>
 800117c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001188:	d005      	beq.n	8001196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_Delay+0x44>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001196:	bf00      	nop
 8001198:	f7ff ffde 	bl	8001158 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d8f7      	bhi.n	8001198 <HAL_Delay+0x28>
  {
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008

080011b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d4:	4013      	ands	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ea:	4a04      	ldr	r2, [pc, #16]	; (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	60d3      	str	r3, [r2, #12]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <__NVIC_GetPriorityGrouping+0x18>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	f003 0307 	and.w	r3, r3, #7
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	2b00      	cmp	r3, #0
 800122c:	db0b      	blt.n	8001246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f003 021f 	and.w	r2, r3, #31
 8001234:	4907      	ldr	r1, [pc, #28]	; (8001254 <__NVIC_EnableIRQ+0x38>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	095b      	lsrs	r3, r3, #5
 800123c:	2001      	movs	r0, #1
 800123e:	fa00 f202 	lsl.w	r2, r0, r2
 8001242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e100 	.word	0xe000e100

08001258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db0a      	blt.n	8001282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	490c      	ldr	r1, [pc, #48]	; (80012a4 <__NVIC_SetPriority+0x4c>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	440b      	add	r3, r1
 800127c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001280:	e00a      	b.n	8001298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4908      	ldr	r1, [pc, #32]	; (80012a8 <__NVIC_SetPriority+0x50>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	3b04      	subs	r3, #4
 8001290:	0112      	lsls	r2, r2, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	440b      	add	r3, r1
 8001296:	761a      	strb	r2, [r3, #24]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f1c3 0307 	rsb	r3, r3, #7
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	bf28      	it	cs
 80012ca:	2304      	movcs	r3, #4
 80012cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3304      	adds	r3, #4
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d902      	bls.n	80012dc <NVIC_EncodePriority+0x30>
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3b03      	subs	r3, #3
 80012da:	e000      	b.n	80012de <NVIC_EncodePriority+0x32>
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	401a      	ands	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	43d9      	mvns	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	4313      	orrs	r3, r2
         );
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f7ff ff8e 	bl	8001258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff29 	bl	80011b8 <__NVIC_SetPriorityGrouping>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff3e 	bl	8001200 <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff8e 	bl	80012ac <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5d 	bl	8001258 <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff31 	bl	800121c <__NVIC_EnableIRQ>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffa2 	bl	8001314 <SysTick_Config>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	e16b      	b.n	80016d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013f8:	2201      	movs	r2, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	429a      	cmp	r2, r3
 8001412:	f040 815a 	bne.w	80016ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d005      	beq.n	800142e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142a:	2b02      	cmp	r3, #2
 800142c:	d130      	bne.n	8001490 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	2203      	movs	r2, #3
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001464:	2201      	movs	r2, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	091b      	lsrs	r3, r3, #4
 800147a:	f003 0201 	and.w	r2, r3, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b03      	cmp	r3, #3
 800149a:	d017      	beq.n	80014cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d123      	bne.n	8001520 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	08da      	lsrs	r2, r3, #3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3208      	adds	r2, #8
 80014e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	220f      	movs	r2, #15
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	691a      	ldr	r2, [r3, #16]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	08da      	lsrs	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3208      	adds	r2, #8
 800151a:	69b9      	ldr	r1, [r7, #24]
 800151c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0203 	and.w	r2, r3, #3
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80b4 	beq.w	80016ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b60      	ldr	r3, [pc, #384]	; (80016e8 <HAL_GPIO_Init+0x30c>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	4a5f      	ldr	r2, [pc, #380]	; (80016e8 <HAL_GPIO_Init+0x30c>)
 800156c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001570:	6453      	str	r3, [r2, #68]	; 0x44
 8001572:	4b5d      	ldr	r3, [pc, #372]	; (80016e8 <HAL_GPIO_Init+0x30c>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800157e:	4a5b      	ldr	r2, [pc, #364]	; (80016ec <HAL_GPIO_Init+0x310>)
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	3302      	adds	r3, #2
 8001586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	220f      	movs	r2, #15
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a52      	ldr	r2, [pc, #328]	; (80016f0 <HAL_GPIO_Init+0x314>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d02b      	beq.n	8001602 <HAL_GPIO_Init+0x226>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a51      	ldr	r2, [pc, #324]	; (80016f4 <HAL_GPIO_Init+0x318>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d025      	beq.n	80015fe <HAL_GPIO_Init+0x222>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a50      	ldr	r2, [pc, #320]	; (80016f8 <HAL_GPIO_Init+0x31c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d01f      	beq.n	80015fa <HAL_GPIO_Init+0x21e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4f      	ldr	r2, [pc, #316]	; (80016fc <HAL_GPIO_Init+0x320>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d019      	beq.n	80015f6 <HAL_GPIO_Init+0x21a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4e      	ldr	r2, [pc, #312]	; (8001700 <HAL_GPIO_Init+0x324>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d013      	beq.n	80015f2 <HAL_GPIO_Init+0x216>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4d      	ldr	r2, [pc, #308]	; (8001704 <HAL_GPIO_Init+0x328>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00d      	beq.n	80015ee <HAL_GPIO_Init+0x212>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4c      	ldr	r2, [pc, #304]	; (8001708 <HAL_GPIO_Init+0x32c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <HAL_GPIO_Init+0x20e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4b      	ldr	r2, [pc, #300]	; (800170c <HAL_GPIO_Init+0x330>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d101      	bne.n	80015e6 <HAL_GPIO_Init+0x20a>
 80015e2:	2307      	movs	r3, #7
 80015e4:	e00e      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015e6:	2308      	movs	r3, #8
 80015e8:	e00c      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015ea:	2306      	movs	r3, #6
 80015ec:	e00a      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015ee:	2305      	movs	r3, #5
 80015f0:	e008      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015f2:	2304      	movs	r3, #4
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015f6:	2303      	movs	r3, #3
 80015f8:	e004      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e002      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_GPIO_Init+0x228>
 8001602:	2300      	movs	r3, #0
 8001604:	69fa      	ldr	r2, [r7, #28]
 8001606:	f002 0203 	and.w	r2, r2, #3
 800160a:	0092      	lsls	r2, r2, #2
 800160c:	4093      	lsls	r3, r2
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001614:	4935      	ldr	r1, [pc, #212]	; (80016ec <HAL_GPIO_Init+0x310>)
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001622:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <HAL_GPIO_Init+0x334>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001646:	4a32      	ldr	r2, [pc, #200]	; (8001710 <HAL_GPIO_Init+0x334>)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800164c:	4b30      	ldr	r3, [pc, #192]	; (8001710 <HAL_GPIO_Init+0x334>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001670:	4a27      	ldr	r2, [pc, #156]	; (8001710 <HAL_GPIO_Init+0x334>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001676:	4b26      	ldr	r3, [pc, #152]	; (8001710 <HAL_GPIO_Init+0x334>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800169a:	4a1d      	ldr	r2, [pc, #116]	; (8001710 <HAL_GPIO_Init+0x334>)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <HAL_GPIO_Init+0x334>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016c4:	4a12      	ldr	r2, [pc, #72]	; (8001710 <HAL_GPIO_Init+0x334>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3301      	adds	r3, #1
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	2b0f      	cmp	r3, #15
 80016d4:	f67f ae90 	bls.w	80013f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40013800 	.word	0x40013800
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40020400 	.word	0x40020400
 80016f8:	40020800 	.word	0x40020800
 80016fc:	40020c00 	.word	0x40020c00
 8001700:	40021000 	.word	0x40021000
 8001704:	40021400 	.word	0x40021400
 8001708:	40021800 	.word	0x40021800
 800170c:	40021c00 	.word	0x40021c00
 8001710:	40013c00 	.word	0x40013c00

08001714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	807b      	strh	r3, [r7, #2]
 8001720:	4613      	mov	r3, r2
 8001722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001724:	787b      	ldrb	r3, [r7, #1]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800172a:	887a      	ldrh	r2, [r7, #2]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001730:	e003      	b.n	800173a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001732:	887b      	ldrh	r3, [r7, #2]
 8001734:	041a      	lsls	r2, r3, #16
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	619a      	str	r2, [r3, #24]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e12b      	b.n	80019b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d106      	bne.n	8001774 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fbb2 	bl	8000ed8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2224      	movs	r2, #36	; 0x24
 8001778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0201 	bic.w	r2, r2, #1
 800178a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800179a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017ac:	f002 fd30 	bl	8004210 <HAL_RCC_GetPCLK1Freq>
 80017b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4a81      	ldr	r2, [pc, #516]	; (80019bc <HAL_I2C_Init+0x274>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d807      	bhi.n	80017cc <HAL_I2C_Init+0x84>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4a80      	ldr	r2, [pc, #512]	; (80019c0 <HAL_I2C_Init+0x278>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	bf94      	ite	ls
 80017c4:	2301      	movls	r3, #1
 80017c6:	2300      	movhi	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	e006      	b.n	80017da <HAL_I2C_Init+0x92>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4a7d      	ldr	r2, [pc, #500]	; (80019c4 <HAL_I2C_Init+0x27c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	bf94      	ite	ls
 80017d4:	2301      	movls	r3, #1
 80017d6:	2300      	movhi	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e0e7      	b.n	80019b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4a78      	ldr	r2, [pc, #480]	; (80019c8 <HAL_I2C_Init+0x280>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0c9b      	lsrs	r3, r3, #18
 80017ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	430a      	orrs	r2, r1
 8001800:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	4a6a      	ldr	r2, [pc, #424]	; (80019bc <HAL_I2C_Init+0x274>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d802      	bhi.n	800181c <HAL_I2C_Init+0xd4>
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	3301      	adds	r3, #1
 800181a:	e009      	b.n	8001830 <HAL_I2C_Init+0xe8>
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001822:	fb02 f303 	mul.w	r3, r2, r3
 8001826:	4a69      	ldr	r2, [pc, #420]	; (80019cc <HAL_I2C_Init+0x284>)
 8001828:	fba2 2303 	umull	r2, r3, r2, r3
 800182c:	099b      	lsrs	r3, r3, #6
 800182e:	3301      	adds	r3, #1
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	430b      	orrs	r3, r1
 8001836:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001842:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	495c      	ldr	r1, [pc, #368]	; (80019bc <HAL_I2C_Init+0x274>)
 800184c:	428b      	cmp	r3, r1
 800184e:	d819      	bhi.n	8001884 <HAL_I2C_Init+0x13c>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1e59      	subs	r1, r3, #1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	fbb1 f3f3 	udiv	r3, r1, r3
 800185e:	1c59      	adds	r1, r3, #1
 8001860:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001864:	400b      	ands	r3, r1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00a      	beq.n	8001880 <HAL_I2C_Init+0x138>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1e59      	subs	r1, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fbb1 f3f3 	udiv	r3, r1, r3
 8001878:	3301      	adds	r3, #1
 800187a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800187e:	e051      	b.n	8001924 <HAL_I2C_Init+0x1dc>
 8001880:	2304      	movs	r3, #4
 8001882:	e04f      	b.n	8001924 <HAL_I2C_Init+0x1dc>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d111      	bne.n	80018b0 <HAL_I2C_Init+0x168>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1e58      	subs	r0, r3, #1
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6859      	ldr	r1, [r3, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	440b      	add	r3, r1
 800189a:	fbb0 f3f3 	udiv	r3, r0, r3
 800189e:	3301      	adds	r3, #1
 80018a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	bf0c      	ite	eq
 80018a8:	2301      	moveq	r3, #1
 80018aa:	2300      	movne	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	e012      	b.n	80018d6 <HAL_I2C_Init+0x18e>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1e58      	subs	r0, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	0099      	lsls	r1, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c6:	3301      	adds	r3, #1
 80018c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf0c      	ite	eq
 80018d0:	2301      	moveq	r3, #1
 80018d2:	2300      	movne	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_I2C_Init+0x196>
 80018da:	2301      	movs	r3, #1
 80018dc:	e022      	b.n	8001924 <HAL_I2C_Init+0x1dc>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10e      	bne.n	8001904 <HAL_I2C_Init+0x1bc>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1e58      	subs	r0, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6859      	ldr	r1, [r3, #4]
 80018ee:	460b      	mov	r3, r1
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	440b      	add	r3, r1
 80018f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f8:	3301      	adds	r3, #1
 80018fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001902:	e00f      	b.n	8001924 <HAL_I2C_Init+0x1dc>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1e58      	subs	r0, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6859      	ldr	r1, [r3, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	0099      	lsls	r1, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	fbb0 f3f3 	udiv	r3, r0, r3
 800191a:	3301      	adds	r3, #1
 800191c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001920:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	6809      	ldr	r1, [r1, #0]
 8001928:	4313      	orrs	r3, r2
 800192a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69da      	ldr	r2, [r3, #28]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001952:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6911      	ldr	r1, [r2, #16]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68d2      	ldr	r2, [r2, #12]
 800195e:	4311      	orrs	r1, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	430b      	orrs	r3, r1
 8001966:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2220      	movs	r2, #32
 800199e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	000186a0 	.word	0x000186a0
 80019c0:	001e847f 	.word	0x001e847f
 80019c4:	003d08ff 	.word	0x003d08ff
 80019c8:	431bde83 	.word	0x431bde83
 80019cc:	10624dd3 	.word	0x10624dd3

080019d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	461a      	mov	r2, r3
 80019dc:	460b      	mov	r3, r1
 80019de:	817b      	strh	r3, [r7, #10]
 80019e0:	4613      	mov	r3, r2
 80019e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019e4:	f7ff fbb8 	bl	8001158 <HAL_GetTick>
 80019e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b20      	cmp	r3, #32
 80019f4:	f040 80e0 	bne.w	8001bb8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	2319      	movs	r3, #25
 80019fe:	2201      	movs	r2, #1
 8001a00:	4970      	ldr	r1, [pc, #448]	; (8001bc4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 fc58 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e0d3      	b.n	8001bba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_I2C_Master_Transmit+0x50>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e0cc      	b.n	8001bba <HAL_I2C_Master_Transmit+0x1ea>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d007      	beq.n	8001a46 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 0201 	orr.w	r2, r2, #1
 8001a44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2221      	movs	r2, #33	; 0x21
 8001a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2210      	movs	r2, #16
 8001a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	893a      	ldrh	r2, [r7, #8]
 8001a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4a50      	ldr	r2, [pc, #320]	; (8001bc8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a88:	8979      	ldrh	r1, [r7, #10]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	6a3a      	ldr	r2, [r7, #32]
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 fac2 	bl	8002018 <I2C_MasterRequestWrite>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e08d      	b.n	8001bba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ab4:	e066      	b.n	8001b84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	6a39      	ldr	r1, [r7, #32]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 fcd2 	bl	8002464 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00d      	beq.n	8001ae2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d107      	bne.n	8001ade <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001adc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e06b      	b.n	8001bba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	781a      	ldrb	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d11b      	bne.n	8001b58 <HAL_I2C_Master_Transmit+0x188>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d017      	beq.n	8001b58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	6a39      	ldr	r1, [r7, #32]
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f000 fcc2 	bl	80024e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00d      	beq.n	8001b84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d107      	bne.n	8001b80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e01a      	b.n	8001bba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d194      	bne.n	8001ab6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e000      	b.n	8001bba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001bb8:	2302      	movs	r3, #2
  }
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	00100002 	.word	0x00100002
 8001bc8:	ffff0000 	.word	0xffff0000

08001bcc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08c      	sub	sp, #48	; 0x30
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	460b      	mov	r3, r1
 8001bda:	817b      	strh	r3, [r7, #10]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff faba 	bl	8001158 <HAL_GetTick>
 8001be4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b20      	cmp	r3, #32
 8001bf0:	f040 820b 	bne.w	800200a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	2319      	movs	r3, #25
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	497c      	ldr	r1, [pc, #496]	; (8001df0 <HAL_I2C_Master_Receive+0x224>)
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 fb5a 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e1fe      	b.n	800200c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_I2C_Master_Receive+0x50>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e1f7      	b.n	800200c <HAL_I2C_Master_Receive+0x440>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d007      	beq.n	8001c42 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 0201 	orr.w	r2, r2, #1
 8001c40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2222      	movs	r2, #34	; 0x22
 8001c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	893a      	ldrh	r2, [r7, #8]
 8001c72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4a5c      	ldr	r2, [pc, #368]	; (8001df4 <HAL_I2C_Master_Receive+0x228>)
 8001c82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c84:	8979      	ldrh	r1, [r7, #10]
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 fa46 	bl	800211c <I2C_MasterRequestRead>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e1b8      	b.n	800200c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d113      	bne.n	8001cca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	623b      	str	r3, [r7, #32]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	623b      	str	r3, [r7, #32]
 8001cb6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e18c      	b.n	8001fe4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d11b      	bne.n	8001d0a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e16c      	b.n	8001fe4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d11b      	bne.n	8001d4a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	e14c      	b.n	8001fe4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d70:	e138      	b.n	8001fe4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	f200 80f1 	bhi.w	8001f5e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d123      	bne.n	8001dcc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 fbed 	bl	8002568 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e139      	b.n	800200c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dca:	e10b      	b.n	8001fe4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d14e      	bne.n	8001e72 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dda:	2200      	movs	r2, #0
 8001ddc:	4906      	ldr	r1, [pc, #24]	; (8001df8 <HAL_I2C_Master_Receive+0x22c>)
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 fa6a 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d008      	beq.n	8001dfc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e10e      	b.n	800200c <HAL_I2C_Master_Receive+0x440>
 8001dee:	bf00      	nop
 8001df0:	00100002 	.word	0x00100002
 8001df4:	ffff0000 	.word	0xffff0000
 8001df8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e70:	e0b8      	b.n	8001fe4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e78:	2200      	movs	r2, #0
 8001e7a:	4966      	ldr	r1, [pc, #408]	; (8002014 <HAL_I2C_Master_Receive+0x448>)
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 fa1b 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0bf      	b.n	800200c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	494f      	ldr	r1, [pc, #316]	; (8002014 <HAL_I2C_Master_Receive+0x448>)
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 f9ed 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e091      	b.n	800200c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f5c:	e042      	b.n	8001fe4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 fb00 	bl	8002568 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e04c      	b.n	800200c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d118      	bne.n	8001fe4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f47f aec2 	bne.w	8001d72 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	e000      	b.n	800200c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800200a:	2302      	movs	r3, #2
  }
}
 800200c:	4618      	mov	r0, r3
 800200e:	3728      	adds	r7, #40	; 0x28
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	00010004 	.word	0x00010004

08002018 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af02      	add	r7, sp, #8
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	460b      	mov	r3, r1
 8002026:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b08      	cmp	r3, #8
 8002032:	d006      	beq.n	8002042 <I2C_MasterRequestWrite+0x2a>
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d003      	beq.n	8002042 <I2C_MasterRequestWrite+0x2a>
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002040:	d108      	bne.n	8002054 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	e00b      	b.n	800206c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	2b12      	cmp	r3, #18
 800205a:	d107      	bne.n	800206c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800206a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 f91d 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00d      	beq.n	80020a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002092:	d103      	bne.n	800209c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800209a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e035      	b.n	800210c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020a8:	d108      	bne.n	80020bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020aa:	897b      	ldrh	r3, [r7, #10]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020b8:	611a      	str	r2, [r3, #16]
 80020ba:	e01b      	b.n	80020f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020bc:	897b      	ldrh	r3, [r7, #10]
 80020be:	11db      	asrs	r3, r3, #7
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	f003 0306 	and.w	r3, r3, #6
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f063 030f 	orn	r3, r3, #15
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	490e      	ldr	r1, [pc, #56]	; (8002114 <I2C_MasterRequestWrite+0xfc>)
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f943 	bl	8002366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e010      	b.n	800210c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020ea:	897b      	ldrh	r3, [r7, #10]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4907      	ldr	r1, [pc, #28]	; (8002118 <I2C_MasterRequestWrite+0x100>)
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 f933 	bl	8002366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	00010008 	.word	0x00010008
 8002118:	00010002 	.word	0x00010002

0800211c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	460b      	mov	r3, r1
 800212a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002140:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2b08      	cmp	r3, #8
 8002146:	d006      	beq.n	8002156 <I2C_MasterRequestRead+0x3a>
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d003      	beq.n	8002156 <I2C_MasterRequestRead+0x3a>
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002154:	d108      	bne.n	8002168 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	e00b      	b.n	8002180 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	2b11      	cmp	r3, #17
 800216e:	d107      	bne.n	8002180 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800217e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 f893 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00d      	beq.n	80021b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021a6:	d103      	bne.n	80021b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e079      	b.n	80022a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021bc:	d108      	bne.n	80021d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021be:	897b      	ldrh	r3, [r7, #10]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	611a      	str	r2, [r3, #16]
 80021ce:	e05f      	b.n	8002290 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021d0:	897b      	ldrh	r3, [r7, #10]
 80021d2:	11db      	asrs	r3, r3, #7
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f003 0306 	and.w	r3, r3, #6
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f063 030f 	orn	r3, r3, #15
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	4930      	ldr	r1, [pc, #192]	; (80022b0 <I2C_MasterRequestRead+0x194>)
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 f8b9 	bl	8002366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e054      	b.n	80022a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021fe:	897b      	ldrh	r3, [r7, #10]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	4929      	ldr	r1, [pc, #164]	; (80022b4 <I2C_MasterRequestRead+0x198>)
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 f8a9 	bl	8002366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e044      	b.n	80022a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002242:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f831 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00d      	beq.n	8002278 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800226a:	d103      	bne.n	8002274 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002272:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e017      	b.n	80022a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002278:	897b      	ldrh	r3, [r7, #10]
 800227a:	11db      	asrs	r3, r3, #7
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f003 0306 	and.w	r3, r3, #6
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f063 030e 	orn	r3, r3, #14
 8002288:	b2da      	uxtb	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	4907      	ldr	r1, [pc, #28]	; (80022b4 <I2C_MasterRequestRead+0x198>)
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f865 	bl	8002366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	00010008 	.word	0x00010008
 80022b4:	00010002 	.word	0x00010002

080022b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	4613      	mov	r3, r2
 80022c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022c8:	e025      	b.n	8002316 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d021      	beq.n	8002316 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d2:	f7fe ff41 	bl	8001158 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d302      	bcc.n	80022e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d116      	bne.n	8002316 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2220      	movs	r2, #32
 80022f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f043 0220 	orr.w	r2, r3, #32
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e023      	b.n	800235e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	0c1b      	lsrs	r3, r3, #16
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b01      	cmp	r3, #1
 800231e:	d10d      	bne.n	800233c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	43da      	mvns	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4013      	ands	r3, r2
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	bf0c      	ite	eq
 8002332:	2301      	moveq	r3, #1
 8002334:	2300      	movne	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	e00c      	b.n	8002356 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4013      	ands	r3, r2
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	bf0c      	ite	eq
 800234e:	2301      	moveq	r3, #1
 8002350:	2300      	movne	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	429a      	cmp	r2, r3
 800235a:	d0b6      	beq.n	80022ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002374:	e051      	b.n	800241a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002384:	d123      	bne.n	80023ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002394:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800239e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f043 0204 	orr.w	r2, r3, #4
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e046      	b.n	800245c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d021      	beq.n	800241a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d6:	f7fe febf 	bl	8001158 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d302      	bcc.n	80023ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d116      	bne.n	800241a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f043 0220 	orr.w	r2, r3, #32
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e020      	b.n	800245c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	0c1b      	lsrs	r3, r3, #16
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b01      	cmp	r3, #1
 8002422:	d10c      	bne.n	800243e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	43da      	mvns	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4013      	ands	r3, r2
 8002430:	b29b      	uxth	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	bf14      	ite	ne
 8002436:	2301      	movne	r3, #1
 8002438:	2300      	moveq	r3, #0
 800243a:	b2db      	uxtb	r3, r3
 800243c:	e00b      	b.n	8002456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	43da      	mvns	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	4013      	ands	r3, r2
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf14      	ite	ne
 8002450:	2301      	movne	r3, #1
 8002452:	2300      	moveq	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d18d      	bne.n	8002376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002470:	e02d      	b.n	80024ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f8ce 	bl	8002614 <I2C_IsAcknowledgeFailed>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e02d      	b.n	80024de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002488:	d021      	beq.n	80024ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248a:	f7fe fe65 	bl	8001158 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	429a      	cmp	r2, r3
 8002498:	d302      	bcc.n	80024a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d116      	bne.n	80024ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2220      	movs	r2, #32
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	f043 0220 	orr.w	r2, r3, #32
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e007      	b.n	80024de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d8:	2b80      	cmp	r3, #128	; 0x80
 80024da:	d1ca      	bne.n	8002472 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024f2:	e02d      	b.n	8002550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f88d 	bl	8002614 <I2C_IsAcknowledgeFailed>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e02d      	b.n	8002560 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250a:	d021      	beq.n	8002550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800250c:	f7fe fe24 	bl	8001158 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	429a      	cmp	r2, r3
 800251a:	d302      	bcc.n	8002522 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d116      	bne.n	8002550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	f043 0220 	orr.w	r2, r3, #32
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e007      	b.n	8002560 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b04      	cmp	r3, #4
 800255c:	d1ca      	bne.n	80024f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002574:	e042      	b.n	80025fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b10      	cmp	r3, #16
 8002582:	d119      	bne.n	80025b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0210 	mvn.w	r2, #16
 800258c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e029      	b.n	800260c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b8:	f7fe fdce 	bl	8001158 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d302      	bcc.n	80025ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d116      	bne.n	80025fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f043 0220 	orr.w	r2, r3, #32
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e007      	b.n	800260c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002606:	2b40      	cmp	r3, #64	; 0x40
 8002608:	d1b5      	bne.n	8002576 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262a:	d11b      	bne.n	8002664 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002634:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f043 0204 	orr.w	r2, r3, #4
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002672:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002674:	b08f      	sub	sp, #60	; 0x3c
 8002676:	af0a      	add	r7, sp, #40	; 0x28
 8002678:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e10f      	b.n	80028a4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d106      	bne.n	80026a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f004 ffda 	bl	8007658 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2203      	movs	r2, #3
 80026a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f001 fecd 	bl	8004462 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	687e      	ldr	r6, [r7, #4]
 80026d0:	466d      	mov	r5, sp
 80026d2:	f106 0410 	add.w	r4, r6, #16
 80026d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80026e6:	1d33      	adds	r3, r6, #4
 80026e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ea:	6838      	ldr	r0, [r7, #0]
 80026ec:	f001 fda4 	bl	8004238 <USB_CoreInit>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d005      	beq.n	8002702 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2202      	movs	r2, #2
 80026fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e0d0      	b.n	80028a4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f001 febb 	bl	8004484 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800270e:	2300      	movs	r3, #0
 8002710:	73fb      	strb	r3, [r7, #15]
 8002712:	e04a      	b.n	80027aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	333d      	adds	r3, #61	; 0x3d
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	333c      	adds	r3, #60	; 0x3c
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	b298      	uxth	r0, r3
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	3342      	adds	r3, #66	; 0x42
 8002750:	4602      	mov	r2, r0
 8002752:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	333f      	adds	r3, #63	; 0x3f
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	3344      	adds	r3, #68	; 0x44
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	3348      	adds	r3, #72	; 0x48
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	1a9b      	subs	r3, r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	3350      	adds	r3, #80	; 0x50
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	3301      	adds	r3, #1
 80027a8:	73fb      	strb	r3, [r7, #15]
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d3af      	bcc.n	8002714 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e044      	b.n	8002844 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027ba:	7bfa      	ldrb	r2, [r7, #15]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80027e2:	7bfa      	ldrb	r2, [r7, #15]
 80027e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027e6:	7bfa      	ldrb	r2, [r7, #15]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	3301      	adds	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	7bfa      	ldrb	r2, [r7, #15]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	429a      	cmp	r2, r3
 800284c:	d3b5      	bcc.n	80027ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	687e      	ldr	r6, [r7, #4]
 8002856:	466d      	mov	r5, sp
 8002858:	f106 0410 	add.w	r4, r6, #16
 800285c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800285e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002864:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002868:	e885 0003 	stmia.w	r5, {r0, r1}
 800286c:	1d33      	adds	r3, r6, #4
 800286e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002870:	6838      	ldr	r0, [r7, #0]
 8002872:	f001 fe53 	bl	800451c <USB_DevInit>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e00d      	b.n	80028a4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f002 fecf 	bl	8005640 <USB_DevDisconnect>

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_PCD_Start+0x1c>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e020      	b.n	800290a <HAL_PCD_Start+0x5e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d109      	bne.n	80028ec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d005      	beq.n	80028ec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f001 fda5 	bl	8004440 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f002 fe7f 	bl	80055fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002912:	b590      	push	{r4, r7, lr}
 8002914:	b08d      	sub	sp, #52	; 0x34
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f002 ff3d 	bl	80057a8 <USB_GetMode>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	f040 839d 	bne.w	8003070 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f002 fea1 	bl	8005682 <USB_ReadInterrupts>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8393 	beq.w	800306e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f002 fe98 	bl	8005682 <USB_ReadInterrupts>
 8002952:	4603      	mov	r3, r0
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b02      	cmp	r3, #2
 800295a:	d107      	bne.n	800296c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f002 0202 	and.w	r2, r2, #2
 800296a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f002 fe86 	bl	8005682 <USB_ReadInterrupts>
 8002976:	4603      	mov	r3, r0
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b10      	cmp	r3, #16
 800297e:	d161      	bne.n	8002a44 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0210 	bic.w	r2, r2, #16
 800298e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	f003 020f 	and.w	r2, r3, #15
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	4413      	add	r3, r2
 80029ac:	3304      	adds	r3, #4
 80029ae:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	0c5b      	lsrs	r3, r3, #17
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d124      	bne.n	8002a06 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d035      	beq.n	8002a34 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	091b      	lsrs	r3, r3, #4
 80029d0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	6a38      	ldr	r0, [r7, #32]
 80029dc:	f002 fcbd 	bl	800535a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ec:	441a      	add	r2, r3
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029fe:	441a      	add	r2, r3
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	619a      	str	r2, [r3, #24]
 8002a04:	e016      	b.n	8002a34 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	0c5b      	lsrs	r3, r3, #17
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d110      	bne.n	8002a34 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a18:	2208      	movs	r2, #8
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	6a38      	ldr	r0, [r7, #32]
 8002a1e:	f002 fc9c 	bl	800535a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a2e:	441a      	add	r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0210 	orr.w	r2, r2, #16
 8002a42:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f002 fe1a 	bl	8005682 <USB_ReadInterrupts>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a58:	d16e      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f002 fe20 	bl	80056a8 <USB_ReadDevAllOutEpInterrupt>
 8002a68:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a6a:	e062      	b.n	8002b32 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d057      	beq.n	8002b26 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f002 fe45 	bl	8005710 <USB_ReadDevOutEPInterrupt>
 8002a86:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00c      	beq.n	8002aac <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002aa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fdb0 	bl	800360c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00c      	beq.n	8002ad0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	2308      	movs	r3, #8
 8002ac6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 feaa 	bl	8003824 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	2310      	movs	r3, #16
 8002aea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b02:	461a      	mov	r2, r3
 8002b04:	2320      	movs	r3, #32
 8002b06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b24:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	3301      	adds	r3, #1
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d199      	bne.n	8002a6c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f002 fda0 	bl	8005682 <USB_ReadInterrupts>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b4c:	f040 80c0 	bne.w	8002cd0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f002 fdc1 	bl	80056dc <USB_ReadDevAllInEpInterrupt>
 8002b5a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b60:	e0b2      	b.n	8002cc8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80a7 	beq.w	8002cbc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f002 fde7 	bl	800574c <USB_ReadDevInEPInterrupt>
 8002b7e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d057      	beq.n	8002c3a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	2201      	movs	r2, #1
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69f9      	ldr	r1, [r7, #28]
 8002ba6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002baa:	4013      	ands	r3, r2
 8002bac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bba:	461a      	mov	r2, r3
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d132      	bne.n	8002c2e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3348      	adds	r3, #72	; 0x48
 8002bd8:	6819      	ldr	r1, [r3, #0]
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4403      	add	r3, r0
 8002be8:	3344      	adds	r3, #68	; 0x44
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4419      	add	r1, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4403      	add	r3, r0
 8002bfc:	3348      	adds	r3, #72	; 0x48
 8002bfe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d113      	bne.n	8002c2e <HAL_PCD_IRQHandler+0x31c>
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	3350      	adds	r3, #80	; 0x50
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d108      	bne.n	8002c2e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c26:	461a      	mov	r2, r3
 8002c28:	2101      	movs	r1, #1
 8002c2a:	f002 fdef 	bl	800580c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	4619      	mov	r1, r3
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f004 fd9e 	bl	8007776 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c50:	461a      	mov	r2, r3
 8002c52:	2308      	movs	r3, #8
 8002c54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2310      	movs	r3, #16
 8002c70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2340      	movs	r3, #64	; 0x40
 8002c8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fc1b 	bl	80034f2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f47f af49 	bne.w	8002b62 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f002 fcd4 	bl	8005682 <USB_ReadInterrupts>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ce4:	d122      	bne.n	8002d2c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d108      	bne.n	8002d16 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fe26 	bl	8003960 <HAL_PCDEx_LPM_Callback>
 8002d14:	e002      	b.n	8002d1c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f004 fda4 	bl	8007864 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f002 fca6 	bl	8005682 <USB_ReadInterrupts>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d40:	d112      	bne.n	8002d68 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d102      	bne.n	8002d58 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f004 fd60 	bl	8007818 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d66:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f002 fc88 	bl	8005682 <USB_ReadInterrupts>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7c:	f040 80c7 	bne.w	8002f0e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	69fa      	ldr	r2, [r7, #28]
 8002d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d8e:	f023 0301 	bic.w	r3, r3, #1
 8002d92:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2110      	movs	r1, #16
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f001 fd22 	bl	80047e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da0:	2300      	movs	r3, #0
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da4:	e056      	b.n	8002e54 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db2:	461a      	mov	r2, r3
 8002db4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002db8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dca:	0151      	lsls	r1, r2, #5
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	440a      	add	r2, r1
 8002dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002dd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dd8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dea:	0151      	lsls	r1, r2, #5
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	440a      	add	r2, r1
 8002df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002df4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002df8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e06:	461a      	mov	r2, r3
 8002e08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e0c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e1e:	0151      	lsls	r1, r2, #5
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	440a      	add	r2, r1
 8002e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e3e:	0151      	lsls	r1, r2, #5
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	440a      	add	r2, r1
 8002e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e4c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	3301      	adds	r3, #1
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d3a3      	bcc.n	8002da6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e6c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e70:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d016      	beq.n	8002ea8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e8a:	f043 030b 	orr.w	r3, r3, #11
 8002e8e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ea0:	f043 030b 	orr.w	r3, r3, #11
 8002ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ea6:	e015      	b.n	8002ed4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002eba:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ebe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ece:	f043 030b 	orr.w	r3, r3, #11
 8002ed2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	69fa      	ldr	r2, [r7, #28]
 8002ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ee2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ee6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ef8:	461a      	mov	r2, r3
 8002efa:	f002 fc87 	bl	800580c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f002 fbb5 	bl	8005682 <USB_ReadInterrupts>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f22:	d124      	bne.n	8002f6e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f002 fc4b 	bl	80057c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f001 fcb3 	bl	800489e <USB_GetDevSpeed>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681c      	ldr	r4, [r3, #0]
 8002f44:	f001 f958 	bl	80041f8 <HAL_RCC_GetHCLKFreq>
 8002f48:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	4620      	mov	r0, r4
 8002f54:	f001 f9d2 	bl	80042fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f004 fc34 	bl	80077c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f002 fb85 	bl	8005682 <USB_ReadInterrupts>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d10a      	bne.n	8002f98 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f004 fc11 	bl	80077aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f002 0208 	and.w	r2, r2, #8
 8002f96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f002 fb70 	bl	8005682 <USB_ReadInterrupts>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fac:	d10f      	bne.n	8002fce <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f004 fc73 	bl	80078a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002fcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f002 fb55 	bl	8005682 <USB_ReadInterrupts>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fe2:	d10f      	bne.n	8003004 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	4619      	mov	r1, r3
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f004 fc46 	bl	8007880 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003002:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f002 fb3a 	bl	8005682 <USB_ReadInterrupts>
 800300e:	4603      	mov	r3, r0
 8003010:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003018:	d10a      	bne.n	8003030 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f004 fc54 	bl	80078c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695a      	ldr	r2, [r3, #20]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800302e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f002 fb24 	bl	8005682 <USB_ReadInterrupts>
 800303a:	4603      	mov	r3, r0
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b04      	cmp	r3, #4
 8003042:	d115      	bne.n	8003070 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f004 fc44 	bl	80078e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6859      	ldr	r1, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	430a      	orrs	r2, r1
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	e000      	b.n	8003070 <HAL_PCD_IRQHandler+0x75e>
      return;
 800306e:	bf00      	nop
    }
  }
}
 8003070:	3734      	adds	r7, #52	; 0x34
 8003072:	46bd      	mov	sp, r7
 8003074:	bd90      	pop	{r4, r7, pc}

08003076 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	460b      	mov	r3, r1
 8003080:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_PCD_SetAddress+0x1a>
 800308c:	2302      	movs	r3, #2
 800308e:	e013      	b.n	80030b8 <HAL_PCD_SetAddress+0x42>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f002 fa82 	bl	80055b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	4608      	mov	r0, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	461a      	mov	r2, r3
 80030ce:	4603      	mov	r3, r0
 80030d0:	70fb      	strb	r3, [r7, #3]
 80030d2:	460b      	mov	r3, r1
 80030d4:	803b      	strh	r3, [r7, #0]
 80030d6:	4613      	mov	r3, r2
 80030d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	da0f      	bge.n	8003106 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	f003 020f 	and.w	r2, r3, #15
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	3338      	adds	r3, #56	; 0x38
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	3304      	adds	r3, #4
 80030fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	705a      	strb	r2, [r3, #1]
 8003104:	e00f      	b.n	8003126 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	f003 020f 	and.w	r2, r3, #15
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	3304      	adds	r3, #4
 800311e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	b2da      	uxtb	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003132:	883a      	ldrh	r2, [r7, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	78ba      	ldrb	r2, [r7, #2]
 800313c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	785b      	ldrb	r3, [r3, #1]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d004      	beq.n	8003150 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003150:	78bb      	ldrb	r3, [r7, #2]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d102      	bne.n	800315c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_PCD_EP_Open+0xaa>
 8003166:	2302      	movs	r3, #2
 8003168:	e00e      	b.n	8003188 <HAL_PCD_EP_Open+0xc8>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68f9      	ldr	r1, [r7, #12]
 8003178:	4618      	mov	r0, r3
 800317a:	f001 fbb5 	bl	80048e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003186:	7afb      	ldrb	r3, [r7, #11]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800319c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	da0f      	bge.n	80031c4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	f003 020f 	and.w	r2, r3, #15
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	3338      	adds	r3, #56	; 0x38
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	4413      	add	r3, r2
 80031b8:	3304      	adds	r3, #4
 80031ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	705a      	strb	r2, [r3, #1]
 80031c2:	e00f      	b.n	80031e4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 020f 	and.w	r2, r3, #15
 80031ca:	4613      	mov	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	3304      	adds	r3, #4
 80031dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_PCD_EP_Close+0x6e>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e00e      	b.n	800321c <HAL_PCD_EP_Close+0x8c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68f9      	ldr	r1, [r7, #12]
 800320c:	4618      	mov	r0, r3
 800320e:	f001 fbf3 	bl	80049f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	607a      	str	r2, [r7, #4]
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	460b      	mov	r3, r1
 8003232:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003234:	7afb      	ldrb	r3, [r7, #11]
 8003236:	f003 020f 	and.w	r2, r3, #15
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4413      	add	r3, r2
 800324a:	3304      	adds	r3, #4
 800324c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2200      	movs	r2, #0
 800325e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2200      	movs	r2, #0
 8003264:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003266:	7afb      	ldrb	r3, [r7, #11]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	b2da      	uxtb	r2, r3
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d102      	bne.n	8003280 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003280:	7afb      	ldrb	r3, [r7, #11]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	6979      	ldr	r1, [r7, #20]
 8003298:	f001 fece 	bl	8005038 <USB_EP0StartXfer>
 800329c:	e008      	b.n	80032b0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	6979      	ldr	r1, [r7, #20]
 80032ac:	f001 fc80 	bl	8004bb0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	460b      	mov	r3, r1
 80032c4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	f003 020f 	and.w	r2, r3, #15
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80032dc:	681b      	ldr	r3, [r3, #0]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b086      	sub	sp, #24
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	603b      	str	r3, [r7, #0]
 80032f6:	460b      	mov	r3, r1
 80032f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032fa:	7afb      	ldrb	r3, [r7, #11]
 80032fc:	f003 020f 	and.w	r2, r3, #15
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	3338      	adds	r3, #56	; 0x38
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4413      	add	r3, r2
 800330e:	3304      	adds	r3, #4
 8003310:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2200      	movs	r2, #0
 8003322:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2201      	movs	r2, #1
 8003328:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800332a:	7afb      	ldrb	r3, [r7, #11]
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	b2da      	uxtb	r2, r3
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d102      	bne.n	8003344 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003344:	7afb      	ldrb	r3, [r7, #11]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	6979      	ldr	r1, [r7, #20]
 800335c:	f001 fe6c 	bl	8005038 <USB_EP0StartXfer>
 8003360:	e008      	b.n	8003374 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	6979      	ldr	r1, [r7, #20]
 8003370:	f001 fc1e 	bl	8004bb0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b084      	sub	sp, #16
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	460b      	mov	r3, r1
 8003388:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	f003 020f 	and.w	r2, r3, #15
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	429a      	cmp	r2, r3
 8003396:	d901      	bls.n	800339c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e050      	b.n	800343e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800339c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	da0f      	bge.n	80033c4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	f003 020f 	and.w	r2, r3, #15
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	3338      	adds	r3, #56	; 0x38
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	4413      	add	r3, r2
 80033b8:	3304      	adds	r3, #4
 80033ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	705a      	strb	r2, [r3, #1]
 80033c2:	e00d      	b.n	80033e0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	3304      	adds	r3, #4
 80033d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_PCD_EP_SetStall+0x82>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e01e      	b.n	800343e <HAL_PCD_EP_SetStall+0xc0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68f9      	ldr	r1, [r7, #12]
 800340e:	4618      	mov	r0, r3
 8003410:	f001 fffb 	bl	800540a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	b2d9      	uxtb	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800342e:	461a      	mov	r2, r3
 8003430:	f002 f9ec 	bl	800580c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	f003 020f 	and.w	r2, r3, #15
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	429a      	cmp	r2, r3
 800345e:	d901      	bls.n	8003464 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e042      	b.n	80034ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003468:	2b00      	cmp	r3, #0
 800346a:	da0f      	bge.n	800348c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	f003 020f 	and.w	r2, r3, #15
 8003472:	4613      	mov	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	3338      	adds	r3, #56	; 0x38
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	4413      	add	r3, r2
 8003480:	3304      	adds	r3, #4
 8003482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2201      	movs	r2, #1
 8003488:	705a      	strb	r2, [r3, #1]
 800348a:	e00f      	b.n	80034ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	f003 020f 	and.w	r2, r3, #15
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	3304      	adds	r3, #4
 80034a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_PCD_EP_ClrStall+0x86>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e00e      	b.n	80034ea <HAL_PCD_EP_ClrStall+0xa4>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68f9      	ldr	r1, [r7, #12]
 80034da:	4618      	mov	r0, r3
 80034dc:	f002 f803 	bl	80054e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b08a      	sub	sp, #40	; 0x28
 80034f6:	af02      	add	r7, sp, #8
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	3338      	adds	r3, #56	; 0x38
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4413      	add	r3, r2
 8003516:	3304      	adds	r3, #4
 8003518:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	429a      	cmp	r2, r3
 8003524:	d901      	bls.n	800352a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e06c      	b.n	8003604 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	429a      	cmp	r2, r3
 800353e:	d902      	bls.n	8003546 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	3303      	adds	r3, #3
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800354e:	e02b      	b.n	80035a8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	429a      	cmp	r2, r3
 8003564:	d902      	bls.n	800356c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	3303      	adds	r3, #3
 8003570:	089b      	lsrs	r3, r3, #2
 8003572:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	68d9      	ldr	r1, [r3, #12]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	b2da      	uxtb	r2, r3
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003584:	b2db      	uxtb	r3, r3
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	4603      	mov	r3, r0
 800358a:	6978      	ldr	r0, [r7, #20]
 800358c:	f001 fea7 	bl	80052de <USB_WritePacket>

    ep->xfer_buff  += len;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	441a      	add	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	699a      	ldr	r2, [r3, #24]
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	441a      	add	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d809      	bhi.n	80035d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d203      	bcs.n	80035d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1be      	bne.n	8003550 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	695a      	ldr	r2, [r3, #20]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d811      	bhi.n	8003602 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	2201      	movs	r2, #1
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	6939      	ldr	r1, [r7, #16]
 80035fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035fe:	4013      	ands	r3, r2
 8003600:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3720      	adds	r7, #32
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	333c      	adds	r3, #60	; 0x3c
 8003624:	3304      	adds	r3, #4
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b01      	cmp	r3, #1
 8003640:	f040 80a0 	bne.w	8003784 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d015      	beq.n	800367a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4a72      	ldr	r2, [pc, #456]	; (800381c <PCD_EP_OutXfrComplete_int+0x210>)
 8003652:	4293      	cmp	r3, r2
 8003654:	f240 80dd 	bls.w	8003812 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80d7 	beq.w	8003812 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003670:	461a      	mov	r2, r3
 8003672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003676:	6093      	str	r3, [r2, #8]
 8003678:	e0cb      	b.n	8003812 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b00      	cmp	r3, #0
 8003682:	d009      	beq.n	8003698 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003690:	461a      	mov	r2, r3
 8003692:	2320      	movs	r3, #32
 8003694:	6093      	str	r3, [r2, #8]
 8003696:	e0bc      	b.n	8003812 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f040 80b7 	bne.w	8003812 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4a5d      	ldr	r2, [pc, #372]	; (800381c <PCD_EP_OutXfrComplete_int+0x210>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d90f      	bls.n	80036cc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c2:	461a      	mov	r2, r3
 80036c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036c8:	6093      	str	r3, [r2, #8]
 80036ca:	e0a2      	b.n	8003812 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036de:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	0159      	lsls	r1, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	440b      	add	r3, r1
 80036e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80036f2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4403      	add	r3, r0
 8003702:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003706:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	4613      	mov	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800371a:	6819      	ldr	r1, [r3, #0]
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4403      	add	r3, r0
 800372a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4419      	add	r1, r3
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	4613      	mov	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4403      	add	r3, r0
 8003740:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003744:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d114      	bne.n	8003776 <PCD_EP_OutXfrComplete_int+0x16a>
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d108      	bne.n	8003776 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800376e:	461a      	mov	r2, r3
 8003770:	2101      	movs	r1, #1
 8003772:	f002 f84b 	bl	800580c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	4619      	mov	r1, r3
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f003 ffdf 	bl	8007740 <HAL_PCD_DataOutStageCallback>
 8003782:	e046      	b.n	8003812 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4a26      	ldr	r2, [pc, #152]	; (8003820 <PCD_EP_OutXfrComplete_int+0x214>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d124      	bne.n	80037d6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a2:	461a      	mov	r2, r3
 80037a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037a8:	6093      	str	r3, [r2, #8]
 80037aa:	e032      	b.n	8003812 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d008      	beq.n	80037c8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c2:	461a      	mov	r2, r3
 80037c4:	2320      	movs	r3, #32
 80037c6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	4619      	mov	r1, r3
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f003 ffb6 	bl	8007740 <HAL_PCD_DataOutStageCallback>
 80037d4:	e01d      	b.n	8003812 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d114      	bne.n	8003806 <PCD_EP_OutXfrComplete_int+0x1fa>
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d108      	bne.n	8003806 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037fe:	461a      	mov	r2, r3
 8003800:	2100      	movs	r1, #0
 8003802:	f002 f803 	bl	800580c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	4619      	mov	r1, r3
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f003 ff97 	bl	8007740 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	4f54300a 	.word	0x4f54300a
 8003820:	4f54310a 	.word	0x4f54310a

08003824 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	333c      	adds	r3, #60	; 0x3c
 800383c:	3304      	adds	r3, #4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4a15      	ldr	r2, [pc, #84]	; (80038ac <PCD_EP_OutSetupPacket_int+0x88>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d90e      	bls.n	8003878 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003860:	2b00      	cmp	r3, #0
 8003862:	d009      	beq.n	8003878 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003870:	461a      	mov	r2, r3
 8003872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003876:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f003 ff4f 	bl	800771c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <PCD_EP_OutSetupPacket_int+0x88>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d90c      	bls.n	80038a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d108      	bne.n	80038a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003898:	461a      	mov	r2, r3
 800389a:	2101      	movs	r1, #1
 800389c:	f001 ffb6 	bl	800580c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	4f54300a 	.word	0x4f54300a

080038b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	70fb      	strb	r3, [r7, #3]
 80038bc:	4613      	mov	r3, r2
 80038be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d107      	bne.n	80038de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038ce:	883b      	ldrh	r3, [r7, #0]
 80038d0:	0419      	lsls	r1, r3, #16
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	430a      	orrs	r2, r1
 80038da:	629a      	str	r2, [r3, #40]	; 0x28
 80038dc:	e028      	b.n	8003930 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	0c1b      	lsrs	r3, r3, #16
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	4413      	add	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038ec:	2300      	movs	r3, #0
 80038ee:	73fb      	strb	r3, [r7, #15]
 80038f0:	e00d      	b.n	800390e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	3340      	adds	r3, #64	; 0x40
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	0c1b      	lsrs	r3, r3, #16
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	4413      	add	r3, r2
 8003906:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	3301      	adds	r3, #1
 800390c:	73fb      	strb	r3, [r7, #15]
 800390e:	7bfa      	ldrb	r2, [r7, #15]
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	3b01      	subs	r3, #1
 8003914:	429a      	cmp	r2, r3
 8003916:	d3ec      	bcc.n	80038f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003918:	883b      	ldrh	r3, [r7, #0]
 800391a:	0418      	lsls	r0, r3, #16
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6819      	ldr	r1, [r3, #0]
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	3b01      	subs	r3, #1
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	4302      	orrs	r2, r0
 8003928:	3340      	adds	r3, #64	; 0x40
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	460b      	mov	r3, r1
 8003948:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	887a      	ldrh	r2, [r7, #2]
 8003950:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e264      	b.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d075      	beq.n	8003a82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003996:	4ba3      	ldr	r3, [pc, #652]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d00c      	beq.n	80039bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039a2:	4ba0      	ldr	r3, [pc, #640]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d112      	bne.n	80039d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ae:	4b9d      	ldr	r3, [pc, #628]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ba:	d10b      	bne.n	80039d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039bc:	4b99      	ldr	r3, [pc, #612]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d05b      	beq.n	8003a80 <HAL_RCC_OscConfig+0x108>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d157      	bne.n	8003a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e23f      	b.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039dc:	d106      	bne.n	80039ec <HAL_RCC_OscConfig+0x74>
 80039de:	4b91      	ldr	r3, [pc, #580]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a90      	ldr	r2, [pc, #576]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e01d      	b.n	8003a28 <HAL_RCC_OscConfig+0xb0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x98>
 80039f6:	4b8b      	ldr	r3, [pc, #556]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a8a      	ldr	r2, [pc, #552]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 80039fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	4b88      	ldr	r3, [pc, #544]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a87      	ldr	r2, [pc, #540]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCC_OscConfig+0xb0>
 8003a10:	4b84      	ldr	r3, [pc, #528]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a83      	ldr	r2, [pc, #524]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	4b81      	ldr	r3, [pc, #516]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a80      	ldr	r2, [pc, #512]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d013      	beq.n	8003a58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a30:	f7fd fb92 	bl	8001158 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a38:	f7fd fb8e 	bl	8001158 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e204      	b.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4a:	4b76      	ldr	r3, [pc, #472]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0xc0>
 8003a56:	e014      	b.n	8003a82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fd fb7e 	bl	8001158 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fd fb7a 	bl	8001158 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	; 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e1f0      	b.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a72:	4b6c      	ldr	r3, [pc, #432]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0xe8>
 8003a7e:	e000      	b.n	8003a82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d063      	beq.n	8003b56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a8e:	4b65      	ldr	r3, [pc, #404]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00b      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a9a:	4b62      	ldr	r3, [pc, #392]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d11c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aa6:	4b5f      	ldr	r3, [pc, #380]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d116      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab2:	4b5c      	ldr	r3, [pc, #368]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_RCC_OscConfig+0x152>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d001      	beq.n	8003aca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e1c4      	b.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aca:	4b56      	ldr	r3, [pc, #344]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4952      	ldr	r1, [pc, #328]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ade:	e03a      	b.n	8003b56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d020      	beq.n	8003b2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae8:	4b4f      	ldr	r3, [pc, #316]	; (8003c28 <HAL_RCC_OscConfig+0x2b0>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aee:	f7fd fb33 	bl	8001158 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003af6:	f7fd fb2f 	bl	8001158 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e1a5      	b.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b08:	4b46      	ldr	r3, [pc, #280]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b14:	4b43      	ldr	r3, [pc, #268]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4940      	ldr	r1, [pc, #256]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	600b      	str	r3, [r1, #0]
 8003b28:	e015      	b.n	8003b56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b2a:	4b3f      	ldr	r3, [pc, #252]	; (8003c28 <HAL_RCC_OscConfig+0x2b0>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fd fb12 	bl	8001158 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b38:	f7fd fb0e 	bl	8001158 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e184      	b.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4a:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d030      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d016      	beq.n	8003b98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b6a:	4b30      	ldr	r3, [pc, #192]	; (8003c2c <HAL_RCC_OscConfig+0x2b4>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fd faf2 	bl	8001158 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b78:	f7fd faee 	bl	8001158 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e164      	b.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8a:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCC_OscConfig+0x200>
 8003b96:	e015      	b.n	8003bc4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b98:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <HAL_RCC_OscConfig+0x2b4>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9e:	f7fd fadb 	bl	8001158 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba6:	f7fd fad7 	bl	8001158 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e14d      	b.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb8:	4b1a      	ldr	r3, [pc, #104]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f0      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80a0 	beq.w	8003d12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd6:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10f      	bne.n	8003c02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	4a0e      	ldr	r2, [pc, #56]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf2:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <HAL_RCC_OscConfig+0x2ac>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c02:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <HAL_RCC_OscConfig+0x2b8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d121      	bne.n	8003c52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0e:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <HAL_RCC_OscConfig+0x2b8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a07      	ldr	r2, [pc, #28]	; (8003c30 <HAL_RCC_OscConfig+0x2b8>)
 8003c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1a:	f7fd fa9d 	bl	8001158 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c20:	e011      	b.n	8003c46 <HAL_RCC_OscConfig+0x2ce>
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800
 8003c28:	42470000 	.word	0x42470000
 8003c2c:	42470e80 	.word	0x42470e80
 8003c30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c34:	f7fd fa90 	bl	8001158 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e106      	b.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c46:	4b85      	ldr	r3, [pc, #532]	; (8003e5c <HAL_RCC_OscConfig+0x4e4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d106      	bne.n	8003c68 <HAL_RCC_OscConfig+0x2f0>
 8003c5a:	4b81      	ldr	r3, [pc, #516]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5e:	4a80      	ldr	r2, [pc, #512]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	6713      	str	r3, [r2, #112]	; 0x70
 8003c66:	e01c      	b.n	8003ca2 <HAL_RCC_OscConfig+0x32a>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b05      	cmp	r3, #5
 8003c6e:	d10c      	bne.n	8003c8a <HAL_RCC_OscConfig+0x312>
 8003c70:	4b7b      	ldr	r3, [pc, #492]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c74:	4a7a      	ldr	r2, [pc, #488]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003c76:	f043 0304 	orr.w	r3, r3, #4
 8003c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7c:	4b78      	ldr	r3, [pc, #480]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	4a77      	ldr	r2, [pc, #476]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	6713      	str	r3, [r2, #112]	; 0x70
 8003c88:	e00b      	b.n	8003ca2 <HAL_RCC_OscConfig+0x32a>
 8003c8a:	4b75      	ldr	r3, [pc, #468]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	4a74      	ldr	r2, [pc, #464]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003c90:	f023 0301 	bic.w	r3, r3, #1
 8003c94:	6713      	str	r3, [r2, #112]	; 0x70
 8003c96:	4b72      	ldr	r3, [pc, #456]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9a:	4a71      	ldr	r2, [pc, #452]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003c9c:	f023 0304 	bic.w	r3, r3, #4
 8003ca0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d015      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003caa:	f7fd fa55 	bl	8001158 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb0:	e00a      	b.n	8003cc8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb2:	f7fd fa51 	bl	8001158 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e0c5      	b.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc8:	4b65      	ldr	r3, [pc, #404]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0ee      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x33a>
 8003cd4:	e014      	b.n	8003d00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd6:	f7fd fa3f 	bl	8001158 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cdc:	e00a      	b.n	8003cf4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cde:	f7fd fa3b 	bl	8001158 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e0af      	b.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf4:	4b5a      	ldr	r3, [pc, #360]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1ee      	bne.n	8003cde <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d00:	7dfb      	ldrb	r3, [r7, #23]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d105      	bne.n	8003d12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d06:	4b56      	ldr	r3, [pc, #344]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	4a55      	ldr	r2, [pc, #340]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 809b 	beq.w	8003e52 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d1c:	4b50      	ldr	r3, [pc, #320]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 030c 	and.w	r3, r3, #12
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d05c      	beq.n	8003de2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d141      	bne.n	8003db4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d30:	4b4c      	ldr	r3, [pc, #304]	; (8003e64 <HAL_RCC_OscConfig+0x4ec>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d36:	f7fd fa0f 	bl	8001158 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3e:	f7fd fa0b 	bl	8001158 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e081      	b.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d50:	4b43      	ldr	r3, [pc, #268]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1f0      	bne.n	8003d3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	019b      	lsls	r3, r3, #6
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	085b      	lsrs	r3, r3, #1
 8003d74:	3b01      	subs	r3, #1
 8003d76:	041b      	lsls	r3, r3, #16
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	061b      	lsls	r3, r3, #24
 8003d80:	4937      	ldr	r1, [pc, #220]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d86:	4b37      	ldr	r3, [pc, #220]	; (8003e64 <HAL_RCC_OscConfig+0x4ec>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8c:	f7fd f9e4 	bl	8001158 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d94:	f7fd f9e0 	bl	8001158 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e056      	b.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da6:	4b2e      	ldr	r3, [pc, #184]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x41c>
 8003db2:	e04e      	b.n	8003e52 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db4:	4b2b      	ldr	r3, [pc, #172]	; (8003e64 <HAL_RCC_OscConfig+0x4ec>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dba:	f7fd f9cd 	bl	8001158 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc2:	f7fd f9c9 	bl	8001158 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e03f      	b.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd4:	4b22      	ldr	r3, [pc, #136]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x44a>
 8003de0:	e037      	b.n	8003e52 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e032      	b.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dee:	4b1c      	ldr	r3, [pc, #112]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d028      	beq.n	8003e4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d121      	bne.n	8003e4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d11a      	bne.n	8003e4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e1e:	4013      	ands	r3, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e24:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d111      	bne.n	8003e4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	085b      	lsrs	r3, r3, #1
 8003e36:	3b01      	subs	r3, #1
 8003e38:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d107      	bne.n	8003e4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d001      	beq.n	8003e52 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40007000 	.word	0x40007000
 8003e60:	40023800 	.word	0x40023800
 8003e64:	42470060 	.word	0x42470060

08003e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0cc      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b68      	ldr	r3, [pc, #416]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d90c      	bls.n	8003ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b65      	ldr	r3, [pc, #404]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e92:	4b63      	ldr	r3, [pc, #396]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d001      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0b8      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d020      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ebc:	4b59      	ldr	r3, [pc, #356]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a58      	ldr	r2, [pc, #352]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed4:	4b53      	ldr	r3, [pc, #332]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee0:	4b50      	ldr	r3, [pc, #320]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	494d      	ldr	r1, [pc, #308]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d044      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f06:	4b47      	ldr	r3, [pc, #284]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d119      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e07f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d003      	beq.n	8003f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	4b3f      	ldr	r3, [pc, #252]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e06f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f36:	4b3b      	ldr	r3, [pc, #236]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e067      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f46:	4b37      	ldr	r3, [pc, #220]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f023 0203 	bic.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4934      	ldr	r1, [pc, #208]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f58:	f7fd f8fe 	bl	8001158 <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f60:	f7fd f8fa 	bl	8001158 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e04f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 020c 	and.w	r2, r3, #12
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d1eb      	bne.n	8003f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b25      	ldr	r3, [pc, #148]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d20c      	bcs.n	8003fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b22      	ldr	r3, [pc, #136]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9e:	4b20      	ldr	r3, [pc, #128]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e032      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fbc:	4b19      	ldr	r3, [pc, #100]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4916      	ldr	r1, [pc, #88]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	490e      	ldr	r1, [pc, #56]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fee:	f000 f821 	bl	8004034 <HAL_RCC_GetSysClockFreq>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	490a      	ldr	r1, [pc, #40]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8004000:	5ccb      	ldrb	r3, [r1, r3]
 8004002:	fa22 f303 	lsr.w	r3, r2, r3
 8004006:	4a09      	ldr	r2, [pc, #36]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8004008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_RCC_ClockConfig+0x1c8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fd f85e 	bl	80010d0 <HAL_InitTick>

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40023c00 	.word	0x40023c00
 8004024:	40023800 	.word	0x40023800
 8004028:	08007d5c 	.word	0x08007d5c
 800402c:	20000000 	.word	0x20000000
 8004030:	20000004 	.word	0x20000004

08004034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004034:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	607b      	str	r3, [r7, #4]
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	2300      	movs	r3, #0
 8004046:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800404c:	4b67      	ldr	r3, [pc, #412]	; (80041ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 030c 	and.w	r3, r3, #12
 8004054:	2b08      	cmp	r3, #8
 8004056:	d00d      	beq.n	8004074 <HAL_RCC_GetSysClockFreq+0x40>
 8004058:	2b08      	cmp	r3, #8
 800405a:	f200 80bd 	bhi.w	80041d8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_RCC_GetSysClockFreq+0x34>
 8004062:	2b04      	cmp	r3, #4
 8004064:	d003      	beq.n	800406e <HAL_RCC_GetSysClockFreq+0x3a>
 8004066:	e0b7      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004068:	4b61      	ldr	r3, [pc, #388]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800406a:	60bb      	str	r3, [r7, #8]
       break;
 800406c:	e0b7      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800406e:	4b61      	ldr	r3, [pc, #388]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004070:	60bb      	str	r3, [r7, #8]
      break;
 8004072:	e0b4      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004074:	4b5d      	ldr	r3, [pc, #372]	; (80041ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800407c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800407e:	4b5b      	ldr	r3, [pc, #364]	; (80041ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d04d      	beq.n	8004126 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800408a:	4b58      	ldr	r3, [pc, #352]	; (80041ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	099b      	lsrs	r3, r3, #6
 8004090:	461a      	mov	r2, r3
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	f240 10ff 	movw	r0, #511	; 0x1ff
 800409a:	f04f 0100 	mov.w	r1, #0
 800409e:	ea02 0800 	and.w	r8, r2, r0
 80040a2:	ea03 0901 	and.w	r9, r3, r1
 80040a6:	4640      	mov	r0, r8
 80040a8:	4649      	mov	r1, r9
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	014b      	lsls	r3, r1, #5
 80040b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040b8:	0142      	lsls	r2, r0, #5
 80040ba:	4610      	mov	r0, r2
 80040bc:	4619      	mov	r1, r3
 80040be:	ebb0 0008 	subs.w	r0, r0, r8
 80040c2:	eb61 0109 	sbc.w	r1, r1, r9
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	018b      	lsls	r3, r1, #6
 80040d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040d4:	0182      	lsls	r2, r0, #6
 80040d6:	1a12      	subs	r2, r2, r0
 80040d8:	eb63 0301 	sbc.w	r3, r3, r1
 80040dc:	f04f 0000 	mov.w	r0, #0
 80040e0:	f04f 0100 	mov.w	r1, #0
 80040e4:	00d9      	lsls	r1, r3, #3
 80040e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040ea:	00d0      	lsls	r0, r2, #3
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	eb12 0208 	adds.w	r2, r2, r8
 80040f4:	eb43 0309 	adc.w	r3, r3, r9
 80040f8:	f04f 0000 	mov.w	r0, #0
 80040fc:	f04f 0100 	mov.w	r1, #0
 8004100:	0259      	lsls	r1, r3, #9
 8004102:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004106:	0250      	lsls	r0, r2, #9
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4610      	mov	r0, r2
 800410e:	4619      	mov	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	461a      	mov	r2, r3
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	f7fc f856 	bl	80001c8 <__aeabi_uldivmod>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4613      	mov	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	e04a      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004126:	4b31      	ldr	r3, [pc, #196]	; (80041ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	099b      	lsrs	r3, r3, #6
 800412c:	461a      	mov	r2, r3
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004136:	f04f 0100 	mov.w	r1, #0
 800413a:	ea02 0400 	and.w	r4, r2, r0
 800413e:	ea03 0501 	and.w	r5, r3, r1
 8004142:	4620      	mov	r0, r4
 8004144:	4629      	mov	r1, r5
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	014b      	lsls	r3, r1, #5
 8004150:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004154:	0142      	lsls	r2, r0, #5
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	1b00      	subs	r0, r0, r4
 800415c:	eb61 0105 	sbc.w	r1, r1, r5
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	018b      	lsls	r3, r1, #6
 800416a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800416e:	0182      	lsls	r2, r0, #6
 8004170:	1a12      	subs	r2, r2, r0
 8004172:	eb63 0301 	sbc.w	r3, r3, r1
 8004176:	f04f 0000 	mov.w	r0, #0
 800417a:	f04f 0100 	mov.w	r1, #0
 800417e:	00d9      	lsls	r1, r3, #3
 8004180:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004184:	00d0      	lsls	r0, r2, #3
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	1912      	adds	r2, r2, r4
 800418c:	eb45 0303 	adc.w	r3, r5, r3
 8004190:	f04f 0000 	mov.w	r0, #0
 8004194:	f04f 0100 	mov.w	r1, #0
 8004198:	0299      	lsls	r1, r3, #10
 800419a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800419e:	0290      	lsls	r0, r2, #10
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	461a      	mov	r2, r3
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	f7fc f80a 	bl	80001c8 <__aeabi_uldivmod>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4613      	mov	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041bc:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	3301      	adds	r3, #1
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	60bb      	str	r3, [r7, #8]
      break;
 80041d6:	e002      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041da:	60bb      	str	r3, [r7, #8]
      break;
 80041dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041de:	68bb      	ldr	r3, [r7, #8]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80041ea:	bf00      	nop
 80041ec:	40023800 	.word	0x40023800
 80041f0:	00f42400 	.word	0x00f42400
 80041f4:	007a1200 	.word	0x007a1200

080041f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041fc:	4b03      	ldr	r3, [pc, #12]	; (800420c <HAL_RCC_GetHCLKFreq+0x14>)
 80041fe:	681b      	ldr	r3, [r3, #0]
}
 8004200:	4618      	mov	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20000000 	.word	0x20000000

08004210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004214:	f7ff fff0 	bl	80041f8 <HAL_RCC_GetHCLKFreq>
 8004218:	4602      	mov	r2, r0
 800421a:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	0a9b      	lsrs	r3, r3, #10
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	4903      	ldr	r1, [pc, #12]	; (8004234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004226:	5ccb      	ldrb	r3, [r1, r3]
 8004228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800422c:	4618      	mov	r0, r3
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40023800 	.word	0x40023800
 8004234:	08007d6c 	.word	0x08007d6c

08004238 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004238:	b084      	sub	sp, #16
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	f107 001c 	add.w	r0, r7, #28
 8004246:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	2b01      	cmp	r3, #1
 800424e:	d122      	bne.n	8004296 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800427a:	2b01      	cmp	r3, #1
 800427c:	d105      	bne.n	800428a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f001 fb1c 	bl	80058c8 <USB_CoreReset>
 8004290:	4603      	mov	r3, r0
 8004292:	73fb      	strb	r3, [r7, #15]
 8004294:	e01a      	b.n	80042cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f001 fb10 	bl	80058c8 <USB_CoreReset>
 80042a8:	4603      	mov	r3, r0
 80042aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	639a      	str	r2, [r3, #56]	; 0x38
 80042be:	e005      	b.n	80042cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d10b      	bne.n	80042ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f043 0206 	orr.w	r2, r3, #6
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f043 0220 	orr.w	r2, r3, #32
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042f6:	b004      	add	sp, #16
 80042f8:	4770      	bx	lr
	...

080042fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d165      	bne.n	80043dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4a41      	ldr	r2, [pc, #260]	; (8004418 <USB_SetTurnaroundTime+0x11c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d906      	bls.n	8004326 <USB_SetTurnaroundTime+0x2a>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4a40      	ldr	r2, [pc, #256]	; (800441c <USB_SetTurnaroundTime+0x120>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d202      	bcs.n	8004326 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004320:	230f      	movs	r3, #15
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	e062      	b.n	80043ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4a3c      	ldr	r2, [pc, #240]	; (800441c <USB_SetTurnaroundTime+0x120>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d306      	bcc.n	800433c <USB_SetTurnaroundTime+0x40>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4a3b      	ldr	r2, [pc, #236]	; (8004420 <USB_SetTurnaroundTime+0x124>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d202      	bcs.n	800433c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004336:	230e      	movs	r3, #14
 8004338:	617b      	str	r3, [r7, #20]
 800433a:	e057      	b.n	80043ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4a38      	ldr	r2, [pc, #224]	; (8004420 <USB_SetTurnaroundTime+0x124>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d306      	bcc.n	8004352 <USB_SetTurnaroundTime+0x56>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4a37      	ldr	r2, [pc, #220]	; (8004424 <USB_SetTurnaroundTime+0x128>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d202      	bcs.n	8004352 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800434c:	230d      	movs	r3, #13
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	e04c      	b.n	80043ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4a33      	ldr	r2, [pc, #204]	; (8004424 <USB_SetTurnaroundTime+0x128>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d306      	bcc.n	8004368 <USB_SetTurnaroundTime+0x6c>
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4a32      	ldr	r2, [pc, #200]	; (8004428 <USB_SetTurnaroundTime+0x12c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d802      	bhi.n	8004368 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004362:	230c      	movs	r3, #12
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	e041      	b.n	80043ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4a2f      	ldr	r2, [pc, #188]	; (8004428 <USB_SetTurnaroundTime+0x12c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d906      	bls.n	800437e <USB_SetTurnaroundTime+0x82>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4a2e      	ldr	r2, [pc, #184]	; (800442c <USB_SetTurnaroundTime+0x130>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d802      	bhi.n	800437e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004378:	230b      	movs	r3, #11
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	e036      	b.n	80043ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	4a2a      	ldr	r2, [pc, #168]	; (800442c <USB_SetTurnaroundTime+0x130>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d906      	bls.n	8004394 <USB_SetTurnaroundTime+0x98>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4a29      	ldr	r2, [pc, #164]	; (8004430 <USB_SetTurnaroundTime+0x134>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d802      	bhi.n	8004394 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800438e:	230a      	movs	r3, #10
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	e02b      	b.n	80043ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4a26      	ldr	r2, [pc, #152]	; (8004430 <USB_SetTurnaroundTime+0x134>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d906      	bls.n	80043aa <USB_SetTurnaroundTime+0xae>
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4a25      	ldr	r2, [pc, #148]	; (8004434 <USB_SetTurnaroundTime+0x138>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d202      	bcs.n	80043aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80043a4:	2309      	movs	r3, #9
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	e020      	b.n	80043ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	4a21      	ldr	r2, [pc, #132]	; (8004434 <USB_SetTurnaroundTime+0x138>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d306      	bcc.n	80043c0 <USB_SetTurnaroundTime+0xc4>
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4a20      	ldr	r2, [pc, #128]	; (8004438 <USB_SetTurnaroundTime+0x13c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d802      	bhi.n	80043c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80043ba:	2308      	movs	r3, #8
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	e015      	b.n	80043ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	4a1d      	ldr	r2, [pc, #116]	; (8004438 <USB_SetTurnaroundTime+0x13c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d906      	bls.n	80043d6 <USB_SetTurnaroundTime+0xda>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4a1c      	ldr	r2, [pc, #112]	; (800443c <USB_SetTurnaroundTime+0x140>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d202      	bcs.n	80043d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80043d0:	2307      	movs	r3, #7
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	e00a      	b.n	80043ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80043d6:	2306      	movs	r3, #6
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	e007      	b.n	80043ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d102      	bne.n	80043e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80043e2:	2309      	movs	r3, #9
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	e001      	b.n	80043ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80043e8:	2309      	movs	r3, #9
 80043ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	029b      	lsls	r3, r3, #10
 8004400:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004404:	431a      	orrs	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	371c      	adds	r7, #28
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	00d8acbf 	.word	0x00d8acbf
 800441c:	00e4e1c0 	.word	0x00e4e1c0
 8004420:	00f42400 	.word	0x00f42400
 8004424:	01067380 	.word	0x01067380
 8004428:	011a499f 	.word	0x011a499f
 800442c:	01312cff 	.word	0x01312cff
 8004430:	014ca43f 	.word	0x014ca43f
 8004434:	016e3600 	.word	0x016e3600
 8004438:	01a6ab1f 	.word	0x01a6ab1f
 800443c:	01e84800 	.word	0x01e84800

08004440 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f043 0201 	orr.w	r2, r3, #1
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f023 0201 	bic.w	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d115      	bne.n	80044d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044b2:	2001      	movs	r0, #1
 80044b4:	f7fc fe5c 	bl	8001170 <HAL_Delay>
      ms++;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3301      	adds	r3, #1
 80044bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f001 f972 	bl	80057a8 <USB_GetMode>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d01e      	beq.n	8004508 <USB_SetCurrentMode+0x84>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b31      	cmp	r3, #49	; 0x31
 80044ce:	d9f0      	bls.n	80044b2 <USB_SetCurrentMode+0x2e>
 80044d0:	e01a      	b.n	8004508 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d115      	bne.n	8004504 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044e4:	2001      	movs	r0, #1
 80044e6:	f7fc fe43 	bl	8001170 <HAL_Delay>
      ms++;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3301      	adds	r3, #1
 80044ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f001 f959 	bl	80057a8 <USB_GetMode>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <USB_SetCurrentMode+0x84>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b31      	cmp	r3, #49	; 0x31
 8004500:	d9f0      	bls.n	80044e4 <USB_SetCurrentMode+0x60>
 8004502:	e001      	b.n	8004508 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e005      	b.n	8004514 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b32      	cmp	r3, #50	; 0x32
 800450c:	d101      	bne.n	8004512 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800451c:	b084      	sub	sp, #16
 800451e:	b580      	push	{r7, lr}
 8004520:	b086      	sub	sp, #24
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800452a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004536:	2300      	movs	r3, #0
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	e009      	b.n	8004550 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	3340      	adds	r3, #64	; 0x40
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	2200      	movs	r2, #0
 8004548:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	3301      	adds	r3, #1
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b0e      	cmp	r3, #14
 8004554:	d9f2      	bls.n	800453c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004558:	2b00      	cmp	r3, #0
 800455a:	d11c      	bne.n	8004596 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800456a:	f043 0302 	orr.w	r3, r3, #2
 800456e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004574:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	639a      	str	r2, [r3, #56]	; 0x38
 8004594:	e00b      	b.n	80045ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045b4:	461a      	mov	r2, r3
 80045b6:	2300      	movs	r3, #0
 80045b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c0:	4619      	mov	r1, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c8:	461a      	mov	r2, r3
 80045ca:	680b      	ldr	r3, [r1, #0]
 80045cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d10c      	bne.n	80045ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80045d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d104      	bne.n	80045e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80045da:	2100      	movs	r1, #0
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f945 	bl	800486c <USB_SetDevSpeed>
 80045e2:	e008      	b.n	80045f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045e4:	2101      	movs	r1, #1
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f940 	bl	800486c <USB_SetDevSpeed>
 80045ec:	e003      	b.n	80045f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045ee:	2103      	movs	r1, #3
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f93b 	bl	800486c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045f6:	2110      	movs	r1, #16
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f8f3 	bl	80047e4 <USB_FlushTxFifo>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f90f 	bl	800482c <USB_FlushRxFifo>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461e:	461a      	mov	r2, r3
 8004620:	2300      	movs	r3, #0
 8004622:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462a:	461a      	mov	r2, r3
 800462c:	2300      	movs	r3, #0
 800462e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004636:	461a      	mov	r2, r3
 8004638:	2300      	movs	r3, #0
 800463a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800463c:	2300      	movs	r3, #0
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	e043      	b.n	80046ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004654:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004658:	d118      	bne.n	800468c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10a      	bne.n	8004676 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466c:	461a      	mov	r2, r3
 800466e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	e013      	b.n	800469e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004682:	461a      	mov	r2, r3
 8004684:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	e008      	b.n	800469e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004698:	461a      	mov	r2, r3
 800469a:	2300      	movs	r3, #0
 800469c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046aa:	461a      	mov	r2, r3
 80046ac:	2300      	movs	r3, #0
 80046ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046bc:	461a      	mov	r2, r3
 80046be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	3301      	adds	r3, #1
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d3b7      	bcc.n	8004642 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046d2:	2300      	movs	r3, #0
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	e043      	b.n	8004760 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ee:	d118      	bne.n	8004722 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004702:	461a      	mov	r2, r3
 8004704:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	e013      	b.n	8004734 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004718:	461a      	mov	r2, r3
 800471a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	e008      	b.n	8004734 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472e:	461a      	mov	r2, r3
 8004730:	2300      	movs	r3, #0
 8004732:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004740:	461a      	mov	r2, r3
 8004742:	2300      	movs	r3, #0
 8004744:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004752:	461a      	mov	r2, r3
 8004754:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004758:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	3301      	adds	r3, #1
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	429a      	cmp	r2, r3
 8004766:	d3b7      	bcc.n	80046d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004776:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800477a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004788:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	2b00      	cmp	r3, #0
 800478e:	d105      	bne.n	800479c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	f043 0210 	orr.w	r2, r3, #16
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699a      	ldr	r2, [r3, #24]
 80047a0:	4b0f      	ldr	r3, [pc, #60]	; (80047e0 <USB_DevInit+0x2c4>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f043 0208 	orr.w	r2, r3, #8
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d107      	bne.n	80047d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047c8:	f043 0304 	orr.w	r3, r3, #4
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80047d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047dc:	b004      	add	sp, #16
 80047de:	4770      	bx	lr
 80047e0:	803c3800 	.word	0x803c3800

080047e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	019b      	lsls	r3, r3, #6
 80047f6:	f043 0220 	orr.w	r2, r3, #32
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3301      	adds	r3, #1
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	4a08      	ldr	r2, [pc, #32]	; (8004828 <USB_FlushTxFifo+0x44>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e006      	b.n	800481c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b20      	cmp	r3, #32
 8004818:	d0f1      	beq.n	80047fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	00030d40 	.word	0x00030d40

0800482c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2210      	movs	r2, #16
 800483c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3301      	adds	r3, #1
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	4a08      	ldr	r2, [pc, #32]	; (8004868 <USB_FlushRxFifo+0x3c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e006      	b.n	800485c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	2b10      	cmp	r3, #16
 8004858:	d0f1      	beq.n	800483e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	00030d40 	.word	0x00030d40

0800486c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	68f9      	ldr	r1, [r7, #12]
 8004888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800488c:	4313      	orrs	r3, r2
 800488e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800489e:	b480      	push	{r7}
 80048a0:	b087      	sub	sp, #28
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 0306 	and.w	r3, r3, #6
 80048b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d102      	bne.n	80048c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80048be:	2300      	movs	r3, #0
 80048c0:	75fb      	strb	r3, [r7, #23]
 80048c2:	e00a      	b.n	80048da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d002      	beq.n	80048d0 <USB_GetDevSpeed+0x32>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b06      	cmp	r3, #6
 80048ce:	d102      	bne.n	80048d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80048d0:	2302      	movs	r3, #2
 80048d2:	75fb      	strb	r3, [r7, #23]
 80048d4:	e001      	b.n	80048da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80048d6:	230f      	movs	r3, #15
 80048d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80048da:	7dfb      	ldrb	r3, [r7, #23]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	785b      	ldrb	r3, [r3, #1]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d13a      	bne.n	800497a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	2101      	movs	r1, #1
 8004916:	fa01 f303 	lsl.w	r3, r1, r3
 800491a:	b29b      	uxth	r3, r3
 800491c:	68f9      	ldr	r1, [r7, #12]
 800491e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004922:	4313      	orrs	r3, r2
 8004924:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d155      	bne.n	80049e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	78db      	ldrb	r3, [r3, #3]
 8004956:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004958:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	059b      	lsls	r3, r3, #22
 800495e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004960:	4313      	orrs	r3, r2
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	0151      	lsls	r1, r2, #5
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	440a      	add	r2, r1
 800496a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	e036      	b.n	80049e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004980:	69da      	ldr	r2, [r3, #28]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	2101      	movs	r1, #1
 800498c:	fa01 f303 	lsl.w	r3, r1, r3
 8004990:	041b      	lsls	r3, r3, #16
 8004992:	68f9      	ldr	r1, [r7, #12]
 8004994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004998:	4313      	orrs	r3, r2
 800499a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d11a      	bne.n	80049e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	78db      	ldrb	r3, [r3, #3]
 80049cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049ce:	430b      	orrs	r3, r1
 80049d0:	4313      	orrs	r3, r2
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	0151      	lsls	r1, r2, #5
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	440a      	add	r2, r1
 80049da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d161      	bne.n	8004ad8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a2a:	d11f      	bne.n	8004a6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	0151      	lsls	r1, r2, #5
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	440a      	add	r2, r1
 8004a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	0151      	lsls	r1, r2, #5
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	440a      	add	r2, r1
 8004a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	43db      	mvns	r3, r3
 8004a86:	68f9      	ldr	r1, [r7, #12]
 8004a88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	68f9      	ldr	r1, [r7, #12]
 8004aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	0159      	lsls	r1, r3, #5
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	440b      	add	r3, r1
 8004aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4b35      	ldr	r3, [pc, #212]	; (8004ba8 <USB_DeactivateEndpoint+0x1b0>)
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	600b      	str	r3, [r1, #0]
 8004ad6:	e060      	b.n	8004b9a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aee:	d11f      	bne.n	8004b30 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	0151      	lsls	r1, r2, #5
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	440a      	add	r2, r1
 8004b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b0e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	0151      	lsls	r1, r2, #5
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	440a      	add	r2, r1
 8004b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	2101      	movs	r1, #1
 8004b42:	fa01 f303 	lsl.w	r3, r1, r3
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	68f9      	ldr	r1, [r7, #12]
 8004b4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b50:	4013      	ands	r3, r2
 8004b52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	f003 030f 	and.w	r3, r3, #15
 8004b64:	2101      	movs	r1, #1
 8004b66:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6a:	041b      	lsls	r3, r3, #16
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b74:	4013      	ands	r3, r2
 8004b76:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	0159      	lsls	r1, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	440b      	add	r3, r1
 8004b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b92:	4619      	mov	r1, r3
 8004b94:	4b05      	ldr	r3, [pc, #20]	; (8004bac <USB_DeactivateEndpoint+0x1b4>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	ec337800 	.word	0xec337800
 8004bac:	eff37800 	.word	0xeff37800

08004bb0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	; 0x28
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	785b      	ldrb	r3, [r3, #1]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	f040 815c 	bne.w	8004e8a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d132      	bne.n	8004c40 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	0151      	lsls	r1, r2, #5
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	440a      	add	r2, r1
 8004bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bf8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	0151      	lsls	r1, r2, #5
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	440a      	add	r2, r1
 8004c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	0151      	lsls	r1, r2, #5
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	440a      	add	r2, r1
 8004c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c38:	0cdb      	lsrs	r3, r3, #19
 8004c3a:	04db      	lsls	r3, r3, #19
 8004c3c:	6113      	str	r3, [r2, #16]
 8004c3e:	e074      	b.n	8004d2a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	0151      	lsls	r1, r2, #5
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	440a      	add	r2, r1
 8004c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c5a:	0cdb      	lsrs	r3, r3, #19
 8004c5c:	04db      	lsls	r3, r3, #19
 8004c5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	0151      	lsls	r1, r2, #5
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	440a      	add	r2, r1
 8004c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c90:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6959      	ldr	r1, [r3, #20]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	440b      	add	r3, r1
 8004c9c:	1e59      	subs	r1, r3, #1
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ca6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ca8:	4b9d      	ldr	r3, [pc, #628]	; (8004f20 <USB_EPStartXfer+0x370>)
 8004caa:	400b      	ands	r3, r1
 8004cac:	69b9      	ldr	r1, [r7, #24]
 8004cae:	0148      	lsls	r0, r1, #5
 8004cb0:	69f9      	ldr	r1, [r7, #28]
 8004cb2:	4401      	add	r1, r0
 8004cb4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd2:	69b9      	ldr	r1, [r7, #24]
 8004cd4:	0148      	lsls	r0, r1, #5
 8004cd6:	69f9      	ldr	r1, [r7, #28]
 8004cd8:	4401      	add	r1, r0
 8004cda:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	78db      	ldrb	r3, [r3, #3]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d11f      	bne.n	8004d2a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d04:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004d08:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	0151      	lsls	r1, r2, #5
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	440a      	add	r2, r1
 8004d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d28:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004d2a:	79fb      	ldrb	r3, [r7, #7]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d14b      	bne.n	8004dc8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d009      	beq.n	8004d4c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	461a      	mov	r2, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	78db      	ldrb	r3, [r3, #3]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d128      	bne.n	8004da6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d110      	bne.n	8004d86 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	0151      	lsls	r1, r2, #5
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	440a      	add	r2, r1
 8004d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	e00f      	b.n	8004da6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	0151      	lsls	r1, r2, #5
 8004db8:	69fa      	ldr	r2, [r7, #28]
 8004dba:	440a      	add	r2, r1
 8004dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	e12f      	b.n	8005028 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	0151      	lsls	r1, r2, #5
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	440a      	add	r2, r1
 8004dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004de6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	78db      	ldrb	r3, [r3, #3]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d015      	beq.n	8004e1c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8117 	beq.w	8005028 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e10:	69f9      	ldr	r1, [r7, #28]
 8004e12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e16:	4313      	orrs	r3, r2
 8004e18:	634b      	str	r3, [r1, #52]	; 0x34
 8004e1a:	e105      	b.n	8005028 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d110      	bne.n	8004e4e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	0151      	lsls	r1, r2, #5
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	440a      	add	r2, r1
 8004e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	e00f      	b.n	8004e6e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	0151      	lsls	r1, r2, #5
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	440a      	add	r2, r1
 8004e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	68d9      	ldr	r1, [r3, #12]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	781a      	ldrb	r2, [r3, #0]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	b298      	uxth	r0, r3
 8004e7c:	79fb      	ldrb	r3, [r7, #7]
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	4603      	mov	r3, r0
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 fa2b 	bl	80052de <USB_WritePacket>
 8004e88:	e0ce      	b.n	8005028 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	0151      	lsls	r1, r2, #5
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	440a      	add	r2, r1
 8004ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ea4:	0cdb      	lsrs	r3, r3, #19
 8004ea6:	04db      	lsls	r3, r3, #19
 8004ea8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	0151      	lsls	r1, r2, #5
 8004ebc:	69fa      	ldr	r2, [r7, #28]
 8004ebe:	440a      	add	r2, r1
 8004ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ec4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ec8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ecc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d126      	bne.n	8004f24 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eec:	69b9      	ldr	r1, [r7, #24]
 8004eee:	0148      	lsls	r0, r1, #5
 8004ef0:	69f9      	ldr	r1, [r7, #28]
 8004ef2:	4401      	add	r1, r0
 8004ef4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f1a:	6113      	str	r3, [r2, #16]
 8004f1c:	e036      	b.n	8004f8c <USB_EPStartXfer+0x3dc>
 8004f1e:	bf00      	nop
 8004f20:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	695a      	ldr	r2, [r3, #20]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	1e5a      	subs	r2, r3, #1
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f38:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	8afb      	ldrh	r3, [r7, #22]
 8004f4a:	04d9      	lsls	r1, r3, #19
 8004f4c:	4b39      	ldr	r3, [pc, #228]	; (8005034 <USB_EPStartXfer+0x484>)
 8004f4e:	400b      	ands	r3, r1
 8004f50:	69b9      	ldr	r1, [r7, #24]
 8004f52:	0148      	lsls	r0, r1, #5
 8004f54:	69f9      	ldr	r1, [r7, #28]
 8004f56:	4401      	add	r1, r0
 8004f58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	8af9      	ldrh	r1, [r7, #22]
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f7c:	69b9      	ldr	r1, [r7, #24]
 8004f7e:	0148      	lsls	r0, r1, #5
 8004f80:	69f9      	ldr	r1, [r7, #28]
 8004f82:	4401      	add	r1, r0
 8004f84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d10d      	bne.n	8004fae <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d009      	beq.n	8004fae <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	68d9      	ldr	r1, [r3, #12]
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004faa:	460a      	mov	r2, r1
 8004fac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	78db      	ldrb	r3, [r3, #3]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d128      	bne.n	8005008 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d110      	bne.n	8004fe8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	69fa      	ldr	r2, [r7, #28]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	e00f      	b.n	8005008 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	0151      	lsls	r1, r2, #5
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	440a      	add	r2, r1
 8004ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005006:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	0151      	lsls	r1, r2, #5
 800501a:	69fa      	ldr	r2, [r7, #28]
 800501c:	440a      	add	r2, r1
 800501e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005022:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005026:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3720      	adds	r7, #32
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	1ff80000 	.word	0x1ff80000

08005038 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	4613      	mov	r3, r2
 8005044:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	785b      	ldrb	r3, [r3, #1]
 8005054:	2b01      	cmp	r3, #1
 8005056:	f040 80cd 	bne.w	80051f4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d132      	bne.n	80050c8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	0151      	lsls	r1, r2, #5
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	440a      	add	r2, r1
 8005078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005080:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005084:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	0151      	lsls	r1, r2, #5
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	440a      	add	r2, r1
 800509c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	0151      	lsls	r1, r2, #5
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	440a      	add	r2, r1
 80050bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c0:	0cdb      	lsrs	r3, r3, #19
 80050c2:	04db      	lsls	r3, r3, #19
 80050c4:	6113      	str	r3, [r2, #16]
 80050c6:	e04e      	b.n	8005166 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	0151      	lsls	r1, r2, #5
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	440a      	add	r2, r1
 80050de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e2:	0cdb      	lsrs	r3, r3, #19
 80050e4:	04db      	lsls	r3, r3, #19
 80050e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005102:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005106:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800510a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	695a      	ldr	r2, [r3, #20]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	429a      	cmp	r2, r3
 8005116:	d903      	bls.n	8005120 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	0151      	lsls	r1, r2, #5
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	440a      	add	r2, r1
 8005136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800513a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800513e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514c:	691a      	ldr	r2, [r3, #16]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005156:	6939      	ldr	r1, [r7, #16]
 8005158:	0148      	lsls	r0, r1, #5
 800515a:	6979      	ldr	r1, [r7, #20]
 800515c:	4401      	add	r1, r0
 800515e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005162:	4313      	orrs	r3, r2
 8005164:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d11e      	bne.n	80051aa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d009      	beq.n	8005188 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005180:	461a      	mov	r2, r3
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	0151      	lsls	r1, r2, #5
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	440a      	add	r2, r1
 800519e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051a6:	6013      	str	r3, [r2, #0]
 80051a8:	e092      	b.n	80052d0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	0151      	lsls	r1, r2, #5
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	440a      	add	r2, r1
 80051c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051c8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d07e      	beq.n	80052d0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	2101      	movs	r1, #1
 80051e4:	fa01 f303 	lsl.w	r3, r1, r3
 80051e8:	6979      	ldr	r1, [r7, #20]
 80051ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051ee:	4313      	orrs	r3, r2
 80051f0:	634b      	str	r3, [r1, #52]	; 0x34
 80051f2:	e06d      	b.n	80052d0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	440a      	add	r2, r1
 800520a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800520e:	0cdb      	lsrs	r3, r3, #19
 8005210:	04db      	lsls	r3, r3, #19
 8005212:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800522e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005232:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005236:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	440a      	add	r2, r1
 800525e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005262:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005266:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800527e:	6939      	ldr	r1, [r7, #16]
 8005280:	0148      	lsls	r0, r1, #5
 8005282:	6979      	ldr	r1, [r7, #20]
 8005284:	4401      	add	r1, r0
 8005286:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800528a:	4313      	orrs	r3, r2
 800528c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800528e:	79fb      	ldrb	r3, [r7, #7]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d10d      	bne.n	80052b0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d009      	beq.n	80052b0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	68d9      	ldr	r1, [r3, #12]
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ac:	460a      	mov	r2, r1
 80052ae:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052de:	b480      	push	{r7}
 80052e0:	b089      	sub	sp, #36	; 0x24
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	60f8      	str	r0, [r7, #12]
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	4611      	mov	r1, r2
 80052ea:	461a      	mov	r2, r3
 80052ec:	460b      	mov	r3, r1
 80052ee:	71fb      	strb	r3, [r7, #7]
 80052f0:	4613      	mov	r3, r2
 80052f2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80052fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005300:	2b00      	cmp	r3, #0
 8005302:	d123      	bne.n	800534c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005304:	88bb      	ldrh	r3, [r7, #4]
 8005306:	3303      	adds	r3, #3
 8005308:	089b      	lsrs	r3, r3, #2
 800530a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800530c:	2300      	movs	r3, #0
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	e018      	b.n	8005344 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005312:	79fb      	ldrb	r3, [r7, #7]
 8005314:	031a      	lsls	r2, r3, #12
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	4413      	add	r3, r2
 800531a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800531e:	461a      	mov	r2, r3
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	3301      	adds	r3, #1
 800532a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	3301      	adds	r3, #1
 8005330:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	3301      	adds	r3, #1
 8005336:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	3301      	adds	r3, #1
 800533c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	3301      	adds	r3, #1
 8005342:	61bb      	str	r3, [r7, #24]
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	429a      	cmp	r2, r3
 800534a:	d3e2      	bcc.n	8005312 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3724      	adds	r7, #36	; 0x24
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800535a:	b480      	push	{r7}
 800535c:	b08b      	sub	sp, #44	; 0x2c
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	4613      	mov	r3, r2
 8005366:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	089b      	lsrs	r3, r3, #2
 8005374:	b29b      	uxth	r3, r3
 8005376:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005378:	88fb      	ldrh	r3, [r7, #6]
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005380:	2300      	movs	r3, #0
 8005382:	623b      	str	r3, [r7, #32]
 8005384:	e014      	b.n	80053b0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	601a      	str	r2, [r3, #0]
    pDest++;
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	3301      	adds	r3, #1
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	3301      	adds	r3, #1
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	3301      	adds	r3, #1
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	3301      	adds	r3, #1
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	3301      	adds	r3, #1
 80053ae:	623b      	str	r3, [r7, #32]
 80053b0:	6a3a      	ldr	r2, [r7, #32]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d3e6      	bcc.n	8005386 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80053b8:	8bfb      	ldrh	r3, [r7, #30]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d01e      	beq.n	80053fc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053c8:	461a      	mov	r2, r3
 80053ca:	f107 0310 	add.w	r3, r7, #16
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	fa22 f303 	lsr.w	r3, r2, r3
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	701a      	strb	r2, [r3, #0]
      i++;
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	3301      	adds	r3, #1
 80053e8:	623b      	str	r3, [r7, #32]
      pDest++;
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	3301      	adds	r3, #1
 80053ee:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80053f0:	8bfb      	ldrh	r3, [r7, #30]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80053f6:	8bfb      	ldrh	r3, [r7, #30]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1ea      	bne.n	80053d2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053fe:	4618      	mov	r0, r3
 8005400:	372c      	adds	r7, #44	; 0x2c
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800540a:	b480      	push	{r7}
 800540c:	b085      	sub	sp, #20
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	785b      	ldrb	r3, [r3, #1]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d12c      	bne.n	8005480 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	db12      	blt.n	800545e <USB_EPSetStall+0x54>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00f      	beq.n	800545e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	0151      	lsls	r1, r2, #5
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	440a      	add	r2, r1
 8005454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005458:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800545c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	440a      	add	r2, r1
 8005474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005478:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	e02b      	b.n	80054d8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	db12      	blt.n	80054b8 <USB_EPSetStall+0xae>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00f      	beq.n	80054b8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	0151      	lsls	r1, r2, #5
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	440a      	add	r2, r1
 80054ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054b6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	0151      	lsls	r1, r2, #5
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	440a      	add	r2, r1
 80054ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b085      	sub	sp, #20
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	785b      	ldrb	r3, [r3, #1]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d128      	bne.n	8005554 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	0151      	lsls	r1, r2, #5
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	440a      	add	r2, r1
 8005518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800551c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005520:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	78db      	ldrb	r3, [r3, #3]
 8005526:	2b03      	cmp	r3, #3
 8005528:	d003      	beq.n	8005532 <USB_EPClearStall+0x4c>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	78db      	ldrb	r3, [r3, #3]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d138      	bne.n	80055a4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	0151      	lsls	r1, r2, #5
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	440a      	add	r2, r1
 8005548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	e027      	b.n	80055a4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	440a      	add	r2, r1
 800556a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800556e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005572:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	78db      	ldrb	r3, [r3, #3]
 8005578:	2b03      	cmp	r3, #3
 800557a:	d003      	beq.n	8005584 <USB_EPClearStall+0x9e>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	78db      	ldrb	r3, [r3, #3]
 8005580:	2b02      	cmp	r3, #2
 8005582:	d10f      	bne.n	80055a4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	440a      	add	r2, r1
 800559a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800559e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b085      	sub	sp, #20
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	460b      	mov	r3, r1
 80055bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80055d4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	78fb      	ldrb	r3, [r7, #3]
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ec:	4313      	orrs	r3, r2
 80055ee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055fe:	b480      	push	{r7}
 8005600:	b085      	sub	sp, #20
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005618:	f023 0303 	bic.w	r3, r3, #3
 800561c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800562c:	f023 0302 	bic.w	r3, r3, #2
 8005630:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800565a:	f023 0303 	bic.w	r3, r3, #3
 800565e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800566e:	f043 0302 	orr.w	r3, r3, #2
 8005672:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4013      	ands	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800569a:	68fb      	ldr	r3, [r7, #12]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	4013      	ands	r3, r2
 80056ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	0c1b      	lsrs	r3, r3, #16
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	4013      	ands	r3, r2
 80056fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	b29b      	uxth	r3, r3
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	4013      	ands	r3, r2
 800573c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800573e:	68bb      	ldr	r3, [r7, #8]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	fa22 f303 	lsr.w	r3, r2, r3
 800577c:	01db      	lsls	r3, r3, #7
 800577e:	b2db      	uxtb	r3, r3
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4013      	ands	r3, r2
 8005798:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800579a:	68bb      	ldr	r3, [r7, #8]
}
 800579c:	4618      	mov	r0, r3
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f003 0301 	and.w	r3, r3, #1
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057e2:	f023 0307 	bic.w	r3, r3, #7
 80057e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
	...

0800580c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	460b      	mov	r3, r1
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	333c      	adds	r3, #60	; 0x3c
 8005822:	3304      	adds	r3, #4
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4a26      	ldr	r2, [pc, #152]	; (80058c4 <USB_EP0_OutStart+0xb8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d90a      	bls.n	8005846 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800583c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005840:	d101      	bne.n	8005846 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	e037      	b.n	80058b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584c:	461a      	mov	r2, r3
 800584e:	2300      	movs	r3, #0
 8005850:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005860:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005864:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005874:	f043 0318 	orr.w	r3, r3, #24
 8005878:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005888:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800588c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800588e:	7afb      	ldrb	r3, [r7, #11]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d10f      	bne.n	80058b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589a:	461a      	mov	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80058b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	371c      	adds	r7, #28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	4f54300a 	.word	0x4f54300a

080058c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3301      	adds	r3, #1
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	4a13      	ldr	r2, [pc, #76]	; (8005928 <USB_CoreReset+0x60>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d901      	bls.n	80058e4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e01a      	b.n	800591a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	daf3      	bge.n	80058d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	f043 0201 	orr.w	r2, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3301      	adds	r3, #1
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	4a09      	ldr	r2, [pc, #36]	; (8005928 <USB_CoreReset+0x60>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d901      	bls.n	800590c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e006      	b.n	800591a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b01      	cmp	r3, #1
 8005916:	d0f1      	beq.n	80058fc <USB_CoreReset+0x34>

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	00030d40 	.word	0x00030d40

0800592c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005938:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800593c:	f002 f96a 	bl	8007c14 <USBD_static_malloc>
 8005940:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d105      	bne.n	8005954 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005950:	2302      	movs	r3, #2
 8005952:	e066      	b.n	8005a22 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	7c1b      	ldrb	r3, [r3, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d119      	bne.n	8005998 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005968:	2202      	movs	r2, #2
 800596a:	2181      	movs	r1, #129	; 0x81
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f002 f82e 	bl	80079ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800597c:	2202      	movs	r2, #2
 800597e:	2101      	movs	r1, #1
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f002 f824 	bl	80079ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2210      	movs	r2, #16
 8005992:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005996:	e016      	b.n	80059c6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005998:	2340      	movs	r3, #64	; 0x40
 800599a:	2202      	movs	r2, #2
 800599c:	2181      	movs	r1, #129	; 0x81
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f002 f815 	bl	80079ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059aa:	2340      	movs	r3, #64	; 0x40
 80059ac:	2202      	movs	r2, #2
 80059ae:	2101      	movs	r1, #1
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f002 f80c 	bl	80079ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2210      	movs	r2, #16
 80059c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059c6:	2308      	movs	r3, #8
 80059c8:	2203      	movs	r2, #3
 80059ca:	2182      	movs	r1, #130	; 0x82
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 fffe 	bl	80079ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	7c1b      	ldrb	r3, [r3, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d109      	bne.n	8005a10 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a06:	2101      	movs	r1, #1
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f002 f8cf 	bl	8007bac <USBD_LL_PrepareReceive>
 8005a0e:	e007      	b.n	8005a20 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a16:	2340      	movs	r3, #64	; 0x40
 8005a18:	2101      	movs	r1, #1
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f002 f8c6 	bl	8007bac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b082      	sub	sp, #8
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	460b      	mov	r3, r1
 8005a34:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005a36:	2181      	movs	r1, #129	; 0x81
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f001 ffee 	bl	8007a1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005a44:	2101      	movs	r1, #1
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f001 ffe7 	bl	8007a1a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005a54:	2182      	movs	r1, #130	; 0x82
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 ffdf 	bl	8007a1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00e      	beq.n	8005a94 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a86:	4618      	mov	r0, r3
 8005a88:	f002 f8d2 	bl	8007c30 <USBD_static_free>
    pdev->pClassData = NULL;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ab0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e0af      	b.n	8005c28 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d03f      	beq.n	8005b54 <USBD_CDC_Setup+0xb4>
 8005ad4:	2b20      	cmp	r3, #32
 8005ad6:	f040 809f 	bne.w	8005c18 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	88db      	ldrh	r3, [r3, #6]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d02e      	beq.n	8005b40 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	b25b      	sxtb	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	da16      	bge.n	8005b1a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005af8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	88d2      	ldrh	r2, [r2, #6]
 8005afe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	88db      	ldrh	r3, [r3, #6]
 8005b04:	2b07      	cmp	r3, #7
 8005b06:	bf28      	it	cs
 8005b08:	2307      	movcs	r3, #7
 8005b0a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	89fa      	ldrh	r2, [r7, #14]
 8005b10:	4619      	mov	r1, r3
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f001 fb19 	bl	800714a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005b18:	e085      	b.n	8005c26 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	785a      	ldrb	r2, [r3, #1]
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	88db      	ldrh	r3, [r3, #6]
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005b30:	6939      	ldr	r1, [r7, #16]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	88db      	ldrh	r3, [r3, #6]
 8005b36:	461a      	mov	r2, r3
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f001 fb32 	bl	80071a2 <USBD_CtlPrepareRx>
      break;
 8005b3e:	e072      	b.n	8005c26 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	7850      	ldrb	r0, [r2, #1]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	4798      	blx	r3
      break;
 8005b52:	e068      	b.n	8005c26 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	2b0b      	cmp	r3, #11
 8005b5a:	d852      	bhi.n	8005c02 <USBD_CDC_Setup+0x162>
 8005b5c:	a201      	add	r2, pc, #4	; (adr r2, 8005b64 <USBD_CDC_Setup+0xc4>)
 8005b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b62:	bf00      	nop
 8005b64:	08005b95 	.word	0x08005b95
 8005b68:	08005c11 	.word	0x08005c11
 8005b6c:	08005c03 	.word	0x08005c03
 8005b70:	08005c03 	.word	0x08005c03
 8005b74:	08005c03 	.word	0x08005c03
 8005b78:	08005c03 	.word	0x08005c03
 8005b7c:	08005c03 	.word	0x08005c03
 8005b80:	08005c03 	.word	0x08005c03
 8005b84:	08005c03 	.word	0x08005c03
 8005b88:	08005c03 	.word	0x08005c03
 8005b8c:	08005bbf 	.word	0x08005bbf
 8005b90:	08005be9 	.word	0x08005be9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	d107      	bne.n	8005bb0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005ba0:	f107 030a 	add.w	r3, r7, #10
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f001 face 	bl	800714a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bae:	e032      	b.n	8005c16 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f001 fa58 	bl	8007068 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	75fb      	strb	r3, [r7, #23]
          break;
 8005bbc:	e02b      	b.n	8005c16 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d107      	bne.n	8005bda <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005bca:	f107 030d 	add.w	r3, r7, #13
 8005bce:	2201      	movs	r2, #1
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f001 fab9 	bl	800714a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bd8:	e01d      	b.n	8005c16 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f001 fa43 	bl	8007068 <USBD_CtlError>
            ret = USBD_FAIL;
 8005be2:	2303      	movs	r3, #3
 8005be4:	75fb      	strb	r3, [r7, #23]
          break;
 8005be6:	e016      	b.n	8005c16 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d00f      	beq.n	8005c14 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f001 fa36 	bl	8007068 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c00:	e008      	b.n	8005c14 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 fa2f 	bl	8007068 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c0e:	e002      	b.n	8005c16 <USBD_CDC_Setup+0x176>
          break;
 8005c10:	bf00      	nop
 8005c12:	e008      	b.n	8005c26 <USBD_CDC_Setup+0x186>
          break;
 8005c14:	bf00      	nop
      }
      break;
 8005c16:	e006      	b.n	8005c26 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f001 fa24 	bl	8007068 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c20:	2303      	movs	r3, #3
 8005c22:	75fb      	strb	r3, [r7, #23]
      break;
 8005c24:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005c42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e04f      	b.n	8005cf2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005c5a:	78fa      	ldrb	r2, [r7, #3]
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	440b      	add	r3, r1
 8005c68:	3318      	adds	r3, #24
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d029      	beq.n	8005cc4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c70:	78fa      	ldrb	r2, [r7, #3]
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	4613      	mov	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	440b      	add	r3, r1
 8005c7e:	3318      	adds	r3, #24
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	78f9      	ldrb	r1, [r7, #3]
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	460b      	mov	r3, r1
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	1a5b      	subs	r3, r3, r1
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4403      	add	r3, r0
 8005c90:	3344      	adds	r3, #68	; 0x44
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c98:	fb03 f301 	mul.w	r3, r3, r1
 8005c9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d110      	bne.n	8005cc4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005ca2:	78fa      	ldrb	r2, [r7, #3]
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	440b      	add	r3, r1
 8005cb0:	3318      	adds	r3, #24
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005cb6:	78f9      	ldrb	r1, [r7, #3]
 8005cb8:	2300      	movs	r3, #0
 8005cba:	2200      	movs	r2, #0
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f001 ff54 	bl	8007b6a <USBD_LL_Transmit>
 8005cc2:	e015      	b.n	8005cf0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00b      	beq.n	8005cf0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005cec:	78fa      	ldrb	r2, [r7, #3]
 8005cee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b084      	sub	sp, #16
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	460b      	mov	r3, r1
 8005d04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e015      	b.n	8005d48 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	4619      	mov	r1, r3
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f001 ff64 	bl	8007bee <USBD_LL_GetRxDataSize>
 8005d26:	4602      	mov	r2, r0
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d42:	4611      	mov	r1, r2
 8005d44:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d5e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e01b      	b.n	8005da2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d015      	beq.n	8005da0 <USBD_CDC_EP0_RxReady+0x50>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d7a:	2bff      	cmp	r3, #255	; 0xff
 8005d7c:	d010      	beq.n	8005da0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005d8c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d94:	b292      	uxth	r2, r2
 8005d96:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	22ff      	movs	r2, #255	; 0xff
 8005d9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2243      	movs	r2, #67	; 0x43
 8005db8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005dba:	4b03      	ldr	r3, [pc, #12]	; (8005dc8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	20000094 	.word	0x20000094

08005dcc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2243      	movs	r2, #67	; 0x43
 8005dd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005dda:	4b03      	ldr	r3, [pc, #12]	; (8005de8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	20000050 	.word	0x20000050

08005dec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2243      	movs	r2, #67	; 0x43
 8005df8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005dfa:	4b03      	ldr	r3, [pc, #12]	; (8005e08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	200000d8 	.word	0x200000d8

08005e0c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	220a      	movs	r2, #10
 8005e18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e1a:	4b03      	ldr	r3, [pc, #12]	; (8005e28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	2000000c 	.word	0x2000000c

08005e2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e004      	b.n	8005e4a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b087      	sub	sp, #28
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e68:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e008      	b.n	8005e86 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ea2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e004      	b.n	8005eb8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ed2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e01a      	b.n	8005f1c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d114      	bne.n	8005f1a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f0e:	2181      	movs	r1, #129	; 0x81
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 fe2a 	bl	8007b6a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e016      	b.n	8005f70 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	7c1b      	ldrb	r3, [r3, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f54:	2101      	movs	r1, #1
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f001 fe28 	bl	8007bac <USBD_LL_PrepareReceive>
 8005f5c:	e007      	b.n	8005f6e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f64:	2340      	movs	r3, #64	; 0x40
 8005f66:	2101      	movs	r1, #1
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f001 fe1f 	bl	8007bac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e01f      	b.n	8005fd0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	79fa      	ldrb	r2, [r7, #7]
 8005fc2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f001 fc9b 	bl	8007900 <USBD_LL_Init>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e016      	b.n	800601e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00b      	beq.n	800601c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	f107 020e 	add.w	r2, r7, #14
 8006010:	4610      	mov	r0, r2
 8006012:	4798      	blx	r3
 8006014:	4602      	mov	r2, r0
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 fcb2 	bl	8007998 <USBD_LL_Start>
 8006034:	4603      	mov	r3, r0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006060:	2303      	movs	r3, #3
 8006062:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800606a:	2b00      	cmp	r3, #0
 800606c:	d009      	beq.n	8006082 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	78fa      	ldrb	r2, [r7, #3]
 8006078:	4611      	mov	r1, r2
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	4798      	blx	r3
 800607e:	4603      	mov	r3, r0
 8006080:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006082:	7bfb      	ldrb	r3, [r7, #15]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d007      	beq.n	80060b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	78fa      	ldrb	r2, [r7, #3]
 80060ac:	4611      	mov	r1, r2
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	4798      	blx	r3
  }

  return USBD_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060cc:	6839      	ldr	r1, [r7, #0]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 ff90 	bl	8006ff4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80060e2:	461a      	mov	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060f0:	f003 031f 	and.w	r3, r3, #31
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d01a      	beq.n	800612e <USBD_LL_SetupStage+0x72>
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d822      	bhi.n	8006142 <USBD_LL_SetupStage+0x86>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <USBD_LL_SetupStage+0x4a>
 8006100:	2b01      	cmp	r3, #1
 8006102:	d00a      	beq.n	800611a <USBD_LL_SetupStage+0x5e>
 8006104:	e01d      	b.n	8006142 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fa62 	bl	80065d8 <USBD_StdDevReq>
 8006114:	4603      	mov	r3, r0
 8006116:	73fb      	strb	r3, [r7, #15]
      break;
 8006118:	e020      	b.n	800615c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fac6 	bl	80066b4 <USBD_StdItfReq>
 8006128:	4603      	mov	r3, r0
 800612a:	73fb      	strb	r3, [r7, #15]
      break;
 800612c:	e016      	b.n	800615c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fb05 	bl	8006746 <USBD_StdEPReq>
 800613c:	4603      	mov	r3, r0
 800613e:	73fb      	strb	r3, [r7, #15]
      break;
 8006140:	e00c      	b.n	800615c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006148:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800614c:	b2db      	uxtb	r3, r3
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f001 fc81 	bl	8007a58 <USBD_LL_StallEP>
 8006156:	4603      	mov	r3, r0
 8006158:	73fb      	strb	r3, [r7, #15]
      break;
 800615a:	bf00      	nop
  }

  return ret;
 800615c:	7bfb      	ldrb	r3, [r7, #15]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b086      	sub	sp, #24
 800616a:	af00      	add	r7, sp, #0
 800616c:	60f8      	str	r0, [r7, #12]
 800616e:	460b      	mov	r3, r1
 8006170:	607a      	str	r2, [r7, #4]
 8006172:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006174:	7afb      	ldrb	r3, [r7, #11]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d138      	bne.n	80061ec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006180:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006188:	2b03      	cmp	r3, #3
 800618a:	d14a      	bne.n	8006222 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	429a      	cmp	r2, r3
 8006196:	d913      	bls.n	80061c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	1ad2      	subs	r2, r2, r3
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	4293      	cmp	r3, r2
 80061b0:	bf28      	it	cs
 80061b2:	4613      	movcs	r3, r2
 80061b4:	461a      	mov	r2, r3
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f001 f80f 	bl	80071dc <USBD_CtlContinueRx>
 80061be:	e030      	b.n	8006222 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d10b      	bne.n	80061e4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f001 f80a 	bl	80071fe <USBD_CtlSendStatus>
 80061ea:	e01a      	b.n	8006222 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d114      	bne.n	8006222 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00e      	beq.n	8006222 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	7afa      	ldrb	r2, [r7, #11]
 800620e:	4611      	mov	r1, r2
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	4798      	blx	r3
 8006214:	4603      	mov	r3, r0
 8006216:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006218:	7dfb      	ldrb	r3, [r7, #23]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800621e:	7dfb      	ldrb	r3, [r7, #23]
 8006220:	e000      	b.n	8006224 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	460b      	mov	r3, r1
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800623a:	7afb      	ldrb	r3, [r7, #11]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d16b      	bne.n	8006318 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3314      	adds	r3, #20
 8006244:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800624c:	2b02      	cmp	r3, #2
 800624e:	d156      	bne.n	80062fe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	429a      	cmp	r2, r3
 800625a:	d914      	bls.n	8006286 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	1ad2      	subs	r2, r2, r3
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	461a      	mov	r2, r3
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 ff84 	bl	8007180 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006278:	2300      	movs	r3, #0
 800627a:	2200      	movs	r2, #0
 800627c:	2100      	movs	r1, #0
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f001 fc94 	bl	8007bac <USBD_LL_PrepareReceive>
 8006284:	e03b      	b.n	80062fe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	429a      	cmp	r2, r3
 8006290:	d11c      	bne.n	80062cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800629a:	429a      	cmp	r2, r3
 800629c:	d316      	bcc.n	80062cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d20f      	bcs.n	80062cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80062ac:	2200      	movs	r2, #0
 80062ae:	2100      	movs	r1, #0
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 ff65 	bl	8007180 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062be:	2300      	movs	r3, #0
 80062c0:	2200      	movs	r2, #0
 80062c2:	2100      	movs	r1, #0
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f001 fc71 	bl	8007bac <USBD_LL_PrepareReceive>
 80062ca:	e018      	b.n	80062fe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d10b      	bne.n	80062f0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80062f0:	2180      	movs	r1, #128	; 0x80
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f001 fbb0 	bl	8007a58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 ff93 	bl	8007224 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006304:	2b01      	cmp	r3, #1
 8006306:	d122      	bne.n	800634e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7ff fe98 	bl	800603e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006316:	e01a      	b.n	800634e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b03      	cmp	r3, #3
 8006322:	d114      	bne.n	800634e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00e      	beq.n	800634e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	7afa      	ldrb	r2, [r7, #11]
 800633a:	4611      	mov	r1, r2
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	4798      	blx	r3
 8006340:	4603      	mov	r3, r0
 8006342:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006344:	7dfb      	ldrb	r3, [r7, #23]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800634a:	7dfb      	ldrb	r3, [r7, #23]
 800634c:	e000      	b.n	8006350 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006388:	2303      	movs	r3, #3
 800638a:	e02f      	b.n	80063ec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00f      	beq.n	80063b6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d009      	beq.n	80063b6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6852      	ldr	r2, [r2, #4]
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	4611      	mov	r1, r2
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063b6:	2340      	movs	r3, #64	; 0x40
 80063b8:	2200      	movs	r2, #0
 80063ba:	2100      	movs	r1, #0
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 fb06 	bl	80079ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2240      	movs	r2, #64	; 0x40
 80063ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063d2:	2340      	movs	r3, #64	; 0x40
 80063d4:	2200      	movs	r2, #0
 80063d6:	2180      	movs	r1, #128	; 0x80
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f001 faf8 	bl	80079ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2240      	movs	r2, #64	; 0x40
 80063e8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	78fa      	ldrb	r2, [r7, #3]
 8006404:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006422:	b2da      	uxtb	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2204      	movs	r2, #4
 800642e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b04      	cmp	r3, #4
 8006452:	d106      	bne.n	8006462 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800645a:	b2da      	uxtb	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006482:	2303      	movs	r3, #3
 8006484:	e012      	b.n	80064ac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b03      	cmp	r3, #3
 8006490:	d10b      	bne.n	80064aa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d005      	beq.n	80064aa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e014      	b.n	80064f8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	d10d      	bne.n	80064f6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d007      	beq.n	80064f6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	78fa      	ldrb	r2, [r7, #3]
 80064f0:	4611      	mov	r1, r2
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006516:	2303      	movs	r3, #3
 8006518:	e014      	b.n	8006544 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b03      	cmp	r3, #3
 8006524:	d10d      	bne.n	8006542 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	2b00      	cmp	r3, #0
 8006530:	d007      	beq.n	8006542 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	78fa      	ldrb	r2, [r7, #3]
 800653c:	4611      	mov	r1, r2
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d009      	beq.n	8006590 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6852      	ldr	r2, [r2, #4]
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	4611      	mov	r1, r2
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	4798      	blx	r3
  }

  return USBD_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800659a:	b480      	push	{r7}
 800659c:	b087      	sub	sp, #28
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	3301      	adds	r3, #1
 80065b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80065b8:	8a3b      	ldrh	r3, [r7, #16]
 80065ba:	021b      	lsls	r3, r3, #8
 80065bc:	b21a      	sxth	r2, r3
 80065be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	b21b      	sxth	r3, r3
 80065c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80065c8:	89fb      	ldrh	r3, [r7, #14]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	371c      	adds	r7, #28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
	...

080065d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065ee:	2b40      	cmp	r3, #64	; 0x40
 80065f0:	d005      	beq.n	80065fe <USBD_StdDevReq+0x26>
 80065f2:	2b40      	cmp	r3, #64	; 0x40
 80065f4:	d853      	bhi.n	800669e <USBD_StdDevReq+0xc6>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00b      	beq.n	8006612 <USBD_StdDevReq+0x3a>
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d14f      	bne.n	800669e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	4798      	blx	r3
 800660c:	4603      	mov	r3, r0
 800660e:	73fb      	strb	r3, [r7, #15]
      break;
 8006610:	e04a      	b.n	80066a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	785b      	ldrb	r3, [r3, #1]
 8006616:	2b09      	cmp	r3, #9
 8006618:	d83b      	bhi.n	8006692 <USBD_StdDevReq+0xba>
 800661a:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <USBD_StdDevReq+0x48>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	08006675 	.word	0x08006675
 8006624:	08006689 	.word	0x08006689
 8006628:	08006693 	.word	0x08006693
 800662c:	0800667f 	.word	0x0800667f
 8006630:	08006693 	.word	0x08006693
 8006634:	08006653 	.word	0x08006653
 8006638:	08006649 	.word	0x08006649
 800663c:	08006693 	.word	0x08006693
 8006640:	0800666b 	.word	0x0800666b
 8006644:	0800665d 	.word	0x0800665d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f9de 	bl	8006a0c <USBD_GetDescriptor>
          break;
 8006650:	e024      	b.n	800669c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fb43 	bl	8006ce0 <USBD_SetAddress>
          break;
 800665a:	e01f      	b.n	800669c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fb82 	bl	8006d68 <USBD_SetConfig>
 8006664:	4603      	mov	r3, r0
 8006666:	73fb      	strb	r3, [r7, #15]
          break;
 8006668:	e018      	b.n	800669c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fc21 	bl	8006eb4 <USBD_GetConfig>
          break;
 8006672:	e013      	b.n	800669c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006674:	6839      	ldr	r1, [r7, #0]
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fc52 	bl	8006f20 <USBD_GetStatus>
          break;
 800667c:	e00e      	b.n	800669c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fc81 	bl	8006f88 <USBD_SetFeature>
          break;
 8006686:	e009      	b.n	800669c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fc90 	bl	8006fb0 <USBD_ClrFeature>
          break;
 8006690:	e004      	b.n	800669c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fce7 	bl	8007068 <USBD_CtlError>
          break;
 800669a:	bf00      	nop
      }
      break;
 800669c:	e004      	b.n	80066a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fce1 	bl	8007068 <USBD_CtlError>
      break;
 80066a6:	bf00      	nop
  }

  return ret;
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop

080066b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066ca:	2b40      	cmp	r3, #64	; 0x40
 80066cc:	d005      	beq.n	80066da <USBD_StdItfReq+0x26>
 80066ce:	2b40      	cmp	r3, #64	; 0x40
 80066d0:	d82f      	bhi.n	8006732 <USBD_StdItfReq+0x7e>
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <USBD_StdItfReq+0x26>
 80066d6:	2b20      	cmp	r3, #32
 80066d8:	d12b      	bne.n	8006732 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	3b01      	subs	r3, #1
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d81d      	bhi.n	8006724 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	889b      	ldrh	r3, [r3, #4]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d813      	bhi.n	800671a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4798      	blx	r3
 8006700:	4603      	mov	r3, r0
 8006702:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	88db      	ldrh	r3, [r3, #6]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d110      	bne.n	800672e <USBD_StdItfReq+0x7a>
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10d      	bne.n	800672e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fd73 	bl	80071fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006718:	e009      	b.n	800672e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800671a:	6839      	ldr	r1, [r7, #0]
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fca3 	bl	8007068 <USBD_CtlError>
          break;
 8006722:	e004      	b.n	800672e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fc9e 	bl	8007068 <USBD_CtlError>
          break;
 800672c:	e000      	b.n	8006730 <USBD_StdItfReq+0x7c>
          break;
 800672e:	bf00      	nop
      }
      break;
 8006730:	e004      	b.n	800673c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fc97 	bl	8007068 <USBD_CtlError>
      break;
 800673a:	bf00      	nop
  }

  return ret;
 800673c:	7bfb      	ldrb	r3, [r7, #15]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	889b      	ldrh	r3, [r3, #4]
 8006758:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006762:	2b40      	cmp	r3, #64	; 0x40
 8006764:	d007      	beq.n	8006776 <USBD_StdEPReq+0x30>
 8006766:	2b40      	cmp	r3, #64	; 0x40
 8006768:	f200 8145 	bhi.w	80069f6 <USBD_StdEPReq+0x2b0>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00c      	beq.n	800678a <USBD_StdEPReq+0x44>
 8006770:	2b20      	cmp	r3, #32
 8006772:	f040 8140 	bne.w	80069f6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	4798      	blx	r3
 8006784:	4603      	mov	r3, r0
 8006786:	73fb      	strb	r3, [r7, #15]
      break;
 8006788:	e13a      	b.n	8006a00 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	785b      	ldrb	r3, [r3, #1]
 800678e:	2b03      	cmp	r3, #3
 8006790:	d007      	beq.n	80067a2 <USBD_StdEPReq+0x5c>
 8006792:	2b03      	cmp	r3, #3
 8006794:	f300 8129 	bgt.w	80069ea <USBD_StdEPReq+0x2a4>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d07f      	beq.n	800689c <USBD_StdEPReq+0x156>
 800679c:	2b01      	cmp	r3, #1
 800679e:	d03c      	beq.n	800681a <USBD_StdEPReq+0xd4>
 80067a0:	e123      	b.n	80069ea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d002      	beq.n	80067b4 <USBD_StdEPReq+0x6e>
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d016      	beq.n	80067e0 <USBD_StdEPReq+0x9a>
 80067b2:	e02c      	b.n	800680e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00d      	beq.n	80067d6 <USBD_StdEPReq+0x90>
 80067ba:	7bbb      	ldrb	r3, [r7, #14]
 80067bc:	2b80      	cmp	r3, #128	; 0x80
 80067be:	d00a      	beq.n	80067d6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 f947 	bl	8007a58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80067ca:	2180      	movs	r1, #128	; 0x80
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f001 f943 	bl	8007a58 <USBD_LL_StallEP>
 80067d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067d4:	e020      	b.n	8006818 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fc45 	bl	8007068 <USBD_CtlError>
              break;
 80067de:	e01b      	b.n	8006818 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	885b      	ldrh	r3, [r3, #2]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10e      	bne.n	8006806 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80067e8:	7bbb      	ldrb	r3, [r7, #14]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00b      	beq.n	8006806 <USBD_StdEPReq+0xc0>
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	2b80      	cmp	r3, #128	; 0x80
 80067f2:	d008      	beq.n	8006806 <USBD_StdEPReq+0xc0>
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	88db      	ldrh	r3, [r3, #6]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d104      	bne.n	8006806 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80067fc:	7bbb      	ldrb	r3, [r7, #14]
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 f929 	bl	8007a58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fcf9 	bl	80071fe <USBD_CtlSendStatus>

              break;
 800680c:	e004      	b.n	8006818 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fc29 	bl	8007068 <USBD_CtlError>
              break;
 8006816:	bf00      	nop
          }
          break;
 8006818:	e0ec      	b.n	80069f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d002      	beq.n	800682c <USBD_StdEPReq+0xe6>
 8006826:	2b03      	cmp	r3, #3
 8006828:	d016      	beq.n	8006858 <USBD_StdEPReq+0x112>
 800682a:	e030      	b.n	800688e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800682c:	7bbb      	ldrb	r3, [r7, #14]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00d      	beq.n	800684e <USBD_StdEPReq+0x108>
 8006832:	7bbb      	ldrb	r3, [r7, #14]
 8006834:	2b80      	cmp	r3, #128	; 0x80
 8006836:	d00a      	beq.n	800684e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006838:	7bbb      	ldrb	r3, [r7, #14]
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f001 f90b 	bl	8007a58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006842:	2180      	movs	r1, #128	; 0x80
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f001 f907 	bl	8007a58 <USBD_LL_StallEP>
 800684a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800684c:	e025      	b.n	800689a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fc09 	bl	8007068 <USBD_CtlError>
              break;
 8006856:	e020      	b.n	800689a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	885b      	ldrh	r3, [r3, #2]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d11b      	bne.n	8006898 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006860:	7bbb      	ldrb	r3, [r7, #14]
 8006862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006866:	2b00      	cmp	r3, #0
 8006868:	d004      	beq.n	8006874 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800686a:	7bbb      	ldrb	r3, [r7, #14]
 800686c:	4619      	mov	r1, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f001 f911 	bl	8007a96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fcc2 	bl	80071fe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	4798      	blx	r3
 8006888:	4603      	mov	r3, r0
 800688a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800688c:	e004      	b.n	8006898 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fbe9 	bl	8007068 <USBD_CtlError>
              break;
 8006896:	e000      	b.n	800689a <USBD_StdEPReq+0x154>
              break;
 8006898:	bf00      	nop
          }
          break;
 800689a:	e0ab      	b.n	80069f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d002      	beq.n	80068ae <USBD_StdEPReq+0x168>
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d032      	beq.n	8006912 <USBD_StdEPReq+0x1cc>
 80068ac:	e097      	b.n	80069de <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068ae:	7bbb      	ldrb	r3, [r7, #14]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d007      	beq.n	80068c4 <USBD_StdEPReq+0x17e>
 80068b4:	7bbb      	ldrb	r3, [r7, #14]
 80068b6:	2b80      	cmp	r3, #128	; 0x80
 80068b8:	d004      	beq.n	80068c4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fbd3 	bl	8007068 <USBD_CtlError>
                break;
 80068c2:	e091      	b.n	80069e8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	da0b      	bge.n	80068e4 <USBD_StdEPReq+0x19e>
 80068cc:	7bbb      	ldrb	r3, [r7, #14]
 80068ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	3310      	adds	r3, #16
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	4413      	add	r3, r2
 80068e0:	3304      	adds	r3, #4
 80068e2:	e00b      	b.n	80068fc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068e4:	7bbb      	ldrb	r3, [r7, #14]
 80068e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	4413      	add	r3, r2
 80068fa:	3304      	adds	r3, #4
 80068fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	2200      	movs	r2, #0
 8006902:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2202      	movs	r2, #2
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fc1d 	bl	800714a <USBD_CtlSendData>
              break;
 8006910:	e06a      	b.n	80069e8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006912:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006916:	2b00      	cmp	r3, #0
 8006918:	da11      	bge.n	800693e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800691a:	7bbb      	ldrb	r3, [r7, #14]
 800691c:	f003 020f 	and.w	r2, r3, #15
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	440b      	add	r3, r1
 800692c:	3324      	adds	r3, #36	; 0x24
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d117      	bne.n	8006964 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006934:	6839      	ldr	r1, [r7, #0]
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fb96 	bl	8007068 <USBD_CtlError>
                  break;
 800693c:	e054      	b.n	80069e8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	f003 020f 	and.w	r2, r3, #15
 8006944:	6879      	ldr	r1, [r7, #4]
 8006946:	4613      	mov	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	440b      	add	r3, r1
 8006950:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d104      	bne.n	8006964 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fb83 	bl	8007068 <USBD_CtlError>
                  break;
 8006962:	e041      	b.n	80069e8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006964:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006968:	2b00      	cmp	r3, #0
 800696a:	da0b      	bge.n	8006984 <USBD_StdEPReq+0x23e>
 800696c:	7bbb      	ldrb	r3, [r7, #14]
 800696e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006972:	4613      	mov	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	3310      	adds	r3, #16
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	4413      	add	r3, r2
 8006980:	3304      	adds	r3, #4
 8006982:	e00b      	b.n	800699c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	4413      	add	r3, r2
 800699a:	3304      	adds	r3, #4
 800699c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800699e:	7bbb      	ldrb	r3, [r7, #14]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <USBD_StdEPReq+0x264>
 80069a4:	7bbb      	ldrb	r3, [r7, #14]
 80069a6:	2b80      	cmp	r3, #128	; 0x80
 80069a8:	d103      	bne.n	80069b2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2200      	movs	r2, #0
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	e00e      	b.n	80069d0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80069b2:	7bbb      	ldrb	r3, [r7, #14]
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f001 f88c 	bl	8007ad4 <USBD_LL_IsStallEP>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d003      	beq.n	80069ca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2201      	movs	r2, #1
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	e002      	b.n	80069d0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2200      	movs	r2, #0
 80069ce:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2202      	movs	r2, #2
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fbb7 	bl	800714a <USBD_CtlSendData>
              break;
 80069dc:	e004      	b.n	80069e8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fb41 	bl	8007068 <USBD_CtlError>
              break;
 80069e6:	bf00      	nop
          }
          break;
 80069e8:	e004      	b.n	80069f4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fb3b 	bl	8007068 <USBD_CtlError>
          break;
 80069f2:	bf00      	nop
      }
      break;
 80069f4:	e004      	b.n	8006a00 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fb35 	bl	8007068 <USBD_CtlError>
      break;
 80069fe:	bf00      	nop
  }

  return ret;
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	885b      	ldrh	r3, [r3, #2]
 8006a26:	0a1b      	lsrs	r3, r3, #8
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	2b06      	cmp	r3, #6
 8006a2e:	f200 8128 	bhi.w	8006c82 <USBD_GetDescriptor+0x276>
 8006a32:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <USBD_GetDescriptor+0x2c>)
 8006a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a38:	08006a55 	.word	0x08006a55
 8006a3c:	08006a6d 	.word	0x08006a6d
 8006a40:	08006aad 	.word	0x08006aad
 8006a44:	08006c83 	.word	0x08006c83
 8006a48:	08006c83 	.word	0x08006c83
 8006a4c:	08006c23 	.word	0x08006c23
 8006a50:	08006c4f 	.word	0x08006c4f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	7c12      	ldrb	r2, [r2, #16]
 8006a60:	f107 0108 	add.w	r1, r7, #8
 8006a64:	4610      	mov	r0, r2
 8006a66:	4798      	blx	r3
 8006a68:	60f8      	str	r0, [r7, #12]
      break;
 8006a6a:	e112      	b.n	8006c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	7c1b      	ldrb	r3, [r3, #16]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10d      	bne.n	8006a90 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7c:	f107 0208 	add.w	r2, r7, #8
 8006a80:	4610      	mov	r0, r2
 8006a82:	4798      	blx	r3
 8006a84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a8e:	e100      	b.n	8006c92 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	f107 0208 	add.w	r2, r7, #8
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	4798      	blx	r3
 8006aa0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	701a      	strb	r2, [r3, #0]
      break;
 8006aaa:	e0f2      	b.n	8006c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	885b      	ldrh	r3, [r3, #2]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b05      	cmp	r3, #5
 8006ab4:	f200 80ac 	bhi.w	8006c10 <USBD_GetDescriptor+0x204>
 8006ab8:	a201      	add	r2, pc, #4	; (adr r2, 8006ac0 <USBD_GetDescriptor+0xb4>)
 8006aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abe:	bf00      	nop
 8006ac0:	08006ad9 	.word	0x08006ad9
 8006ac4:	08006b0d 	.word	0x08006b0d
 8006ac8:	08006b41 	.word	0x08006b41
 8006acc:	08006b75 	.word	0x08006b75
 8006ad0:	08006ba9 	.word	0x08006ba9
 8006ad4:	08006bdd 	.word	0x08006bdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00b      	beq.n	8006afc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	7c12      	ldrb	r2, [r2, #16]
 8006af0:	f107 0108 	add.w	r1, r7, #8
 8006af4:	4610      	mov	r0, r2
 8006af6:	4798      	blx	r3
 8006af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006afa:	e091      	b.n	8006c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fab2 	bl	8007068 <USBD_CtlError>
            err++;
 8006b04:	7afb      	ldrb	r3, [r7, #11]
 8006b06:	3301      	adds	r3, #1
 8006b08:	72fb      	strb	r3, [r7, #11]
          break;
 8006b0a:	e089      	b.n	8006c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00b      	beq.n	8006b30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	7c12      	ldrb	r2, [r2, #16]
 8006b24:	f107 0108 	add.w	r1, r7, #8
 8006b28:	4610      	mov	r0, r2
 8006b2a:	4798      	blx	r3
 8006b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b2e:	e077      	b.n	8006c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fa98 	bl	8007068 <USBD_CtlError>
            err++;
 8006b38:	7afb      	ldrb	r3, [r7, #11]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b3e:	e06f      	b.n	8006c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00b      	beq.n	8006b64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	7c12      	ldrb	r2, [r2, #16]
 8006b58:	f107 0108 	add.w	r1, r7, #8
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	4798      	blx	r3
 8006b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b62:	e05d      	b.n	8006c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fa7e 	bl	8007068 <USBD_CtlError>
            err++;
 8006b6c:	7afb      	ldrb	r3, [r7, #11]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	72fb      	strb	r3, [r7, #11]
          break;
 8006b72:	e055      	b.n	8006c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00b      	beq.n	8006b98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	7c12      	ldrb	r2, [r2, #16]
 8006b8c:	f107 0108 	add.w	r1, r7, #8
 8006b90:	4610      	mov	r0, r2
 8006b92:	4798      	blx	r3
 8006b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b96:	e043      	b.n	8006c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fa64 	bl	8007068 <USBD_CtlError>
            err++;
 8006ba0:	7afb      	ldrb	r3, [r7, #11]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ba6:	e03b      	b.n	8006c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00b      	beq.n	8006bcc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	7c12      	ldrb	r2, [r2, #16]
 8006bc0:	f107 0108 	add.w	r1, r7, #8
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	4798      	blx	r3
 8006bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bca:	e029      	b.n	8006c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fa4a 	bl	8007068 <USBD_CtlError>
            err++;
 8006bd4:	7afb      	ldrb	r3, [r7, #11]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006bda:	e021      	b.n	8006c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00b      	beq.n	8006c00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	7c12      	ldrb	r2, [r2, #16]
 8006bf4:	f107 0108 	add.w	r1, r7, #8
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	4798      	blx	r3
 8006bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bfe:	e00f      	b.n	8006c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fa30 	bl	8007068 <USBD_CtlError>
            err++;
 8006c08:	7afb      	ldrb	r3, [r7, #11]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c0e:	e007      	b.n	8006c20 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006c10:	6839      	ldr	r1, [r7, #0]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fa28 	bl	8007068 <USBD_CtlError>
          err++;
 8006c18:	7afb      	ldrb	r3, [r7, #11]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006c1e:	bf00      	nop
      }
      break;
 8006c20:	e037      	b.n	8006c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	7c1b      	ldrb	r3, [r3, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d109      	bne.n	8006c3e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c32:	f107 0208 	add.w	r2, r7, #8
 8006c36:	4610      	mov	r0, r2
 8006c38:	4798      	blx	r3
 8006c3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c3c:	e029      	b.n	8006c92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fa11 	bl	8007068 <USBD_CtlError>
        err++;
 8006c46:	7afb      	ldrb	r3, [r7, #11]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	72fb      	strb	r3, [r7, #11]
      break;
 8006c4c:	e021      	b.n	8006c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	7c1b      	ldrb	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10d      	bne.n	8006c72 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5e:	f107 0208 	add.w	r2, r7, #8
 8006c62:	4610      	mov	r0, r2
 8006c64:	4798      	blx	r3
 8006c66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	2207      	movs	r2, #7
 8006c6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c70:	e00f      	b.n	8006c92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f9f7 	bl	8007068 <USBD_CtlError>
        err++;
 8006c7a:	7afb      	ldrb	r3, [r7, #11]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	72fb      	strb	r3, [r7, #11]
      break;
 8006c80:	e007      	b.n	8006c92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f9ef 	bl	8007068 <USBD_CtlError>
      err++;
 8006c8a:	7afb      	ldrb	r3, [r7, #11]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	72fb      	strb	r3, [r7, #11]
      break;
 8006c90:	bf00      	nop
  }

  if (err != 0U)
 8006c92:	7afb      	ldrb	r3, [r7, #11]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d11e      	bne.n	8006cd6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	88db      	ldrh	r3, [r3, #6]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d016      	beq.n	8006cce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006ca0:	893b      	ldrh	r3, [r7, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00e      	beq.n	8006cc4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	88da      	ldrh	r2, [r3, #6]
 8006caa:	893b      	ldrh	r3, [r7, #8]
 8006cac:	4293      	cmp	r3, r2
 8006cae:	bf28      	it	cs
 8006cb0:	4613      	movcs	r3, r2
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006cb6:	893b      	ldrh	r3, [r7, #8]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	68f9      	ldr	r1, [r7, #12]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fa44 	bl	800714a <USBD_CtlSendData>
 8006cc2:	e009      	b.n	8006cd8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f9ce 	bl	8007068 <USBD_CtlError>
 8006ccc:	e004      	b.n	8006cd8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fa95 	bl	80071fe <USBD_CtlSendStatus>
 8006cd4:	e000      	b.n	8006cd8 <USBD_GetDescriptor+0x2cc>
    return;
 8006cd6:	bf00      	nop
  }
}
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop

08006ce0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	889b      	ldrh	r3, [r3, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d131      	bne.n	8006d56 <USBD_SetAddress+0x76>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	88db      	ldrh	r3, [r3, #6]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d12d      	bne.n	8006d56 <USBD_SetAddress+0x76>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	885b      	ldrh	r3, [r3, #2]
 8006cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8006d00:	d829      	bhi.n	8006d56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	885b      	ldrh	r3, [r3, #2]
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d104      	bne.n	8006d24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f9a3 	bl	8007068 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d22:	e01d      	b.n	8006d60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	7bfa      	ldrb	r2, [r7, #15]
 8006d28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fefb 	bl	8007b2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fa61 	bl	80071fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d004      	beq.n	8006d4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2202      	movs	r2, #2
 8006d46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d4a:	e009      	b.n	8006d60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d54:	e004      	b.n	8006d60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f985 	bl	8007068 <USBD_CtlError>
  }
}
 8006d5e:	bf00      	nop
 8006d60:	bf00      	nop
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	885b      	ldrh	r3, [r3, #2]
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	4b4c      	ldr	r3, [pc, #304]	; (8006eb0 <USBD_SetConfig+0x148>)
 8006d7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d80:	4b4b      	ldr	r3, [pc, #300]	; (8006eb0 <USBD_SetConfig+0x148>)
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d905      	bls.n	8006d94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f96c 	bl	8007068 <USBD_CtlError>
    return USBD_FAIL;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e088      	b.n	8006ea6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d002      	beq.n	8006da6 <USBD_SetConfig+0x3e>
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	d025      	beq.n	8006df0 <USBD_SetConfig+0x88>
 8006da4:	e071      	b.n	8006e8a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006da6:	4b42      	ldr	r3, [pc, #264]	; (8006eb0 <USBD_SetConfig+0x148>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d01c      	beq.n	8006de8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006dae:	4b40      	ldr	r3, [pc, #256]	; (8006eb0 <USBD_SetConfig+0x148>)
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006db8:	4b3d      	ldr	r3, [pc, #244]	; (8006eb0 <USBD_SetConfig+0x148>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7ff f948 	bl	8006054 <USBD_SetClassConfig>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d004      	beq.n	8006dd8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006dce:	6839      	ldr	r1, [r7, #0]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f949 	bl	8007068 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006dd6:	e065      	b.n	8006ea4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fa10 	bl	80071fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2203      	movs	r2, #3
 8006de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006de6:	e05d      	b.n	8006ea4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fa08 	bl	80071fe <USBD_CtlSendStatus>
      break;
 8006dee:	e059      	b.n	8006ea4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006df0:	4b2f      	ldr	r3, [pc, #188]	; (8006eb0 <USBD_SetConfig+0x148>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d112      	bne.n	8006e1e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006e00:	4b2b      	ldr	r3, [pc, #172]	; (8006eb0 <USBD_SetConfig+0x148>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	461a      	mov	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e0a:	4b29      	ldr	r3, [pc, #164]	; (8006eb0 <USBD_SetConfig+0x148>)
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7ff f93b 	bl	800608c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f9f1 	bl	80071fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e1c:	e042      	b.n	8006ea4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006e1e:	4b24      	ldr	r3, [pc, #144]	; (8006eb0 <USBD_SetConfig+0x148>)
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d02a      	beq.n	8006e82 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff f929 	bl	800608c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006e3a:	4b1d      	ldr	r3, [pc, #116]	; (8006eb0 <USBD_SetConfig+0x148>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e44:	4b1a      	ldr	r3, [pc, #104]	; (8006eb0 <USBD_SetConfig+0x148>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7ff f902 	bl	8006054 <USBD_SetClassConfig>
 8006e50:	4603      	mov	r3, r0
 8006e52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00f      	beq.n	8006e7a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f903 	bl	8007068 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff f90e 	bl	800608c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e78:	e014      	b.n	8006ea4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f9bf 	bl	80071fe <USBD_CtlSendStatus>
      break;
 8006e80:	e010      	b.n	8006ea4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f9bb 	bl	80071fe <USBD_CtlSendStatus>
      break;
 8006e88:	e00c      	b.n	8006ea4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f8eb 	bl	8007068 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e92:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <USBD_SetConfig+0x148>)
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	4619      	mov	r1, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7ff f8f7 	bl	800608c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea2:	bf00      	nop
  }

  return ret;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	2000019c 	.word	0x2000019c

08006eb4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	88db      	ldrh	r3, [r3, #6]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d004      	beq.n	8006ed0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f8cd 	bl	8007068 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006ece:	e023      	b.n	8006f18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	dc02      	bgt.n	8006ee2 <USBD_GetConfig+0x2e>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	dc03      	bgt.n	8006ee8 <USBD_GetConfig+0x34>
 8006ee0:	e015      	b.n	8006f0e <USBD_GetConfig+0x5a>
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d00b      	beq.n	8006efe <USBD_GetConfig+0x4a>
 8006ee6:	e012      	b.n	8006f0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	3308      	adds	r3, #8
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f927 	bl	800714a <USBD_CtlSendData>
        break;
 8006efc:	e00c      	b.n	8006f18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3304      	adds	r3, #4
 8006f02:	2201      	movs	r2, #1
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f91f 	bl	800714a <USBD_CtlSendData>
        break;
 8006f0c:	e004      	b.n	8006f18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f8a9 	bl	8007068 <USBD_CtlError>
        break;
 8006f16:	bf00      	nop
}
 8006f18:	bf00      	nop
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	3b01      	subs	r3, #1
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d81e      	bhi.n	8006f76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	88db      	ldrh	r3, [r3, #6]
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d004      	beq.n	8006f4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f890 	bl	8007068 <USBD_CtlError>
        break;
 8006f48:	e01a      	b.n	8006f80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d005      	beq.n	8006f66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	f043 0202 	orr.w	r2, r3, #2
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	330c      	adds	r3, #12
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f8eb 	bl	800714a <USBD_CtlSendData>
      break;
 8006f74:	e004      	b.n	8006f80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f875 	bl	8007068 <USBD_CtlError>
      break;
 8006f7e:	bf00      	nop
  }
}
 8006f80:	bf00      	nop
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	885b      	ldrh	r3, [r3, #2]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d106      	bne.n	8006fa8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f92b 	bl	80071fe <USBD_CtlSendStatus>
  }
}
 8006fa8:	bf00      	nop
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d80b      	bhi.n	8006fe0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	885b      	ldrh	r3, [r3, #2]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d10c      	bne.n	8006fea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f910 	bl	80071fe <USBD_CtlSendStatus>
      }
      break;
 8006fde:	e004      	b.n	8006fea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f840 	bl	8007068 <USBD_CtlError>
      break;
 8006fe8:	e000      	b.n	8006fec <USBD_ClrFeature+0x3c>
      break;
 8006fea:	bf00      	nop
  }
}
 8006fec:	bf00      	nop
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	781a      	ldrb	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3301      	adds	r3, #1
 800700e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	781a      	ldrb	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3301      	adds	r3, #1
 800701c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f7ff fabb 	bl	800659a <SWAPBYTE>
 8007024:	4603      	mov	r3, r0
 8007026:	461a      	mov	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3301      	adds	r3, #1
 8007030:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3301      	adds	r3, #1
 8007036:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f7ff faae 	bl	800659a <SWAPBYTE>
 800703e:	4603      	mov	r3, r0
 8007040:	461a      	mov	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	3301      	adds	r3, #1
 800704a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	3301      	adds	r3, #1
 8007050:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f7ff faa1 	bl	800659a <SWAPBYTE>
 8007058:	4603      	mov	r3, r0
 800705a:	461a      	mov	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	80da      	strh	r2, [r3, #6]
}
 8007060:	bf00      	nop
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007072:	2180      	movs	r1, #128	; 0x80
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fcef 	bl	8007a58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800707a:	2100      	movs	r1, #0
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fceb 	bl	8007a58 <USBD_LL_StallEP>
}
 8007082:	bf00      	nop
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b086      	sub	sp, #24
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d036      	beq.n	800710e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80070a4:	6938      	ldr	r0, [r7, #16]
 80070a6:	f000 f836 	bl	8007116 <USBD_GetLen>
 80070aa:	4603      	mov	r3, r0
 80070ac:	3301      	adds	r3, #1
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	005b      	lsls	r3, r3, #1
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	4413      	add	r3, r2
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	7812      	ldrb	r2, [r2, #0]
 80070c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80070c4:	7dfb      	ldrb	r3, [r7, #23]
 80070c6:	3301      	adds	r3, #1
 80070c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	4413      	add	r3, r2
 80070d0:	2203      	movs	r2, #3
 80070d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
 80070d6:	3301      	adds	r3, #1
 80070d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80070da:	e013      	b.n	8007104 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80070dc:	7dfb      	ldrb	r3, [r7, #23]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	4413      	add	r3, r2
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	7812      	ldrb	r2, [r2, #0]
 80070e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	3301      	adds	r3, #1
 80070ec:	613b      	str	r3, [r7, #16]
    idx++;
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
 80070f0:	3301      	adds	r3, #1
 80070f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80070f4:	7dfb      	ldrb	r3, [r7, #23]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	4413      	add	r3, r2
 80070fa:	2200      	movs	r2, #0
 80070fc:	701a      	strb	r2, [r3, #0]
    idx++;
 80070fe:	7dfb      	ldrb	r3, [r7, #23]
 8007100:	3301      	adds	r3, #1
 8007102:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e7      	bne.n	80070dc <USBD_GetString+0x52>
 800710c:	e000      	b.n	8007110 <USBD_GetString+0x86>
    return;
 800710e:	bf00      	nop
  }
}
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007116:	b480      	push	{r7}
 8007118:	b085      	sub	sp, #20
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007126:	e005      	b.n	8007134 <USBD_GetLen+0x1e>
  {
    len++;
 8007128:	7bfb      	ldrb	r3, [r7, #15]
 800712a:	3301      	adds	r3, #1
 800712c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	3301      	adds	r3, #1
 8007132:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1f5      	bne.n	8007128 <USBD_GetLen+0x12>
  }

  return len;
 800713c:	7bfb      	ldrb	r3, [r7, #15]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b084      	sub	sp, #16
 800714e:	af00      	add	r7, sp, #0
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2202      	movs	r2, #2
 800715a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	2100      	movs	r1, #0
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 fcfa 	bl	8007b6a <USBD_LL_Transmit>

  return USBD_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	2100      	movs	r1, #0
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f000 fce9 	bl	8007b6a <USBD_LL_Transmit>

  return USBD_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b084      	sub	sp, #16
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	60b9      	str	r1, [r7, #8]
 80071ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2203      	movs	r2, #3
 80071b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	2100      	movs	r1, #0
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 fced 	bl	8007bac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	2100      	movs	r1, #0
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 fcdc 	bl	8007bac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2204      	movs	r2, #4
 800720a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800720e:	2300      	movs	r3, #0
 8007210:	2200      	movs	r2, #0
 8007212:	2100      	movs	r1, #0
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fca8 	bl	8007b6a <USBD_LL_Transmit>

  return USBD_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2205      	movs	r2, #5
 8007230:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007234:	2300      	movs	r3, #0
 8007236:	2200      	movs	r2, #0
 8007238:	2100      	movs	r1, #0
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fcb6 	bl	8007bac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007250:	2200      	movs	r2, #0
 8007252:	4912      	ldr	r1, [pc, #72]	; (800729c <MX_USB_DEVICE_Init+0x50>)
 8007254:	4812      	ldr	r0, [pc, #72]	; (80072a0 <MX_USB_DEVICE_Init+0x54>)
 8007256:	f7fe fe8f 	bl	8005f78 <USBD_Init>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d001      	beq.n	8007264 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007260:	f7f9 fe0c 	bl	8000e7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007264:	490f      	ldr	r1, [pc, #60]	; (80072a4 <MX_USB_DEVICE_Init+0x58>)
 8007266:	480e      	ldr	r0, [pc, #56]	; (80072a0 <MX_USB_DEVICE_Init+0x54>)
 8007268:	f7fe feb6 	bl	8005fd8 <USBD_RegisterClass>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007272:	f7f9 fe03 	bl	8000e7c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007276:	490c      	ldr	r1, [pc, #48]	; (80072a8 <MX_USB_DEVICE_Init+0x5c>)
 8007278:	4809      	ldr	r0, [pc, #36]	; (80072a0 <MX_USB_DEVICE_Init+0x54>)
 800727a:	f7fe fdd7 	bl	8005e2c <USBD_CDC_RegisterInterface>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007284:	f7f9 fdfa 	bl	8000e7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007288:	4805      	ldr	r0, [pc, #20]	; (80072a0 <MX_USB_DEVICE_Init+0x54>)
 800728a:	f7fe fecc 	bl	8006026 <USBD_Start>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007294:	f7f9 fdf2 	bl	8000e7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007298:	bf00      	nop
 800729a:	bd80      	pop	{r7, pc}
 800729c:	20000130 	.word	0x20000130
 80072a0:	20000424 	.word	0x20000424
 80072a4:	20000018 	.word	0x20000018
 80072a8:	2000011c 	.word	0x2000011c

080072ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80072b0:	2200      	movs	r2, #0
 80072b2:	4905      	ldr	r1, [pc, #20]	; (80072c8 <CDC_Init_FS+0x1c>)
 80072b4:	4805      	ldr	r0, [pc, #20]	; (80072cc <CDC_Init_FS+0x20>)
 80072b6:	f7fe fdce 	bl	8005e56 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80072ba:	4905      	ldr	r1, [pc, #20]	; (80072d0 <CDC_Init_FS+0x24>)
 80072bc:	4803      	ldr	r0, [pc, #12]	; (80072cc <CDC_Init_FS+0x20>)
 80072be:	f7fe fde8 	bl	8005e92 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80072c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	20000ef4 	.word	0x20000ef4
 80072cc:	20000424 	.word	0x20000424
 80072d0:	200006f4 	.word	0x200006f4

080072d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80072d4:	b480      	push	{r7}
 80072d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80072d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80072da:	4618      	mov	r0, r3
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	4603      	mov	r3, r0
 80072ec:	6039      	str	r1, [r7, #0]
 80072ee:	71fb      	strb	r3, [r7, #7]
 80072f0:	4613      	mov	r3, r2
 80072f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80072f4:	79fb      	ldrb	r3, [r7, #7]
 80072f6:	2b23      	cmp	r3, #35	; 0x23
 80072f8:	d84a      	bhi.n	8007390 <CDC_Control_FS+0xac>
 80072fa:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <CDC_Control_FS+0x1c>)
 80072fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007300:	08007391 	.word	0x08007391
 8007304:	08007391 	.word	0x08007391
 8007308:	08007391 	.word	0x08007391
 800730c:	08007391 	.word	0x08007391
 8007310:	08007391 	.word	0x08007391
 8007314:	08007391 	.word	0x08007391
 8007318:	08007391 	.word	0x08007391
 800731c:	08007391 	.word	0x08007391
 8007320:	08007391 	.word	0x08007391
 8007324:	08007391 	.word	0x08007391
 8007328:	08007391 	.word	0x08007391
 800732c:	08007391 	.word	0x08007391
 8007330:	08007391 	.word	0x08007391
 8007334:	08007391 	.word	0x08007391
 8007338:	08007391 	.word	0x08007391
 800733c:	08007391 	.word	0x08007391
 8007340:	08007391 	.word	0x08007391
 8007344:	08007391 	.word	0x08007391
 8007348:	08007391 	.word	0x08007391
 800734c:	08007391 	.word	0x08007391
 8007350:	08007391 	.word	0x08007391
 8007354:	08007391 	.word	0x08007391
 8007358:	08007391 	.word	0x08007391
 800735c:	08007391 	.word	0x08007391
 8007360:	08007391 	.word	0x08007391
 8007364:	08007391 	.word	0x08007391
 8007368:	08007391 	.word	0x08007391
 800736c:	08007391 	.word	0x08007391
 8007370:	08007391 	.word	0x08007391
 8007374:	08007391 	.word	0x08007391
 8007378:	08007391 	.word	0x08007391
 800737c:	08007391 	.word	0x08007391
 8007380:	08007391 	.word	0x08007391
 8007384:	08007391 	.word	0x08007391
 8007388:	08007391 	.word	0x08007391
 800738c:	08007391 	.word	0x08007391
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007390:	bf00      	nop
  }

  return (USBD_OK);
 8007392:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007394:	4618      	mov	r0, r3
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	4805      	ldr	r0, [pc, #20]	; (80073c4 <CDC_Receive_FS+0x24>)
 80073ae:	f7fe fd70 	bl	8005e92 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80073b2:	4804      	ldr	r0, [pc, #16]	; (80073c4 <CDC_Receive_FS+0x24>)
 80073b4:	f7fe fdb6 	bl	8005f24 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80073b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20000424 	.word	0x20000424

080073c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	460b      	mov	r3, r1
 80073d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80073d8:	4b0d      	ldr	r3, [pc, #52]	; (8007410 <CDC_Transmit_FS+0x48>)
 80073da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e00b      	b.n	8007406 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80073ee:	887b      	ldrh	r3, [r7, #2]
 80073f0:	461a      	mov	r2, r3
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	4806      	ldr	r0, [pc, #24]	; (8007410 <CDC_Transmit_FS+0x48>)
 80073f6:	f7fe fd2e 	bl	8005e56 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80073fa:	4805      	ldr	r0, [pc, #20]	; (8007410 <CDC_Transmit_FS+0x48>)
 80073fc:	f7fe fd62 	bl	8005ec4 <USBD_CDC_TransmitPacket>
 8007400:	4603      	mov	r3, r0
 8007402:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007404:	7bfb      	ldrb	r3, [r7, #15]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20000424 	.word	0x20000424

08007414 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	4613      	mov	r3, r2
 8007420:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007426:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800742a:	4618      	mov	r0, r3
 800742c:	371c      	adds	r7, #28
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
	...

08007438 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	4603      	mov	r3, r0
 8007440:	6039      	str	r1, [r7, #0]
 8007442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	2212      	movs	r2, #18
 8007448:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800744a:	4b03      	ldr	r3, [pc, #12]	; (8007458 <USBD_FS_DeviceDescriptor+0x20>)
}
 800744c:	4618      	mov	r0, r3
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	2000014c 	.word	0x2000014c

0800745c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	4603      	mov	r3, r0
 8007464:	6039      	str	r1, [r7, #0]
 8007466:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2204      	movs	r2, #4
 800746c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800746e:	4b03      	ldr	r3, [pc, #12]	; (800747c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007470:	4618      	mov	r0, r3
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	20000160 	.word	0x20000160

08007480 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	4603      	mov	r3, r0
 8007488:	6039      	str	r1, [r7, #0]
 800748a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d105      	bne.n	800749e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	4907      	ldr	r1, [pc, #28]	; (80074b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007496:	4808      	ldr	r0, [pc, #32]	; (80074b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007498:	f7ff fdf7 	bl	800708a <USBD_GetString>
 800749c:	e004      	b.n	80074a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	4904      	ldr	r1, [pc, #16]	; (80074b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80074a2:	4805      	ldr	r0, [pc, #20]	; (80074b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80074a4:	f7ff fdf1 	bl	800708a <USBD_GetString>
  }
  return USBD_StrDesc;
 80074a8:	4b02      	ldr	r3, [pc, #8]	; (80074b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	200016f4 	.word	0x200016f4
 80074b8:	08007d14 	.word	0x08007d14

080074bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	4603      	mov	r3, r0
 80074c4:	6039      	str	r1, [r7, #0]
 80074c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	4904      	ldr	r1, [pc, #16]	; (80074dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80074cc:	4804      	ldr	r0, [pc, #16]	; (80074e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80074ce:	f7ff fddc 	bl	800708a <USBD_GetString>
  return USBD_StrDesc;
 80074d2:	4b02      	ldr	r3, [pc, #8]	; (80074dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	200016f4 	.word	0x200016f4
 80074e0:	08007d2c 	.word	0x08007d2c

080074e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	4603      	mov	r3, r0
 80074ec:	6039      	str	r1, [r7, #0]
 80074ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	221a      	movs	r2, #26
 80074f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80074f6:	f000 f843 	bl	8007580 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80074fa:	4b02      	ldr	r3, [pc, #8]	; (8007504 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	20000164 	.word	0x20000164

08007508 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	4603      	mov	r3, r0
 8007510:	6039      	str	r1, [r7, #0]
 8007512:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007514:	79fb      	ldrb	r3, [r7, #7]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d105      	bne.n	8007526 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	4907      	ldr	r1, [pc, #28]	; (800753c <USBD_FS_ConfigStrDescriptor+0x34>)
 800751e:	4808      	ldr	r0, [pc, #32]	; (8007540 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007520:	f7ff fdb3 	bl	800708a <USBD_GetString>
 8007524:	e004      	b.n	8007530 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	4904      	ldr	r1, [pc, #16]	; (800753c <USBD_FS_ConfigStrDescriptor+0x34>)
 800752a:	4805      	ldr	r0, [pc, #20]	; (8007540 <USBD_FS_ConfigStrDescriptor+0x38>)
 800752c:	f7ff fdad 	bl	800708a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007530:	4b02      	ldr	r3, [pc, #8]	; (800753c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	200016f4 	.word	0x200016f4
 8007540:	08007d40 	.word	0x08007d40

08007544 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	4603      	mov	r3, r0
 800754c:	6039      	str	r1, [r7, #0]
 800754e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007550:	79fb      	ldrb	r3, [r7, #7]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d105      	bne.n	8007562 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	4907      	ldr	r1, [pc, #28]	; (8007578 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800755a:	4808      	ldr	r0, [pc, #32]	; (800757c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800755c:	f7ff fd95 	bl	800708a <USBD_GetString>
 8007560:	e004      	b.n	800756c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	4904      	ldr	r1, [pc, #16]	; (8007578 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007566:	4805      	ldr	r0, [pc, #20]	; (800757c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007568:	f7ff fd8f 	bl	800708a <USBD_GetString>
  }
  return USBD_StrDesc;
 800756c:	4b02      	ldr	r3, [pc, #8]	; (8007578 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800756e:	4618      	mov	r0, r3
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	200016f4 	.word	0x200016f4
 800757c:	08007d4c 	.word	0x08007d4c

08007580 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007586:	4b0f      	ldr	r3, [pc, #60]	; (80075c4 <Get_SerialNum+0x44>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800758c:	4b0e      	ldr	r3, [pc, #56]	; (80075c8 <Get_SerialNum+0x48>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007592:	4b0e      	ldr	r3, [pc, #56]	; (80075cc <Get_SerialNum+0x4c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4413      	add	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d009      	beq.n	80075ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80075a6:	2208      	movs	r2, #8
 80075a8:	4909      	ldr	r1, [pc, #36]	; (80075d0 <Get_SerialNum+0x50>)
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f000 f814 	bl	80075d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80075b0:	2204      	movs	r2, #4
 80075b2:	4908      	ldr	r1, [pc, #32]	; (80075d4 <Get_SerialNum+0x54>)
 80075b4:	68b8      	ldr	r0, [r7, #8]
 80075b6:	f000 f80f 	bl	80075d8 <IntToUnicode>
  }
}
 80075ba:	bf00      	nop
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	1fff7a10 	.word	0x1fff7a10
 80075c8:	1fff7a14 	.word	0x1fff7a14
 80075cc:	1fff7a18 	.word	0x1fff7a18
 80075d0:	20000166 	.word	0x20000166
 80075d4:	20000176 	.word	0x20000176

080075d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	4613      	mov	r3, r2
 80075e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80075ea:	2300      	movs	r3, #0
 80075ec:	75fb      	strb	r3, [r7, #23]
 80075ee:	e027      	b.n	8007640 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	0f1b      	lsrs	r3, r3, #28
 80075f4:	2b09      	cmp	r3, #9
 80075f6:	d80b      	bhi.n	8007610 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	0f1b      	lsrs	r3, r3, #28
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	4619      	mov	r1, r3
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	440b      	add	r3, r1
 8007608:	3230      	adds	r2, #48	; 0x30
 800760a:	b2d2      	uxtb	r2, r2
 800760c:	701a      	strb	r2, [r3, #0]
 800760e:	e00a      	b.n	8007626 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	0f1b      	lsrs	r3, r3, #28
 8007614:	b2da      	uxtb	r2, r3
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	4619      	mov	r1, r3
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	440b      	add	r3, r1
 8007620:	3237      	adds	r2, #55	; 0x37
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800762c:	7dfb      	ldrb	r3, [r7, #23]
 800762e:	005b      	lsls	r3, r3, #1
 8007630:	3301      	adds	r3, #1
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	4413      	add	r3, r2
 8007636:	2200      	movs	r2, #0
 8007638:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800763a:	7dfb      	ldrb	r3, [r7, #23]
 800763c:	3301      	adds	r3, #1
 800763e:	75fb      	strb	r3, [r7, #23]
 8007640:	7dfa      	ldrb	r2, [r7, #23]
 8007642:	79fb      	ldrb	r3, [r7, #7]
 8007644:	429a      	cmp	r2, r3
 8007646:	d3d3      	bcc.n	80075f0 <IntToUnicode+0x18>
  }
}
 8007648:	bf00      	nop
 800764a:	bf00      	nop
 800764c:	371c      	adds	r7, #28
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
	...

08007658 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08a      	sub	sp, #40	; 0x28
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007660:	f107 0314 	add.w	r3, r7, #20
 8007664:	2200      	movs	r2, #0
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	605a      	str	r2, [r3, #4]
 800766a:	609a      	str	r2, [r3, #8]
 800766c:	60da      	str	r2, [r3, #12]
 800766e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007678:	d147      	bne.n	800770a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800767a:	2300      	movs	r3, #0
 800767c:	613b      	str	r3, [r7, #16]
 800767e:	4b25      	ldr	r3, [pc, #148]	; (8007714 <HAL_PCD_MspInit+0xbc>)
 8007680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007682:	4a24      	ldr	r2, [pc, #144]	; (8007714 <HAL_PCD_MspInit+0xbc>)
 8007684:	f043 0301 	orr.w	r3, r3, #1
 8007688:	6313      	str	r3, [r2, #48]	; 0x30
 800768a:	4b22      	ldr	r3, [pc, #136]	; (8007714 <HAL_PCD_MspInit+0xbc>)
 800768c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	613b      	str	r3, [r7, #16]
 8007694:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800769a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800769c:	2300      	movs	r3, #0
 800769e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076a0:	2300      	movs	r3, #0
 80076a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80076a4:	f107 0314 	add.w	r3, r7, #20
 80076a8:	4619      	mov	r1, r3
 80076aa:	481b      	ldr	r0, [pc, #108]	; (8007718 <HAL_PCD_MspInit+0xc0>)
 80076ac:	f7f9 fe96 	bl	80013dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80076b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80076b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076b6:	2302      	movs	r3, #2
 80076b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076be:	2300      	movs	r3, #0
 80076c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80076c2:	230a      	movs	r3, #10
 80076c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076c6:	f107 0314 	add.w	r3, r7, #20
 80076ca:	4619      	mov	r1, r3
 80076cc:	4812      	ldr	r0, [pc, #72]	; (8007718 <HAL_PCD_MspInit+0xc0>)
 80076ce:	f7f9 fe85 	bl	80013dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80076d2:	4b10      	ldr	r3, [pc, #64]	; (8007714 <HAL_PCD_MspInit+0xbc>)
 80076d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d6:	4a0f      	ldr	r2, [pc, #60]	; (8007714 <HAL_PCD_MspInit+0xbc>)
 80076d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076dc:	6353      	str	r3, [r2, #52]	; 0x34
 80076de:	2300      	movs	r3, #0
 80076e0:	60fb      	str	r3, [r7, #12]
 80076e2:	4b0c      	ldr	r3, [pc, #48]	; (8007714 <HAL_PCD_MspInit+0xbc>)
 80076e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e6:	4a0b      	ldr	r2, [pc, #44]	; (8007714 <HAL_PCD_MspInit+0xbc>)
 80076e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076ec:	6453      	str	r3, [r2, #68]	; 0x44
 80076ee:	4b09      	ldr	r3, [pc, #36]	; (8007714 <HAL_PCD_MspInit+0xbc>)
 80076f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80076fa:	2200      	movs	r2, #0
 80076fc:	2100      	movs	r1, #0
 80076fe:	2043      	movs	r0, #67	; 0x43
 8007700:	f7f9 fe35 	bl	800136e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007704:	2043      	movs	r0, #67	; 0x43
 8007706:	f7f9 fe4e 	bl	80013a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800770a:	bf00      	nop
 800770c:	3728      	adds	r7, #40	; 0x28
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	40023800 	.word	0x40023800
 8007718:	40020000 	.word	0x40020000

0800771c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007730:	4619      	mov	r1, r3
 8007732:	4610      	mov	r0, r2
 8007734:	f7fe fcc2 	bl	80060bc <USBD_LL_SetupStage>
}
 8007738:	bf00      	nop
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007752:	78fa      	ldrb	r2, [r7, #3]
 8007754:	6879      	ldr	r1, [r7, #4]
 8007756:	4613      	mov	r3, r2
 8007758:	00db      	lsls	r3, r3, #3
 800775a:	1a9b      	subs	r3, r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	440b      	add	r3, r1
 8007760:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	78fb      	ldrb	r3, [r7, #3]
 8007768:	4619      	mov	r1, r3
 800776a:	f7fe fcfc 	bl	8006166 <USBD_LL_DataOutStage>
}
 800776e:	bf00      	nop
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	460b      	mov	r3, r1
 8007780:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007788:	78fa      	ldrb	r2, [r7, #3]
 800778a:	6879      	ldr	r1, [r7, #4]
 800778c:	4613      	mov	r3, r2
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	1a9b      	subs	r3, r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	440b      	add	r3, r1
 8007796:	3348      	adds	r3, #72	; 0x48
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	4619      	mov	r1, r3
 800779e:	f7fe fd45 	bl	800622c <USBD_LL_DataInStage>
}
 80077a2:	bf00      	nop
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b082      	sub	sp, #8
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fe fe59 	bl	8006470 <USBD_LL_SOF>
}
 80077be:	bf00      	nop
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80077ce:	2301      	movs	r3, #1
 80077d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d102      	bne.n	80077e0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]
 80077de:	e008      	b.n	80077f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d102      	bne.n	80077ee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80077e8:	2301      	movs	r3, #1
 80077ea:	73fb      	strb	r3, [r7, #15]
 80077ec:	e001      	b.n	80077f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80077ee:	f7f9 fb45 	bl	8000e7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077f8:	7bfa      	ldrb	r2, [r7, #15]
 80077fa:	4611      	mov	r1, r2
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7fe fdf9 	bl	80063f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007808:	4618      	mov	r0, r3
 800780a:	f7fe fda5 	bl	8006358 <USBD_LL_Reset>
}
 800780e:	bf00      	nop
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
	...

08007818 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe fdf4 	bl	8006414 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	6812      	ldr	r2, [r2, #0]
 800783a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800783e:	f043 0301 	orr.w	r3, r3, #1
 8007842:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d005      	beq.n	8007858 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800784c:	4b04      	ldr	r3, [pc, #16]	; (8007860 <HAL_PCD_SuspendCallback+0x48>)
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	4a03      	ldr	r2, [pc, #12]	; (8007860 <HAL_PCD_SuspendCallback+0x48>)
 8007852:	f043 0306 	orr.w	r3, r3, #6
 8007856:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007858:	bf00      	nop
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	e000ed00 	.word	0xe000ed00

08007864 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007872:	4618      	mov	r0, r3
 8007874:	f7fe fde4 	bl	8006440 <USBD_LL_Resume>
}
 8007878:	bf00      	nop
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007892:	78fa      	ldrb	r2, [r7, #3]
 8007894:	4611      	mov	r1, r2
 8007896:	4618      	mov	r0, r3
 8007898:	f7fe fe32 	bl	8006500 <USBD_LL_IsoOUTIncomplete>
}
 800789c:	bf00      	nop
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078b6:	78fa      	ldrb	r2, [r7, #3]
 80078b8:	4611      	mov	r1, r2
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe fdfa 	bl	80064b4 <USBD_LL_IsoINIncomplete>
}
 80078c0:	bf00      	nop
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fe fe38 	bl	800654c <USBD_LL_DevConnected>
}
 80078dc:	bf00      	nop
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fe fe35 	bl	8006562 <USBD_LL_DevDisconnected>
}
 80078f8:	bf00      	nop
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d13c      	bne.n	800798a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007910:	4a20      	ldr	r2, [pc, #128]	; (8007994 <USBD_LL_Init+0x94>)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a1e      	ldr	r2, [pc, #120]	; (8007994 <USBD_LL_Init+0x94>)
 800791c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007920:	4b1c      	ldr	r3, [pc, #112]	; (8007994 <USBD_LL_Init+0x94>)
 8007922:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007926:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007928:	4b1a      	ldr	r3, [pc, #104]	; (8007994 <USBD_LL_Init+0x94>)
 800792a:	2204      	movs	r2, #4
 800792c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800792e:	4b19      	ldr	r3, [pc, #100]	; (8007994 <USBD_LL_Init+0x94>)
 8007930:	2202      	movs	r2, #2
 8007932:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007934:	4b17      	ldr	r3, [pc, #92]	; (8007994 <USBD_LL_Init+0x94>)
 8007936:	2200      	movs	r2, #0
 8007938:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800793a:	4b16      	ldr	r3, [pc, #88]	; (8007994 <USBD_LL_Init+0x94>)
 800793c:	2202      	movs	r2, #2
 800793e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007940:	4b14      	ldr	r3, [pc, #80]	; (8007994 <USBD_LL_Init+0x94>)
 8007942:	2200      	movs	r2, #0
 8007944:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007946:	4b13      	ldr	r3, [pc, #76]	; (8007994 <USBD_LL_Init+0x94>)
 8007948:	2200      	movs	r2, #0
 800794a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800794c:	4b11      	ldr	r3, [pc, #68]	; (8007994 <USBD_LL_Init+0x94>)
 800794e:	2200      	movs	r2, #0
 8007950:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007952:	4b10      	ldr	r3, [pc, #64]	; (8007994 <USBD_LL_Init+0x94>)
 8007954:	2200      	movs	r2, #0
 8007956:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007958:	4b0e      	ldr	r3, [pc, #56]	; (8007994 <USBD_LL_Init+0x94>)
 800795a:	2200      	movs	r2, #0
 800795c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800795e:	480d      	ldr	r0, [pc, #52]	; (8007994 <USBD_LL_Init+0x94>)
 8007960:	f7fa fe87 	bl	8002672 <HAL_PCD_Init>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800796a:	f7f9 fa87 	bl	8000e7c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800796e:	2180      	movs	r1, #128	; 0x80
 8007970:	4808      	ldr	r0, [pc, #32]	; (8007994 <USBD_LL_Init+0x94>)
 8007972:	f7fb ffe4 	bl	800393e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007976:	2240      	movs	r2, #64	; 0x40
 8007978:	2100      	movs	r1, #0
 800797a:	4806      	ldr	r0, [pc, #24]	; (8007994 <USBD_LL_Init+0x94>)
 800797c:	f7fb ff98 	bl	80038b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007980:	2280      	movs	r2, #128	; 0x80
 8007982:	2101      	movs	r1, #1
 8007984:	4803      	ldr	r0, [pc, #12]	; (8007994 <USBD_LL_Init+0x94>)
 8007986:	f7fb ff93 	bl	80038b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	200018f4 	.word	0x200018f4

08007998 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fa ff7c 	bl	80028ac <HAL_PCD_Start>
 80079b4:	4603      	mov	r3, r0
 80079b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 f942 	bl	8007c44 <USBD_Get_USB_Status>
 80079c0:	4603      	mov	r3, r0
 80079c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	4608      	mov	r0, r1
 80079d8:	4611      	mov	r1, r2
 80079da:	461a      	mov	r2, r3
 80079dc:	4603      	mov	r3, r0
 80079de:	70fb      	strb	r3, [r7, #3]
 80079e0:	460b      	mov	r3, r1
 80079e2:	70bb      	strb	r3, [r7, #2]
 80079e4:	4613      	mov	r3, r2
 80079e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80079f6:	78bb      	ldrb	r3, [r7, #2]
 80079f8:	883a      	ldrh	r2, [r7, #0]
 80079fa:	78f9      	ldrb	r1, [r7, #3]
 80079fc:	f7fb fb60 	bl	80030c0 <HAL_PCD_EP_Open>
 8007a00:	4603      	mov	r3, r0
 8007a02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 f91c 	bl	8007c44 <USBD_Get_USB_Status>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	460b      	mov	r3, r1
 8007a24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a34:	78fa      	ldrb	r2, [r7, #3]
 8007a36:	4611      	mov	r1, r2
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fb fba9 	bl	8003190 <HAL_PCD_EP_Close>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a42:	7bfb      	ldrb	r3, [r7, #15]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 f8fd 	bl	8007c44 <USBD_Get_USB_Status>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a72:	78fa      	ldrb	r2, [r7, #3]
 8007a74:	4611      	mov	r1, r2
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fb fc81 	bl	800337e <HAL_PCD_EP_SetStall>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 f8de 	bl	8007c44 <USBD_Get_USB_Status>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b084      	sub	sp, #16
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ab0:	78fa      	ldrb	r2, [r7, #3]
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fb fcc6 	bl	8003446 <HAL_PCD_EP_ClrStall>
 8007aba:	4603      	mov	r3, r0
 8007abc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f000 f8bf 	bl	8007c44 <USBD_Get_USB_Status>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	460b      	mov	r3, r1
 8007ade:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ae6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	da0b      	bge.n	8007b08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007af6:	68f9      	ldr	r1, [r7, #12]
 8007af8:	4613      	mov	r3, r2
 8007afa:	00db      	lsls	r3, r3, #3
 8007afc:	1a9b      	subs	r3, r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	440b      	add	r3, r1
 8007b02:	333e      	adds	r3, #62	; 0x3e
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	e00b      	b.n	8007b20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007b08:	78fb      	ldrb	r3, [r7, #3]
 8007b0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b0e:	68f9      	ldr	r1, [r7, #12]
 8007b10:	4613      	mov	r3, r2
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b46:	78fa      	ldrb	r2, [r7, #3]
 8007b48:	4611      	mov	r1, r2
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fb fa93 	bl	8003076 <HAL_PCD_SetAddress>
 8007b50:	4603      	mov	r3, r0
 8007b52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 f874 	bl	8007c44 <USBD_Get_USB_Status>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b086      	sub	sp, #24
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	603b      	str	r3, [r7, #0]
 8007b76:	460b      	mov	r3, r1
 8007b78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b88:	7af9      	ldrb	r1, [r7, #11]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	f7fb fbac 	bl	80032ea <HAL_PCD_EP_Transmit>
 8007b92:	4603      	mov	r3, r0
 8007b94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 f853 	bl	8007c44 <USBD_Get_USB_Status>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ba2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3718      	adds	r7, #24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	607a      	str	r2, [r7, #4]
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007bca:	7af9      	ldrb	r1, [r7, #11]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	f7fb fb28 	bl	8003224 <HAL_PCD_EP_Receive>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 f832 	bl	8007c44 <USBD_Get_USB_Status>
 8007be0:	4603      	mov	r3, r0
 8007be2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007be4:	7dbb      	ldrb	r3, [r7, #22]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3718      	adds	r7, #24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b082      	sub	sp, #8
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c00:	78fa      	ldrb	r2, [r7, #3]
 8007c02:	4611      	mov	r1, r2
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fb fb58 	bl	80032ba <HAL_PCD_EP_GetRxCount>
 8007c0a:	4603      	mov	r3, r0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007c1c:	4b03      	ldr	r3, [pc, #12]	; (8007c2c <USBD_static_malloc+0x18>)
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	200001a0 	.word	0x200001a0

08007c30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]

}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c52:	79fb      	ldrb	r3, [r7, #7]
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	d817      	bhi.n	8007c88 <USBD_Get_USB_Status+0x44>
 8007c58:	a201      	add	r2, pc, #4	; (adr r2, 8007c60 <USBD_Get_USB_Status+0x1c>)
 8007c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5e:	bf00      	nop
 8007c60:	08007c71 	.word	0x08007c71
 8007c64:	08007c77 	.word	0x08007c77
 8007c68:	08007c7d 	.word	0x08007c7d
 8007c6c:	08007c83 	.word	0x08007c83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	73fb      	strb	r3, [r7, #15]
    break;
 8007c74:	e00b      	b.n	8007c8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c76:	2303      	movs	r3, #3
 8007c78:	73fb      	strb	r3, [r7, #15]
    break;
 8007c7a:	e008      	b.n	8007c8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c80:	e005      	b.n	8007c8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c82:	2303      	movs	r3, #3
 8007c84:	73fb      	strb	r3, [r7, #15]
    break;
 8007c86:	e002      	b.n	8007c8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c8c:	bf00      	nop
  }
  return usb_status;
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <__libc_init_array>:
 8007c9c:	b570      	push	{r4, r5, r6, lr}
 8007c9e:	4d0d      	ldr	r5, [pc, #52]	; (8007cd4 <__libc_init_array+0x38>)
 8007ca0:	4c0d      	ldr	r4, [pc, #52]	; (8007cd8 <__libc_init_array+0x3c>)
 8007ca2:	1b64      	subs	r4, r4, r5
 8007ca4:	10a4      	asrs	r4, r4, #2
 8007ca6:	2600      	movs	r6, #0
 8007ca8:	42a6      	cmp	r6, r4
 8007caa:	d109      	bne.n	8007cc0 <__libc_init_array+0x24>
 8007cac:	4d0b      	ldr	r5, [pc, #44]	; (8007cdc <__libc_init_array+0x40>)
 8007cae:	4c0c      	ldr	r4, [pc, #48]	; (8007ce0 <__libc_init_array+0x44>)
 8007cb0:	f000 f820 	bl	8007cf4 <_init>
 8007cb4:	1b64      	subs	r4, r4, r5
 8007cb6:	10a4      	asrs	r4, r4, #2
 8007cb8:	2600      	movs	r6, #0
 8007cba:	42a6      	cmp	r6, r4
 8007cbc:	d105      	bne.n	8007cca <__libc_init_array+0x2e>
 8007cbe:	bd70      	pop	{r4, r5, r6, pc}
 8007cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc4:	4798      	blx	r3
 8007cc6:	3601      	adds	r6, #1
 8007cc8:	e7ee      	b.n	8007ca8 <__libc_init_array+0xc>
 8007cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cce:	4798      	blx	r3
 8007cd0:	3601      	adds	r6, #1
 8007cd2:	e7f2      	b.n	8007cba <__libc_init_array+0x1e>
 8007cd4:	08007d7c 	.word	0x08007d7c
 8007cd8:	08007d7c 	.word	0x08007d7c
 8007cdc:	08007d7c 	.word	0x08007d7c
 8007ce0:	08007d80 	.word	0x08007d80

08007ce4 <memset>:
 8007ce4:	4402      	add	r2, r0
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d100      	bne.n	8007cee <memset+0xa>
 8007cec:	4770      	bx	lr
 8007cee:	f803 1b01 	strb.w	r1, [r3], #1
 8007cf2:	e7f9      	b.n	8007ce8 <memset+0x4>

08007cf4 <_init>:
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	bf00      	nop
 8007cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfa:	bc08      	pop	{r3}
 8007cfc:	469e      	mov	lr, r3
 8007cfe:	4770      	bx	lr

08007d00 <_fini>:
 8007d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d02:	bf00      	nop
 8007d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d06:	bc08      	pop	{r3}
 8007d08:	469e      	mov	lr, r3
 8007d0a:	4770      	bx	lr
