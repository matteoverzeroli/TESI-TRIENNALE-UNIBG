
Firmware_MAX86916.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e00  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007f88  08007f88  00017f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fe8  08007fe8  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08007fe8  08007fe8  00017fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ff0  08007ff0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ff0  08007ff0  00017ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ff4  08007ff4  00017ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00001b7c  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001cfc  20001cfc  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   000173f3  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003343  00000000  00000000  000375a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e78  00000000  00000000  0003a8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d48  00000000  00000000  0003b760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002399c  00000000  00000000  0003c4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013573  00000000  00000000  0005fe44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7736  00000000  00000000  000733b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013aaed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b2c  00000000  00000000  0013ab40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007f70 	.word	0x08007f70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08007f70 	.word	0x08007f70

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MAX86916_I2C_Write>:
MAX86916_Init_TypeDef ppg_config;

/**
 * Write MAX86916 register(s)
 */
bool MAX86916_I2C_Write(uint8_t regName, uint8_t* regValue, uint8_t numBytes) {
 80004c0:	b5b0      	push	{r4, r5, r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
 80004cc:	4613      	mov	r3, r2
 80004ce:	71bb      	strb	r3, [r7, #6]
 80004d0:	466b      	mov	r3, sp
 80004d2:	461d      	mov	r5, r3
	uint8_t tx_buffer[numBytes + 1];
 80004d4:	79bb      	ldrb	r3, [r7, #6]
 80004d6:	1c5c      	adds	r4, r3, #1
 80004d8:	1e63      	subs	r3, r4, #1
 80004da:	613b      	str	r3, [r7, #16]
 80004dc:	4623      	mov	r3, r4
 80004de:	4618      	mov	r0, r3
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	f04f 0200 	mov.w	r2, #0
 80004e8:	f04f 0300 	mov.w	r3, #0
 80004ec:	00cb      	lsls	r3, r1, #3
 80004ee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80004f2:	00c2      	lsls	r2, r0, #3
 80004f4:	4623      	mov	r3, r4
 80004f6:	4618      	mov	r0, r3
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	f04f 0200 	mov.w	r2, #0
 8000500:	f04f 0300 	mov.w	r3, #0
 8000504:	00cb      	lsls	r3, r1, #3
 8000506:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800050a:	00c2      	lsls	r2, r0, #3
 800050c:	4623      	mov	r3, r4
 800050e:	3307      	adds	r3, #7
 8000510:	08db      	lsrs	r3, r3, #3
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	ebad 0d03 	sub.w	sp, sp, r3
 8000518:	ab02      	add	r3, sp, #8
 800051a:	3300      	adds	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
	uint8_t i;
	tx_buffer[0] = regName;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	79fa      	ldrb	r2, [r7, #7]
 8000522:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < numBytes; i++)
 8000524:	2300      	movs	r3, #0
 8000526:	75fb      	strb	r3, [r7, #23]
 8000528:	e00a      	b.n	8000540 <MAX86916_I2C_Write+0x80>
		tx_buffer[i + 1] = regValue[i];
 800052a:	7dfb      	ldrb	r3, [r7, #23]
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	441a      	add	r2, r3
 8000530:	7dfb      	ldrb	r3, [r7, #23]
 8000532:	3301      	adds	r3, #1
 8000534:	7811      	ldrb	r1, [r2, #0]
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < numBytes; i++)
 800053a:	7dfb      	ldrb	r3, [r7, #23]
 800053c:	3301      	adds	r3, #1
 800053e:	75fb      	strb	r3, [r7, #23]
 8000540:	7dfa      	ldrb	r2, [r7, #23]
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	429a      	cmp	r2, r3
 8000546:	d3f0      	bcc.n	800052a <MAX86916_I2C_Write+0x6a>

	return HAL_I2C_Master_Transmit(&hi2c_ppg_max, MAX86916_I2C_ADDRESS, tx_buffer,
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	79bb      	ldrb	r3, [r7, #6]
 800054c:	b29b      	uxth	r3, r3
 800054e:	3301      	adds	r3, #1
 8000550:	b29b      	uxth	r3, r3
 8000552:	2164      	movs	r1, #100	; 0x64
 8000554:	9100      	str	r1, [sp, #0]
 8000556:	21ae      	movs	r1, #174	; 0xae
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <MAX86916_I2C_Write+0xb4>)
 800055a:	f001 fb77 	bl	8001c4c <HAL_I2C_Master_Transmit>
 800055e:	4603      	mov	r3, r0
			numBytes + 1, 100) == HAL_OK;
 8000560:	2b00      	cmp	r3, #0
 8000562:	bf0c      	ite	eq
 8000564:	2301      	moveq	r3, #1
 8000566:	2300      	movne	r3, #0
 8000568:	b2db      	uxtb	r3, r3
 800056a:	46ad      	mov	sp, r5
}
 800056c:	4618      	mov	r0, r3
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bdb0      	pop	{r4, r5, r7, pc}
 8000574:	200003cc 	.word	0x200003cc

08000578 <MAX86916_I2C_Read>:

/**
 * Read MAX86916 register(s)
 */
bool MAX86916_I2C_Read(uint8_t regName, uint8_t* readByte, uint8_t numBytes) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af02      	add	r7, sp, #8
 800057e:	4603      	mov	r3, r0
 8000580:	6039      	str	r1, [r7, #0]
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	4613      	mov	r3, r2
 8000586:	71bb      	strb	r3, [r7, #6]
	bool res = true;
 8000588:	2301      	movs	r3, #1
 800058a:	73fb      	strb	r3, [r7, #15]
	res &= (HAL_I2C_Master_Transmit(&hi2c_ppg_max, MAX86916_I2C_ADDRESS, &regName,
 800058c:	1dfa      	adds	r2, r7, #7
 800058e:	2364      	movs	r3, #100	; 0x64
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2301      	movs	r3, #1
 8000594:	21ae      	movs	r1, #174	; 0xae
 8000596:	4816      	ldr	r0, [pc, #88]	; (80005f0 <MAX86916_I2C_Read+0x78>)
 8000598:	f001 fb58 	bl	8001c4c <HAL_I2C_Master_Transmit>
 800059c:	4603      	mov	r3, r0
			1, 100) == HAL_OK);
 800059e:	2b00      	cmp	r3, #0
 80005a0:	bf0c      	ite	eq
 80005a2:	2301      	moveq	r3, #1
 80005a4:	2300      	movne	r3, #0
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	461a      	mov	r2, r3
	res &= (HAL_I2C_Master_Transmit(&hi2c_ppg_max, MAX86916_I2C_ADDRESS, &regName,
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	4013      	ands	r3, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	bf14      	ite	ne
 80005b2:	2301      	movne	r3, #1
 80005b4:	2300      	moveq	r3, #0
 80005b6:	73fb      	strb	r3, [r7, #15]
	res &= HAL_I2C_Master_Receive(&hi2c_ppg_max, MAX86916_I2C_ADDRESS, readByte,
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	2264      	movs	r2, #100	; 0x64
 80005be:	9200      	str	r2, [sp, #0]
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	21ae      	movs	r1, #174	; 0xae
 80005c4:	480a      	ldr	r0, [pc, #40]	; (80005f0 <MAX86916_I2C_Read+0x78>)
 80005c6:	f001 fc3f 	bl	8001e48 <HAL_I2C_Master_Receive>
 80005ca:	4603      	mov	r3, r0
			numBytes, 100) == HAL_OK;
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	bf0c      	ite	eq
 80005d0:	2301      	moveq	r3, #1
 80005d2:	2300      	movne	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	461a      	mov	r2, r3
	res &= HAL_I2C_Master_Receive(&hi2c_ppg_max, MAX86916_I2C_ADDRESS, readByte,
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	4013      	ands	r3, r2
 80005dc:	2b00      	cmp	r3, #0
 80005de:	bf14      	ite	ne
 80005e0:	2301      	movne	r3, #1
 80005e2:	2300      	moveq	r3, #0
 80005e4:	73fb      	strb	r3, [r7, #15]
	return res;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200003cc 	.word	0x200003cc

080005f4 <MAX86916_Read_Part_ID>:

/**
 * Read sensor part ID
 */
uint8_t MAX86916_Read_Part_ID(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
	uint8_t part_id;
	MAX86916_I2C_Read(MAX86916_REG_PART_ID, &part_id, 1);
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	2201      	movs	r2, #1
 80005fe:	4619      	mov	r1, r3
 8000600:	20ff      	movs	r0, #255	; 0xff
 8000602:	f7ff ffb9 	bl	8000578 <MAX86916_I2C_Read>
	return part_id;
 8000606:	79fb      	ldrb	r3, [r7, #7]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <MAX86916_Check>:
}

/**
 * Check part ID, revision ID and whether all registers have been written successfully
 */
bool MAX86916_Check(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	bool check = true;
 8000616:	2301      	movs	r3, #1
 8000618:	71fb      	strb	r3, [r7, #7]

	uint8_t reg_value, temp;

	// Read REV_ID e PART_ID to check if they are correct
	if (MAX86916_Read_Part_ID() != MAX86916_PART_ID_VALUE)
 800061a:	f7ff ffeb 	bl	80005f4 <MAX86916_Read_Part_ID>
 800061e:	4603      	mov	r3, r0
 8000620:	2b2b      	cmp	r3, #43	; 0x2b
 8000622:	d001      	beq.n	8000628 <MAX86916_Check+0x18>
		check = false;
 8000624:	2300      	movs	r3, #0
 8000626:	71fb      	strb	r3, [r7, #7]

	// Check mode configuration 1
	check &= MAX86916_I2C_Read(MAX86916_REG_MODE_CONFIGURATION1, &reg_value, 1);
 8000628:	1d7b      	adds	r3, r7, #5
 800062a:	2201      	movs	r2, #1
 800062c:	4619      	mov	r1, r3
 800062e:	2009      	movs	r0, #9
 8000630:	f7ff ffa2 	bl	8000578 <MAX86916_I2C_Read>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	4013      	ands	r3, r2
 800063c:	2b00      	cmp	r3, #0
 800063e:	bf14      	ite	ne
 8000640:	2301      	movne	r3, #1
 8000642:	2300      	moveq	r3, #0
 8000644:	71fb      	strb	r3, [r7, #7]
	temp = ppg_config.shutdown | ppg_config.mode;
 8000646:	4b4a      	ldr	r3, [pc, #296]	; (8000770 <MAX86916_Check+0x160>)
 8000648:	785a      	ldrb	r2, [r3, #1]
 800064a:	4b49      	ldr	r3, [pc, #292]	; (8000770 <MAX86916_Check+0x160>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4313      	orrs	r3, r2
 8000650:	71bb      	strb	r3, [r7, #6]
	if (reg_value != temp)
 8000652:	797b      	ldrb	r3, [r7, #5]
 8000654:	79ba      	ldrb	r2, [r7, #6]
 8000656:	429a      	cmp	r2, r3
 8000658:	d001      	beq.n	800065e <MAX86916_Check+0x4e>
		check = false;
 800065a:	2300      	movs	r3, #0
 800065c:	71fb      	strb	r3, [r7, #7]

	// Check mode configuration 2
	check &= MAX86916_I2C_Read(MAX86916_REG_MODE_CONFIGURATION2, &reg_value, 1);
 800065e:	1d7b      	adds	r3, r7, #5
 8000660:	2201      	movs	r2, #1
 8000662:	4619      	mov	r1, r3
 8000664:	200a      	movs	r0, #10
 8000666:	f7ff ff87 	bl	8000578 <MAX86916_I2C_Read>
 800066a:	4603      	mov	r3, r0
 800066c:	461a      	mov	r2, r3
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4013      	ands	r3, r2
 8000672:	2b00      	cmp	r3, #0
 8000674:	bf14      	ite	ne
 8000676:	2301      	movne	r3, #1
 8000678:	2300      	moveq	r3, #0
 800067a:	71fb      	strb	r3, [r7, #7]
	temp = ppg_config.full_scale | ppg_config.frequency
 800067c:	4b3c      	ldr	r3, [pc, #240]	; (8000770 <MAX86916_Check+0x160>)
 800067e:	789a      	ldrb	r2, [r3, #2]
 8000680:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <MAX86916_Check+0x160>)
 8000682:	78db      	ldrb	r3, [r3, #3]
 8000684:	4313      	orrs	r3, r2
 8000686:	b2da      	uxtb	r2, r3
			| ppg_config.pulse_width;
 8000688:	4b39      	ldr	r3, [pc, #228]	; (8000770 <MAX86916_Check+0x160>)
 800068a:	791b      	ldrb	r3, [r3, #4]
	temp = ppg_config.full_scale | ppg_config.frequency
 800068c:	4313      	orrs	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	if (reg_value != temp)
 8000690:	797b      	ldrb	r3, [r7, #5]
 8000692:	79ba      	ldrb	r2, [r7, #6]
 8000694:	429a      	cmp	r2, r3
 8000696:	d001      	beq.n	800069c <MAX86916_Check+0x8c>
		check = false;
 8000698:	2300      	movs	r3, #0
 800069a:	71fb      	strb	r3, [r7, #7]

	// Check led pulse amplitudes
	check &= MAX86916_I2C_Read(MAX86916_REG_LED1_PULSE_AMPLITUDE, &reg_value, 1);
 800069c:	1d7b      	adds	r3, r7, #5
 800069e:	2201      	movs	r2, #1
 80006a0:	4619      	mov	r1, r3
 80006a2:	200c      	movs	r0, #12
 80006a4:	f7ff ff68 	bl	8000578 <MAX86916_I2C_Read>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	4013      	ands	r3, r2
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	bf14      	ite	ne
 80006b4:	2301      	movne	r3, #1
 80006b6:	2300      	moveq	r3, #0
 80006b8:	71fb      	strb	r3, [r7, #7]
	temp = ppg_config.led_pa[0];
 80006ba:	4b2d      	ldr	r3, [pc, #180]	; (8000770 <MAX86916_Check+0x160>)
 80006bc:	7a1b      	ldrb	r3, [r3, #8]
 80006be:	71bb      	strb	r3, [r7, #6]
	if (reg_value != temp)
 80006c0:	797b      	ldrb	r3, [r7, #5]
 80006c2:	79ba      	ldrb	r2, [r7, #6]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d001      	beq.n	80006cc <MAX86916_Check+0xbc>
		check = false;
 80006c8:	2300      	movs	r3, #0
 80006ca:	71fb      	strb	r3, [r7, #7]

	check &= MAX86916_I2C_Read(MAX86916_REG_LED2_PULSE_AMPLITUDE, &reg_value,1);
 80006cc:	1d7b      	adds	r3, r7, #5
 80006ce:	2201      	movs	r2, #1
 80006d0:	4619      	mov	r1, r3
 80006d2:	200d      	movs	r0, #13
 80006d4:	f7ff ff50 	bl	8000578 <MAX86916_I2C_Read>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	4013      	ands	r3, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf14      	ite	ne
 80006e4:	2301      	movne	r3, #1
 80006e6:	2300      	moveq	r3, #0
 80006e8:	71fb      	strb	r3, [r7, #7]
	temp = ppg_config.led_pa[1];
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <MAX86916_Check+0x160>)
 80006ec:	7a5b      	ldrb	r3, [r3, #9]
 80006ee:	71bb      	strb	r3, [r7, #6]
	if (reg_value != temp)
 80006f0:	797b      	ldrb	r3, [r7, #5]
 80006f2:	79ba      	ldrb	r2, [r7, #6]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d001      	beq.n	80006fc <MAX86916_Check+0xec>
		check = false;
 80006f8:	2300      	movs	r3, #0
 80006fa:	71fb      	strb	r3, [r7, #7]

	if (ppg_config.mode == MAX86916_MODE_FLEX) {
 80006fc:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MAX86916_Check+0x160>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d12f      	bne.n	8000764 <MAX86916_Check+0x154>
		check &= MAX86916_I2C_Read(MAX86916_REG_LED3_PULSE_AMPLITUDE, &reg_value, 1);
 8000704:	1d7b      	adds	r3, r7, #5
 8000706:	2201      	movs	r2, #1
 8000708:	4619      	mov	r1, r3
 800070a:	200e      	movs	r0, #14
 800070c:	f7ff ff34 	bl	8000578 <MAX86916_I2C_Read>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	4013      	ands	r3, r2
 8000718:	2b00      	cmp	r3, #0
 800071a:	bf14      	ite	ne
 800071c:	2301      	movne	r3, #1
 800071e:	2300      	moveq	r3, #0
 8000720:	71fb      	strb	r3, [r7, #7]
		temp = ppg_config.led_pa[2];
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MAX86916_Check+0x160>)
 8000724:	7a9b      	ldrb	r3, [r3, #10]
 8000726:	71bb      	strb	r3, [r7, #6]
		if (reg_value != temp)
 8000728:	797b      	ldrb	r3, [r7, #5]
 800072a:	79ba      	ldrb	r2, [r7, #6]
 800072c:	429a      	cmp	r2, r3
 800072e:	d001      	beq.n	8000734 <MAX86916_Check+0x124>
			check = false;
 8000730:	2300      	movs	r3, #0
 8000732:	71fb      	strb	r3, [r7, #7]
		
		check &= MAX86916_I2C_Read(MAX86916_REG_LED4_PULSE_AMPLITUDE, &reg_value, 1);
 8000734:	1d7b      	adds	r3, r7, #5
 8000736:	2201      	movs	r2, #1
 8000738:	4619      	mov	r1, r3
 800073a:	200f      	movs	r0, #15
 800073c:	f7ff ff1c 	bl	8000578 <MAX86916_I2C_Read>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4013      	ands	r3, r2
 8000748:	2b00      	cmp	r3, #0
 800074a:	bf14      	ite	ne
 800074c:	2301      	movne	r3, #1
 800074e:	2300      	moveq	r3, #0
 8000750:	71fb      	strb	r3, [r7, #7]
		temp = ppg_config.led_pa[3];
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MAX86916_Check+0x160>)
 8000754:	7adb      	ldrb	r3, [r3, #11]
 8000756:	71bb      	strb	r3, [r7, #6]
		if (reg_value != temp)
 8000758:	797b      	ldrb	r3, [r7, #5]
 800075a:	79ba      	ldrb	r2, [r7, #6]
 800075c:	429a      	cmp	r2, r3
 800075e:	d001      	beq.n	8000764 <MAX86916_Check+0x154>
			check = false;
 8000760:	2300      	movs	r3, #0
 8000762:	71fb      	strb	r3, [r7, #7]
	}

	return check;
 8000764:	79fb      	ldrb	r3, [r7, #7]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200003c0 	.word	0x200003c0

08000774 <MAX86916_Config>:
/**
 * Configuration of MAX86916 operation
 */
bool MAX86916_Config(MAX86916_Init_TypeDef initStruct) {
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b087      	sub	sp, #28
 8000778:	af00      	add	r7, sp, #0
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t temp;
	uint8_t fifo_config = 0x06;
 8000780:	2306      	movs	r3, #6
 8000782:	74fb      	strb	r3, [r7, #19]
	uint8_t led_seq1 = 0x21;
 8000784:	2321      	movs	r3, #33	; 0x21
 8000786:	74bb      	strb	r3, [r7, #18]
	uint8_t led_rge = 0x55;
 8000788:	2355      	movs	r3, #85	; 0x55
 800078a:	747b      	strb	r3, [r7, #17]
	
	bool result = true;
 800078c:	2301      	movs	r3, #1
 800078e:	75fb      	strb	r3, [r7, #23]

	//Store configuration parameters
	memcpy((uint8_t*) &ppg_config, (uint8_t*) &initStruct, sizeof(MAX86916_Init_TypeDef));
 8000790:	4b9f      	ldr	r3, [pc, #636]	; (8000a10 <MAX86916_Config+0x29c>)
 8000792:	461c      	mov	r4, r3
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000798:	6020      	str	r0, [r4, #0]
 800079a:	6061      	str	r1, [r4, #4]
 800079c:	60a2      	str	r2, [r4, #8]

	// 1. MODE CONFIGURATION 1
	temp = initStruct.shutdown | initStruct.mode;
 800079e:	797a      	ldrb	r2, [r7, #5]
 80007a0:	793b      	ldrb	r3, [r7, #4]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	753b      	strb	r3, [r7, #20]
	//uint8_t prova = 0;
	result &= MAX86916_I2C_Write(MAX86916_REG_MODE_CONFIGURATION1, &temp, 1);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2201      	movs	r2, #1
 80007ae:	4619      	mov	r1, r3
 80007b0:	2009      	movs	r0, #9
 80007b2:	f7ff fe85 	bl	80004c0 <MAX86916_I2C_Write>
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	7dfb      	ldrb	r3, [r7, #23]
 80007bc:	4013      	ands	r3, r2
 80007be:	2b00      	cmp	r3, #0
 80007c0:	bf14      	ite	ne
 80007c2:	2301      	movne	r3, #1
 80007c4:	2300      	moveq	r3, #0
 80007c6:	75fb      	strb	r3, [r7, #23]

	// 2. MODE CONFIGURATION 2
	temp = initStruct.full_scale | initStruct.frequency | initStruct.pulse_width;
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	7a3b      	ldrb	r3, [r7, #8]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	753b      	strb	r3, [r7, #20]
	result &= MAX86916_I2C_Write(MAX86916_REG_MODE_CONFIGURATION2, &temp, 1);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2201      	movs	r2, #1
 80007de:	4619      	mov	r1, r3
 80007e0:	200a      	movs	r0, #10
 80007e2:	f7ff fe6d 	bl	80004c0 <MAX86916_I2C_Write>
 80007e6:	4603      	mov	r3, r0
 80007e8:	461a      	mov	r2, r3
 80007ea:	7dfb      	ldrb	r3, [r7, #23]
 80007ec:	4013      	ands	r3, r2
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	bf14      	ite	ne
 80007f2:	2301      	movne	r3, #1
 80007f4:	2300      	moveq	r3, #0
 80007f6:	75fb      	strb	r3, [r7, #23]

	/*Configurazioni proibite da verificare*/
	// Forbidden configuration HR mode
	if (initStruct.mode == MAX86916_MODE_HR) {
 80007f8:	793b      	ldrb	r3, [r7, #4]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d117      	bne.n	800082e <MAX86916_Config+0xba>
		if (initStruct.frequency > MAX86916_SR_400Hz && initStruct.pulse_width == MAX86916_PW_420)
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b0c      	cmp	r3, #12
 8000802:	d904      	bls.n	800080e <MAX86916_Config+0x9a>
 8000804:	7a3b      	ldrb	r3, [r7, #8]
 8000806:	2b03      	cmp	r3, #3
 8000808:	d101      	bne.n	800080e <MAX86916_Config+0x9a>
			initStruct.frequency = MAX86916_SR_400Hz;
 800080a:	230c      	movs	r3, #12
 800080c:	71fb      	strb	r3, [r7, #7]
		if (initStruct.frequency > MAX86916_SR_1000Hz && initStruct.pulse_width == MAX86916_PW_220)
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b14      	cmp	r3, #20
 8000812:	d904      	bls.n	800081e <MAX86916_Config+0xaa>
 8000814:	7a3b      	ldrb	r3, [r7, #8]
 8000816:	2b02      	cmp	r3, #2
 8000818:	d101      	bne.n	800081e <MAX86916_Config+0xaa>
			initStruct.frequency = MAX86916_SR_1000Hz;
 800081a:	2314      	movs	r3, #20
 800081c:	71fb      	strb	r3, [r7, #7]
		if (initStruct.frequency > MAX86916_SR_1600Hz && initStruct.pulse_width == MAX86916_PW_120)
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b18      	cmp	r3, #24
 8000822:	d904      	bls.n	800082e <MAX86916_Config+0xba>
 8000824:	7a3b      	ldrb	r3, [r7, #8]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d101      	bne.n	800082e <MAX86916_Config+0xba>
			initStruct.frequency = MAX86916_SR_1600Hz;
 800082a:	2318      	movs	r3, #24
 800082c:	71fb      	strb	r3, [r7, #7]
	}

	// Forbidden configuration SPO2 mode
	if (initStruct.mode == MAX86916_MODE_SPO2) {
 800082e:	793b      	ldrb	r3, [r7, #4]
 8000830:	2b02      	cmp	r3, #2
 8000832:	d11f      	bne.n	8000874 <MAX86916_Config+0x100>
		if (initStruct.frequency > MAX86916_SR_200Hz && initStruct.pulse_width == MAX86916_PW_420)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	2b08      	cmp	r3, #8
 8000838:	d904      	bls.n	8000844 <MAX86916_Config+0xd0>
 800083a:	7a3b      	ldrb	r3, [r7, #8]
 800083c:	2b03      	cmp	r3, #3
 800083e:	d101      	bne.n	8000844 <MAX86916_Config+0xd0>
			initStruct.frequency = MAX86916_SR_200Hz;
 8000840:	2308      	movs	r3, #8
 8000842:	71fb      	strb	r3, [r7, #7]
		if (initStruct.frequency > MAX86916_SR_400Hz && initStruct.pulse_width == MAX86916_PW_220)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b0c      	cmp	r3, #12
 8000848:	d904      	bls.n	8000854 <MAX86916_Config+0xe0>
 800084a:	7a3b      	ldrb	r3, [r7, #8]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d101      	bne.n	8000854 <MAX86916_Config+0xe0>
			initStruct.frequency = MAX86916_SR_400Hz;
 8000850:	230c      	movs	r3, #12
 8000852:	71fb      	strb	r3, [r7, #7]
		if (initStruct.frequency > MAX86916_SR_1000Hz && initStruct.pulse_width == MAX86916_PW_120)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b14      	cmp	r3, #20
 8000858:	d904      	bls.n	8000864 <MAX86916_Config+0xf0>
 800085a:	7a3b      	ldrb	r3, [r7, #8]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d101      	bne.n	8000864 <MAX86916_Config+0xf0>
			initStruct.frequency = MAX86916_SR_1000Hz;
 8000860:	2314      	movs	r3, #20
 8000862:	71fb      	strb	r3, [r7, #7]
		if (initStruct.frequency > MAX86916_SR_1600Hz && initStruct.pulse_width == MAX86916_PW_70)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	2b18      	cmp	r3, #24
 8000868:	d904      	bls.n	8000874 <MAX86916_Config+0x100>
 800086a:	7a3b      	ldrb	r3, [r7, #8]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d101      	bne.n	8000874 <MAX86916_Config+0x100>
			initStruct.frequency = MAX86916_SR_1600Hz;
 8000870:	2318      	movs	r3, #24
 8000872:	71fb      	strb	r3, [r7, #7]
	}

	// Forbidden configuration Flex mode
	if (initStruct.mode == MAX86916_MODE_FLEX) {
 8000874:	793b      	ldrb	r3, [r7, #4]
 8000876:	2b03      	cmp	r3, #3
 8000878:	d11f      	bne.n	80008ba <MAX86916_Config+0x146>
			if (initStruct.frequency > MAX86916_SR_100Hz && initStruct.pulse_width == MAX86916_PW_420)
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b04      	cmp	r3, #4
 800087e:	d904      	bls.n	800088a <MAX86916_Config+0x116>
 8000880:	7a3b      	ldrb	r3, [r7, #8]
 8000882:	2b03      	cmp	r3, #3
 8000884:	d101      	bne.n	800088a <MAX86916_Config+0x116>
				initStruct.frequency = MAX86916_SR_100Hz;
 8000886:	2304      	movs	r3, #4
 8000888:	71fb      	strb	r3, [r7, #7]
			if (initStruct.frequency > MAX86916_SR_200Hz && initStruct.pulse_width == MAX86916_PW_220)
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b08      	cmp	r3, #8
 800088e:	d904      	bls.n	800089a <MAX86916_Config+0x126>
 8000890:	7a3b      	ldrb	r3, [r7, #8]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d101      	bne.n	800089a <MAX86916_Config+0x126>
				initStruct.frequency = MAX86916_SR_200Hz;
 8000896:	2308      	movs	r3, #8
 8000898:	71fb      	strb	r3, [r7, #7]
			if (initStruct.frequency > MAX86916_SR_400Hz && initStruct.pulse_width == MAX86916_PW_120)
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b0c      	cmp	r3, #12
 800089e:	d904      	bls.n	80008aa <MAX86916_Config+0x136>
 80008a0:	7a3b      	ldrb	r3, [r7, #8]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d101      	bne.n	80008aa <MAX86916_Config+0x136>
				initStruct.frequency = MAX86916_SR_400Hz;
 80008a6:	230c      	movs	r3, #12
 80008a8:	71fb      	strb	r3, [r7, #7]
			if (initStruct.frequency > MAX86916_SR_800Hz && initStruct.pulse_width == MAX86916_PW_70)
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b10      	cmp	r3, #16
 80008ae:	d904      	bls.n	80008ba <MAX86916_Config+0x146>
 80008b0:	7a3b      	ldrb	r3, [r7, #8]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d101      	bne.n	80008ba <MAX86916_Config+0x146>
				initStruct.frequency = MAX86916_SR_800Hz;
 80008b6:	2310      	movs	r3, #16
 80008b8:	71fb      	strb	r3, [r7, #7]
	}

	// 3. LED PULSE AMPLITUDE
	result &= MAX86916_I2C_Write(MAX86916_REG_LED1_PULSE_AMPLITUDE, initStruct.led_pa, 2);
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	3308      	adds	r3, #8
 80008be:	2202      	movs	r2, #2
 80008c0:	4619      	mov	r1, r3
 80008c2:	200c      	movs	r0, #12
 80008c4:	f7ff fdfc 	bl	80004c0 <MAX86916_I2C_Write>
 80008c8:	4603      	mov	r3, r0
 80008ca:	461a      	mov	r2, r3
 80008cc:	7dfb      	ldrb	r3, [r7, #23]
 80008ce:	4013      	ands	r3, r2
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	bf14      	ite	ne
 80008d4:	2301      	movne	r3, #1
 80008d6:	2300      	moveq	r3, #0
 80008d8:	75fb      	strb	r3, [r7, #23]
	result &= MAX86916_I2C_Write(MAX86916_REG_LED_SEQUENCE1, &led_seq1, 1);
 80008da:	f107 0312 	add.w	r3, r7, #18
 80008de:	2201      	movs	r2, #1
 80008e0:	4619      	mov	r1, r3
 80008e2:	2013      	movs	r0, #19
 80008e4:	f7ff fdec 	bl	80004c0 <MAX86916_I2C_Write>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	7dfb      	ldrb	r3, [r7, #23]
 80008ee:	4013      	ands	r3, r2
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	bf14      	ite	ne
 80008f4:	2301      	movne	r3, #1
 80008f6:	2300      	moveq	r3, #0
 80008f8:	75fb      	strb	r3, [r7, #23]
	result &= MAX86916_I2C_Write(MAX86916_REG_LED_RANGE, &led_rge, 1);
 80008fa:	f107 0311 	add.w	r3, r7, #17
 80008fe:	2201      	movs	r2, #1
 8000900:	4619      	mov	r1, r3
 8000902:	2011      	movs	r0, #17
 8000904:	f7ff fddc 	bl	80004c0 <MAX86916_I2C_Write>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	7dfb      	ldrb	r3, [r7, #23]
 800090e:	4013      	ands	r3, r2
 8000910:	2b00      	cmp	r3, #0
 8000912:	bf14      	ite	ne
 8000914:	2301      	movne	r3, #1
 8000916:	2300      	moveq	r3, #0
 8000918:	75fb      	strb	r3, [r7, #23]

	// Configure LED3 and LED4 amplitude and Flex-Mode control registers if FLEX_MODE is enabled
	if (initStruct.mode == MAX86916_MODE_FLEX) {
 800091a:	793b      	ldrb	r3, [r7, #4]
 800091c:	2b03      	cmp	r3, #3
 800091e:	d122      	bne.n	8000966 <MAX86916_Config+0x1f2>
		temp = 0x43;
 8000920:	2343      	movs	r3, #67	; 0x43
 8000922:	753b      	strb	r3, [r7, #20]
		result &= MAX86916_I2C_Write(MAX86916_REG_LED_SEQUENCE2, &temp, 1);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2201      	movs	r2, #1
 800092a:	4619      	mov	r1, r3
 800092c:	2014      	movs	r0, #20
 800092e:	f7ff fdc7 	bl	80004c0 <MAX86916_I2C_Write>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	7dfb      	ldrb	r3, [r7, #23]
 8000938:	4013      	ands	r3, r2
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf14      	ite	ne
 800093e:	2301      	movne	r3, #1
 8000940:	2300      	moveq	r3, #0
 8000942:	75fb      	strb	r3, [r7, #23]
		result &= MAX86916_I2C_Write(MAX86916_REG_LED3_PULSE_AMPLITUDE, initStruct.led_pa + 2, 2);
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	3308      	adds	r3, #8
 8000948:	3302      	adds	r3, #2
 800094a:	2202      	movs	r2, #2
 800094c:	4619      	mov	r1, r3
 800094e:	200e      	movs	r0, #14
 8000950:	f7ff fdb6 	bl	80004c0 <MAX86916_I2C_Write>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	7dfb      	ldrb	r3, [r7, #23]
 800095a:	4013      	ands	r3, r2
 800095c:	2b00      	cmp	r3, #0
 800095e:	bf14      	ite	ne
 8000960:	2301      	movne	r3, #1
 8000962:	2300      	moveq	r3, #0
 8000964:	75fb      	strb	r3, [r7, #23]
	}

	// 4. FIFO CONFIGURATION
	if (initStruct.fifo_a_full > 15) {
 8000966:	7afb      	ldrb	r3, [r7, #11]
 8000968:	2b0f      	cmp	r3, #15
 800096a:	d901      	bls.n	8000970 <MAX86916_Config+0x1fc>
		initStruct.fifo_a_full = 15;
 800096c:	230f      	movs	r3, #15
 800096e:	72fb      	strb	r3, [r7, #11]
	}
	temp = initStruct.fifo_avg | initStruct.fifo_rollover | initStruct.fifo_a_full;
 8000970:	7a7a      	ldrb	r2, [r7, #9]
 8000972:	7abb      	ldrb	r3, [r7, #10]
 8000974:	4313      	orrs	r3, r2
 8000976:	b2da      	uxtb	r2, r3
 8000978:	7afb      	ldrb	r3, [r7, #11]
 800097a:	4313      	orrs	r3, r2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	753b      	strb	r3, [r7, #20]
	result &= MAX86916_I2C_Write(MAX86916_REG_FIFO_CONFIGURATION, &fifo_config, 1);
 8000980:	f107 0313 	add.w	r3, r7, #19
 8000984:	2201      	movs	r2, #1
 8000986:	4619      	mov	r1, r3
 8000988:	2008      	movs	r0, #8
 800098a:	f7ff fd99 	bl	80004c0 <MAX86916_I2C_Write>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	7dfb      	ldrb	r3, [r7, #23]
 8000994:	4013      	ands	r3, r2
 8000996:	2b00      	cmp	r3, #0
 8000998:	bf14      	ite	ne
 800099a:	2301      	movne	r3, #1
 800099c:	2300      	moveq	r3, #0
 800099e:	75fb      	strb	r3, [r7, #23]

	// 5. CLEAR FIFO
	MAX86916_Clear_Fifo();
 80009a0:	f000 f892 	bl	8000ac8 <MAX86916_Clear_Fifo>

	// SAVE SETTINGS
	ppg_config.mode = ppg_config.mode;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MAX86916_Config+0x29c>)
 80009a6:	781a      	ldrb	r2, [r3, #0]
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <MAX86916_Config+0x29c>)
 80009aa:	701a      	strb	r2, [r3, #0]
	ppg_config.shutdown = initStruct.shutdown;
 80009ac:	797a      	ldrb	r2, [r7, #5]
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MAX86916_Config+0x29c>)
 80009b0:	705a      	strb	r2, [r3, #1]
	ppg_config.full_scale = initStruct.full_scale;
 80009b2:	79ba      	ldrb	r2, [r7, #6]
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MAX86916_Config+0x29c>)
 80009b6:	709a      	strb	r2, [r3, #2]
	ppg_config.frequency = initStruct.frequency;
 80009b8:	79fa      	ldrb	r2, [r7, #7]
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MAX86916_Config+0x29c>)
 80009bc:	70da      	strb	r2, [r3, #3]
	ppg_config.pulse_width = initStruct.pulse_width;
 80009be:	7a3a      	ldrb	r2, [r7, #8]
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MAX86916_Config+0x29c>)
 80009c2:	711a      	strb	r2, [r3, #4]
	uint8_t i;
	for (i = 0; i < 4; i++) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	75bb      	strb	r3, [r7, #22]
 80009c8:	e00d      	b.n	80009e6 <MAX86916_Config+0x272>
		ppg_config.led_pa[i] = initStruct.led_pa[i];
 80009ca:	7dba      	ldrb	r2, [r7, #22]
 80009cc:	7dbb      	ldrb	r3, [r7, #22]
 80009ce:	f107 0118 	add.w	r1, r7, #24
 80009d2:	440a      	add	r2, r1
 80009d4:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 80009d8:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <MAX86916_Config+0x29c>)
 80009da:	4413      	add	r3, r2
 80009dc:	460a      	mov	r2, r1
 80009de:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < 4; i++) {
 80009e0:	7dbb      	ldrb	r3, [r7, #22]
 80009e2:	3301      	adds	r3, #1
 80009e4:	75bb      	strb	r3, [r7, #22]
 80009e6:	7dbb      	ldrb	r3, [r7, #22]
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d9ee      	bls.n	80009ca <MAX86916_Config+0x256>
	}

	// Check if registers have been written
	bool flag = MAX86916_Check();
 80009ec:	f7ff fe10 	bl	8000610 <MAX86916_Check>
 80009f0:	4603      	mov	r3, r0
 80009f2:	757b      	strb	r3, [r7, #21]
	if (flag == false)
 80009f4:	7d7b      	ldrb	r3, [r7, #21]
 80009f6:	f083 0301 	eor.w	r3, r3, #1
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MAX86916_Config+0x290>
		return false;
 8000a00:	2300      	movs	r3, #0
 8000a02:	e000      	b.n	8000a06 <MAX86916_Config+0x292>

	return true;
 8000a04:	2301      	movs	r3, #1
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	371c      	adds	r7, #28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd90      	pop	{r4, r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200003c0 	.word	0x200003c0

08000a14 <MAX86916_Read_Sample_Flex_Mode>:

/**
 * Read data when the module is configured in flex mode
 */

bool MAX86916_Read_Sample_Flex_Mode(uint8_t* raw_ired, uint8_t* raw_red, uint8_t* raw_green, uint8_t* raw_blue) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
 8000a20:	603b      	str	r3, [r7, #0]
	uint8_t temp[12];
	bool result = true;
 8000a22:	2301      	movs	r3, #1
 8000a24:	77fb      	strb	r3, [r7, #31]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a26:	b672      	cpsid	i
}
 8000a28:	bf00      	nop
	__disable_irq();
	result &= MAX86916_I2C_Read(MAX86916_REG_FIFO_DATA, temp, 12);
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	220c      	movs	r2, #12
 8000a30:	4619      	mov	r1, r3
 8000a32:	2007      	movs	r0, #7
 8000a34:	f7ff fda0 	bl	8000578 <MAX86916_I2C_Read>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	7ffb      	ldrb	r3, [r7, #31]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	bf14      	ite	ne
 8000a44:	2301      	movne	r3, #1
 8000a46:	2300      	moveq	r3, #0
 8000a48:	77fb      	strb	r3, [r7, #31]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a4a:	b662      	cpsie	i
}
 8000a4c:	bf00      	nop
	__enable_irq();
	raw_ired[0] = temp[0] & 0x07;
 8000a4e:	7c3b      	ldrb	r3, [r7, #16]
 8000a50:	f003 0307 	and.w	r3, r3, #7
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	701a      	strb	r2, [r3, #0]
	raw_ired[1] = temp[1];
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	7c7a      	ldrb	r2, [r7, #17]
 8000a60:	701a      	strb	r2, [r3, #0]
	raw_ired[2] = temp[2];
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	3302      	adds	r3, #2
 8000a66:	7cba      	ldrb	r2, [r7, #18]
 8000a68:	701a      	strb	r2, [r3, #0]
	raw_red[0] = temp[3] & 0x07;
 8000a6a:	7cfb      	ldrb	r3, [r7, #19]
 8000a6c:	f003 0307 	and.w	r3, r3, #7
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	701a      	strb	r2, [r3, #0]
	raw_red[1] = temp[4];
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	7d3a      	ldrb	r2, [r7, #20]
 8000a7c:	701a      	strb	r2, [r3, #0]
	raw_red[2] = temp[5];
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	3302      	adds	r3, #2
 8000a82:	7d7a      	ldrb	r2, [r7, #21]
 8000a84:	701a      	strb	r2, [r3, #0]
	raw_green[0] = temp[6] & 0x07;
 8000a86:	7dbb      	ldrb	r3, [r7, #22]
 8000a88:	f003 0307 	and.w	r3, r3, #7
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	701a      	strb	r2, [r3, #0]
	raw_green[1] = temp[7];
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3301      	adds	r3, #1
 8000a96:	7dfa      	ldrb	r2, [r7, #23]
 8000a98:	701a      	strb	r2, [r3, #0]
	raw_green[2] = temp[8];
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	7e3a      	ldrb	r2, [r7, #24]
 8000aa0:	701a      	strb	r2, [r3, #0]
	raw_blue[0] = temp[9] & 0x07;
 8000aa2:	7e7b      	ldrb	r3, [r7, #25]
 8000aa4:	f003 0307 	and.w	r3, r3, #7
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	701a      	strb	r2, [r3, #0]
	raw_blue[1] = temp[10];
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	7eba      	ldrb	r2, [r7, #26]
 8000ab4:	701a      	strb	r2, [r3, #0]
	raw_blue[2] = temp[11];
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	3302      	adds	r3, #2
 8000aba:	7efa      	ldrb	r2, [r7, #27]
 8000abc:	701a      	strb	r2, [r3, #0]

	return result;
 8000abe:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3720      	adds	r7, #32
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <MAX86916_Clear_Fifo>:
}

/**
 * Clear Fifo registers
 */
bool MAX86916_Clear_Fifo(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
	uint8_t reset = 0x00;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	71bb      	strb	r3, [r7, #6]
	bool result = true;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	71fb      	strb	r3, [r7, #7]
	result &= MAX86916_I2C_Write(MAX86916_REG_FIFO_WRITE_PTR, &reset, 1);
 8000ad6:	1dbb      	adds	r3, r7, #6
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4619      	mov	r1, r3
 8000adc:	2004      	movs	r0, #4
 8000ade:	f7ff fcef 	bl	80004c0 <MAX86916_I2C_Write>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bf14      	ite	ne
 8000aee:	2301      	movne	r3, #1
 8000af0:	2300      	moveq	r3, #0
 8000af2:	71fb      	strb	r3, [r7, #7]
	result &= MAX86916_I2C_Write(MAX86916_REG_FIFO_OVERFLOW_COUNTER, &reset, 1);
 8000af4:	1dbb      	adds	r3, r7, #6
 8000af6:	2201      	movs	r2, #1
 8000af8:	4619      	mov	r1, r3
 8000afa:	2005      	movs	r0, #5
 8000afc:	f7ff fce0 	bl	80004c0 <MAX86916_I2C_Write>
 8000b00:	4603      	mov	r3, r0
 8000b02:	461a      	mov	r2, r3
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	4013      	ands	r3, r2
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	bf14      	ite	ne
 8000b0c:	2301      	movne	r3, #1
 8000b0e:	2300      	moveq	r3, #0
 8000b10:	71fb      	strb	r3, [r7, #7]
	result &= MAX86916_I2C_Write(MAX86916_REG_FIFO_READ_PTR, &reset, 1);
 8000b12:	1dbb      	adds	r3, r7, #6
 8000b14:	2201      	movs	r2, #1
 8000b16:	4619      	mov	r1, r3
 8000b18:	2006      	movs	r0, #6
 8000b1a:	f7ff fcd1 	bl	80004c0 <MAX86916_I2C_Write>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	4013      	ands	r3, r2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bf14      	ite	ne
 8000b2a:	2301      	movne	r3, #1
 8000b2c:	2300      	moveq	r3, #0
 8000b2e:	71fb      	strb	r3, [r7, #7]
	return result;
 8000b30:	79fb      	ldrb	r3, [r7, #7]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b42:	f000 fbbd 	bl	80012c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b46:	f000 f889 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4a:	f000 f921 	bl	8000d90 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000b4e:	f000 f8f1 	bl	8000d34 <MX_I2C3_Init>
  MX_USB_DEVICE_Init();
 8000b52:	f006 fcb9 	bl	80074c8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(500);
 8000b56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b5a:	f000 fc23 	bl	80013a4 <HAL_Delay>

	DISCOVERY_FSM discovery;
	discovery.state = SYS_START_UP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	733b      	strb	r3, [r7, #12]

	MAX86916_Init_TypeDef ppg_init;

	if (MAX86916_Read_Part_ID() == MAX86916_PART_ID_VALUE) {
 8000b62:	f7ff fd47 	bl	80005f4 <MAX86916_Read_Part_ID>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b2b      	cmp	r3, #43	; 0x2b
 8000b6a:	d11d      	bne.n	8000ba8 <main+0x6c>

		ppg_init.fifo_a_full = 0x0F;
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	71fb      	strb	r3, [r7, #7]
		ppg_init.fifo_avg = MAX86916_FIFO_AVG_1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	717b      	strb	r3, [r7, #5]
		ppg_init.fifo_rollover = MAX86916_FIFO_ROLLOVER_OFF;
 8000b74:	2300      	movs	r3, #0
 8000b76:	71bb      	strb	r3, [r7, #6]
		ppg_init.frequency = MAX86916_SR_100Hz;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	70fb      	strb	r3, [r7, #3]
		ppg_init.full_scale = MAX86916_FS_16384;
 8000b7c:	2340      	movs	r3, #64	; 0x40
 8000b7e:	70bb      	strb	r3, [r7, #2]
		ppg_init.led_pa[0] = 0x05; //ired PA
 8000b80:	2305      	movs	r3, #5
 8000b82:	723b      	strb	r3, [r7, #8]
		ppg_init.led_pa[1] = 0x05; //red PA
 8000b84:	2305      	movs	r3, #5
 8000b86:	727b      	strb	r3, [r7, #9]
		ppg_init.led_pa[2] = 0x05; //green PA
 8000b88:	2305      	movs	r3, #5
 8000b8a:	72bb      	strb	r3, [r7, #10]
		ppg_init.led_pa[3] = 0x05; //blue PA
 8000b8c:	2305      	movs	r3, #5
 8000b8e:	72fb      	strb	r3, [r7, #11]
		ppg_init.mode = MAX86916_MODE_FLEX;
 8000b90:	2303      	movs	r3, #3
 8000b92:	703b      	strb	r3, [r7, #0]
		ppg_init.pulse_width = MAX86916_PW_420;
 8000b94:	2303      	movs	r3, #3
 8000b96:	713b      	strb	r3, [r7, #4]
		ppg_init.shutdown = MAX86916_SHDNMODE_SHUTDOWN;
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	707b      	strb	r3, [r7, #1]
		MAX86916_Config(ppg_init);
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ba2:	f7ff fde7 	bl	8000774 <MAX86916_Config>
 8000ba6:	e001      	b.n	8000bac <main+0x70>
	} else {
		discovery.state = SYS_ERROR;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	733b      	strb	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {

		switch (discovery.state){
 8000bac:	7b3b      	ldrb	r3, [r7, #12]
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	d850      	bhi.n	8000c54 <main+0x118>
 8000bb2:	a201      	add	r2, pc, #4	; (adr r2, 8000bb8 <main+0x7c>)
 8000bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb8:	08000bf5 	.word	0x08000bf5
 8000bbc:	08000bcd 	.word	0x08000bcd
 8000bc0:	08000c55 	.word	0x08000c55
 8000bc4:	08000c29 	.word	0x08000c29
 8000bc8:	08000c47 	.word	0x08000c47
		case SYS_START_UP:

			HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd2:	4821      	ldr	r0, [pc, #132]	; (8000c58 <main+0x11c>)
 8000bd4:	f000 feb8 	bl	8001948 <HAL_GPIO_WritePin>

			if(MAX86916_Config(ppg_init))
 8000bd8:	463b      	mov	r3, r7
 8000bda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bde:	f7ff fdc9 	bl	8000774 <MAX86916_Config>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d002      	beq.n	8000bee <main+0xb2>
				discovery.state = SYS_IDLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	733b      	strb	r3, [r7, #12]
			else
				discovery.state = SYS_ERROR;
			break;
 8000bec:	e033      	b.n	8000c56 <main+0x11a>
				discovery.state = SYS_ERROR;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	733b      	strb	r3, [r7, #12]
			break;
 8000bf2:	e030      	b.n	8000c56 <main+0x11a>
		case SYS_IDLE:
			HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfa:	4817      	ldr	r0, [pc, #92]	; (8000c58 <main+0x11c>)
 8000bfc:	f000 fea4 	bl	8001948 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port,LD4_Pin,GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c06:	4814      	ldr	r0, [pc, #80]	; (8000c58 <main+0x11c>)
 8000c08:	f000 fe9e 	bl	8001948 <HAL_GPIO_WritePin>

			HAL_Delay(5000);
 8000c0c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c10:	f000 fbc8 	bl	80013a4 <HAL_Delay>
			discovery.state = SYS_STREAM; //inserire il pulsante al posto del delay
 8000c14:	2303      	movs	r3, #3
 8000c16:	733b      	strb	r3, [r7, #12]
			ppg_init.shutdown = MAX86916_SHDNMODE_ON;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	707b      	strb	r3, [r7, #1]
			MAX86916_Config(ppg_init);
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c22:	f7ff fda7 	bl	8000774 <MAX86916_Config>

			break;
 8000c26:	e016      	b.n	8000c56 <main+0x11a>
		case SYS_STREAM:
			HAL_GPIO_WritePin(LD4_GPIO_Port,LD4_Pin,GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c2e:	480a      	ldr	r0, [pc, #40]	; (8000c58 <main+0x11c>)
 8000c30:	f000 fe8a 	bl	8001948 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD6_GPIO_Port,LD6_Pin,GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c3a:	4807      	ldr	r0, [pc, #28]	; (8000c58 <main+0x11c>)
 8000c3c:	f000 fe84 	bl	8001948 <HAL_GPIO_WritePin>

			if (!ReadAndSendDataFromPPG()){
 8000c40:	f000 f9ee 	bl	8001020 <ReadAndSendDataFromPPG>
				//discovery.state = SYS_ERROR; //da verificare perchè da errore
			}
			break;
 8000c44:	e007      	b.n	8000c56 <main+0x11a>
		case SYS_ERROR:
			HAL_GPIO_WritePin(LD5_GPIO_Port,LD5_Pin,GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <main+0x11c>)
 8000c4e:	f000 fe7b 	bl	8001948 <HAL_GPIO_WritePin>
			break;
 8000c52:	e000      	b.n	8000c56 <main+0x11a>
		default:
			break;
 8000c54:	bf00      	nop
		switch (discovery.state){
 8000c56:	e7a9      	b.n	8000bac <main+0x70>
 8000c58:	40020c00 	.word	0x40020c00

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b094      	sub	sp, #80	; 0x50
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 0320 	add.w	r3, r7, #32
 8000c66:	2230      	movs	r2, #48	; 0x30
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f007 f978 	bl	8007f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	4b29      	ldr	r3, [pc, #164]	; (8000d2c <SystemClock_Config+0xd0>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	4a28      	ldr	r2, [pc, #160]	; (8000d2c <SystemClock_Config+0xd0>)
 8000c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c90:	4b26      	ldr	r3, [pc, #152]	; (8000d2c <SystemClock_Config+0xd0>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <SystemClock_Config+0xd4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a22      	ldr	r2, [pc, #136]	; (8000d30 <SystemClock_Config+0xd4>)
 8000ca6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <SystemClock_Config+0xd4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc6:	2310      	movs	r3, #16
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cd8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cdc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cde:	2304      	movs	r3, #4
 8000ce0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ce2:	2307      	movs	r3, #7
 8000ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce6:	f107 0320 	add.w	r3, r7, #32
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 ff82 	bl	8003bf4 <HAL_RCC_OscConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cf6:	f000 f9d3 	bl	80010a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f003 f9e5 	bl	80040e4 <HAL_RCC_ClockConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000d20:	f000 f9be 	bl	80010a0 <Error_Handler>
  }
}
 8000d24:	bf00      	nop
 8000d26:	3750      	adds	r7, #80	; 0x50
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40007000 	.word	0x40007000

08000d34 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_I2C3_Init+0x50>)
 8000d3a:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <MX_I2C3_Init+0x54>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_I2C3_Init+0x50>)
 8000d40:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <MX_I2C3_Init+0x58>)
 8000d42:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_I2C3_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_I2C3_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_I2C3_Init+0x50>)
 8000d52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d56:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <MX_I2C3_Init+0x50>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_I2C3_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <MX_I2C3_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_I2C3_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_I2C3_Init+0x50>)
 8000d72:	f000 fe27 	bl	80019c4 <HAL_I2C_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000d7c:	f000 f990 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200003cc 	.word	0x200003cc
 8000d88:	40005c00 	.word	0x40005c00
 8000d8c:	000186a0 	.word	0x000186a0

08000d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08c      	sub	sp, #48	; 0x30
 8000d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
 8000daa:	4b97      	ldr	r3, [pc, #604]	; (8001008 <MX_GPIO_Init+0x278>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a96      	ldr	r2, [pc, #600]	; (8001008 <MX_GPIO_Init+0x278>)
 8000db0:	f043 0310 	orr.w	r3, r3, #16
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b94      	ldr	r3, [pc, #592]	; (8001008 <MX_GPIO_Init+0x278>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0310 	and.w	r3, r3, #16
 8000dbe:	61bb      	str	r3, [r7, #24]
 8000dc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	4b90      	ldr	r3, [pc, #576]	; (8001008 <MX_GPIO_Init+0x278>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a8f      	ldr	r2, [pc, #572]	; (8001008 <MX_GPIO_Init+0x278>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b8d      	ldr	r3, [pc, #564]	; (8001008 <MX_GPIO_Init+0x278>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b89      	ldr	r3, [pc, #548]	; (8001008 <MX_GPIO_Init+0x278>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a88      	ldr	r2, [pc, #544]	; (8001008 <MX_GPIO_Init+0x278>)
 8000de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b86      	ldr	r3, [pc, #536]	; (8001008 <MX_GPIO_Init+0x278>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b82      	ldr	r3, [pc, #520]	; (8001008 <MX_GPIO_Init+0x278>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a81      	ldr	r2, [pc, #516]	; (8001008 <MX_GPIO_Init+0x278>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b7f      	ldr	r3, [pc, #508]	; (8001008 <MX_GPIO_Init+0x278>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	4b7b      	ldr	r3, [pc, #492]	; (8001008 <MX_GPIO_Init+0x278>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a7a      	ldr	r2, [pc, #488]	; (8001008 <MX_GPIO_Init+0x278>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b78      	ldr	r3, [pc, #480]	; (8001008 <MX_GPIO_Init+0x278>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	4b74      	ldr	r3, [pc, #464]	; (8001008 <MX_GPIO_Init+0x278>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a73      	ldr	r2, [pc, #460]	; (8001008 <MX_GPIO_Init+0x278>)
 8000e3c:	f043 0308 	orr.w	r3, r3, #8
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b71      	ldr	r3, [pc, #452]	; (8001008 <MX_GPIO_Init+0x278>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2108      	movs	r1, #8
 8000e52:	486e      	ldr	r0, [pc, #440]	; (800100c <MX_GPIO_Init+0x27c>)
 8000e54:	f000 fd78 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	486c      	ldr	r0, [pc, #432]	; (8001010 <MX_GPIO_Init+0x280>)
 8000e5e:	f000 fd73 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e62:	2200      	movs	r2, #0
 8000e64:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000e68:	486a      	ldr	r0, [pc, #424]	; (8001014 <MX_GPIO_Init+0x284>)
 8000e6a:	f000 fd6d 	bl	8001948 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000e6e:	2308      	movs	r3, #8
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	4619      	mov	r1, r3
 8000e84:	4861      	ldr	r0, [pc, #388]	; (800100c <MX_GPIO_Init+0x27c>)
 8000e86:	f000 fbc3 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	485b      	ldr	r0, [pc, #364]	; (8001010 <MX_GPIO_Init+0x280>)
 8000ea2:	f000 fbb5 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4853      	ldr	r0, [pc, #332]	; (8001010 <MX_GPIO_Init+0x280>)
 8000ec2:	f000 fba5 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	484f      	ldr	r0, [pc, #316]	; (8001018 <MX_GPIO_Init+0x288>)
 8000edc:	f000 fb98 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ee0:	2310      	movs	r3, #16
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ef0:	2306      	movs	r3, #6
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4847      	ldr	r0, [pc, #284]	; (8001018 <MX_GPIO_Init+0x288>)
 8000efc:	f000 fb88 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f00:	23e0      	movs	r3, #224	; 0xe0
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f10:	2305      	movs	r3, #5
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	483f      	ldr	r0, [pc, #252]	; (8001018 <MX_GPIO_Init+0x288>)
 8000f1c:	f000 fb78 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f20:	2304      	movs	r3, #4
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	4619      	mov	r1, r3
 8000f32:	483a      	ldr	r0, [pc, #232]	; (800101c <MX_GPIO_Init+0x28c>)
 8000f34:	f000 fb6c 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	4831      	ldr	r0, [pc, #196]	; (800101c <MX_GPIO_Init+0x28c>)
 8000f56:	f000 fb5b 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f5a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000f5e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4828      	ldr	r0, [pc, #160]	; (8001014 <MX_GPIO_Init+0x284>)
 8000f74:	f000 fb4c 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f78:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f8a:	2306      	movs	r3, #6
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	481e      	ldr	r0, [pc, #120]	; (8001010 <MX_GPIO_Init+0x280>)
 8000f96:	f000 fb3b 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f9a:	2320      	movs	r3, #32
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	4819      	ldr	r0, [pc, #100]	; (8001014 <MX_GPIO_Init+0x284>)
 8000fae:	f000 fb2f 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000fb2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb8:	2312      	movs	r3, #18
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4813      	ldr	r0, [pc, #76]	; (800101c <MX_GPIO_Init+0x28c>)
 8000fd0:	f000 fb1e 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fd8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4808      	ldr	r0, [pc, #32]	; (800100c <MX_GPIO_Init+0x27c>)
 8000fea:	f000 fb11 	bl	8001610 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2006      	movs	r0, #6
 8000ff4:	f000 fad5 	bl	80015a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ff8:	2006      	movs	r0, #6
 8000ffa:	f000 faee 	bl	80015da <HAL_NVIC_EnableIRQ>

}
 8000ffe:	bf00      	nop
 8001000:	3730      	adds	r7, #48	; 0x30
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40021000 	.word	0x40021000
 8001010:	40020800 	.word	0x40020800
 8001014:	40020c00 	.word	0x40020c00
 8001018:	40020000 	.word	0x40020000
 800101c:	40020400 	.word	0x40020400

08001020 <ReadAndSendDataFromPPG>:

/* USER CODE BEGIN 4 */
bool ReadAndSendDataFromPPG(){
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
	uint8_t samples[18] = {0};
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	819a      	strh	r2, [r3, #12]
	bool result = true;
 8001038:	2301      	movs	r3, #1
 800103a:	75fb      	strb	r3, [r7, #23]

	samples[0] = '?';
 800103c:	233f      	movs	r3, #63	; 0x3f
 800103e:	713b      	strb	r3, [r7, #4]
	samples[1] = '!';
 8001040:	2321      	movs	r3, #33	; 0x21
 8001042:	717b      	strb	r3, [r7, #5]

	result &= MAX86916_Read_Sample_Flex_Mode(samples + 3, samples + 7, samples + 11, samples + 15);
 8001044:	1d38      	adds	r0, r7, #4
 8001046:	3003      	adds	r0, #3
 8001048:	1d39      	adds	r1, r7, #4
 800104a:	3107      	adds	r1, #7
 800104c:	1d3a      	adds	r2, r7, #4
 800104e:	320b      	adds	r2, #11
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	330f      	adds	r3, #15
 8001054:	f7ff fcde 	bl	8000a14 <MAX86916_Read_Sample_Flex_Mode>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	7dfb      	ldrb	r3, [r7, #23]
 800105e:	4013      	ands	r3, r2
 8001060:	2b00      	cmp	r3, #0
 8001062:	bf14      	ite	ne
 8001064:	2301      	movne	r3, #1
 8001066:	2300      	moveq	r3, #0
 8001068:	75fb      	strb	r3, [r7, #23]

	result &= CDC_Transmit_FS(samples, 18) == USBD_OK;
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2112      	movs	r1, #18
 800106e:	4618      	mov	r0, r3
 8001070:	f006 fae8 	bl	8007644 <CDC_Transmit_FS>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	bf0c      	ite	eq
 800107a:	2301      	moveq	r3, #1
 800107c:	2300      	movne	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	461a      	mov	r2, r3
 8001082:	7dfb      	ldrb	r3, [r7, #23]
 8001084:	4013      	ands	r3, r2
 8001086:	2b00      	cmp	r3, #0
 8001088:	bf14      	ite	ne
 800108a:	2301      	movne	r3, #1
 800108c:	2300      	moveq	r3, #0
 800108e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001090:	200a      	movs	r0, #10
 8001092:	f000 f987 	bl	80013a4 <HAL_Delay>
}
 8001096:	bf00      	nop
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010a8:	e7fe      	b.n	80010a8 <Error_Handler+0x8>
	...

080010ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <HAL_MspInit+0x4c>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <HAL_MspInit+0x4c>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HAL_MspInit+0x4c>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_MspInit+0x4c>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <HAL_MspInit+0x4c>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_MspInit+0x4c>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010ea:	2007      	movs	r0, #7
 80010ec:	f000 fa4e 	bl	800158c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40023800 	.word	0x40023800

080010fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a29      	ldr	r2, [pc, #164]	; (80011c0 <HAL_I2C_MspInit+0xc4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d14b      	bne.n	80011b6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <HAL_I2C_MspInit+0xc8>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a27      	ldr	r2, [pc, #156]	; (80011c4 <HAL_I2C_MspInit+0xc8>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <HAL_I2C_MspInit+0xc8>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <HAL_I2C_MspInit+0xc8>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a20      	ldr	r2, [pc, #128]	; (80011c4 <HAL_I2C_MspInit+0xc8>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <HAL_I2C_MspInit+0xc8>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115c:	2312      	movs	r3, #18
 800115e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001160:	2301      	movs	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001164:	2301      	movs	r3, #1
 8001166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001168:	2304      	movs	r3, #4
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	4815      	ldr	r0, [pc, #84]	; (80011c8 <HAL_I2C_MspInit+0xcc>)
 8001174:	f000 fa4c 	bl	8001610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800117e:	2312      	movs	r3, #18
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001182:	2301      	movs	r3, #1
 8001184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001186:	2301      	movs	r3, #1
 8001188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800118a:	2304      	movs	r3, #4
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <HAL_I2C_MspInit+0xd0>)
 8001196:	f000 fa3b 	bl	8001610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_I2C_MspInit+0xc8>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <HAL_I2C_MspInit+0xc8>)
 80011a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_I2C_MspInit+0xc8>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80011b6:	bf00      	nop
 80011b8:	3728      	adds	r7, #40	; 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40005c00 	.word	0x40005c00
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020800 	.word	0x40020800
 80011cc:	40020000 	.word	0x40020000

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <NMI_Handler+0x4>

080011d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <HardFault_Handler+0x4>

080011dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <MemManage_Handler+0x4>

080011e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <BusFault_Handler+0x4>

080011e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <UsageFault_Handler+0x4>

080011ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121c:	f000 f8a2 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001228:	2001      	movs	r0, #1
 800122a:	f000 fba7 	bl	800197c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <OTG_FS_IRQHandler+0x10>)
 800123a:	f001 fca8 	bl	8002b8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200018f4 	.word	0x200018f4

08001248 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <SystemInit+0x20>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <SystemInit+0x20>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <Reset_Handler>:
 800126c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a4 <LoopFillZerobss+0x12>
 8001270:	480d      	ldr	r0, [pc, #52]	; (80012a8 <LoopFillZerobss+0x16>)
 8001272:	490e      	ldr	r1, [pc, #56]	; (80012ac <LoopFillZerobss+0x1a>)
 8001274:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <LoopFillZerobss+0x1e>)
 8001276:	2300      	movs	r3, #0
 8001278:	e002      	b.n	8001280 <LoopCopyDataInit>

0800127a <CopyDataInit>:
 800127a:	58d4      	ldr	r4, [r2, r3]
 800127c:	50c4      	str	r4, [r0, r3]
 800127e:	3304      	adds	r3, #4

08001280 <LoopCopyDataInit>:
 8001280:	18c4      	adds	r4, r0, r3
 8001282:	428c      	cmp	r4, r1
 8001284:	d3f9      	bcc.n	800127a <CopyDataInit>
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <LoopFillZerobss+0x22>)
 8001288:	4c0b      	ldr	r4, [pc, #44]	; (80012b8 <LoopFillZerobss+0x26>)
 800128a:	2300      	movs	r3, #0
 800128c:	e001      	b.n	8001292 <LoopFillZerobss>

0800128e <FillZerobss>:
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	3204      	adds	r2, #4

08001292 <LoopFillZerobss>:
 8001292:	42a2      	cmp	r2, r4
 8001294:	d3fb      	bcc.n	800128e <FillZerobss>
 8001296:	f7ff ffd7 	bl	8001248 <SystemInit>
 800129a:	f006 fe3d 	bl	8007f18 <__libc_init_array>
 800129e:	f7ff fc4d 	bl	8000b3c <main>
 80012a2:	4770      	bx	lr
 80012a4:	20020000 	.word	0x20020000
 80012a8:	20000000 	.word	0x20000000
 80012ac:	20000180 	.word	0x20000180
 80012b0:	08007ff8 	.word	0x08007ff8
 80012b4:	20000180 	.word	0x20000180
 80012b8:	20001cfc 	.word	0x20001cfc

080012bc <ADC_IRQHandler>:
 80012bc:	e7fe      	b.n	80012bc <ADC_IRQHandler>
	...

080012c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <HAL_Init+0x40>)
 80012ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_Init+0x40>)
 80012d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_Init+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_Init+0x40>)
 80012e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 f94f 	bl	800158c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f808 	bl	8001304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f4:	f7ff feda 	bl	80010ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023c00 	.word	0x40023c00

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x54>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x58>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	fbb3 f3f1 	udiv	r3, r3, r1
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f967 	bl	80015f6 <HAL_SYSTICK_Config>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e00e      	b.n	8001350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d80a      	bhi.n	800134e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f000 f92f 	bl	80015a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_InitTick+0x5c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000000 	.word	0x20000000
 800135c:	20000008 	.word	0x20000008
 8001360:	20000004 	.word	0x20000004

08001364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_IncTick+0x20>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_IncTick+0x24>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_IncTick+0x24>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008
 8001388:	20000420 	.word	0x20000420

0800138c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return uwTick;
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <HAL_GetTick+0x14>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000420 	.word	0x20000420

080013a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff ffee 	bl	800138c <HAL_GetTick>
 80013b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d005      	beq.n	80013ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_Delay+0x44>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4413      	add	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ca:	bf00      	nop
 80013cc:	f7ff ffde 	bl	800138c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d8f7      	bhi.n	80013cc <HAL_Delay+0x28>
  {
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000008 	.word	0x20000008

080013ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141e:	4a04      	ldr	r2, [pc, #16]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	60d3      	str	r3, [r2, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <__NVIC_GetPriorityGrouping+0x18>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	f003 0307 	and.w	r3, r3, #7
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	2b00      	cmp	r3, #0
 8001460:	db0b      	blt.n	800147a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f003 021f 	and.w	r2, r3, #31
 8001468:	4907      	ldr	r1, [pc, #28]	; (8001488 <__NVIC_EnableIRQ+0x38>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	095b      	lsrs	r3, r3, #5
 8001470:	2001      	movs	r0, #1
 8001472:	fa00 f202 	lsl.w	r2, r0, r2
 8001476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000e100 	.word	0xe000e100

0800148c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	db0a      	blt.n	80014b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	490c      	ldr	r1, [pc, #48]	; (80014d8 <__NVIC_SetPriority+0x4c>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	440b      	add	r3, r1
 80014b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b4:	e00a      	b.n	80014cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4908      	ldr	r1, [pc, #32]	; (80014dc <__NVIC_SetPriority+0x50>)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	3b04      	subs	r3, #4
 80014c4:	0112      	lsls	r2, r2, #4
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	440b      	add	r3, r1
 80014ca:	761a      	strb	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000e100 	.word	0xe000e100
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f1c3 0307 	rsb	r3, r3, #7
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	bf28      	it	cs
 80014fe:	2304      	movcs	r3, #4
 8001500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3304      	adds	r3, #4
 8001506:	2b06      	cmp	r3, #6
 8001508:	d902      	bls.n	8001510 <NVIC_EncodePriority+0x30>
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3b03      	subs	r3, #3
 800150e:	e000      	b.n	8001512 <NVIC_EncodePriority+0x32>
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	f04f 32ff 	mov.w	r2, #4294967295
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43da      	mvns	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	401a      	ands	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	43d9      	mvns	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	4313      	orrs	r3, r2
         );
}
 800153a:	4618      	mov	r0, r3
 800153c:	3724      	adds	r7, #36	; 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001558:	d301      	bcc.n	800155e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155a:	2301      	movs	r3, #1
 800155c:	e00f      	b.n	800157e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <SysTick_Config+0x40>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001566:	210f      	movs	r1, #15
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f7ff ff8e 	bl	800148c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <SysTick_Config+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <SysTick_Config+0x40>)
 8001578:	2207      	movs	r2, #7
 800157a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	e000e010 	.word	0xe000e010

0800158c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff29 	bl	80013ec <__NVIC_SetPriorityGrouping>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b4:	f7ff ff3e 	bl	8001434 <__NVIC_GetPriorityGrouping>
 80015b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	6978      	ldr	r0, [r7, #20]
 80015c0:	f7ff ff8e 	bl	80014e0 <NVIC_EncodePriority>
 80015c4:	4602      	mov	r2, r0
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff5d 	bl	800148c <__NVIC_SetPriority>
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff31 	bl	8001450 <__NVIC_EnableIRQ>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffa2 	bl	8001548 <SysTick_Config>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	e16b      	b.n	8001904 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800162c:	2201      	movs	r2, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	429a      	cmp	r2, r3
 8001646:	f040 815a 	bne.w	80018fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	2b01      	cmp	r3, #1
 8001654:	d005      	beq.n	8001662 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165e:	2b02      	cmp	r3, #2
 8001660:	d130      	bne.n	80016c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001698:	2201      	movs	r2, #1
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 0201 	and.w	r2, r3, #1
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d017      	beq.n	8001700 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d123      	bne.n	8001754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	08da      	lsrs	r2, r3, #3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3208      	adds	r2, #8
 8001714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	220f      	movs	r2, #15
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	08da      	lsrs	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3208      	adds	r2, #8
 800174e:	69b9      	ldr	r1, [r7, #24]
 8001750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2203      	movs	r2, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0203 	and.w	r2, r3, #3
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80b4 	beq.w	80018fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b60      	ldr	r3, [pc, #384]	; (800191c <HAL_GPIO_Init+0x30c>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	4a5f      	ldr	r2, [pc, #380]	; (800191c <HAL_GPIO_Init+0x30c>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a4:	6453      	str	r3, [r2, #68]	; 0x44
 80017a6:	4b5d      	ldr	r3, [pc, #372]	; (800191c <HAL_GPIO_Init+0x30c>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017b2:	4a5b      	ldr	r2, [pc, #364]	; (8001920 <HAL_GPIO_Init+0x310>)
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	3302      	adds	r3, #2
 80017ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_GPIO_Init+0x314>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d02b      	beq.n	8001836 <HAL_GPIO_Init+0x226>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a51      	ldr	r2, [pc, #324]	; (8001928 <HAL_GPIO_Init+0x318>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d025      	beq.n	8001832 <HAL_GPIO_Init+0x222>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a50      	ldr	r2, [pc, #320]	; (800192c <HAL_GPIO_Init+0x31c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d01f      	beq.n	800182e <HAL_GPIO_Init+0x21e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4f      	ldr	r2, [pc, #316]	; (8001930 <HAL_GPIO_Init+0x320>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d019      	beq.n	800182a <HAL_GPIO_Init+0x21a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4e      	ldr	r2, [pc, #312]	; (8001934 <HAL_GPIO_Init+0x324>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d013      	beq.n	8001826 <HAL_GPIO_Init+0x216>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4d      	ldr	r2, [pc, #308]	; (8001938 <HAL_GPIO_Init+0x328>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00d      	beq.n	8001822 <HAL_GPIO_Init+0x212>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4c      	ldr	r2, [pc, #304]	; (800193c <HAL_GPIO_Init+0x32c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d007      	beq.n	800181e <HAL_GPIO_Init+0x20e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4b      	ldr	r2, [pc, #300]	; (8001940 <HAL_GPIO_Init+0x330>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_GPIO_Init+0x20a>
 8001816:	2307      	movs	r3, #7
 8001818:	e00e      	b.n	8001838 <HAL_GPIO_Init+0x228>
 800181a:	2308      	movs	r3, #8
 800181c:	e00c      	b.n	8001838 <HAL_GPIO_Init+0x228>
 800181e:	2306      	movs	r3, #6
 8001820:	e00a      	b.n	8001838 <HAL_GPIO_Init+0x228>
 8001822:	2305      	movs	r3, #5
 8001824:	e008      	b.n	8001838 <HAL_GPIO_Init+0x228>
 8001826:	2304      	movs	r3, #4
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x228>
 800182a:	2303      	movs	r3, #3
 800182c:	e004      	b.n	8001838 <HAL_GPIO_Init+0x228>
 800182e:	2302      	movs	r3, #2
 8001830:	e002      	b.n	8001838 <HAL_GPIO_Init+0x228>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_GPIO_Init+0x228>
 8001836:	2300      	movs	r3, #0
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	f002 0203 	and.w	r2, r2, #3
 800183e:	0092      	lsls	r2, r2, #2
 8001840:	4093      	lsls	r3, r2
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001848:	4935      	ldr	r1, [pc, #212]	; (8001920 <HAL_GPIO_Init+0x310>)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	3302      	adds	r3, #2
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001856:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <HAL_GPIO_Init+0x334>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800187a:	4a32      	ldr	r2, [pc, #200]	; (8001944 <HAL_GPIO_Init+0x334>)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001880:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_GPIO_Init+0x334>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018a4:	4a27      	ldr	r2, [pc, #156]	; (8001944 <HAL_GPIO_Init+0x334>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018aa:	4b26      	ldr	r3, [pc, #152]	; (8001944 <HAL_GPIO_Init+0x334>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ce:	4a1d      	ldr	r2, [pc, #116]	; (8001944 <HAL_GPIO_Init+0x334>)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018d4:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <HAL_GPIO_Init+0x334>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018f8:	4a12      	ldr	r2, [pc, #72]	; (8001944 <HAL_GPIO_Init+0x334>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3301      	adds	r3, #1
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	2b0f      	cmp	r3, #15
 8001908:	f67f ae90 	bls.w	800162c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3724      	adds	r7, #36	; 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	40013800 	.word	0x40013800
 8001924:	40020000 	.word	0x40020000
 8001928:	40020400 	.word	0x40020400
 800192c:	40020800 	.word	0x40020800
 8001930:	40020c00 	.word	0x40020c00
 8001934:	40021000 	.word	0x40021000
 8001938:	40021400 	.word	0x40021400
 800193c:	40021800 	.word	0x40021800
 8001940:	40021c00 	.word	0x40021c00
 8001944:	40013c00 	.word	0x40013c00

08001948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
 8001954:	4613      	mov	r3, r2
 8001956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001958:	787b      	ldrb	r3, [r7, #1]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001964:	e003      	b.n	800196e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001966:	887b      	ldrh	r3, [r7, #2]
 8001968:	041a      	lsls	r2, r3, #16
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	619a      	str	r2, [r3, #24]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f806 	bl	80019ac <HAL_GPIO_EXTI_Callback>
  }
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40013c00 	.word	0x40013c00

080019ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e12b      	b.n	8001c2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fb86 	bl	80010fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2224      	movs	r2, #36	; 0x24
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a28:	f002 fd30 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 8001a2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4a81      	ldr	r2, [pc, #516]	; (8001c38 <HAL_I2C_Init+0x274>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d807      	bhi.n	8001a48 <HAL_I2C_Init+0x84>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4a80      	ldr	r2, [pc, #512]	; (8001c3c <HAL_I2C_Init+0x278>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	bf94      	ite	ls
 8001a40:	2301      	movls	r3, #1
 8001a42:	2300      	movhi	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	e006      	b.n	8001a56 <HAL_I2C_Init+0x92>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4a7d      	ldr	r2, [pc, #500]	; (8001c40 <HAL_I2C_Init+0x27c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	bf94      	ite	ls
 8001a50:	2301      	movls	r3, #1
 8001a52:	2300      	movhi	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e0e7      	b.n	8001c2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4a78      	ldr	r2, [pc, #480]	; (8001c44 <HAL_I2C_Init+0x280>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	0c9b      	lsrs	r3, r3, #18
 8001a68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4a6a      	ldr	r2, [pc, #424]	; (8001c38 <HAL_I2C_Init+0x274>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d802      	bhi.n	8001a98 <HAL_I2C_Init+0xd4>
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	3301      	adds	r3, #1
 8001a96:	e009      	b.n	8001aac <HAL_I2C_Init+0xe8>
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a9e:	fb02 f303 	mul.w	r3, r2, r3
 8001aa2:	4a69      	ldr	r2, [pc, #420]	; (8001c48 <HAL_I2C_Init+0x284>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	3301      	adds	r3, #1
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001abe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	495c      	ldr	r1, [pc, #368]	; (8001c38 <HAL_I2C_Init+0x274>)
 8001ac8:	428b      	cmp	r3, r1
 8001aca:	d819      	bhi.n	8001b00 <HAL_I2C_Init+0x13c>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	1e59      	subs	r1, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ada:	1c59      	adds	r1, r3, #1
 8001adc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ae0:	400b      	ands	r3, r1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00a      	beq.n	8001afc <HAL_I2C_Init+0x138>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1e59      	subs	r1, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af4:	3301      	adds	r3, #1
 8001af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afa:	e051      	b.n	8001ba0 <HAL_I2C_Init+0x1dc>
 8001afc:	2304      	movs	r3, #4
 8001afe:	e04f      	b.n	8001ba0 <HAL_I2C_Init+0x1dc>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d111      	bne.n	8001b2c <HAL_I2C_Init+0x168>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1e58      	subs	r0, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	440b      	add	r3, r1
 8001b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf0c      	ite	eq
 8001b24:	2301      	moveq	r3, #1
 8001b26:	2300      	movne	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	e012      	b.n	8001b52 <HAL_I2C_Init+0x18e>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1e58      	subs	r0, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6859      	ldr	r1, [r3, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	0099      	lsls	r1, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b42:	3301      	adds	r3, #1
 8001b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf0c      	ite	eq
 8001b4c:	2301      	moveq	r3, #1
 8001b4e:	2300      	movne	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_I2C_Init+0x196>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e022      	b.n	8001ba0 <HAL_I2C_Init+0x1dc>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10e      	bne.n	8001b80 <HAL_I2C_Init+0x1bc>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1e58      	subs	r0, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6859      	ldr	r1, [r3, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	440b      	add	r3, r1
 8001b70:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b74:	3301      	adds	r3, #1
 8001b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b7e:	e00f      	b.n	8001ba0 <HAL_I2C_Init+0x1dc>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1e58      	subs	r0, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	0099      	lsls	r1, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b96:	3301      	adds	r3, #1
 8001b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	6809      	ldr	r1, [r1, #0]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69da      	ldr	r2, [r3, #28]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6911      	ldr	r1, [r2, #16]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68d2      	ldr	r2, [r2, #12]
 8001bda:	4311      	orrs	r1, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2220      	movs	r2, #32
 8001c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	000186a0 	.word	0x000186a0
 8001c3c:	001e847f 	.word	0x001e847f
 8001c40:	003d08ff 	.word	0x003d08ff
 8001c44:	431bde83 	.word	0x431bde83
 8001c48:	10624dd3 	.word	0x10624dd3

08001c4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	461a      	mov	r2, r3
 8001c58:	460b      	mov	r3, r1
 8001c5a:	817b      	strh	r3, [r7, #10]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c60:	f7ff fb94 	bl	800138c <HAL_GetTick>
 8001c64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b20      	cmp	r3, #32
 8001c70:	f040 80e0 	bne.w	8001e34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2319      	movs	r3, #25
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4970      	ldr	r1, [pc, #448]	; (8001e40 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 fc58 	bl	8002534 <I2C_WaitOnFlagUntilTimeout>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e0d3      	b.n	8001e36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_I2C_Master_Transmit+0x50>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e0cc      	b.n	8001e36 <HAL_I2C_Master_Transmit+0x1ea>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d007      	beq.n	8001cc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0201 	orr.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2221      	movs	r2, #33	; 0x21
 8001cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2210      	movs	r2, #16
 8001cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	893a      	ldrh	r2, [r7, #8]
 8001cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4a50      	ldr	r2, [pc, #320]	; (8001e44 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d04:	8979      	ldrh	r1, [r7, #10]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	6a3a      	ldr	r2, [r7, #32]
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 fac2 	bl	8002294 <I2C_MasterRequestWrite>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e08d      	b.n	8001e36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d30:	e066      	b.n	8001e00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	6a39      	ldr	r1, [r7, #32]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 fcd2 	bl	80026e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00d      	beq.n	8001d5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d107      	bne.n	8001d5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e06b      	b.n	8001e36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d86:	3b01      	subs	r3, #1
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d11b      	bne.n	8001dd4 <HAL_I2C_Master_Transmit+0x188>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d017      	beq.n	8001dd4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	781a      	ldrb	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	6a39      	ldr	r1, [r7, #32]
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 fcc2 	bl	8002762 <I2C_WaitOnBTFFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00d      	beq.n	8001e00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d107      	bne.n	8001dfc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e01a      	b.n	8001e36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d194      	bne.n	8001d32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e000      	b.n	8001e36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e34:	2302      	movs	r3, #2
  }
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	00100002 	.word	0x00100002
 8001e44:	ffff0000 	.word	0xffff0000

08001e48 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	; 0x30
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	461a      	mov	r2, r3
 8001e54:	460b      	mov	r3, r1
 8001e56:	817b      	strh	r3, [r7, #10]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff fa96 	bl	800138c <HAL_GetTick>
 8001e60:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b20      	cmp	r3, #32
 8001e6c:	f040 820b 	bne.w	8002286 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2319      	movs	r3, #25
 8001e76:	2201      	movs	r2, #1
 8001e78:	497c      	ldr	r1, [pc, #496]	; (800206c <HAL_I2C_Master_Receive+0x224>)
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 fb5a 	bl	8002534 <I2C_WaitOnFlagUntilTimeout>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001e86:	2302      	movs	r3, #2
 8001e88:	e1fe      	b.n	8002288 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_I2C_Master_Receive+0x50>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e1f7      	b.n	8002288 <HAL_I2C_Master_Receive+0x440>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d007      	beq.n	8001ebe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0201 	orr.w	r2, r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ecc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2222      	movs	r2, #34	; 0x22
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2210      	movs	r2, #16
 8001eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	893a      	ldrh	r2, [r7, #8]
 8001eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4a5c      	ldr	r2, [pc, #368]	; (8002070 <HAL_I2C_Master_Receive+0x228>)
 8001efe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f00:	8979      	ldrh	r1, [r7, #10]
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 fa46 	bl	8002398 <I2C_MasterRequestRead>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e1b8      	b.n	8002288 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d113      	bne.n	8001f46 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	623b      	str	r3, [r7, #32]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	623b      	str	r3, [r7, #32]
 8001f32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e18c      	b.n	8002260 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d11b      	bne.n	8001f86 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	e16c      	b.n	8002260 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d11b      	bne.n	8001fc6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	61bb      	str	r3, [r7, #24]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	e14c      	b.n	8002260 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001fec:	e138      	b.n	8002260 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	f200 80f1 	bhi.w	80021da <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d123      	bne.n	8002048 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002002:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 fbed 	bl	80027e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e139      	b.n	8002288 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691a      	ldr	r2, [r3, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002030:	3b01      	subs	r3, #1
 8002032:	b29a      	uxth	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002046:	e10b      	b.n	8002260 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204c:	2b02      	cmp	r3, #2
 800204e:	d14e      	bne.n	80020ee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002056:	2200      	movs	r2, #0
 8002058:	4906      	ldr	r1, [pc, #24]	; (8002074 <HAL_I2C_Master_Receive+0x22c>)
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 fa6a 	bl	8002534 <I2C_WaitOnFlagUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d008      	beq.n	8002078 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e10e      	b.n	8002288 <HAL_I2C_Master_Receive+0x440>
 800206a:	bf00      	nop
 800206c:	00100002 	.word	0x00100002
 8002070:	ffff0000 	.word	0xffff0000
 8002074:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002086:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020ec:	e0b8      	b.n	8002260 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f4:	2200      	movs	r2, #0
 80020f6:	4966      	ldr	r1, [pc, #408]	; (8002290 <HAL_I2C_Master_Receive+0x448>)
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 fa1b 	bl	8002534 <I2C_WaitOnFlagUntilTimeout>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0bf      	b.n	8002288 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002116:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691a      	ldr	r2, [r3, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002140:	b29b      	uxth	r3, r3
 8002142:	3b01      	subs	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002150:	2200      	movs	r2, #0
 8002152:	494f      	ldr	r1, [pc, #316]	; (8002290 <HAL_I2C_Master_Receive+0x448>)
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 f9ed 	bl	8002534 <I2C_WaitOnFlagUntilTimeout>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e091      	b.n	8002288 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002172:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219c:	b29b      	uxth	r3, r3
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021d8:	e042      	b.n	8002260 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 fb00 	bl	80027e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e04c      	b.n	8002288 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b04      	cmp	r3, #4
 800222c:	d118      	bne.n	8002260 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002264:	2b00      	cmp	r3, #0
 8002266:	f47f aec2 	bne.w	8001fee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e000      	b.n	8002288 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002286:	2302      	movs	r3, #2
  }
}
 8002288:	4618      	mov	r0, r3
 800228a:	3728      	adds	r7, #40	; 0x28
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	00010004 	.word	0x00010004

08002294 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af02      	add	r7, sp, #8
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	460b      	mov	r3, r1
 80022a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d006      	beq.n	80022be <I2C_MasterRequestWrite+0x2a>
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d003      	beq.n	80022be <I2C_MasterRequestWrite+0x2a>
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022bc:	d108      	bne.n	80022d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	e00b      	b.n	80022e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	2b12      	cmp	r3, #18
 80022d6:	d107      	bne.n	80022e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f91d 	bl	8002534 <I2C_WaitOnFlagUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00d      	beq.n	800231c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800230e:	d103      	bne.n	8002318 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002316:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e035      	b.n	8002388 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002324:	d108      	bne.n	8002338 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002326:	897b      	ldrh	r3, [r7, #10]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002334:	611a      	str	r2, [r3, #16]
 8002336:	e01b      	b.n	8002370 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002338:	897b      	ldrh	r3, [r7, #10]
 800233a:	11db      	asrs	r3, r3, #7
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f003 0306 	and.w	r3, r3, #6
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f063 030f 	orn	r3, r3, #15
 8002348:	b2da      	uxtb	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	490e      	ldr	r1, [pc, #56]	; (8002390 <I2C_MasterRequestWrite+0xfc>)
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f943 	bl	80025e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e010      	b.n	8002388 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002366:	897b      	ldrh	r3, [r7, #10]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	4907      	ldr	r1, [pc, #28]	; (8002394 <I2C_MasterRequestWrite+0x100>)
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 f933 	bl	80025e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	00010008 	.word	0x00010008
 8002394:	00010002 	.word	0x00010002

08002398 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	460b      	mov	r3, r1
 80023a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d006      	beq.n	80023d2 <I2C_MasterRequestRead+0x3a>
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d003      	beq.n	80023d2 <I2C_MasterRequestRead+0x3a>
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023d0:	d108      	bne.n	80023e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	e00b      	b.n	80023fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	2b11      	cmp	r3, #17
 80023ea:	d107      	bne.n	80023fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f893 	bl	8002534 <I2C_WaitOnFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00d      	beq.n	8002430 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002422:	d103      	bne.n	800242c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800242a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e079      	b.n	8002524 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002438:	d108      	bne.n	800244c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800243a:	897b      	ldrh	r3, [r7, #10]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	b2da      	uxtb	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	611a      	str	r2, [r3, #16]
 800244a:	e05f      	b.n	800250c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800244c:	897b      	ldrh	r3, [r7, #10]
 800244e:	11db      	asrs	r3, r3, #7
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f003 0306 	and.w	r3, r3, #6
 8002456:	b2db      	uxtb	r3, r3
 8002458:	f063 030f 	orn	r3, r3, #15
 800245c:	b2da      	uxtb	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4930      	ldr	r1, [pc, #192]	; (800252c <I2C_MasterRequestRead+0x194>)
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f8b9 	bl	80025e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e054      	b.n	8002524 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800247a:	897b      	ldrh	r3, [r7, #10]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	4929      	ldr	r1, [pc, #164]	; (8002530 <I2C_MasterRequestRead+0x198>)
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f8a9 	bl	80025e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e044      	b.n	8002524 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 f831 	bl	8002534 <I2C_WaitOnFlagUntilTimeout>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00d      	beq.n	80024f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e6:	d103      	bne.n	80024f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e017      	b.n	8002524 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80024f4:	897b      	ldrh	r3, [r7, #10]
 80024f6:	11db      	asrs	r3, r3, #7
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	f003 0306 	and.w	r3, r3, #6
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f063 030e 	orn	r3, r3, #14
 8002504:	b2da      	uxtb	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	4907      	ldr	r1, [pc, #28]	; (8002530 <I2C_MasterRequestRead+0x198>)
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 f865 	bl	80025e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	00010008 	.word	0x00010008
 8002530:	00010002 	.word	0x00010002

08002534 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002544:	e025      	b.n	8002592 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d021      	beq.n	8002592 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254e:	f7fe ff1d 	bl	800138c <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d302      	bcc.n	8002564 <I2C_WaitOnFlagUntilTimeout+0x30>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d116      	bne.n	8002592 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2220      	movs	r2, #32
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f043 0220 	orr.w	r2, r3, #32
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e023      	b.n	80025da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	0c1b      	lsrs	r3, r3, #16
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d10d      	bne.n	80025b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	43da      	mvns	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4013      	ands	r3, r2
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	bf0c      	ite	eq
 80025ae:	2301      	moveq	r3, #1
 80025b0:	2300      	movne	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	e00c      	b.n	80025d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	43da      	mvns	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4013      	ands	r3, r2
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	bf0c      	ite	eq
 80025ca:	2301      	moveq	r3, #1
 80025cc:	2300      	movne	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d0b6      	beq.n	8002546 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025f0:	e051      	b.n	8002696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002600:	d123      	bne.n	800264a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002610:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800261a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2220      	movs	r2, #32
 8002626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f043 0204 	orr.w	r2, r3, #4
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e046      	b.n	80026d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d021      	beq.n	8002696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002652:	f7fe fe9b 	bl	800138c <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	429a      	cmp	r2, r3
 8002660:	d302      	bcc.n	8002668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d116      	bne.n	8002696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2220      	movs	r2, #32
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f043 0220 	orr.w	r2, r3, #32
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e020      	b.n	80026d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	d10c      	bne.n	80026ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	43da      	mvns	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4013      	ands	r3, r2
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	bf14      	ite	ne
 80026b2:	2301      	movne	r3, #1
 80026b4:	2300      	moveq	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	e00b      	b.n	80026d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	43da      	mvns	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	4013      	ands	r3, r2
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bf14      	ite	ne
 80026cc:	2301      	movne	r3, #1
 80026ce:	2300      	moveq	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d18d      	bne.n	80025f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026ec:	e02d      	b.n	800274a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 f8ce 	bl	8002890 <I2C_IsAcknowledgeFailed>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e02d      	b.n	800275a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d021      	beq.n	800274a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002706:	f7fe fe41 	bl	800138c <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	429a      	cmp	r2, r3
 8002714:	d302      	bcc.n	800271c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d116      	bne.n	800274a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f043 0220 	orr.w	r2, r3, #32
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e007      	b.n	800275a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002754:	2b80      	cmp	r3, #128	; 0x80
 8002756:	d1ca      	bne.n	80026ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800276e:	e02d      	b.n	80027cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 f88d 	bl	8002890 <I2C_IsAcknowledgeFailed>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e02d      	b.n	80027dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002786:	d021      	beq.n	80027cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002788:	f7fe fe00 	bl	800138c <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	429a      	cmp	r2, r3
 8002796:	d302      	bcc.n	800279e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d116      	bne.n	80027cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	f043 0220 	orr.w	r2, r3, #32
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e007      	b.n	80027dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d1ca      	bne.n	8002770 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027f0:	e042      	b.n	8002878 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b10      	cmp	r3, #16
 80027fe:	d119      	bne.n	8002834 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0210 	mvn.w	r2, #16
 8002808:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e029      	b.n	8002888 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002834:	f7fe fdaa 	bl	800138c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	429a      	cmp	r2, r3
 8002842:	d302      	bcc.n	800284a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d116      	bne.n	8002878 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f043 0220 	orr.w	r2, r3, #32
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e007      	b.n	8002888 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002882:	2b40      	cmp	r3, #64	; 0x40
 8002884:	d1b5      	bne.n	80027f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a6:	d11b      	bne.n	80028e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	f043 0204 	orr.w	r2, r3, #4
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f0:	b08f      	sub	sp, #60	; 0x3c
 80028f2:	af0a      	add	r7, sp, #40	; 0x28
 80028f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e10f      	b.n	8002b20 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f004 ffda 	bl	80078d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2203      	movs	r2, #3
 8002924:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d102      	bne.n	800293a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f001 fecd 	bl	80046de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	687e      	ldr	r6, [r7, #4]
 800294c:	466d      	mov	r5, sp
 800294e:	f106 0410 	add.w	r4, r6, #16
 8002952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800295a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800295e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002962:	1d33      	adds	r3, r6, #4
 8002964:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002966:	6838      	ldr	r0, [r7, #0]
 8002968:	f001 fda4 	bl	80044b4 <USB_CoreInit>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2202      	movs	r2, #2
 8002976:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0d0      	b.n	8002b20 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f001 febb 	bl	8004700 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
 800298e:	e04a      	b.n	8002a26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	333d      	adds	r3, #61	; 0x3d
 80029a0:	2201      	movs	r2, #1
 80029a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	333c      	adds	r3, #60	; 0x3c
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	b298      	uxth	r0, r3
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	3342      	adds	r3, #66	; 0x42
 80029cc:	4602      	mov	r2, r0
 80029ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029d0:	7bfa      	ldrb	r2, [r7, #15]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	333f      	adds	r3, #63	; 0x3f
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029e4:	7bfa      	ldrb	r2, [r7, #15]
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	3344      	adds	r3, #68	; 0x44
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	3348      	adds	r3, #72	; 0x48
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a0c:	7bfa      	ldrb	r2, [r7, #15]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	3350      	adds	r3, #80	; 0x50
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	3301      	adds	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d3af      	bcc.n	8002990 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a30:	2300      	movs	r3, #0
 8002a32:	73fb      	strb	r3, [r7, #15]
 8002a34:	e044      	b.n	8002ac0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	1a9b      	subs	r3, r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	3301      	adds	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	7bfa      	ldrb	r2, [r7, #15]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d3b5      	bcc.n	8002a36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	687e      	ldr	r6, [r7, #4]
 8002ad2:	466d      	mov	r5, sp
 8002ad4:	f106 0410 	add.w	r4, r6, #16
 8002ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ade:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ae0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ae4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ae8:	1d33      	adds	r3, r6, #4
 8002aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aec:	6838      	ldr	r0, [r7, #0]
 8002aee:	f001 fe53 	bl	8004798 <USB_DevInit>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e00d      	b.n	8002b20 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f002 fecf 	bl	80058bc <USB_DevDisconnect>

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b28 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_PCD_Start+0x1c>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e020      	b.n	8002b86 <HAL_PCD_Start+0x5e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d109      	bne.n	8002b68 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d005      	beq.n	8002b68 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f001 fda5 	bl	80046bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f002 fe7f 	bl	800587a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b8e:	b590      	push	{r4, r7, lr}
 8002b90:	b08d      	sub	sp, #52	; 0x34
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f002 ff3d 	bl	8005a24 <USB_GetMode>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f040 839d 	bne.w	80032ec <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f002 fea1 	bl	80058fe <USB_ReadInterrupts>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 8393 	beq.w	80032ea <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f002 fe98 	bl	80058fe <USB_ReadInterrupts>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d107      	bne.n	8002be8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f002 0202 	and.w	r2, r2, #2
 8002be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f002 fe86 	bl	80058fe <USB_ReadInterrupts>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b10      	cmp	r3, #16
 8002bfa:	d161      	bne.n	8002cc0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0210 	bic.w	r2, r2, #16
 8002c0a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f003 020f 	and.w	r2, r3, #15
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4413      	add	r3, r2
 8002c28:	3304      	adds	r3, #4
 8002c2a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	0c5b      	lsrs	r3, r3, #17
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d124      	bne.n	8002c82 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d035      	beq.n	8002cb0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	091b      	lsrs	r3, r3, #4
 8002c4c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	6a38      	ldr	r0, [r7, #32]
 8002c58:	f002 fcbd 	bl	80055d6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c68:	441a      	add	r2, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c7a:	441a      	add	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	619a      	str	r2, [r3, #24]
 8002c80:	e016      	b.n	8002cb0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	0c5b      	lsrs	r3, r3, #17
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	2b06      	cmp	r3, #6
 8002c8c:	d110      	bne.n	8002cb0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c94:	2208      	movs	r2, #8
 8002c96:	4619      	mov	r1, r3
 8002c98:	6a38      	ldr	r0, [r7, #32]
 8002c9a:	f002 fc9c 	bl	80055d6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002caa:	441a      	add	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0210 	orr.w	r2, r2, #16
 8002cbe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f002 fe1a 	bl	80058fe <USB_ReadInterrupts>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cd4:	d16e      	bne.n	8002db4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f002 fe20 	bl	8005924 <USB_ReadDevAllOutEpInterrupt>
 8002ce4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002ce6:	e062      	b.n	8002dae <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d057      	beq.n	8002da2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f002 fe45 	bl	800598c <USB_ReadDevOutEPInterrupt>
 8002d02:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00c      	beq.n	8002d28 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fdb0 	bl	8003888 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00c      	beq.n	8002d4c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2308      	movs	r3, #8
 8002d42:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 feaa 	bl	8003aa0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d008      	beq.n	8002d68 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d62:	461a      	mov	r2, r3
 8002d64:	2310      	movs	r3, #16
 8002d66:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f003 0320 	and.w	r3, r3, #32
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d008      	beq.n	8002d84 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d7e:	461a      	mov	r2, r3
 8002d80:	2320      	movs	r3, #32
 8002d82:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d009      	beq.n	8002da2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002da0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	3301      	adds	r3, #1
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002daa:	085b      	lsrs	r3, r3, #1
 8002dac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d199      	bne.n	8002ce8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f002 fda0 	bl	80058fe <USB_ReadInterrupts>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dc8:	f040 80c0 	bne.w	8002f4c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f002 fdc1 	bl	8005958 <USB_ReadDevAllInEpInterrupt>
 8002dd6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002ddc:	e0b2      	b.n	8002f44 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80a7 	beq.w	8002f38 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f002 fde7 	bl	80059c8 <USB_ReadDevInEPInterrupt>
 8002dfa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d057      	beq.n	8002eb6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	69f9      	ldr	r1, [r7, #28]
 8002e22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e26:	4013      	ands	r3, r2
 8002e28:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e36:	461a      	mov	r2, r3
 8002e38:	2301      	movs	r3, #1
 8002e3a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d132      	bne.n	8002eaa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	3348      	adds	r3, #72	; 0x48
 8002e54:	6819      	ldr	r1, [r3, #0]
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	1a9b      	subs	r3, r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4403      	add	r3, r0
 8002e64:	3344      	adds	r3, #68	; 0x44
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4419      	add	r1, r3
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4403      	add	r3, r0
 8002e78:	3348      	adds	r3, #72	; 0x48
 8002e7a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d113      	bne.n	8002eaa <HAL_PCD_IRQHandler+0x31c>
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	3350      	adds	r3, #80	; 0x50
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d108      	bne.n	8002eaa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	f002 fdef 	bl	8005a88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f004 fd9e 	bl	80079f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2308      	movs	r3, #8
 8002ed0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2310      	movs	r3, #16
 8002eec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f04:	461a      	mov	r2, r3
 8002f06:	2340      	movs	r3, #64	; 0x40
 8002f08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f20:	461a      	mov	r2, r3
 8002f22:	2302      	movs	r3, #2
 8002f24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fc1b 	bl	800376e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	085b      	lsrs	r3, r3, #1
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f47f af49 	bne.w	8002dde <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f002 fcd4 	bl	80058fe <USB_ReadInterrupts>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f60:	d122      	bne.n	8002fa8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d108      	bne.n	8002f92 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f88:	2100      	movs	r1, #0
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fe26 	bl	8003bdc <HAL_PCDEx_LPM_Callback>
 8002f90:	e002      	b.n	8002f98 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f004 fda4 	bl	8007ae0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002fa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f002 fca6 	bl	80058fe <USB_ReadInterrupts>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fbc:	d112      	bne.n	8002fe4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d102      	bne.n	8002fd4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f004 fd60 	bl	8007a94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002fe2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f002 fc88 	bl	80058fe <USB_ReadInterrupts>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff8:	f040 80c7 	bne.w	800318a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	69fa      	ldr	r2, [r7, #28]
 8003006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800300a:	f023 0301 	bic.w	r3, r3, #1
 800300e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2110      	movs	r1, #16
 8003016:	4618      	mov	r0, r3
 8003018:	f001 fd22 	bl	8004a60 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800301c:	2300      	movs	r3, #0
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003020:	e056      	b.n	80030d0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	4413      	add	r3, r2
 800302a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800302e:	461a      	mov	r2, r3
 8003030:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003034:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	4413      	add	r3, r2
 800303e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003046:	0151      	lsls	r1, r2, #5
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	440a      	add	r2, r1
 800304c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003050:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003054:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003066:	0151      	lsls	r1, r2, #5
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	440a      	add	r2, r1
 800306c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003070:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003074:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003082:	461a      	mov	r2, r3
 8003084:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003088:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800308a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	4413      	add	r3, r2
 8003092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800309a:	0151      	lsls	r1, r2, #5
 800309c:	69fa      	ldr	r2, [r7, #28]
 800309e:	440a      	add	r2, r1
 80030a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80030aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ba:	0151      	lsls	r1, r2, #5
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	440a      	add	r2, r1
 80030c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030cc:	3301      	adds	r3, #1
 80030ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d3a3      	bcc.n	8003022 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030e8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80030ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d016      	beq.n	8003124 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003106:	f043 030b 	orr.w	r3, r3, #11
 800310a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311c:	f043 030b 	orr.w	r3, r3, #11
 8003120:	6453      	str	r3, [r2, #68]	; 0x44
 8003122:	e015      	b.n	8003150 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	69fa      	ldr	r2, [r7, #28]
 800312e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003132:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003136:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800313a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	69fa      	ldr	r2, [r7, #28]
 8003146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800314a:	f043 030b 	orr.w	r3, r3, #11
 800314e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800315e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003162:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003174:	461a      	mov	r2, r3
 8003176:	f002 fc87 	bl	8005a88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003188:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f002 fbb5 	bl	80058fe <USB_ReadInterrupts>
 8003194:	4603      	mov	r3, r0
 8003196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800319a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800319e:	d124      	bne.n	80031ea <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f002 fc4b 	bl	8005a40 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f001 fcb3 	bl	8004b1a <USB_GetDevSpeed>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681c      	ldr	r4, [r3, #0]
 80031c0:	f001 f958 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 80031c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	461a      	mov	r2, r3
 80031ce:	4620      	mov	r0, r4
 80031d0:	f001 f9d2 	bl	8004578 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f004 fc34 	bl	8007a42 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80031e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f002 fb85 	bl	80058fe <USB_ReadInterrupts>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d10a      	bne.n	8003214 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f004 fc11 	bl	8007a26 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f002 0208 	and.w	r2, r2, #8
 8003212:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f002 fb70 	bl	80058fe <USB_ReadInterrupts>
 800321e:	4603      	mov	r3, r0
 8003220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003228:	d10f      	bne.n	800324a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	b2db      	uxtb	r3, r3
 8003232:	4619      	mov	r1, r3
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f004 fc73 	bl	8007b20 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695a      	ldr	r2, [r3, #20]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003248:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f002 fb55 	bl	80058fe <USB_ReadInterrupts>
 8003254:	4603      	mov	r3, r0
 8003256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800325e:	d10f      	bne.n	8003280 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	b2db      	uxtb	r3, r3
 8003268:	4619      	mov	r1, r3
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f004 fc46 	bl	8007afc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800327e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f002 fb3a 	bl	80058fe <USB_ReadInterrupts>
 800328a:	4603      	mov	r3, r0
 800328c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003294:	d10a      	bne.n	80032ac <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f004 fc54 	bl	8007b44 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80032aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f002 fb24 	bl	80058fe <USB_ReadInterrupts>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d115      	bne.n	80032ec <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f004 fc44 	bl	8007b60 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6859      	ldr	r1, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	e000      	b.n	80032ec <HAL_PCD_IRQHandler+0x75e>
      return;
 80032ea:	bf00      	nop
    }
  }
}
 80032ec:	3734      	adds	r7, #52	; 0x34
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd90      	pop	{r4, r7, pc}

080032f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_PCD_SetAddress+0x1a>
 8003308:	2302      	movs	r3, #2
 800330a:	e013      	b.n	8003334 <HAL_PCD_SetAddress+0x42>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f002 fa82 	bl	800582e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	4608      	mov	r0, r1
 8003346:	4611      	mov	r1, r2
 8003348:	461a      	mov	r2, r3
 800334a:	4603      	mov	r3, r0
 800334c:	70fb      	strb	r3, [r7, #3]
 800334e:	460b      	mov	r3, r1
 8003350:	803b      	strh	r3, [r7, #0]
 8003352:	4613      	mov	r3, r2
 8003354:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800335a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800335e:	2b00      	cmp	r3, #0
 8003360:	da0f      	bge.n	8003382 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	f003 020f 	and.w	r2, r3, #15
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	3338      	adds	r3, #56	; 0x38
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	3304      	adds	r3, #4
 8003378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	705a      	strb	r2, [r3, #1]
 8003380:	e00f      	b.n	80033a2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	f003 020f 	and.w	r2, r3, #15
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	3304      	adds	r3, #4
 800339a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80033a2:	78fb      	ldrb	r3, [r7, #3]
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80033ae:	883a      	ldrh	r2, [r7, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	78ba      	ldrb	r2, [r7, #2]
 80033b8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	785b      	ldrb	r3, [r3, #1]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033cc:	78bb      	ldrb	r3, [r7, #2]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d102      	bne.n	80033d8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_PCD_EP_Open+0xaa>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e00e      	b.n	8003404 <HAL_PCD_EP_Open+0xc8>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68f9      	ldr	r1, [r7, #12]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f001 fbb5 	bl	8004b64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003402:	7afb      	ldrb	r3, [r7, #11]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003418:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800341c:	2b00      	cmp	r3, #0
 800341e:	da0f      	bge.n	8003440 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	f003 020f 	and.w	r2, r3, #15
 8003426:	4613      	mov	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	3338      	adds	r3, #56	; 0x38
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	4413      	add	r3, r2
 8003434:	3304      	adds	r3, #4
 8003436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	705a      	strb	r2, [r3, #1]
 800343e:	e00f      	b.n	8003460 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	f003 020f 	and.w	r2, r3, #15
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	3304      	adds	r3, #4
 8003458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	b2da      	uxtb	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_PCD_EP_Close+0x6e>
 8003476:	2302      	movs	r3, #2
 8003478:	e00e      	b.n	8003498 <HAL_PCD_EP_Close+0x8c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68f9      	ldr	r1, [r7, #12]
 8003488:	4618      	mov	r0, r3
 800348a:	f001 fbf3 	bl	8004c74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	460b      	mov	r3, r1
 80034ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034b0:	7afb      	ldrb	r3, [r7, #11]
 80034b2:	f003 020f 	and.w	r2, r3, #15
 80034b6:	4613      	mov	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4413      	add	r3, r2
 80034c6:	3304      	adds	r3, #4
 80034c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2200      	movs	r2, #0
 80034da:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2200      	movs	r2, #0
 80034e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034e2:	7afb      	ldrb	r3, [r7, #11]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d102      	bne.n	80034fc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034fc:	7afb      	ldrb	r3, [r7, #11]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	6979      	ldr	r1, [r7, #20]
 8003514:	f001 fece 	bl	80052b4 <USB_EP0StartXfer>
 8003518:	e008      	b.n	800352c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	6979      	ldr	r1, [r7, #20]
 8003528:	f001 fc80 	bl	8004e2c <USB_EPStartXfer>
  }

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	460b      	mov	r3, r1
 8003540:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	f003 020f 	and.w	r2, r3, #15
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003558:	681b      	ldr	r3, [r3, #0]
}
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b086      	sub	sp, #24
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	460b      	mov	r3, r1
 8003574:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003576:	7afb      	ldrb	r3, [r7, #11]
 8003578:	f003 020f 	and.w	r2, r3, #15
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	3338      	adds	r3, #56	; 0x38
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4413      	add	r3, r2
 800358a:	3304      	adds	r3, #4
 800358c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2200      	movs	r2, #0
 800359e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2201      	movs	r2, #1
 80035a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035a6:	7afb      	ldrb	r3, [r7, #11]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d102      	bne.n	80035c0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035c0:	7afb      	ldrb	r3, [r7, #11]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	6979      	ldr	r1, [r7, #20]
 80035d8:	f001 fe6c 	bl	80052b4 <USB_EP0StartXfer>
 80035dc:	e008      	b.n	80035f0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	461a      	mov	r2, r3
 80035ea:	6979      	ldr	r1, [r7, #20]
 80035ec:	f001 fc1e 	bl	8004e2c <USB_EPStartXfer>
  }

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	f003 020f 	and.w	r2, r3, #15
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	429a      	cmp	r2, r3
 8003612:	d901      	bls.n	8003618 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e050      	b.n	80036ba <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800361c:	2b00      	cmp	r3, #0
 800361e:	da0f      	bge.n	8003640 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	f003 020f 	and.w	r2, r3, #15
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	3338      	adds	r3, #56	; 0x38
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	4413      	add	r3, r2
 8003634:	3304      	adds	r3, #4
 8003636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	705a      	strb	r2, [r3, #1]
 800363e:	e00d      	b.n	800365c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	4613      	mov	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	4413      	add	r3, r2
 8003652:	3304      	adds	r3, #4
 8003654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	b2da      	uxtb	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_PCD_EP_SetStall+0x82>
 8003678:	2302      	movs	r3, #2
 800367a:	e01e      	b.n	80036ba <HAL_PCD_EP_SetStall+0xc0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68f9      	ldr	r1, [r7, #12]
 800368a:	4618      	mov	r0, r3
 800368c:	f001 fffb 	bl	8005686 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10a      	bne.n	80036b0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	b2d9      	uxtb	r1, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036aa:	461a      	mov	r2, r3
 80036ac:	f002 f9ec 	bl	8005a88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	460b      	mov	r3, r1
 80036cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	f003 020f 	and.w	r2, r3, #15
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d901      	bls.n	80036e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e042      	b.n	8003766 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	da0f      	bge.n	8003708 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	f003 020f 	and.w	r2, r3, #15
 80036ee:	4613      	mov	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	3338      	adds	r3, #56	; 0x38
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	4413      	add	r3, r2
 80036fc:	3304      	adds	r3, #4
 80036fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	705a      	strb	r2, [r3, #1]
 8003706:	e00f      	b.n	8003728 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	f003 020f 	and.w	r2, r3, #15
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	4413      	add	r3, r2
 800371e:	3304      	adds	r3, #4
 8003720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800372e:	78fb      	ldrb	r3, [r7, #3]
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	b2da      	uxtb	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_PCD_EP_ClrStall+0x86>
 8003744:	2302      	movs	r3, #2
 8003746:	e00e      	b.n	8003766 <HAL_PCD_EP_ClrStall+0xa4>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68f9      	ldr	r1, [r7, #12]
 8003756:	4618      	mov	r0, r3
 8003758:	f002 f803 	bl	8005762 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b08a      	sub	sp, #40	; 0x28
 8003772:	af02      	add	r7, sp, #8
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	4613      	mov	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	3338      	adds	r3, #56	; 0x38
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	4413      	add	r3, r2
 8003792:	3304      	adds	r3, #4
 8003794:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d901      	bls.n	80037a6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e06c      	b.n	8003880 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d902      	bls.n	80037c2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	3303      	adds	r3, #3
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037ca:	e02b      	b.n	8003824 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d902      	bls.n	80037e8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	3303      	adds	r3, #3
 80037ec:	089b      	lsrs	r3, r3, #2
 80037ee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	68d9      	ldr	r1, [r3, #12]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003800:	b2db      	uxtb	r3, r3
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	4603      	mov	r3, r0
 8003806:	6978      	ldr	r0, [r7, #20]
 8003808:	f001 fea7 	bl	800555a <USB_WritePacket>

    ep->xfer_buff  += len;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	441a      	add	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	699a      	ldr	r2, [r3, #24]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	441a      	add	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	b29b      	uxth	r3, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	429a      	cmp	r2, r3
 8003838:	d809      	bhi.n	800384e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003842:	429a      	cmp	r2, r3
 8003844:	d203      	bcs.n	800384e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1be      	bne.n	80037cc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	429a      	cmp	r2, r3
 8003858:	d811      	bhi.n	800387e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	f003 030f 	and.w	r3, r3, #15
 8003860:	2201      	movs	r2, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	43db      	mvns	r3, r3
 8003874:	6939      	ldr	r1, [r7, #16]
 8003876:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800387a:	4013      	ands	r3, r2
 800387c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3720      	adds	r7, #32
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	333c      	adds	r3, #60	; 0x3c
 80038a0:	3304      	adds	r3, #4
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	f040 80a0 	bne.w	8003a00 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d015      	beq.n	80038f6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4a72      	ldr	r2, [pc, #456]	; (8003a98 <PCD_EP_OutXfrComplete_int+0x210>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	f240 80dd 	bls.w	8003a8e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 80d7 	beq.w	8003a8e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ec:	461a      	mov	r2, r3
 80038ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038f2:	6093      	str	r3, [r2, #8]
 80038f4:	e0cb      	b.n	8003a8e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d009      	beq.n	8003914 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390c:	461a      	mov	r2, r3
 800390e:	2320      	movs	r3, #32
 8003910:	6093      	str	r3, [r2, #8]
 8003912:	e0bc      	b.n	8003a8e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800391a:	2b00      	cmp	r3, #0
 800391c:	f040 80b7 	bne.w	8003a8e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4a5d      	ldr	r2, [pc, #372]	; (8003a98 <PCD_EP_OutXfrComplete_int+0x210>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d90f      	bls.n	8003948 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393e:	461a      	mov	r2, r3
 8003940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003944:	6093      	str	r3, [r2, #8]
 8003946:	e0a2      	b.n	8003a8e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800395a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	0159      	lsls	r1, r3, #5
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	440b      	add	r3, r1
 8003964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800396e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4403      	add	r3, r0
 800397e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003982:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003996:	6819      	ldr	r1, [r3, #0]
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4403      	add	r3, r0
 80039a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4419      	add	r1, r3
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	4613      	mov	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4403      	add	r3, r0
 80039bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039c0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d114      	bne.n	80039f2 <PCD_EP_OutXfrComplete_int+0x16a>
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d108      	bne.n	80039f2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039ea:	461a      	mov	r2, r3
 80039ec:	2101      	movs	r1, #1
 80039ee:	f002 f84b 	bl	8005a88 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	4619      	mov	r1, r3
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f003 ffdf 	bl	80079bc <HAL_PCD_DataOutStageCallback>
 80039fe:	e046      	b.n	8003a8e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a26      	ldr	r2, [pc, #152]	; (8003a9c <PCD_EP_OutXfrComplete_int+0x214>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d124      	bne.n	8003a52 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a24:	6093      	str	r3, [r2, #8]
 8003a26:	e032      	b.n	8003a8e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3e:	461a      	mov	r2, r3
 8003a40:	2320      	movs	r3, #32
 8003a42:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	4619      	mov	r1, r3
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f003 ffb6 	bl	80079bc <HAL_PCD_DataOutStageCallback>
 8003a50:	e01d      	b.n	8003a8e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d114      	bne.n	8003a82 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d108      	bne.n	8003a82 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	f002 f803 	bl	8005a88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	4619      	mov	r1, r3
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f003 ff97 	bl	80079bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	4f54300a 	.word	0x4f54300a
 8003a9c:	4f54310a 	.word	0x4f54310a

08003aa0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	333c      	adds	r3, #60	; 0x3c
 8003ab8:	3304      	adds	r3, #4
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d90e      	bls.n	8003af4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d009      	beq.n	8003af4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aec:	461a      	mov	r2, r3
 8003aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003af2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f003 ff4f 	bl	8007998 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4a0a      	ldr	r2, [pc, #40]	; (8003b28 <PCD_EP_OutSetupPacket_int+0x88>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d90c      	bls.n	8003b1c <PCD_EP_OutSetupPacket_int+0x7c>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d108      	bne.n	8003b1c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b14:	461a      	mov	r2, r3
 8003b16:	2101      	movs	r1, #1
 8003b18:	f001 ffb6 	bl	8005a88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	4f54300a 	.word	0x4f54300a

08003b2c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	70fb      	strb	r3, [r7, #3]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d107      	bne.n	8003b5a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b4a:	883b      	ldrh	r3, [r7, #0]
 8003b4c:	0419      	lsls	r1, r3, #16
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28
 8003b58:	e028      	b.n	8003bac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	0c1b      	lsrs	r3, r3, #16
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	4413      	add	r3, r2
 8003b66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	73fb      	strb	r3, [r7, #15]
 8003b6c:	e00d      	b.n	8003b8a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	3340      	adds	r3, #64	; 0x40
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	0c1b      	lsrs	r3, r3, #16
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	4413      	add	r3, r2
 8003b82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	3301      	adds	r3, #1
 8003b88:	73fb      	strb	r3, [r7, #15]
 8003b8a:	7bfa      	ldrb	r2, [r7, #15]
 8003b8c:	78fb      	ldrb	r3, [r7, #3]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d3ec      	bcc.n	8003b6e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b94:	883b      	ldrh	r3, [r7, #0]
 8003b96:	0418      	lsls	r0, r3, #16
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6819      	ldr	r1, [r3, #0]
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	4302      	orrs	r2, r0
 8003ba4:	3340      	adds	r3, #64	; 0x40
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	887a      	ldrh	r2, [r7, #2]
 8003bcc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e264      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d075      	beq.n	8003cfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c12:	4ba3      	ldr	r3, [pc, #652]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d00c      	beq.n	8003c38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c1e:	4ba0      	ldr	r3, [pc, #640]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d112      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c2a:	4b9d      	ldr	r3, [pc, #628]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c36:	d10b      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c38:	4b99      	ldr	r3, [pc, #612]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d05b      	beq.n	8003cfc <HAL_RCC_OscConfig+0x108>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d157      	bne.n	8003cfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e23f      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c58:	d106      	bne.n	8003c68 <HAL_RCC_OscConfig+0x74>
 8003c5a:	4b91      	ldr	r3, [pc, #580]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a90      	ldr	r2, [pc, #576]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e01d      	b.n	8003ca4 <HAL_RCC_OscConfig+0xb0>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x98>
 8003c72:	4b8b      	ldr	r3, [pc, #556]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a8a      	ldr	r2, [pc, #552]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b88      	ldr	r3, [pc, #544]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a87      	ldr	r2, [pc, #540]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0xb0>
 8003c8c:	4b84      	ldr	r3, [pc, #528]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a83      	ldr	r2, [pc, #524]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b81      	ldr	r3, [pc, #516]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a80      	ldr	r2, [pc, #512]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fd fb6e 	bl	800138c <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fd fb6a 	bl	800138c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	; 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e204      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b76      	ldr	r3, [pc, #472]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xc0>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fd fb5a 	bl	800138c <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7fd fb56 	bl	800138c <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e1f0      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cee:	4b6c      	ldr	r3, [pc, #432]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0xe8>
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d063      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d0a:	4b65      	ldr	r3, [pc, #404]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d16:	4b62      	ldr	r3, [pc, #392]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d11c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d22:	4b5f      	ldr	r3, [pc, #380]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d116      	bne.n	8003d5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	4b5c      	ldr	r3, [pc, #368]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_RCC_OscConfig+0x152>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e1c4      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d46:	4b56      	ldr	r3, [pc, #344]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4952      	ldr	r1, [pc, #328]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5a:	e03a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d020      	beq.n	8003da6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d64:	4b4f      	ldr	r3, [pc, #316]	; (8003ea4 <HAL_RCC_OscConfig+0x2b0>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6a:	f7fd fb0f 	bl	800138c <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d72:	f7fd fb0b 	bl	800138c <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e1a5      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d84:	4b46      	ldr	r3, [pc, #280]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d90:	4b43      	ldr	r3, [pc, #268]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4940      	ldr	r1, [pc, #256]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]
 8003da4:	e015      	b.n	8003dd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003da6:	4b3f      	ldr	r3, [pc, #252]	; (8003ea4 <HAL_RCC_OscConfig+0x2b0>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fd faee 	bl	800138c <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db4:	f7fd faea 	bl	800138c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e184      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc6:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d030      	beq.n	8003e40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d016      	beq.n	8003e14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de6:	4b30      	ldr	r3, [pc, #192]	; (8003ea8 <HAL_RCC_OscConfig+0x2b4>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dec:	f7fd face 	bl	800138c <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df4:	f7fd faca 	bl	800138c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e164      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e06:	4b26      	ldr	r3, [pc, #152]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0x200>
 8003e12:	e015      	b.n	8003e40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e14:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <HAL_RCC_OscConfig+0x2b4>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1a:	f7fd fab7 	bl	800138c <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e22:	f7fd fab3 	bl	800138c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e14d      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e34:	4b1a      	ldr	r3, [pc, #104]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1f0      	bne.n	8003e22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80a0 	beq.w	8003f8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e52:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10f      	bne.n	8003e7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7e:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <HAL_RCC_OscConfig+0x2b8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d121      	bne.n	8003ece <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e8a:	4b08      	ldr	r3, [pc, #32]	; (8003eac <HAL_RCC_OscConfig+0x2b8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a07      	ldr	r2, [pc, #28]	; (8003eac <HAL_RCC_OscConfig+0x2b8>)
 8003e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e96:	f7fd fa79 	bl	800138c <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9c:	e011      	b.n	8003ec2 <HAL_RCC_OscConfig+0x2ce>
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	42470000 	.word	0x42470000
 8003ea8:	42470e80 	.word	0x42470e80
 8003eac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb0:	f7fd fa6c 	bl	800138c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e106      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec2:	4b85      	ldr	r3, [pc, #532]	; (80040d8 <HAL_RCC_OscConfig+0x4e4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d106      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x2f0>
 8003ed6:	4b81      	ldr	r3, [pc, #516]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	4a80      	ldr	r2, [pc, #512]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee2:	e01c      	b.n	8003f1e <HAL_RCC_OscConfig+0x32a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b05      	cmp	r3, #5
 8003eea:	d10c      	bne.n	8003f06 <HAL_RCC_OscConfig+0x312>
 8003eec:	4b7b      	ldr	r3, [pc, #492]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	4a7a      	ldr	r2, [pc, #488]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003ef2:	f043 0304 	orr.w	r3, r3, #4
 8003ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef8:	4b78      	ldr	r3, [pc, #480]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	4a77      	ldr	r2, [pc, #476]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	6713      	str	r3, [r2, #112]	; 0x70
 8003f04:	e00b      	b.n	8003f1e <HAL_RCC_OscConfig+0x32a>
 8003f06:	4b75      	ldr	r3, [pc, #468]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	4a74      	ldr	r2, [pc, #464]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	6713      	str	r3, [r2, #112]	; 0x70
 8003f12:	4b72      	ldr	r3, [pc, #456]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f16:	4a71      	ldr	r2, [pc, #452]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003f18:	f023 0304 	bic.w	r3, r3, #4
 8003f1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d015      	beq.n	8003f52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f26:	f7fd fa31 	bl	800138c <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2e:	f7fd fa2d 	bl	800138c <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e0c5      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f44:	4b65      	ldr	r3, [pc, #404]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0ee      	beq.n	8003f2e <HAL_RCC_OscConfig+0x33a>
 8003f50:	e014      	b.n	8003f7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f52:	f7fd fa1b 	bl	800138c <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f58:	e00a      	b.n	8003f70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f5a:	f7fd fa17 	bl	800138c <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e0af      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f70:	4b5a      	ldr	r3, [pc, #360]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1ee      	bne.n	8003f5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d105      	bne.n	8003f8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f82:	4b56      	ldr	r3, [pc, #344]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	4a55      	ldr	r2, [pc, #340]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 809b 	beq.w	80040ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f98:	4b50      	ldr	r3, [pc, #320]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 030c 	and.w	r3, r3, #12
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d05c      	beq.n	800405e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d141      	bne.n	8004030 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fac:	4b4c      	ldr	r3, [pc, #304]	; (80040e0 <HAL_RCC_OscConfig+0x4ec>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb2:	f7fd f9eb 	bl	800138c <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fba:	f7fd f9e7 	bl	800138c <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e081      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fcc:	4b43      	ldr	r3, [pc, #268]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f0      	bne.n	8003fba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69da      	ldr	r2, [r3, #28]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	019b      	lsls	r3, r3, #6
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	041b      	lsls	r3, r3, #16
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	061b      	lsls	r3, r3, #24
 8003ffc:	4937      	ldr	r1, [pc, #220]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004002:	4b37      	ldr	r3, [pc, #220]	; (80040e0 <HAL_RCC_OscConfig+0x4ec>)
 8004004:	2201      	movs	r2, #1
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fd f9c0 	bl	800138c <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004010:	f7fd f9bc 	bl	800138c <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e056      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004022:	4b2e      	ldr	r3, [pc, #184]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0x41c>
 800402e:	e04e      	b.n	80040ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004030:	4b2b      	ldr	r3, [pc, #172]	; (80040e0 <HAL_RCC_OscConfig+0x4ec>)
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004036:	f7fd f9a9 	bl	800138c <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800403e:	f7fd f9a5 	bl	800138c <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e03f      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004050:	4b22      	ldr	r3, [pc, #136]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1f0      	bne.n	800403e <HAL_RCC_OscConfig+0x44a>
 800405c:	e037      	b.n	80040ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e032      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800406a:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d028      	beq.n	80040ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004082:	429a      	cmp	r2, r3
 8004084:	d121      	bne.n	80040ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004090:	429a      	cmp	r2, r3
 8004092:	d11a      	bne.n	80040ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800409a:	4013      	ands	r3, r2
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d111      	bne.n	80040ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	085b      	lsrs	r3, r3, #1
 80040b2:	3b01      	subs	r3, #1
 80040b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d107      	bne.n	80040ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d001      	beq.n	80040ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40007000 	.word	0x40007000
 80040dc:	40023800 	.word	0x40023800
 80040e0:	42470060 	.word	0x42470060

080040e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0cc      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f8:	4b68      	ldr	r3, [pc, #416]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d90c      	bls.n	8004120 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b65      	ldr	r3, [pc, #404]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410e:	4b63      	ldr	r3, [pc, #396]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0b8      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d020      	beq.n	800416e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004138:	4b59      	ldr	r3, [pc, #356]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a58      	ldr	r2, [pc, #352]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004142:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004150:	4b53      	ldr	r3, [pc, #332]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4a52      	ldr	r2, [pc, #328]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800415a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800415c:	4b50      	ldr	r3, [pc, #320]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	494d      	ldr	r1, [pc, #308]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	4313      	orrs	r3, r2
 800416c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d044      	beq.n	8004204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d107      	bne.n	8004192 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004182:	4b47      	ldr	r3, [pc, #284]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d119      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e07f      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d003      	beq.n	80041a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d107      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a2:	4b3f      	ldr	r3, [pc, #252]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e06f      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b2:	4b3b      	ldr	r3, [pc, #236]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e067      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c2:	4b37      	ldr	r3, [pc, #220]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f023 0203 	bic.w	r2, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	4934      	ldr	r1, [pc, #208]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d4:	f7fd f8da 	bl	800138c <HAL_GetTick>
 80041d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	e00a      	b.n	80041f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041dc:	f7fd f8d6 	bl	800138c <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e04f      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f2:	4b2b      	ldr	r3, [pc, #172]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 020c 	and.w	r2, r3, #12
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	429a      	cmp	r2, r3
 8004202:	d1eb      	bne.n	80041dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004204:	4b25      	ldr	r3, [pc, #148]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d20c      	bcs.n	800422c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004212:	4b22      	ldr	r3, [pc, #136]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421a:	4b20      	ldr	r3, [pc, #128]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d001      	beq.n	800422c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e032      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004238:	4b19      	ldr	r3, [pc, #100]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4916      	ldr	r1, [pc, #88]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004256:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	490e      	ldr	r1, [pc, #56]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	4313      	orrs	r3, r2
 8004268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800426a:	f000 f821 	bl	80042b0 <HAL_RCC_GetSysClockFreq>
 800426e:	4602      	mov	r2, r0
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	490a      	ldr	r1, [pc, #40]	; (80042a4 <HAL_RCC_ClockConfig+0x1c0>)
 800427c:	5ccb      	ldrb	r3, [r1, r3]
 800427e:	fa22 f303 	lsr.w	r3, r2, r3
 8004282:	4a09      	ldr	r2, [pc, #36]	; (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004286:	4b09      	ldr	r3, [pc, #36]	; (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fd f83a 	bl	8001304 <HAL_InitTick>

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40023c00 	.word	0x40023c00
 80042a0:	40023800 	.word	0x40023800
 80042a4:	08007fd0 	.word	0x08007fd0
 80042a8:	20000000 	.word	0x20000000
 80042ac:	20000004 	.word	0x20000004

080042b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042b4:	b084      	sub	sp, #16
 80042b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	607b      	str	r3, [r7, #4]
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	2300      	movs	r3, #0
 80042c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042c8:	4b67      	ldr	r3, [pc, #412]	; (8004468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 030c 	and.w	r3, r3, #12
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d00d      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x40>
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	f200 80bd 	bhi.w	8004454 <HAL_RCC_GetSysClockFreq+0x1a4>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x34>
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d003      	beq.n	80042ea <HAL_RCC_GetSysClockFreq+0x3a>
 80042e2:	e0b7      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042e4:	4b61      	ldr	r3, [pc, #388]	; (800446c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042e6:	60bb      	str	r3, [r7, #8]
       break;
 80042e8:	e0b7      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ea:	4b61      	ldr	r3, [pc, #388]	; (8004470 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80042ec:	60bb      	str	r3, [r7, #8]
      break;
 80042ee:	e0b4      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f0:	4b5d      	ldr	r3, [pc, #372]	; (8004468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042fa:	4b5b      	ldr	r3, [pc, #364]	; (8004468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d04d      	beq.n	80043a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004306:	4b58      	ldr	r3, [pc, #352]	; (8004468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	099b      	lsrs	r3, r3, #6
 800430c:	461a      	mov	r2, r3
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004316:	f04f 0100 	mov.w	r1, #0
 800431a:	ea02 0800 	and.w	r8, r2, r0
 800431e:	ea03 0901 	and.w	r9, r3, r1
 8004322:	4640      	mov	r0, r8
 8004324:	4649      	mov	r1, r9
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	014b      	lsls	r3, r1, #5
 8004330:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004334:	0142      	lsls	r2, r0, #5
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	ebb0 0008 	subs.w	r0, r0, r8
 800433e:	eb61 0109 	sbc.w	r1, r1, r9
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	018b      	lsls	r3, r1, #6
 800434c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004350:	0182      	lsls	r2, r0, #6
 8004352:	1a12      	subs	r2, r2, r0
 8004354:	eb63 0301 	sbc.w	r3, r3, r1
 8004358:	f04f 0000 	mov.w	r0, #0
 800435c:	f04f 0100 	mov.w	r1, #0
 8004360:	00d9      	lsls	r1, r3, #3
 8004362:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004366:	00d0      	lsls	r0, r2, #3
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	eb12 0208 	adds.w	r2, r2, r8
 8004370:	eb43 0309 	adc.w	r3, r3, r9
 8004374:	f04f 0000 	mov.w	r0, #0
 8004378:	f04f 0100 	mov.w	r1, #0
 800437c:	0259      	lsls	r1, r3, #9
 800437e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004382:	0250      	lsls	r0, r2, #9
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4610      	mov	r0, r2
 800438a:	4619      	mov	r1, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	461a      	mov	r2, r3
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	f7fb ff18 	bl	80001c8 <__aeabi_uldivmod>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4613      	mov	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	e04a      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a2:	4b31      	ldr	r3, [pc, #196]	; (8004468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	099b      	lsrs	r3, r3, #6
 80043a8:	461a      	mov	r2, r3
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043b2:	f04f 0100 	mov.w	r1, #0
 80043b6:	ea02 0400 	and.w	r4, r2, r0
 80043ba:	ea03 0501 	and.w	r5, r3, r1
 80043be:	4620      	mov	r0, r4
 80043c0:	4629      	mov	r1, r5
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	014b      	lsls	r3, r1, #5
 80043cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043d0:	0142      	lsls	r2, r0, #5
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	1b00      	subs	r0, r0, r4
 80043d8:	eb61 0105 	sbc.w	r1, r1, r5
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	018b      	lsls	r3, r1, #6
 80043e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043ea:	0182      	lsls	r2, r0, #6
 80043ec:	1a12      	subs	r2, r2, r0
 80043ee:	eb63 0301 	sbc.w	r3, r3, r1
 80043f2:	f04f 0000 	mov.w	r0, #0
 80043f6:	f04f 0100 	mov.w	r1, #0
 80043fa:	00d9      	lsls	r1, r3, #3
 80043fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004400:	00d0      	lsls	r0, r2, #3
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	1912      	adds	r2, r2, r4
 8004408:	eb45 0303 	adc.w	r3, r5, r3
 800440c:	f04f 0000 	mov.w	r0, #0
 8004410:	f04f 0100 	mov.w	r1, #0
 8004414:	0299      	lsls	r1, r3, #10
 8004416:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800441a:	0290      	lsls	r0, r2, #10
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4610      	mov	r0, r2
 8004422:	4619      	mov	r1, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	461a      	mov	r2, r3
 8004428:	f04f 0300 	mov.w	r3, #0
 800442c:	f7fb fecc 	bl	80001c8 <__aeabi_uldivmod>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4613      	mov	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	0c1b      	lsrs	r3, r3, #16
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	3301      	adds	r3, #1
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	60bb      	str	r3, [r7, #8]
      break;
 8004452:	e002      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004456:	60bb      	str	r3, [r7, #8]
      break;
 8004458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800445a:	68bb      	ldr	r3, [r7, #8]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004466:	bf00      	nop
 8004468:	40023800 	.word	0x40023800
 800446c:	00f42400 	.word	0x00f42400
 8004470:	007a1200 	.word	0x007a1200

08004474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004478:	4b03      	ldr	r3, [pc, #12]	; (8004488 <HAL_RCC_GetHCLKFreq+0x14>)
 800447a:	681b      	ldr	r3, [r3, #0]
}
 800447c:	4618      	mov	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000000 	.word	0x20000000

0800448c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004490:	f7ff fff0 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 8004494:	4602      	mov	r2, r0
 8004496:	4b05      	ldr	r3, [pc, #20]	; (80044ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	0a9b      	lsrs	r3, r3, #10
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	4903      	ldr	r1, [pc, #12]	; (80044b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044a2:	5ccb      	ldrb	r3, [r1, r3]
 80044a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40023800 	.word	0x40023800
 80044b0:	08007fe0 	.word	0x08007fe0

080044b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044b4:	b084      	sub	sp, #16
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	f107 001c 	add.w	r0, r7, #28
 80044c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d122      	bne.n	8004512 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d105      	bne.n	8004506 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f001 fb1c 	bl	8005b44 <USB_CoreReset>
 800450c:	4603      	mov	r3, r0
 800450e:	73fb      	strb	r3, [r7, #15]
 8004510:	e01a      	b.n	8004548 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f001 fb10 	bl	8005b44 <USB_CoreReset>
 8004524:	4603      	mov	r3, r0
 8004526:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	639a      	str	r2, [r3, #56]	; 0x38
 800453a:	e005      	b.n	8004548 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	2b01      	cmp	r3, #1
 800454c:	d10b      	bne.n	8004566 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f043 0206 	orr.w	r2, r3, #6
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f043 0220 	orr.w	r2, r3, #32
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004566:	7bfb      	ldrb	r3, [r7, #15]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004572:	b004      	add	sp, #16
 8004574:	4770      	bx	lr
	...

08004578 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	4613      	mov	r3, r2
 8004584:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d165      	bne.n	8004658 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4a41      	ldr	r2, [pc, #260]	; (8004694 <USB_SetTurnaroundTime+0x11c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d906      	bls.n	80045a2 <USB_SetTurnaroundTime+0x2a>
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4a40      	ldr	r2, [pc, #256]	; (8004698 <USB_SetTurnaroundTime+0x120>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d202      	bcs.n	80045a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800459c:	230f      	movs	r3, #15
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e062      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	4a3c      	ldr	r2, [pc, #240]	; (8004698 <USB_SetTurnaroundTime+0x120>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d306      	bcc.n	80045b8 <USB_SetTurnaroundTime+0x40>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4a3b      	ldr	r2, [pc, #236]	; (800469c <USB_SetTurnaroundTime+0x124>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d202      	bcs.n	80045b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80045b2:	230e      	movs	r3, #14
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	e057      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4a38      	ldr	r2, [pc, #224]	; (800469c <USB_SetTurnaroundTime+0x124>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d306      	bcc.n	80045ce <USB_SetTurnaroundTime+0x56>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4a37      	ldr	r2, [pc, #220]	; (80046a0 <USB_SetTurnaroundTime+0x128>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d202      	bcs.n	80045ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80045c8:	230d      	movs	r3, #13
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	e04c      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4a33      	ldr	r2, [pc, #204]	; (80046a0 <USB_SetTurnaroundTime+0x128>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d306      	bcc.n	80045e4 <USB_SetTurnaroundTime+0x6c>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4a32      	ldr	r2, [pc, #200]	; (80046a4 <USB_SetTurnaroundTime+0x12c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d802      	bhi.n	80045e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80045de:	230c      	movs	r3, #12
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	e041      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4a2f      	ldr	r2, [pc, #188]	; (80046a4 <USB_SetTurnaroundTime+0x12c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d906      	bls.n	80045fa <USB_SetTurnaroundTime+0x82>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4a2e      	ldr	r2, [pc, #184]	; (80046a8 <USB_SetTurnaroundTime+0x130>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d802      	bhi.n	80045fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80045f4:	230b      	movs	r3, #11
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	e036      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4a2a      	ldr	r2, [pc, #168]	; (80046a8 <USB_SetTurnaroundTime+0x130>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d906      	bls.n	8004610 <USB_SetTurnaroundTime+0x98>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4a29      	ldr	r2, [pc, #164]	; (80046ac <USB_SetTurnaroundTime+0x134>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d802      	bhi.n	8004610 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800460a:	230a      	movs	r3, #10
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	e02b      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4a26      	ldr	r2, [pc, #152]	; (80046ac <USB_SetTurnaroundTime+0x134>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d906      	bls.n	8004626 <USB_SetTurnaroundTime+0xae>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4a25      	ldr	r2, [pc, #148]	; (80046b0 <USB_SetTurnaroundTime+0x138>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d202      	bcs.n	8004626 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004620:	2309      	movs	r3, #9
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e020      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4a21      	ldr	r2, [pc, #132]	; (80046b0 <USB_SetTurnaroundTime+0x138>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d306      	bcc.n	800463c <USB_SetTurnaroundTime+0xc4>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	4a20      	ldr	r2, [pc, #128]	; (80046b4 <USB_SetTurnaroundTime+0x13c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d802      	bhi.n	800463c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004636:	2308      	movs	r3, #8
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	e015      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4a1d      	ldr	r2, [pc, #116]	; (80046b4 <USB_SetTurnaroundTime+0x13c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d906      	bls.n	8004652 <USB_SetTurnaroundTime+0xda>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4a1c      	ldr	r2, [pc, #112]	; (80046b8 <USB_SetTurnaroundTime+0x140>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d202      	bcs.n	8004652 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800464c:	2307      	movs	r3, #7
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e00a      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004652:	2306      	movs	r3, #6
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	e007      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d102      	bne.n	8004664 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800465e:	2309      	movs	r3, #9
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	e001      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004664:	2309      	movs	r3, #9
 8004666:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	029b      	lsls	r3, r3, #10
 800467c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004680:	431a      	orrs	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	00d8acbf 	.word	0x00d8acbf
 8004698:	00e4e1c0 	.word	0x00e4e1c0
 800469c:	00f42400 	.word	0x00f42400
 80046a0:	01067380 	.word	0x01067380
 80046a4:	011a499f 	.word	0x011a499f
 80046a8:	01312cff 	.word	0x01312cff
 80046ac:	014ca43f 	.word	0x014ca43f
 80046b0:	016e3600 	.word	0x016e3600
 80046b4:	01a6ab1f 	.word	0x01a6ab1f
 80046b8:	01e84800 	.word	0x01e84800

080046bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f043 0201 	orr.w	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f023 0201 	bic.w	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800471c:	78fb      	ldrb	r3, [r7, #3]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d115      	bne.n	800474e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800472e:	2001      	movs	r0, #1
 8004730:	f7fc fe38 	bl	80013a4 <HAL_Delay>
      ms++;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3301      	adds	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f001 f972 	bl	8005a24 <USB_GetMode>
 8004740:	4603      	mov	r3, r0
 8004742:	2b01      	cmp	r3, #1
 8004744:	d01e      	beq.n	8004784 <USB_SetCurrentMode+0x84>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b31      	cmp	r3, #49	; 0x31
 800474a:	d9f0      	bls.n	800472e <USB_SetCurrentMode+0x2e>
 800474c:	e01a      	b.n	8004784 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d115      	bne.n	8004780 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004760:	2001      	movs	r0, #1
 8004762:	f7fc fe1f 	bl	80013a4 <HAL_Delay>
      ms++;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3301      	adds	r3, #1
 800476a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f001 f959 	bl	8005a24 <USB_GetMode>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <USB_SetCurrentMode+0x84>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b31      	cmp	r3, #49	; 0x31
 800477c:	d9f0      	bls.n	8004760 <USB_SetCurrentMode+0x60>
 800477e:	e001      	b.n	8004784 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e005      	b.n	8004790 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b32      	cmp	r3, #50	; 0x32
 8004788:	d101      	bne.n	800478e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004798:	b084      	sub	sp, #16
 800479a:	b580      	push	{r7, lr}
 800479c:	b086      	sub	sp, #24
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047b2:	2300      	movs	r3, #0
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	e009      	b.n	80047cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	3340      	adds	r3, #64	; 0x40
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	2200      	movs	r2, #0
 80047c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	3301      	adds	r3, #1
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	2b0e      	cmp	r3, #14
 80047d0:	d9f2      	bls.n	80047b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d11c      	bne.n	8004812 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047e6:	f043 0302 	orr.w	r3, r3, #2
 80047ea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	639a      	str	r2, [r3, #56]	; 0x38
 8004810:	e00b      	b.n	800482a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004816:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004830:	461a      	mov	r2, r3
 8004832:	2300      	movs	r3, #0
 8004834:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483c:	4619      	mov	r1, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004844:	461a      	mov	r2, r3
 8004846:	680b      	ldr	r3, [r1, #0]
 8004848:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800484a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484c:	2b01      	cmp	r3, #1
 800484e:	d10c      	bne.n	800486a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	2b00      	cmp	r3, #0
 8004854:	d104      	bne.n	8004860 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004856:	2100      	movs	r1, #0
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f945 	bl	8004ae8 <USB_SetDevSpeed>
 800485e:	e008      	b.n	8004872 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004860:	2101      	movs	r1, #1
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f940 	bl	8004ae8 <USB_SetDevSpeed>
 8004868:	e003      	b.n	8004872 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800486a:	2103      	movs	r1, #3
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f93b 	bl	8004ae8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004872:	2110      	movs	r1, #16
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f8f3 	bl	8004a60 <USB_FlushTxFifo>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f90f 	bl	8004aa8 <USB_FlushRxFifo>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489a:	461a      	mov	r2, r3
 800489c:	2300      	movs	r3, #0
 800489e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a6:	461a      	mov	r2, r3
 80048a8:	2300      	movs	r3, #0
 80048aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b2:	461a      	mov	r2, r3
 80048b4:	2300      	movs	r3, #0
 80048b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048b8:	2300      	movs	r3, #0
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	e043      	b.n	8004946 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048d4:	d118      	bne.n	8004908 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e8:	461a      	mov	r2, r3
 80048ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	e013      	b.n	800491a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fe:	461a      	mov	r2, r3
 8004900:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	e008      	b.n	800491a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004914:	461a      	mov	r2, r3
 8004916:	2300      	movs	r3, #0
 8004918:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004926:	461a      	mov	r2, r3
 8004928:	2300      	movs	r3, #0
 800492a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004938:	461a      	mov	r2, r3
 800493a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800493e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	3301      	adds	r3, #1
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	429a      	cmp	r2, r3
 800494c:	d3b7      	bcc.n	80048be <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800494e:	2300      	movs	r3, #0
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	e043      	b.n	80049dc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004966:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800496a:	d118      	bne.n	800499e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497e:	461a      	mov	r2, r3
 8004980:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	e013      	b.n	80049b0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004994:	461a      	mov	r2, r3
 8004996:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	e008      	b.n	80049b0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049aa:	461a      	mov	r2, r3
 80049ac:	2300      	movs	r3, #0
 80049ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049bc:	461a      	mov	r2, r3
 80049be:	2300      	movs	r3, #0
 80049c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ce:	461a      	mov	r2, r3
 80049d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	3301      	adds	r3, #1
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d3b7      	bcc.n	8004954 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d105      	bne.n	8004a18 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	f043 0210 	orr.w	r2, r3, #16
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699a      	ldr	r2, [r3, #24]
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <USB_DevInit+0x2c4>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d005      	beq.n	8004a36 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	f043 0208 	orr.w	r2, r3, #8
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d107      	bne.n	8004a4c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a44:	f043 0304 	orr.w	r3, r3, #4
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a58:	b004      	add	sp, #16
 8004a5a:	4770      	bx	lr
 8004a5c:	803c3800 	.word	0x803c3800

08004a60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	019b      	lsls	r3, r3, #6
 8004a72:	f043 0220 	orr.w	r2, r3, #32
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <USB_FlushTxFifo+0x44>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e006      	b.n	8004a98 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d0f1      	beq.n	8004a7a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	00030d40 	.word	0x00030d40

08004aa8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2210      	movs	r2, #16
 8004ab8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3301      	adds	r3, #1
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	4a08      	ldr	r2, [pc, #32]	; (8004ae4 <USB_FlushRxFifo+0x3c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d901      	bls.n	8004aca <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e006      	b.n	8004ad8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b10      	cmp	r3, #16
 8004ad4:	d0f1      	beq.n	8004aba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	00030d40 	.word	0x00030d40

08004ae8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	68f9      	ldr	r1, [r7, #12]
 8004b04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b087      	sub	sp, #28
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 0306 	and.w	r3, r3, #6
 8004b32:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d102      	bne.n	8004b40 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	75fb      	strb	r3, [r7, #23]
 8004b3e:	e00a      	b.n	8004b56 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d002      	beq.n	8004b4c <USB_GetDevSpeed+0x32>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2b06      	cmp	r3, #6
 8004b4a:	d102      	bne.n	8004b52 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	75fb      	strb	r3, [r7, #23]
 8004b50:	e001      	b.n	8004b56 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b52:	230f      	movs	r3, #15
 8004b54:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	371c      	adds	r7, #28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	785b      	ldrb	r3, [r3, #1]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d13a      	bne.n	8004bf6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b86:	69da      	ldr	r2, [r3, #28]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	f003 030f 	and.w	r3, r3, #15
 8004b90:	2101      	movs	r1, #1
 8004b92:	fa01 f303 	lsl.w	r3, r1, r3
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	68f9      	ldr	r1, [r7, #12]
 8004b9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d155      	bne.n	8004c64 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	78db      	ldrb	r3, [r3, #3]
 8004bd2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bd4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	059b      	lsls	r3, r3, #22
 8004bda:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	0151      	lsls	r1, r2, #5
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	440a      	add	r2, r1
 8004be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	e036      	b.n	8004c64 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfc:	69da      	ldr	r2, [r3, #28]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	2101      	movs	r1, #1
 8004c08:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0c:	041b      	lsls	r3, r3, #16
 8004c0e:	68f9      	ldr	r1, [r7, #12]
 8004c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d11a      	bne.n	8004c64 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	78db      	ldrb	r3, [r3, #3]
 8004c48:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	0151      	lsls	r1, r2, #5
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	440a      	add	r2, r1
 8004c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c62:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
	...

08004c74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	785b      	ldrb	r3, [r3, #1]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d161      	bne.n	8004d54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ca2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ca6:	d11f      	bne.n	8004ce8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	0151      	lsls	r1, r2, #5
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	440a      	add	r2, r1
 8004cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cc6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	0151      	lsls	r1, r2, #5
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	440a      	add	r2, r1
 8004cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ce6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	43db      	mvns	r3, r3
 8004d02:	68f9      	ldr	r1, [r7, #12]
 8004d04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d08:	4013      	ands	r3, r2
 8004d0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d12:	69da      	ldr	r2, [r3, #28]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	f003 030f 	and.w	r3, r3, #15
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	43db      	mvns	r3, r3
 8004d26:	68f9      	ldr	r1, [r7, #12]
 8004d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	0159      	lsls	r1, r3, #5
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	440b      	add	r3, r1
 8004d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4b35      	ldr	r3, [pc, #212]	; (8004e24 <USB_DeactivateEndpoint+0x1b0>)
 8004d4e:	4013      	ands	r3, r2
 8004d50:	600b      	str	r3, [r1, #0]
 8004d52:	e060      	b.n	8004e16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d6a:	d11f      	bne.n	8004dac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	0151      	lsls	r1, r2, #5
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	440a      	add	r2, r1
 8004d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004daa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	f003 030f 	and.w	r3, r3, #15
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc2:	041b      	lsls	r3, r3, #16
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	68f9      	ldr	r1, [r7, #12]
 8004dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dcc:	4013      	ands	r3, r2
 8004dce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd6:	69da      	ldr	r2, [r3, #28]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	2101      	movs	r1, #1
 8004de2:	fa01 f303 	lsl.w	r3, r1, r3
 8004de6:	041b      	lsls	r3, r3, #16
 8004de8:	43db      	mvns	r3, r3
 8004dea:	68f9      	ldr	r1, [r7, #12]
 8004dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004df0:	4013      	ands	r3, r2
 8004df2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	0159      	lsls	r1, r3, #5
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	440b      	add	r3, r1
 8004e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <USB_DeactivateEndpoint+0x1b4>)
 8004e12:	4013      	ands	r3, r2
 8004e14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	ec337800 	.word	0xec337800
 8004e28:	eff37800 	.word	0xeff37800

08004e2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08a      	sub	sp, #40	; 0x28
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	4613      	mov	r3, r2
 8004e38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	f040 815c 	bne.w	8005106 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d132      	bne.n	8004ebc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	0151      	lsls	r1, r2, #5
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	440a      	add	r2, r1
 8004e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	0151      	lsls	r1, r2, #5
 8004e8c:	69fa      	ldr	r2, [r7, #28]
 8004e8e:	440a      	add	r2, r1
 8004e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	69fa      	ldr	r2, [r7, #28]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb4:	0cdb      	lsrs	r3, r3, #19
 8004eb6:	04db      	lsls	r3, r3, #19
 8004eb8:	6113      	str	r3, [r2, #16]
 8004eba:	e074      	b.n	8004fa6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	0151      	lsls	r1, r2, #5
 8004ece:	69fa      	ldr	r2, [r7, #28]
 8004ed0:	440a      	add	r2, r1
 8004ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed6:	0cdb      	lsrs	r3, r3, #19
 8004ed8:	04db      	lsls	r3, r3, #19
 8004eda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	0151      	lsls	r1, r2, #5
 8004eee:	69fa      	ldr	r2, [r7, #28]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004efa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004efe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	6959      	ldr	r1, [r3, #20]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	440b      	add	r3, r1
 8004f18:	1e59      	subs	r1, r3, #1
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f22:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f24:	4b9d      	ldr	r3, [pc, #628]	; (800519c <USB_EPStartXfer+0x370>)
 8004f26:	400b      	ands	r3, r1
 8004f28:	69b9      	ldr	r1, [r7, #24]
 8004f2a:	0148      	lsls	r0, r1, #5
 8004f2c:	69f9      	ldr	r1, [r7, #28]
 8004f2e:	4401      	add	r1, r0
 8004f30:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f34:	4313      	orrs	r3, r2
 8004f36:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f44:	691a      	ldr	r2, [r3, #16]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f4e:	69b9      	ldr	r1, [r7, #24]
 8004f50:	0148      	lsls	r0, r1, #5
 8004f52:	69f9      	ldr	r1, [r7, #28]
 8004f54:	4401      	add	r1, r0
 8004f56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	78db      	ldrb	r3, [r3, #3]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d11f      	bne.n	8004fa6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	0151      	lsls	r1, r2, #5
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	440a      	add	r2, r1
 8004f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f80:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f84:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	0151      	lsls	r1, r2, #5
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	440a      	add	r2, r1
 8004f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fa4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d14b      	bne.n	8005044 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d009      	beq.n	8004fc8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	78db      	ldrb	r3, [r3, #3]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d128      	bne.n	8005022 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d110      	bne.n	8005002 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	e00f      	b.n	8005022 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	0151      	lsls	r1, r2, #5
 8005014:	69fa      	ldr	r2, [r7, #28]
 8005016:	440a      	add	r2, r1
 8005018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800501c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005020:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	0151      	lsls	r1, r2, #5
 8005034:	69fa      	ldr	r2, [r7, #28]
 8005036:	440a      	add	r2, r1
 8005038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	e12f      	b.n	80052a4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	0151      	lsls	r1, r2, #5
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	440a      	add	r2, r1
 800505a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005062:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	78db      	ldrb	r3, [r3, #3]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d015      	beq.n	8005098 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 8117 	beq.w	80052a4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	2101      	movs	r1, #1
 8005088:	fa01 f303 	lsl.w	r3, r1, r3
 800508c:	69f9      	ldr	r1, [r7, #28]
 800508e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005092:	4313      	orrs	r3, r2
 8005094:	634b      	str	r3, [r1, #52]	; 0x34
 8005096:	e105      	b.n	80052a4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d110      	bne.n	80050ca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	0151      	lsls	r1, r2, #5
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	440a      	add	r2, r1
 80050be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	e00f      	b.n	80050ea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	0151      	lsls	r1, r2, #5
 80050dc:	69fa      	ldr	r2, [r7, #28]
 80050de:	440a      	add	r2, r1
 80050e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	68d9      	ldr	r1, [r3, #12]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	781a      	ldrb	r2, [r3, #0]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	b298      	uxth	r0, r3
 80050f8:	79fb      	ldrb	r3, [r7, #7]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	4603      	mov	r3, r0
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 fa2b 	bl	800555a <USB_WritePacket>
 8005104:	e0ce      	b.n	80052a4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	440a      	add	r2, r1
 800511c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005120:	0cdb      	lsrs	r3, r3, #19
 8005122:	04db      	lsls	r3, r3, #19
 8005124:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005140:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005144:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005148:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d126      	bne.n	80051a0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515e:	691a      	ldr	r2, [r3, #16]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005168:	69b9      	ldr	r1, [r7, #24]
 800516a:	0148      	lsls	r0, r1, #5
 800516c:	69f9      	ldr	r1, [r7, #28]
 800516e:	4401      	add	r1, r0
 8005170:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005174:	4313      	orrs	r3, r2
 8005176:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	0151      	lsls	r1, r2, #5
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	440a      	add	r2, r1
 800518e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005192:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005196:	6113      	str	r3, [r2, #16]
 8005198:	e036      	b.n	8005208 <USB_EPStartXfer+0x3dc>
 800519a:	bf00      	nop
 800519c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	695a      	ldr	r2, [r3, #20]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	4413      	add	r3, r2
 80051aa:	1e5a      	subs	r2, r3, #1
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	8afb      	ldrh	r3, [r7, #22]
 80051c6:	04d9      	lsls	r1, r3, #19
 80051c8:	4b39      	ldr	r3, [pc, #228]	; (80052b0 <USB_EPStartXfer+0x484>)
 80051ca:	400b      	ands	r3, r1
 80051cc:	69b9      	ldr	r1, [r7, #24]
 80051ce:	0148      	lsls	r0, r1, #5
 80051d0:	69f9      	ldr	r1, [r7, #28]
 80051d2:	4401      	add	r1, r0
 80051d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051d8:	4313      	orrs	r3, r2
 80051da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	8af9      	ldrh	r1, [r7, #22]
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051f8:	69b9      	ldr	r1, [r7, #24]
 80051fa:	0148      	lsls	r0, r1, #5
 80051fc:	69f9      	ldr	r1, [r7, #28]
 80051fe:	4401      	add	r1, r0
 8005200:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005204:	4313      	orrs	r3, r2
 8005206:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d10d      	bne.n	800522a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d009      	beq.n	800522a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	68d9      	ldr	r1, [r3, #12]
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005226:	460a      	mov	r2, r1
 8005228:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	78db      	ldrb	r3, [r3, #3]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d128      	bne.n	8005284 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523e:	2b00      	cmp	r3, #0
 8005240:	d110      	bne.n	8005264 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	0151      	lsls	r1, r2, #5
 8005254:	69fa      	ldr	r2, [r7, #28]
 8005256:	440a      	add	r2, r1
 8005258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800525c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	e00f      	b.n	8005284 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	440a      	add	r2, r1
 800527a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800527e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005282:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	440a      	add	r2, r1
 800529a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800529e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3720      	adds	r7, #32
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	1ff80000 	.word	0x1ff80000

080052b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	4613      	mov	r3, r2
 80052c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	785b      	ldrb	r3, [r3, #1]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	f040 80cd 	bne.w	8005470 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d132      	bne.n	8005344 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005300:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	4413      	add	r3, r2
 800530a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	0151      	lsls	r1, r2, #5
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	440a      	add	r2, r1
 8005318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800531c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005320:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	440a      	add	r2, r1
 8005338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533c:	0cdb      	lsrs	r3, r3, #19
 800533e:	04db      	lsls	r3, r3, #19
 8005340:	6113      	str	r3, [r2, #16]
 8005342:	e04e      	b.n	80053e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	0151      	lsls	r1, r2, #5
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	440a      	add	r2, r1
 800535a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800535e:	0cdb      	lsrs	r3, r3, #19
 8005360:	04db      	lsls	r3, r3, #19
 8005362:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	440a      	add	r2, r1
 800537a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005382:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005386:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	695a      	ldr	r2, [r3, #20]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	429a      	cmp	r2, r3
 8005392:	d903      	bls.n	800539c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d2:	6939      	ldr	r1, [r7, #16]
 80053d4:	0148      	lsls	r0, r1, #5
 80053d6:	6979      	ldr	r1, [r7, #20]
 80053d8:	4401      	add	r1, r0
 80053da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053de:	4313      	orrs	r3, r2
 80053e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d11e      	bne.n	8005426 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d009      	beq.n	8005404 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fc:	461a      	mov	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	440a      	add	r2, r1
 800541a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	e092      	b.n	800554c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	0151      	lsls	r1, r2, #5
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	440a      	add	r2, r1
 800543c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005440:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005444:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d07e      	beq.n	800554c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	2101      	movs	r1, #1
 8005460:	fa01 f303 	lsl.w	r3, r1, r3
 8005464:	6979      	ldr	r1, [r7, #20]
 8005466:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800546a:	4313      	orrs	r3, r2
 800546c:	634b      	str	r3, [r1, #52]	; 0x34
 800546e:	e06d      	b.n	800554c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	0151      	lsls	r1, r2, #5
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	440a      	add	r2, r1
 8005486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800548a:	0cdb      	lsrs	r3, r3, #19
 800548c:	04db      	lsls	r3, r3, #19
 800548e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	0151      	lsls	r1, r2, #5
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	440a      	add	r2, r1
 80054a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054b2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	0151      	lsls	r1, r2, #5
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	440a      	add	r2, r1
 80054da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	691a      	ldr	r2, [r3, #16]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054fa:	6939      	ldr	r1, [r7, #16]
 80054fc:	0148      	lsls	r0, r1, #5
 80054fe:	6979      	ldr	r1, [r7, #20]
 8005500:	4401      	add	r1, r0
 8005502:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005506:	4313      	orrs	r3, r2
 8005508:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d10d      	bne.n	800552c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d009      	beq.n	800552c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	68d9      	ldr	r1, [r3, #12]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005528:	460a      	mov	r2, r1
 800552a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	440a      	add	r2, r1
 8005542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005546:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800554a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800555a:	b480      	push	{r7}
 800555c:	b089      	sub	sp, #36	; 0x24
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	4611      	mov	r1, r2
 8005566:	461a      	mov	r2, r3
 8005568:	460b      	mov	r3, r1
 800556a:	71fb      	strb	r3, [r7, #7]
 800556c:	4613      	mov	r3, r2
 800556e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005578:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800557c:	2b00      	cmp	r3, #0
 800557e:	d123      	bne.n	80055c8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005580:	88bb      	ldrh	r3, [r7, #4]
 8005582:	3303      	adds	r3, #3
 8005584:	089b      	lsrs	r3, r3, #2
 8005586:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005588:	2300      	movs	r3, #0
 800558a:	61bb      	str	r3, [r7, #24]
 800558c:	e018      	b.n	80055c0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	031a      	lsls	r2, r3, #12
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	4413      	add	r3, r2
 8005596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800559a:	461a      	mov	r2, r3
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	3301      	adds	r3, #1
 80055a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	3301      	adds	r3, #1
 80055ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	3301      	adds	r3, #1
 80055b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	3301      	adds	r3, #1
 80055b8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	3301      	adds	r3, #1
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d3e2      	bcc.n	800558e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3724      	adds	r7, #36	; 0x24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b08b      	sub	sp, #44	; 0x2c
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	4613      	mov	r3, r2
 80055e2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055ec:	88fb      	ldrh	r3, [r7, #6]
 80055ee:	089b      	lsrs	r3, r3, #2
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055fc:	2300      	movs	r3, #0
 80055fe:	623b      	str	r3, [r7, #32]
 8005600:	e014      	b.n	800562c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	601a      	str	r2, [r3, #0]
    pDest++;
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	3301      	adds	r3, #1
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	3301      	adds	r3, #1
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	3301      	adds	r3, #1
 800561e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	3301      	adds	r3, #1
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	3301      	adds	r3, #1
 800562a:	623b      	str	r3, [r7, #32]
 800562c:	6a3a      	ldr	r2, [r7, #32]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	429a      	cmp	r2, r3
 8005632:	d3e6      	bcc.n	8005602 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005634:	8bfb      	ldrh	r3, [r7, #30]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d01e      	beq.n	8005678 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005644:	461a      	mov	r2, r3
 8005646:	f107 0310 	add.w	r3, r7, #16
 800564a:	6812      	ldr	r2, [r2, #0]
 800564c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	fa22 f303 	lsr.w	r3, r2, r3
 800565a:	b2da      	uxtb	r2, r3
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	701a      	strb	r2, [r3, #0]
      i++;
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	3301      	adds	r3, #1
 8005664:	623b      	str	r3, [r7, #32]
      pDest++;
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	3301      	adds	r3, #1
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800566c:	8bfb      	ldrh	r3, [r7, #30]
 800566e:	3b01      	subs	r3, #1
 8005670:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005672:	8bfb      	ldrh	r3, [r7, #30]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1ea      	bne.n	800564e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800567a:	4618      	mov	r0, r3
 800567c:	372c      	adds	r7, #44	; 0x2c
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005686:	b480      	push	{r7}
 8005688:	b085      	sub	sp, #20
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	785b      	ldrb	r3, [r3, #1]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d12c      	bne.n	80056fc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	db12      	blt.n	80056da <USB_EPSetStall+0x54>
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00f      	beq.n	80056da <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	0151      	lsls	r1, r2, #5
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	440a      	add	r2, r1
 80056d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056d8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	0151      	lsls	r1, r2, #5
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	440a      	add	r2, r1
 80056f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	e02b      	b.n	8005754 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	db12      	blt.n	8005734 <USB_EPSetStall+0xae>
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00f      	beq.n	8005734 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	0151      	lsls	r1, r2, #5
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	440a      	add	r2, r1
 800572a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800572e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005732:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	0151      	lsls	r1, r2, #5
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	440a      	add	r2, r1
 800574a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800574e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005752:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	785b      	ldrb	r3, [r3, #1]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d128      	bne.n	80057d0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	0151      	lsls	r1, r2, #5
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	440a      	add	r2, r1
 8005794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005798:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800579c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	78db      	ldrb	r3, [r3, #3]
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d003      	beq.n	80057ae <USB_EPClearStall+0x4c>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	78db      	ldrb	r3, [r3, #3]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d138      	bne.n	8005820 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	0151      	lsls	r1, r2, #5
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	440a      	add	r2, r1
 80057c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	e027      	b.n	8005820 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	0151      	lsls	r1, r2, #5
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	440a      	add	r2, r1
 80057e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	78db      	ldrb	r3, [r3, #3]
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d003      	beq.n	8005800 <USB_EPClearStall+0x9e>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	78db      	ldrb	r3, [r3, #3]
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d10f      	bne.n	8005820 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	0151      	lsls	r1, r2, #5
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	440a      	add	r2, r1
 8005816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800581a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800581e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	460b      	mov	r3, r1
 8005838:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800584c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005850:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005862:	68f9      	ldr	r1, [r7, #12]
 8005864:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005868:	4313      	orrs	r3, r2
 800586a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005894:	f023 0303 	bic.w	r3, r3, #3
 8005898:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058a8:	f023 0302 	bic.w	r3, r3, #2
 80058ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058d6:	f023 0303 	bic.w	r3, r3, #3
 80058da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ea:	f043 0302 	orr.w	r3, r3, #2
 80058ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80058fe:	b480      	push	{r7}
 8005900:	b085      	sub	sp, #20
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4013      	ands	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005916:	68fb      	ldr	r3, [r7, #12]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	4013      	ands	r3, r2
 8005946:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	0c1b      	lsrs	r3, r3, #16
}
 800594c:	4618      	mov	r0, r3
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	4013      	ands	r3, r2
 800597a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	b29b      	uxth	r3, r3
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800599c:	78fb      	ldrb	r3, [r7, #3]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	4013      	ands	r3, r2
 80059b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059ba:	68bb      	ldr	r3, [r7, #8]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ea:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80059ec:	78fb      	ldrb	r3, [r7, #3]
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	fa22 f303 	lsr.w	r3, r2, r3
 80059f8:	01db      	lsls	r3, r3, #7
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4013      	ands	r3, r2
 8005a14:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a16:	68bb      	ldr	r3, [r7, #8]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	371c      	adds	r7, #28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	f003 0301 	and.w	r3, r3, #1
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a5a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a5e:	f023 0307 	bic.w	r3, r3, #7
 8005a62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	460b      	mov	r3, r1
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	333c      	adds	r3, #60	; 0x3c
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	4a26      	ldr	r2, [pc, #152]	; (8005b40 <USB_EP0_OutStart+0xb8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d90a      	bls.n	8005ac2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005abc:	d101      	bne.n	8005ac2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e037      	b.n	8005b32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac8:	461a      	mov	r2, r3
 8005aca:	2300      	movs	r3, #0
 8005acc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005adc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ae0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af0:	f043 0318 	orr.w	r3, r3, #24
 8005af4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b04:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005b08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b0a:	7afb      	ldrb	r3, [r7, #11]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d10f      	bne.n	8005b30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b16:	461a      	mov	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b2a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	4f54300a 	.word	0x4f54300a

08005b44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3301      	adds	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	4a13      	ldr	r2, [pc, #76]	; (8005ba4 <USB_CoreReset+0x60>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d901      	bls.n	8005b60 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e01a      	b.n	8005b96 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	daf3      	bge.n	8005b50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	f043 0201 	orr.w	r2, r3, #1
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <USB_CoreReset+0x60>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d901      	bls.n	8005b88 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e006      	b.n	8005b96 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d0f1      	beq.n	8005b78 <USB_CoreReset+0x34>

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	00030d40 	.word	0x00030d40

08005ba8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005bb4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005bb8:	f002 f96a 	bl	8007e90 <USBD_static_malloc>
 8005bbc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d105      	bne.n	8005bd0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e066      	b.n	8005c9e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	7c1b      	ldrb	r3, [r3, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d119      	bne.n	8005c14 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005be4:	2202      	movs	r2, #2
 8005be6:	2181      	movs	r1, #129	; 0x81
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f002 f82e 	bl	8007c4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f002 f824 	bl	8007c4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2210      	movs	r2, #16
 8005c0e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005c12:	e016      	b.n	8005c42 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c14:	2340      	movs	r3, #64	; 0x40
 8005c16:	2202      	movs	r2, #2
 8005c18:	2181      	movs	r1, #129	; 0x81
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f002 f815 	bl	8007c4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c26:	2340      	movs	r3, #64	; 0x40
 8005c28:	2202      	movs	r2, #2
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f002 f80c 	bl	8007c4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2210      	movs	r2, #16
 8005c3e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005c42:	2308      	movs	r3, #8
 8005c44:	2203      	movs	r2, #3
 8005c46:	2182      	movs	r1, #130	; 0x82
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f001 fffe 	bl	8007c4a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	7c1b      	ldrb	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d109      	bne.n	8005c8c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c82:	2101      	movs	r1, #1
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f002 f8cf 	bl	8007e28 <USBD_LL_PrepareReceive>
 8005c8a:	e007      	b.n	8005c9c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c92:	2340      	movs	r3, #64	; 0x40
 8005c94:	2101      	movs	r1, #1
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f002 f8c6 	bl	8007e28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b082      	sub	sp, #8
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005cb2:	2181      	movs	r1, #129	; 0x81
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f001 ffee 	bl	8007c96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f001 ffe7 	bl	8007c96 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005cd0:	2182      	movs	r1, #130	; 0x82
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 ffdf 	bl	8007c96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00e      	beq.n	8005d10 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d02:	4618      	mov	r0, r3
 8005d04:	f002 f8d2 	bl	8007eac <USBD_static_free>
    pdev->pClassData = NULL;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d2c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e0af      	b.n	8005ea4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d03f      	beq.n	8005dd0 <USBD_CDC_Setup+0xb4>
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	f040 809f 	bne.w	8005e94 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	88db      	ldrh	r3, [r3, #6]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d02e      	beq.n	8005dbc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	b25b      	sxtb	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	da16      	bge.n	8005d96 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005d74:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	88d2      	ldrh	r2, [r2, #6]
 8005d7a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	88db      	ldrh	r3, [r3, #6]
 8005d80:	2b07      	cmp	r3, #7
 8005d82:	bf28      	it	cs
 8005d84:	2307      	movcs	r3, #7
 8005d86:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	89fa      	ldrh	r2, [r7, #14]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f001 fb19 	bl	80073c6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005d94:	e085      	b.n	8005ea2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	785a      	ldrb	r2, [r3, #1]
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	88db      	ldrh	r3, [r3, #6]
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005dac:	6939      	ldr	r1, [r7, #16]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	88db      	ldrh	r3, [r3, #6]
 8005db2:	461a      	mov	r2, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f001 fb32 	bl	800741e <USBD_CtlPrepareRx>
      break;
 8005dba:	e072      	b.n	8005ea2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	7850      	ldrb	r0, [r2, #1]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	4798      	blx	r3
      break;
 8005dce:	e068      	b.n	8005ea2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	785b      	ldrb	r3, [r3, #1]
 8005dd4:	2b0b      	cmp	r3, #11
 8005dd6:	d852      	bhi.n	8005e7e <USBD_CDC_Setup+0x162>
 8005dd8:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <USBD_CDC_Setup+0xc4>)
 8005dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dde:	bf00      	nop
 8005de0:	08005e11 	.word	0x08005e11
 8005de4:	08005e8d 	.word	0x08005e8d
 8005de8:	08005e7f 	.word	0x08005e7f
 8005dec:	08005e7f 	.word	0x08005e7f
 8005df0:	08005e7f 	.word	0x08005e7f
 8005df4:	08005e7f 	.word	0x08005e7f
 8005df8:	08005e7f 	.word	0x08005e7f
 8005dfc:	08005e7f 	.word	0x08005e7f
 8005e00:	08005e7f 	.word	0x08005e7f
 8005e04:	08005e7f 	.word	0x08005e7f
 8005e08:	08005e3b 	.word	0x08005e3b
 8005e0c:	08005e65 	.word	0x08005e65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d107      	bne.n	8005e2c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005e1c:	f107 030a 	add.w	r3, r7, #10
 8005e20:	2202      	movs	r2, #2
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f001 face 	bl	80073c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e2a:	e032      	b.n	8005e92 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f001 fa58 	bl	80072e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e34:	2303      	movs	r3, #3
 8005e36:	75fb      	strb	r3, [r7, #23]
          break;
 8005e38:	e02b      	b.n	8005e92 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d107      	bne.n	8005e56 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e46:	f107 030d 	add.w	r3, r7, #13
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f001 fab9 	bl	80073c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e54:	e01d      	b.n	8005e92 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f001 fa43 	bl	80072e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	75fb      	strb	r3, [r7, #23]
          break;
 8005e62:	e016      	b.n	8005e92 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d00f      	beq.n	8005e90 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f001 fa36 	bl	80072e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005e7c:	e008      	b.n	8005e90 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f001 fa2f 	bl	80072e4 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e86:	2303      	movs	r3, #3
 8005e88:	75fb      	strb	r3, [r7, #23]
          break;
 8005e8a:	e002      	b.n	8005e92 <USBD_CDC_Setup+0x176>
          break;
 8005e8c:	bf00      	nop
 8005e8e:	e008      	b.n	8005ea2 <USBD_CDC_Setup+0x186>
          break;
 8005e90:	bf00      	nop
      }
      break;
 8005e92:	e006      	b.n	8005ea2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f001 fa24 	bl	80072e4 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005ea0:	bf00      	nop
  }

  return (uint8_t)ret;
 8005ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005ebe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e04f      	b.n	8005f6e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ed4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005ed6:	78fa      	ldrb	r2, [r7, #3]
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	4613      	mov	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	440b      	add	r3, r1
 8005ee4:	3318      	adds	r3, #24
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d029      	beq.n	8005f40 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005eec:	78fa      	ldrb	r2, [r7, #3]
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	3318      	adds	r3, #24
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	78f9      	ldrb	r1, [r7, #3]
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	460b      	mov	r3, r1
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	1a5b      	subs	r3, r3, r1
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4403      	add	r3, r0
 8005f0c:	3344      	adds	r3, #68	; 0x44
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f14:	fb03 f301 	mul.w	r3, r3, r1
 8005f18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d110      	bne.n	8005f40 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005f1e:	78fa      	ldrb	r2, [r7, #3]
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	4613      	mov	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	440b      	add	r3, r1
 8005f2c:	3318      	adds	r3, #24
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f32:	78f9      	ldrb	r1, [r7, #3]
 8005f34:	2300      	movs	r3, #0
 8005f36:	2200      	movs	r2, #0
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 ff54 	bl	8007de6 <USBD_LL_Transmit>
 8005f3e:	e015      	b.n	8005f6c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00b      	beq.n	8005f6c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005f68:	78fa      	ldrb	r2, [r7, #3]
 8005f6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f88:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e015      	b.n	8005fc4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f001 ff64 	bl	8007e6a <USBD_LL_GetRxDataSize>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fda:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e01b      	b.n	800601e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d015      	beq.n	800601c <USBD_CDC_EP0_RxReady+0x50>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ff6:	2bff      	cmp	r3, #255	; 0xff
 8005ff8:	d010      	beq.n	800601c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006008:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006010:	b292      	uxth	r2, r2
 8006012:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	22ff      	movs	r2, #255	; 0xff
 8006018:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
	...

08006028 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2243      	movs	r2, #67	; 0x43
 8006034:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006036:	4b03      	ldr	r3, [pc, #12]	; (8006044 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006038:	4618      	mov	r0, r3
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	20000094 	.word	0x20000094

08006048 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2243      	movs	r2, #67	; 0x43
 8006054:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006056:	4b03      	ldr	r3, [pc, #12]	; (8006064 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006058:	4618      	mov	r0, r3
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	20000050 	.word	0x20000050

08006068 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2243      	movs	r2, #67	; 0x43
 8006074:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006076:	4b03      	ldr	r3, [pc, #12]	; (8006084 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006078:	4618      	mov	r0, r3
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	200000d8 	.word	0x200000d8

08006088 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	220a      	movs	r2, #10
 8006094:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006096:	4b03      	ldr	r3, [pc, #12]	; (80060a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006098:	4618      	mov	r0, r3
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	2000000c 	.word	0x2000000c

080060a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e004      	b.n	80060c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b087      	sub	sp, #28
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	60f8      	str	r0, [r7, #12]
 80060da:	60b9      	str	r1, [r7, #8]
 80060dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060e4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e008      	b.n	8006102 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800611e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006126:	2303      	movs	r3, #3
 8006128:	e004      	b.n	8006134 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800614e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006150:	2301      	movs	r3, #1
 8006152:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800615e:	2303      	movs	r3, #3
 8006160:	e01a      	b.n	8006198 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006168:	2b00      	cmp	r3, #0
 800616a:	d114      	bne.n	8006196 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2201      	movs	r2, #1
 8006170:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800618a:	2181      	movs	r1, #129	; 0x81
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f001 fe2a 	bl	8007de6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006196:	7bfb      	ldrb	r3, [r7, #15]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e016      	b.n	80061ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	7c1b      	ldrb	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d109      	bne.n	80061da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061d0:	2101      	movs	r1, #1
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f001 fe28 	bl	8007e28 <USBD_LL_PrepareReceive>
 80061d8:	e007      	b.n	80061ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061e0:	2340      	movs	r3, #64	; 0x40
 80061e2:	2101      	movs	r1, #1
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f001 fe1f 	bl	8007e28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	4613      	mov	r3, r2
 8006200:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006208:	2303      	movs	r3, #3
 800620a:	e01f      	b.n	800624c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	79fa      	ldrb	r2, [r7, #7]
 800623e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f001 fc9b 	bl	8007b7c <USBD_LL_Init>
 8006246:	4603      	mov	r3, r0
 8006248:	75fb      	strb	r3, [r7, #23]

  return ret;
 800624a:	7dfb      	ldrb	r3, [r7, #23]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006268:	2303      	movs	r3, #3
 800626a:	e016      	b.n	800629a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00b      	beq.n	8006298 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006288:	f107 020e 	add.w	r2, r7, #14
 800628c:	4610      	mov	r0, r2
 800628e:	4798      	blx	r3
 8006290:	4602      	mov	r2, r0
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b082      	sub	sp, #8
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 fcb2 	bl	8007c14 <USBD_LL_Start>
 80062b0:	4603      	mov	r3, r0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	460b      	mov	r3, r1
 80062da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80062dc:	2303      	movs	r3, #3
 80062de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d009      	beq.n	80062fe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	78fa      	ldrb	r2, [r7, #3]
 80062f4:	4611      	mov	r1, r2
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	4798      	blx	r3
 80062fa:	4603      	mov	r3, r0
 80062fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800631a:	2b00      	cmp	r3, #0
 800631c:	d007      	beq.n	800632e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	78fa      	ldrb	r2, [r7, #3]
 8006328:	4611      	mov	r1, r2
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	4798      	blx	r3
  }

  return USBD_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	f000 ff90 	bl	8007270 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800635e:	461a      	mov	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	2b02      	cmp	r3, #2
 8006372:	d01a      	beq.n	80063aa <USBD_LL_SetupStage+0x72>
 8006374:	2b02      	cmp	r3, #2
 8006376:	d822      	bhi.n	80063be <USBD_LL_SetupStage+0x86>
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <USBD_LL_SetupStage+0x4a>
 800637c:	2b01      	cmp	r3, #1
 800637e:	d00a      	beq.n	8006396 <USBD_LL_SetupStage+0x5e>
 8006380:	e01d      	b.n	80063be <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006388:	4619      	mov	r1, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fa62 	bl	8006854 <USBD_StdDevReq>
 8006390:	4603      	mov	r3, r0
 8006392:	73fb      	strb	r3, [r7, #15]
      break;
 8006394:	e020      	b.n	80063d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800639c:	4619      	mov	r1, r3
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fac6 	bl	8006930 <USBD_StdItfReq>
 80063a4:	4603      	mov	r3, r0
 80063a6:	73fb      	strb	r3, [r7, #15]
      break;
 80063a8:	e016      	b.n	80063d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063b0:	4619      	mov	r1, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fb05 	bl	80069c2 <USBD_StdEPReq>
 80063b8:	4603      	mov	r3, r0
 80063ba:	73fb      	strb	r3, [r7, #15]
      break;
 80063bc:	e00c      	b.n	80063d8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 fc81 	bl	8007cd4 <USBD_LL_StallEP>
 80063d2:	4603      	mov	r3, r0
 80063d4:	73fb      	strb	r3, [r7, #15]
      break;
 80063d6:	bf00      	nop
  }

  return ret;
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b086      	sub	sp, #24
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	460b      	mov	r3, r1
 80063ec:	607a      	str	r2, [r7, #4]
 80063ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80063f0:	7afb      	ldrb	r3, [r7, #11]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d138      	bne.n	8006468 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80063fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006404:	2b03      	cmp	r3, #3
 8006406:	d14a      	bne.n	800649e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	429a      	cmp	r2, r3
 8006412:	d913      	bls.n	800643c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	689a      	ldr	r2, [r3, #8]
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	1ad2      	subs	r2, r2, r3
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	4293      	cmp	r3, r2
 800642c:	bf28      	it	cs
 800642e:	4613      	movcs	r3, r2
 8006430:	461a      	mov	r2, r3
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f001 f80f 	bl	8007458 <USBD_CtlContinueRx>
 800643a:	e030      	b.n	800649e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b03      	cmp	r3, #3
 8006446:	d10b      	bne.n	8006460 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d005      	beq.n	8006460 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f001 f80a 	bl	800747a <USBD_CtlSendStatus>
 8006466:	e01a      	b.n	800649e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b03      	cmp	r3, #3
 8006472:	d114      	bne.n	800649e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00e      	beq.n	800649e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	7afa      	ldrb	r2, [r7, #11]
 800648a:	4611      	mov	r1, r2
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	4798      	blx	r3
 8006490:	4603      	mov	r3, r0
 8006492:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006494:	7dfb      	ldrb	r3, [r7, #23]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800649a:	7dfb      	ldrb	r3, [r7, #23]
 800649c:	e000      	b.n	80064a0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	460b      	mov	r3, r1
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80064b6:	7afb      	ldrb	r3, [r7, #11]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d16b      	bne.n	8006594 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3314      	adds	r3, #20
 80064c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d156      	bne.n	800657a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d914      	bls.n	8006502 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	1ad2      	subs	r2, r2, r3
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	461a      	mov	r2, r3
 80064ec:	6879      	ldr	r1, [r7, #4]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 ff84 	bl	80073fc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064f4:	2300      	movs	r3, #0
 80064f6:	2200      	movs	r2, #0
 80064f8:	2100      	movs	r1, #0
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f001 fc94 	bl	8007e28 <USBD_LL_PrepareReceive>
 8006500:	e03b      	b.n	800657a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	429a      	cmp	r2, r3
 800650c:	d11c      	bne.n	8006548 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006516:	429a      	cmp	r2, r3
 8006518:	d316      	bcc.n	8006548 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006524:	429a      	cmp	r2, r3
 8006526:	d20f      	bcs.n	8006548 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006528:	2200      	movs	r2, #0
 800652a:	2100      	movs	r1, #0
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 ff65 	bl	80073fc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800653a:	2300      	movs	r3, #0
 800653c:	2200      	movs	r2, #0
 800653e:	2100      	movs	r1, #0
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f001 fc71 	bl	8007e28 <USBD_LL_PrepareReceive>
 8006546:	e018      	b.n	800657a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b03      	cmp	r3, #3
 8006552:	d10b      	bne.n	800656c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d005      	beq.n	800656c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800656c:	2180      	movs	r1, #128	; 0x80
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f001 fbb0 	bl	8007cd4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 ff93 	bl	80074a0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006580:	2b01      	cmp	r3, #1
 8006582:	d122      	bne.n	80065ca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f7ff fe98 	bl	80062ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006592:	e01a      	b.n	80065ca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b03      	cmp	r3, #3
 800659e:	d114      	bne.n	80065ca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00e      	beq.n	80065ca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	7afa      	ldrb	r2, [r7, #11]
 80065b6:	4611      	mov	r1, r2
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	4798      	blx	r3
 80065bc:	4603      	mov	r3, r0
 80065be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80065c0:	7dfb      	ldrb	r3, [r7, #23]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80065c6:	7dfb      	ldrb	r3, [r7, #23]
 80065c8:	e000      	b.n	80065cc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006604:	2303      	movs	r3, #3
 8006606:	e02f      	b.n	8006668 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00f      	beq.n	8006632 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d009      	beq.n	8006632 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	6852      	ldr	r2, [r2, #4]
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	4611      	mov	r1, r2
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006632:	2340      	movs	r3, #64	; 0x40
 8006634:	2200      	movs	r2, #0
 8006636:	2100      	movs	r1, #0
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f001 fb06 	bl	8007c4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2240      	movs	r2, #64	; 0x40
 800664a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800664e:	2340      	movs	r3, #64	; 0x40
 8006650:	2200      	movs	r2, #0
 8006652:	2180      	movs	r1, #128	; 0x80
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 faf8 	bl	8007c4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2240      	movs	r2, #64	; 0x40
 8006664:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	78fa      	ldrb	r2, [r7, #3]
 8006680:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2204      	movs	r2, #4
 80066aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d106      	bne.n	80066de <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80066fe:	2303      	movs	r3, #3
 8006700:	e012      	b.n	8006728 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b03      	cmp	r3, #3
 800670c:	d10b      	bne.n	8006726 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d005      	beq.n	8006726 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006746:	2303      	movs	r3, #3
 8006748:	e014      	b.n	8006774 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b03      	cmp	r3, #3
 8006754:	d10d      	bne.n	8006772 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d007      	beq.n	8006772 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	78fa      	ldrb	r2, [r7, #3]
 800676c:	4611      	mov	r1, r2
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006792:	2303      	movs	r3, #3
 8006794:	e014      	b.n	80067c0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d10d      	bne.n	80067be <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d007      	beq.n	80067be <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	78fa      	ldrb	r2, [r7, #3]
 80067b8:	4611      	mov	r1, r2
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d009      	beq.n	800680c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	6852      	ldr	r2, [r2, #4]
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	4611      	mov	r1, r2
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	4798      	blx	r3
  }

  return USBD_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006816:	b480      	push	{r7}
 8006818:	b087      	sub	sp, #28
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	3301      	adds	r3, #1
 800682c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006834:	8a3b      	ldrh	r3, [r7, #16]
 8006836:	021b      	lsls	r3, r3, #8
 8006838:	b21a      	sxth	r2, r3
 800683a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800683e:	4313      	orrs	r3, r2
 8006840:	b21b      	sxth	r3, r3
 8006842:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006844:	89fb      	ldrh	r3, [r7, #14]
}
 8006846:	4618      	mov	r0, r3
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
	...

08006854 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	d005      	beq.n	800687a <USBD_StdDevReq+0x26>
 800686e:	2b40      	cmp	r3, #64	; 0x40
 8006870:	d853      	bhi.n	800691a <USBD_StdDevReq+0xc6>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00b      	beq.n	800688e <USBD_StdDevReq+0x3a>
 8006876:	2b20      	cmp	r3, #32
 8006878:	d14f      	bne.n	800691a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	4798      	blx	r3
 8006888:	4603      	mov	r3, r0
 800688a:	73fb      	strb	r3, [r7, #15]
      break;
 800688c:	e04a      	b.n	8006924 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	785b      	ldrb	r3, [r3, #1]
 8006892:	2b09      	cmp	r3, #9
 8006894:	d83b      	bhi.n	800690e <USBD_StdDevReq+0xba>
 8006896:	a201      	add	r2, pc, #4	; (adr r2, 800689c <USBD_StdDevReq+0x48>)
 8006898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689c:	080068f1 	.word	0x080068f1
 80068a0:	08006905 	.word	0x08006905
 80068a4:	0800690f 	.word	0x0800690f
 80068a8:	080068fb 	.word	0x080068fb
 80068ac:	0800690f 	.word	0x0800690f
 80068b0:	080068cf 	.word	0x080068cf
 80068b4:	080068c5 	.word	0x080068c5
 80068b8:	0800690f 	.word	0x0800690f
 80068bc:	080068e7 	.word	0x080068e7
 80068c0:	080068d9 	.word	0x080068d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068c4:	6839      	ldr	r1, [r7, #0]
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f9de 	bl	8006c88 <USBD_GetDescriptor>
          break;
 80068cc:	e024      	b.n	8006918 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fb43 	bl	8006f5c <USBD_SetAddress>
          break;
 80068d6:	e01f      	b.n	8006918 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fb82 	bl	8006fe4 <USBD_SetConfig>
 80068e0:	4603      	mov	r3, r0
 80068e2:	73fb      	strb	r3, [r7, #15]
          break;
 80068e4:	e018      	b.n	8006918 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fc21 	bl	8007130 <USBD_GetConfig>
          break;
 80068ee:	e013      	b.n	8006918 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fc52 	bl	800719c <USBD_GetStatus>
          break;
 80068f8:	e00e      	b.n	8006918 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fc81 	bl	8007204 <USBD_SetFeature>
          break;
 8006902:	e009      	b.n	8006918 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fc90 	bl	800722c <USBD_ClrFeature>
          break;
 800690c:	e004      	b.n	8006918 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fce7 	bl	80072e4 <USBD_CtlError>
          break;
 8006916:	bf00      	nop
      }
      break;
 8006918:	e004      	b.n	8006924 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fce1 	bl	80072e4 <USBD_CtlError>
      break;
 8006922:	bf00      	nop
  }

  return ret;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop

08006930 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006946:	2b40      	cmp	r3, #64	; 0x40
 8006948:	d005      	beq.n	8006956 <USBD_StdItfReq+0x26>
 800694a:	2b40      	cmp	r3, #64	; 0x40
 800694c:	d82f      	bhi.n	80069ae <USBD_StdItfReq+0x7e>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <USBD_StdItfReq+0x26>
 8006952:	2b20      	cmp	r3, #32
 8006954:	d12b      	bne.n	80069ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695c:	b2db      	uxtb	r3, r3
 800695e:	3b01      	subs	r3, #1
 8006960:	2b02      	cmp	r3, #2
 8006962:	d81d      	bhi.n	80069a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	889b      	ldrh	r3, [r3, #4]
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b01      	cmp	r3, #1
 800696c:	d813      	bhi.n	8006996 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	4798      	blx	r3
 800697c:	4603      	mov	r3, r0
 800697e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	88db      	ldrh	r3, [r3, #6]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d110      	bne.n	80069aa <USBD_StdItfReq+0x7a>
 8006988:	7bfb      	ldrb	r3, [r7, #15]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10d      	bne.n	80069aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fd73 	bl	800747a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006994:	e009      	b.n	80069aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fca3 	bl	80072e4 <USBD_CtlError>
          break;
 800699e:	e004      	b.n	80069aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fc9e 	bl	80072e4 <USBD_CtlError>
          break;
 80069a8:	e000      	b.n	80069ac <USBD_StdItfReq+0x7c>
          break;
 80069aa:	bf00      	nop
      }
      break;
 80069ac:	e004      	b.n	80069b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fc97 	bl	80072e4 <USBD_CtlError>
      break;
 80069b6:	bf00      	nop
  }

  return ret;
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	889b      	ldrh	r3, [r3, #4]
 80069d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069de:	2b40      	cmp	r3, #64	; 0x40
 80069e0:	d007      	beq.n	80069f2 <USBD_StdEPReq+0x30>
 80069e2:	2b40      	cmp	r3, #64	; 0x40
 80069e4:	f200 8145 	bhi.w	8006c72 <USBD_StdEPReq+0x2b0>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00c      	beq.n	8006a06 <USBD_StdEPReq+0x44>
 80069ec:	2b20      	cmp	r3, #32
 80069ee:	f040 8140 	bne.w	8006c72 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
 8006a00:	4603      	mov	r3, r0
 8006a02:	73fb      	strb	r3, [r7, #15]
      break;
 8006a04:	e13a      	b.n	8006c7c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	785b      	ldrb	r3, [r3, #1]
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d007      	beq.n	8006a1e <USBD_StdEPReq+0x5c>
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	f300 8129 	bgt.w	8006c66 <USBD_StdEPReq+0x2a4>
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d07f      	beq.n	8006b18 <USBD_StdEPReq+0x156>
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d03c      	beq.n	8006a96 <USBD_StdEPReq+0xd4>
 8006a1c:	e123      	b.n	8006c66 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d002      	beq.n	8006a30 <USBD_StdEPReq+0x6e>
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d016      	beq.n	8006a5c <USBD_StdEPReq+0x9a>
 8006a2e:	e02c      	b.n	8006a8a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a30:	7bbb      	ldrb	r3, [r7, #14]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00d      	beq.n	8006a52 <USBD_StdEPReq+0x90>
 8006a36:	7bbb      	ldrb	r3, [r7, #14]
 8006a38:	2b80      	cmp	r3, #128	; 0x80
 8006a3a:	d00a      	beq.n	8006a52 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a3c:	7bbb      	ldrb	r3, [r7, #14]
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 f947 	bl	8007cd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a46:	2180      	movs	r1, #128	; 0x80
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 f943 	bl	8007cd4 <USBD_LL_StallEP>
 8006a4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a50:	e020      	b.n	8006a94 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fc45 	bl	80072e4 <USBD_CtlError>
              break;
 8006a5a:	e01b      	b.n	8006a94 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	885b      	ldrh	r3, [r3, #2]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10e      	bne.n	8006a82 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a64:	7bbb      	ldrb	r3, [r7, #14]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00b      	beq.n	8006a82 <USBD_StdEPReq+0xc0>
 8006a6a:	7bbb      	ldrb	r3, [r7, #14]
 8006a6c:	2b80      	cmp	r3, #128	; 0x80
 8006a6e:	d008      	beq.n	8006a82 <USBD_StdEPReq+0xc0>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	88db      	ldrh	r3, [r3, #6]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d104      	bne.n	8006a82 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f001 f929 	bl	8007cd4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fcf9 	bl	800747a <USBD_CtlSendStatus>

              break;
 8006a88:	e004      	b.n	8006a94 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fc29 	bl	80072e4 <USBD_CtlError>
              break;
 8006a92:	bf00      	nop
          }
          break;
 8006a94:	e0ec      	b.n	8006c70 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d002      	beq.n	8006aa8 <USBD_StdEPReq+0xe6>
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	d016      	beq.n	8006ad4 <USBD_StdEPReq+0x112>
 8006aa6:	e030      	b.n	8006b0a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00d      	beq.n	8006aca <USBD_StdEPReq+0x108>
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
 8006ab0:	2b80      	cmp	r3, #128	; 0x80
 8006ab2:	d00a      	beq.n	8006aca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 f90b 	bl	8007cd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006abe:	2180      	movs	r1, #128	; 0x80
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f001 f907 	bl	8007cd4 <USBD_LL_StallEP>
 8006ac6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ac8:	e025      	b.n	8006b16 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fc09 	bl	80072e4 <USBD_CtlError>
              break;
 8006ad2:	e020      	b.n	8006b16 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	885b      	ldrh	r3, [r3, #2]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d11b      	bne.n	8006b14 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006adc:	7bbb      	ldrb	r3, [r7, #14]
 8006ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d004      	beq.n	8006af0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ae6:	7bbb      	ldrb	r3, [r7, #14]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 f911 	bl	8007d12 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fcc2 	bl	800747a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	4798      	blx	r3
 8006b04:	4603      	mov	r3, r0
 8006b06:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006b08:	e004      	b.n	8006b14 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fbe9 	bl	80072e4 <USBD_CtlError>
              break;
 8006b12:	e000      	b.n	8006b16 <USBD_StdEPReq+0x154>
              break;
 8006b14:	bf00      	nop
          }
          break;
 8006b16:	e0ab      	b.n	8006c70 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d002      	beq.n	8006b2a <USBD_StdEPReq+0x168>
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d032      	beq.n	8006b8e <USBD_StdEPReq+0x1cc>
 8006b28:	e097      	b.n	8006c5a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b2a:	7bbb      	ldrb	r3, [r7, #14]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d007      	beq.n	8006b40 <USBD_StdEPReq+0x17e>
 8006b30:	7bbb      	ldrb	r3, [r7, #14]
 8006b32:	2b80      	cmp	r3, #128	; 0x80
 8006b34:	d004      	beq.n	8006b40 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fbd3 	bl	80072e4 <USBD_CtlError>
                break;
 8006b3e:	e091      	b.n	8006c64 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	da0b      	bge.n	8006b60 <USBD_StdEPReq+0x19e>
 8006b48:	7bbb      	ldrb	r3, [r7, #14]
 8006b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b4e:	4613      	mov	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	3310      	adds	r3, #16
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	e00b      	b.n	8006b78 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b60:	7bbb      	ldrb	r3, [r7, #14]
 8006b62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b66:	4613      	mov	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	4413      	add	r3, r2
 8006b76:	3304      	adds	r3, #4
 8006b78:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2202      	movs	r2, #2
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fc1d 	bl	80073c6 <USBD_CtlSendData>
              break;
 8006b8c:	e06a      	b.n	8006c64 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	da11      	bge.n	8006bba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	f003 020f 	and.w	r2, r3, #15
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	3324      	adds	r3, #36	; 0x24
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d117      	bne.n	8006be0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fb96 	bl	80072e4 <USBD_CtlError>
                  break;
 8006bb8:	e054      	b.n	8006c64 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006bba:	7bbb      	ldrb	r3, [r7, #14]
 8006bbc:	f003 020f 	and.w	r2, r3, #15
 8006bc0:	6879      	ldr	r1, [r7, #4]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	440b      	add	r3, r1
 8006bcc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d104      	bne.n	8006be0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fb83 	bl	80072e4 <USBD_CtlError>
                  break;
 8006bde:	e041      	b.n	8006c64 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006be0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	da0b      	bge.n	8006c00 <USBD_StdEPReq+0x23e>
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	3310      	adds	r3, #16
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	e00b      	b.n	8006c18 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c00:	7bbb      	ldrb	r3, [r7, #14]
 8006c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c06:	4613      	mov	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	4413      	add	r3, r2
 8006c16:	3304      	adds	r3, #4
 8006c18:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <USBD_StdEPReq+0x264>
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	2b80      	cmp	r3, #128	; 0x80
 8006c24:	d103      	bne.n	8006c2e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	e00e      	b.n	8006c4c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f001 f88c 	bl	8007d50 <USBD_LL_IsStallEP>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2201      	movs	r2, #1
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	e002      	b.n	8006c4c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fbb7 	bl	80073c6 <USBD_CtlSendData>
              break;
 8006c58:	e004      	b.n	8006c64 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fb41 	bl	80072e4 <USBD_CtlError>
              break;
 8006c62:	bf00      	nop
          }
          break;
 8006c64:	e004      	b.n	8006c70 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fb3b 	bl	80072e4 <USBD_CtlError>
          break;
 8006c6e:	bf00      	nop
      }
      break;
 8006c70:	e004      	b.n	8006c7c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fb35 	bl	80072e4 <USBD_CtlError>
      break;
 8006c7a:	bf00      	nop
  }

  return ret;
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
	...

08006c88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	885b      	ldrh	r3, [r3, #2]
 8006ca2:	0a1b      	lsrs	r3, r3, #8
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	2b06      	cmp	r3, #6
 8006caa:	f200 8128 	bhi.w	8006efe <USBD_GetDescriptor+0x276>
 8006cae:	a201      	add	r2, pc, #4	; (adr r2, 8006cb4 <USBD_GetDescriptor+0x2c>)
 8006cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb4:	08006cd1 	.word	0x08006cd1
 8006cb8:	08006ce9 	.word	0x08006ce9
 8006cbc:	08006d29 	.word	0x08006d29
 8006cc0:	08006eff 	.word	0x08006eff
 8006cc4:	08006eff 	.word	0x08006eff
 8006cc8:	08006e9f 	.word	0x08006e9f
 8006ccc:	08006ecb 	.word	0x08006ecb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	7c12      	ldrb	r2, [r2, #16]
 8006cdc:	f107 0108 	add.w	r1, r7, #8
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	4798      	blx	r3
 8006ce4:	60f8      	str	r0, [r7, #12]
      break;
 8006ce6:	e112      	b.n	8006f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	7c1b      	ldrb	r3, [r3, #16]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10d      	bne.n	8006d0c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf8:	f107 0208 	add.w	r2, r7, #8
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	4798      	blx	r3
 8006d00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3301      	adds	r3, #1
 8006d06:	2202      	movs	r2, #2
 8006d08:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d0a:	e100      	b.n	8006f0e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d14:	f107 0208 	add.w	r2, r7, #8
 8006d18:	4610      	mov	r0, r2
 8006d1a:	4798      	blx	r3
 8006d1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3301      	adds	r3, #1
 8006d22:	2202      	movs	r2, #2
 8006d24:	701a      	strb	r2, [r3, #0]
      break;
 8006d26:	e0f2      	b.n	8006f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	885b      	ldrh	r3, [r3, #2]
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b05      	cmp	r3, #5
 8006d30:	f200 80ac 	bhi.w	8006e8c <USBD_GetDescriptor+0x204>
 8006d34:	a201      	add	r2, pc, #4	; (adr r2, 8006d3c <USBD_GetDescriptor+0xb4>)
 8006d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3a:	bf00      	nop
 8006d3c:	08006d55 	.word	0x08006d55
 8006d40:	08006d89 	.word	0x08006d89
 8006d44:	08006dbd 	.word	0x08006dbd
 8006d48:	08006df1 	.word	0x08006df1
 8006d4c:	08006e25 	.word	0x08006e25
 8006d50:	08006e59 	.word	0x08006e59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00b      	beq.n	8006d78 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	7c12      	ldrb	r2, [r2, #16]
 8006d6c:	f107 0108 	add.w	r1, r7, #8
 8006d70:	4610      	mov	r0, r2
 8006d72:	4798      	blx	r3
 8006d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d76:	e091      	b.n	8006e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fab2 	bl	80072e4 <USBD_CtlError>
            err++;
 8006d80:	7afb      	ldrb	r3, [r7, #11]
 8006d82:	3301      	adds	r3, #1
 8006d84:	72fb      	strb	r3, [r7, #11]
          break;
 8006d86:	e089      	b.n	8006e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00b      	beq.n	8006dac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	7c12      	ldrb	r2, [r2, #16]
 8006da0:	f107 0108 	add.w	r1, r7, #8
 8006da4:	4610      	mov	r0, r2
 8006da6:	4798      	blx	r3
 8006da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006daa:	e077      	b.n	8006e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fa98 	bl	80072e4 <USBD_CtlError>
            err++;
 8006db4:	7afb      	ldrb	r3, [r7, #11]
 8006db6:	3301      	adds	r3, #1
 8006db8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dba:	e06f      	b.n	8006e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	7c12      	ldrb	r2, [r2, #16]
 8006dd4:	f107 0108 	add.w	r1, r7, #8
 8006dd8:	4610      	mov	r0, r2
 8006dda:	4798      	blx	r3
 8006ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dde:	e05d      	b.n	8006e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fa7e 	bl	80072e4 <USBD_CtlError>
            err++;
 8006de8:	7afb      	ldrb	r3, [r7, #11]
 8006dea:	3301      	adds	r3, #1
 8006dec:	72fb      	strb	r3, [r7, #11]
          break;
 8006dee:	e055      	b.n	8006e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00b      	beq.n	8006e14 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	7c12      	ldrb	r2, [r2, #16]
 8006e08:	f107 0108 	add.w	r1, r7, #8
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	4798      	blx	r3
 8006e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e12:	e043      	b.n	8006e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fa64 	bl	80072e4 <USBD_CtlError>
            err++;
 8006e1c:	7afb      	ldrb	r3, [r7, #11]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	72fb      	strb	r3, [r7, #11]
          break;
 8006e22:	e03b      	b.n	8006e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00b      	beq.n	8006e48 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	7c12      	ldrb	r2, [r2, #16]
 8006e3c:	f107 0108 	add.w	r1, r7, #8
 8006e40:	4610      	mov	r0, r2
 8006e42:	4798      	blx	r3
 8006e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e46:	e029      	b.n	8006e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fa4a 	bl	80072e4 <USBD_CtlError>
            err++;
 8006e50:	7afb      	ldrb	r3, [r7, #11]
 8006e52:	3301      	adds	r3, #1
 8006e54:	72fb      	strb	r3, [r7, #11]
          break;
 8006e56:	e021      	b.n	8006e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00b      	beq.n	8006e7c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	7c12      	ldrb	r2, [r2, #16]
 8006e70:	f107 0108 	add.w	r1, r7, #8
 8006e74:	4610      	mov	r0, r2
 8006e76:	4798      	blx	r3
 8006e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e7a:	e00f      	b.n	8006e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fa30 	bl	80072e4 <USBD_CtlError>
            err++;
 8006e84:	7afb      	ldrb	r3, [r7, #11]
 8006e86:	3301      	adds	r3, #1
 8006e88:	72fb      	strb	r3, [r7, #11]
          break;
 8006e8a:	e007      	b.n	8006e9c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fa28 	bl	80072e4 <USBD_CtlError>
          err++;
 8006e94:	7afb      	ldrb	r3, [r7, #11]
 8006e96:	3301      	adds	r3, #1
 8006e98:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006e9a:	bf00      	nop
      }
      break;
 8006e9c:	e037      	b.n	8006f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	7c1b      	ldrb	r3, [r3, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d109      	bne.n	8006eba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eae:	f107 0208 	add.w	r2, r7, #8
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	4798      	blx	r3
 8006eb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006eb8:	e029      	b.n	8006f0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 fa11 	bl	80072e4 <USBD_CtlError>
        err++;
 8006ec2:	7afb      	ldrb	r3, [r7, #11]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ec8:	e021      	b.n	8006f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	7c1b      	ldrb	r3, [r3, #16]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10d      	bne.n	8006eee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eda:	f107 0208 	add.w	r2, r7, #8
 8006ede:	4610      	mov	r0, r2
 8006ee0:	4798      	blx	r3
 8006ee2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	2207      	movs	r2, #7
 8006eea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006eec:	e00f      	b.n	8006f0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f9f7 	bl	80072e4 <USBD_CtlError>
        err++;
 8006ef6:	7afb      	ldrb	r3, [r7, #11]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	72fb      	strb	r3, [r7, #11]
      break;
 8006efc:	e007      	b.n	8006f0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f9ef 	bl	80072e4 <USBD_CtlError>
      err++;
 8006f06:	7afb      	ldrb	r3, [r7, #11]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f0c:	bf00      	nop
  }

  if (err != 0U)
 8006f0e:	7afb      	ldrb	r3, [r7, #11]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d11e      	bne.n	8006f52 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	88db      	ldrh	r3, [r3, #6]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d016      	beq.n	8006f4a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006f1c:	893b      	ldrh	r3, [r7, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00e      	beq.n	8006f40 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	88da      	ldrh	r2, [r3, #6]
 8006f26:	893b      	ldrh	r3, [r7, #8]
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	bf28      	it	cs
 8006f2c:	4613      	movcs	r3, r2
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f32:	893b      	ldrh	r3, [r7, #8]
 8006f34:	461a      	mov	r2, r3
 8006f36:	68f9      	ldr	r1, [r7, #12]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fa44 	bl	80073c6 <USBD_CtlSendData>
 8006f3e:	e009      	b.n	8006f54 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f9ce 	bl	80072e4 <USBD_CtlError>
 8006f48:	e004      	b.n	8006f54 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa95 	bl	800747a <USBD_CtlSendStatus>
 8006f50:	e000      	b.n	8006f54 <USBD_GetDescriptor+0x2cc>
    return;
 8006f52:	bf00      	nop
  }
}
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop

08006f5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	889b      	ldrh	r3, [r3, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d131      	bne.n	8006fd2 <USBD_SetAddress+0x76>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	88db      	ldrh	r3, [r3, #6]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d12d      	bne.n	8006fd2 <USBD_SetAddress+0x76>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	885b      	ldrh	r3, [r3, #2]
 8006f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f7c:	d829      	bhi.n	8006fd2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	885b      	ldrh	r3, [r3, #2]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d104      	bne.n	8006fa0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f9a3 	bl	80072e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f9e:	e01d      	b.n	8006fdc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	7bfa      	ldrb	r2, [r7, #15]
 8006fa4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fefb 	bl	8007da8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fa61 	bl	800747a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d004      	beq.n	8006fc8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc6:	e009      	b.n	8006fdc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd0:	e004      	b.n	8006fdc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fd2:	6839      	ldr	r1, [r7, #0]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f985 	bl	80072e4 <USBD_CtlError>
  }
}
 8006fda:	bf00      	nop
 8006fdc:	bf00      	nop
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	885b      	ldrh	r3, [r3, #2]
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	4b4c      	ldr	r3, [pc, #304]	; (800712c <USBD_SetConfig+0x148>)
 8006ffa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ffc:	4b4b      	ldr	r3, [pc, #300]	; (800712c <USBD_SetConfig+0x148>)
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d905      	bls.n	8007010 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f96c 	bl	80072e4 <USBD_CtlError>
    return USBD_FAIL;
 800700c:	2303      	movs	r3, #3
 800700e:	e088      	b.n	8007122 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b02      	cmp	r3, #2
 800701a:	d002      	beq.n	8007022 <USBD_SetConfig+0x3e>
 800701c:	2b03      	cmp	r3, #3
 800701e:	d025      	beq.n	800706c <USBD_SetConfig+0x88>
 8007020:	e071      	b.n	8007106 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007022:	4b42      	ldr	r3, [pc, #264]	; (800712c <USBD_SetConfig+0x148>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d01c      	beq.n	8007064 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800702a:	4b40      	ldr	r3, [pc, #256]	; (800712c <USBD_SetConfig+0x148>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007034:	4b3d      	ldr	r3, [pc, #244]	; (800712c <USBD_SetConfig+0x148>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7ff f948 	bl	80062d0 <USBD_SetClassConfig>
 8007040:	4603      	mov	r3, r0
 8007042:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007044:	7bfb      	ldrb	r3, [r7, #15]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d004      	beq.n	8007054 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f949 	bl	80072e4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007052:	e065      	b.n	8007120 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fa10 	bl	800747a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2203      	movs	r2, #3
 800705e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007062:	e05d      	b.n	8007120 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fa08 	bl	800747a <USBD_CtlSendStatus>
      break;
 800706a:	e059      	b.n	8007120 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800706c:	4b2f      	ldr	r3, [pc, #188]	; (800712c <USBD_SetConfig+0x148>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d112      	bne.n	800709a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800707c:	4b2b      	ldr	r3, [pc, #172]	; (800712c <USBD_SetConfig+0x148>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	461a      	mov	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007086:	4b29      	ldr	r3, [pc, #164]	; (800712c <USBD_SetConfig+0x148>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7ff f93b 	bl	8006308 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f9f1 	bl	800747a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007098:	e042      	b.n	8007120 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800709a:	4b24      	ldr	r3, [pc, #144]	; (800712c <USBD_SetConfig+0x148>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d02a      	beq.n	80070fe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7ff f929 	bl	8006308 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80070b6:	4b1d      	ldr	r3, [pc, #116]	; (800712c <USBD_SetConfig+0x148>)
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070c0:	4b1a      	ldr	r3, [pc, #104]	; (800712c <USBD_SetConfig+0x148>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff f902 	bl	80062d0 <USBD_SetClassConfig>
 80070cc:	4603      	mov	r3, r0
 80070ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00f      	beq.n	80070f6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f903 	bl	80072e4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7ff f90e 	bl	8006308 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80070f4:	e014      	b.n	8007120 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f9bf 	bl	800747a <USBD_CtlSendStatus>
      break;
 80070fc:	e010      	b.n	8007120 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f9bb 	bl	800747a <USBD_CtlSendStatus>
      break;
 8007104:	e00c      	b.n	8007120 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f8eb 	bl	80072e4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800710e:	4b07      	ldr	r3, [pc, #28]	; (800712c <USBD_SetConfig+0x148>)
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff f8f7 	bl	8006308 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800711a:	2303      	movs	r3, #3
 800711c:	73fb      	strb	r3, [r7, #15]
      break;
 800711e:	bf00      	nop
  }

  return ret;
 8007120:	7bfb      	ldrb	r3, [r7, #15]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	2000019c 	.word	0x2000019c

08007130 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	88db      	ldrh	r3, [r3, #6]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d004      	beq.n	800714c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f8cd 	bl	80072e4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800714a:	e023      	b.n	8007194 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b02      	cmp	r3, #2
 8007156:	dc02      	bgt.n	800715e <USBD_GetConfig+0x2e>
 8007158:	2b00      	cmp	r3, #0
 800715a:	dc03      	bgt.n	8007164 <USBD_GetConfig+0x34>
 800715c:	e015      	b.n	800718a <USBD_GetConfig+0x5a>
 800715e:	2b03      	cmp	r3, #3
 8007160:	d00b      	beq.n	800717a <USBD_GetConfig+0x4a>
 8007162:	e012      	b.n	800718a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	3308      	adds	r3, #8
 800716e:	2201      	movs	r2, #1
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f927 	bl	80073c6 <USBD_CtlSendData>
        break;
 8007178:	e00c      	b.n	8007194 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3304      	adds	r3, #4
 800717e:	2201      	movs	r2, #1
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f91f 	bl	80073c6 <USBD_CtlSendData>
        break;
 8007188:	e004      	b.n	8007194 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f8a9 	bl	80072e4 <USBD_CtlError>
        break;
 8007192:	bf00      	nop
}
 8007194:	bf00      	nop
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	3b01      	subs	r3, #1
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d81e      	bhi.n	80071f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	88db      	ldrh	r3, [r3, #6]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d004      	beq.n	80071c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f890 	bl	80072e4 <USBD_CtlError>
        break;
 80071c4:	e01a      	b.n	80071fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f043 0202 	orr.w	r2, r3, #2
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	330c      	adds	r3, #12
 80071e6:	2202      	movs	r2, #2
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f8eb 	bl	80073c6 <USBD_CtlSendData>
      break;
 80071f0:	e004      	b.n	80071fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f875 	bl	80072e4 <USBD_CtlError>
      break;
 80071fa:	bf00      	nop
  }
}
 80071fc:	bf00      	nop
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	885b      	ldrh	r3, [r3, #2]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d106      	bne.n	8007224 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f92b 	bl	800747a <USBD_CtlSendStatus>
  }
}
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800723c:	b2db      	uxtb	r3, r3
 800723e:	3b01      	subs	r3, #1
 8007240:	2b02      	cmp	r3, #2
 8007242:	d80b      	bhi.n	800725c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	885b      	ldrh	r3, [r3, #2]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d10c      	bne.n	8007266 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f910 	bl	800747a <USBD_CtlSendStatus>
      }
      break;
 800725a:	e004      	b.n	8007266 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f840 	bl	80072e4 <USBD_CtlError>
      break;
 8007264:	e000      	b.n	8007268 <USBD_ClrFeature+0x3c>
      break;
 8007266:	bf00      	nop
  }
}
 8007268:	bf00      	nop
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	781a      	ldrb	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3301      	adds	r3, #1
 800728a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	781a      	ldrb	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	3301      	adds	r3, #1
 8007298:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f7ff fabb 	bl	8006816 <SWAPBYTE>
 80072a0:	4603      	mov	r3, r0
 80072a2:	461a      	mov	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3301      	adds	r3, #1
 80072ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3301      	adds	r3, #1
 80072b2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f7ff faae 	bl	8006816 <SWAPBYTE>
 80072ba:	4603      	mov	r3, r0
 80072bc:	461a      	mov	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	3301      	adds	r3, #1
 80072c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3301      	adds	r3, #1
 80072cc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f7ff faa1 	bl	8006816 <SWAPBYTE>
 80072d4:	4603      	mov	r3, r0
 80072d6:	461a      	mov	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	80da      	strh	r2, [r3, #6]
}
 80072dc:	bf00      	nop
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80072ee:	2180      	movs	r1, #128	; 0x80
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fcef 	bl	8007cd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80072f6:	2100      	movs	r1, #0
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fceb 	bl	8007cd4 <USBD_LL_StallEP>
}
 80072fe:	bf00      	nop
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b086      	sub	sp, #24
 800730a:	af00      	add	r7, sp, #0
 800730c:	60f8      	str	r0, [r7, #12]
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d036      	beq.n	800738a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007320:	6938      	ldr	r0, [r7, #16]
 8007322:	f000 f836 	bl	8007392 <USBD_GetLen>
 8007326:	4603      	mov	r3, r0
 8007328:	3301      	adds	r3, #1
 800732a:	b29b      	uxth	r3, r3
 800732c:	005b      	lsls	r3, r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	4413      	add	r3, r2
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	7812      	ldrb	r2, [r2, #0]
 800733e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007340:	7dfb      	ldrb	r3, [r7, #23]
 8007342:	3301      	adds	r3, #1
 8007344:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007346:	7dfb      	ldrb	r3, [r7, #23]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	4413      	add	r3, r2
 800734c:	2203      	movs	r2, #3
 800734e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007350:	7dfb      	ldrb	r3, [r7, #23]
 8007352:	3301      	adds	r3, #1
 8007354:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007356:	e013      	b.n	8007380 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	4413      	add	r3, r2
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	7812      	ldrb	r2, [r2, #0]
 8007362:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	3301      	adds	r3, #1
 8007368:	613b      	str	r3, [r7, #16]
    idx++;
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	3301      	adds	r3, #1
 800736e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007370:	7dfb      	ldrb	r3, [r7, #23]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	4413      	add	r3, r2
 8007376:	2200      	movs	r2, #0
 8007378:	701a      	strb	r2, [r3, #0]
    idx++;
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	3301      	adds	r3, #1
 800737e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e7      	bne.n	8007358 <USBD_GetString+0x52>
 8007388:	e000      	b.n	800738c <USBD_GetString+0x86>
    return;
 800738a:	bf00      	nop
  }
}
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007392:	b480      	push	{r7}
 8007394:	b085      	sub	sp, #20
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80073a2:	e005      	b.n	80073b0 <USBD_GetLen+0x1e>
  {
    len++;
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	3301      	adds	r3, #1
 80073a8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	3301      	adds	r3, #1
 80073ae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1f5      	bne.n	80073a4 <USBD_GetLen+0x12>
  }

  return len;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	60f8      	str	r0, [r7, #12]
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2202      	movs	r2, #2
 80073d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	2100      	movs	r1, #0
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 fcfa 	bl	8007de6 <USBD_LL_Transmit>

  return USBD_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	2100      	movs	r1, #0
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f000 fce9 	bl	8007de6 <USBD_LL_Transmit>

  return USBD_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
 8007424:	60f8      	str	r0, [r7, #12]
 8007426:	60b9      	str	r1, [r7, #8]
 8007428:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2203      	movs	r2, #3
 800742e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	2100      	movs	r1, #0
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 fced 	bl	8007e28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	2100      	movs	r1, #0
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 fcdc 	bl	8007e28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b082      	sub	sp, #8
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2204      	movs	r2, #4
 8007486:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800748a:	2300      	movs	r3, #0
 800748c:	2200      	movs	r2, #0
 800748e:	2100      	movs	r1, #0
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fca8 	bl	8007de6 <USBD_LL_Transmit>

  return USBD_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2205      	movs	r2, #5
 80074ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074b0:	2300      	movs	r3, #0
 80074b2:	2200      	movs	r2, #0
 80074b4:	2100      	movs	r1, #0
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fcb6 	bl	8007e28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074cc:	2200      	movs	r2, #0
 80074ce:	4912      	ldr	r1, [pc, #72]	; (8007518 <MX_USB_DEVICE_Init+0x50>)
 80074d0:	4812      	ldr	r0, [pc, #72]	; (800751c <MX_USB_DEVICE_Init+0x54>)
 80074d2:	f7fe fe8f 	bl	80061f4 <USBD_Init>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074dc:	f7f9 fde0 	bl	80010a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80074e0:	490f      	ldr	r1, [pc, #60]	; (8007520 <MX_USB_DEVICE_Init+0x58>)
 80074e2:	480e      	ldr	r0, [pc, #56]	; (800751c <MX_USB_DEVICE_Init+0x54>)
 80074e4:	f7fe feb6 	bl	8006254 <USBD_RegisterClass>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074ee:	f7f9 fdd7 	bl	80010a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80074f2:	490c      	ldr	r1, [pc, #48]	; (8007524 <MX_USB_DEVICE_Init+0x5c>)
 80074f4:	4809      	ldr	r0, [pc, #36]	; (800751c <MX_USB_DEVICE_Init+0x54>)
 80074f6:	f7fe fdd7 	bl	80060a8 <USBD_CDC_RegisterInterface>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007500:	f7f9 fdce 	bl	80010a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007504:	4805      	ldr	r0, [pc, #20]	; (800751c <MX_USB_DEVICE_Init+0x54>)
 8007506:	f7fe fecc 	bl	80062a2 <USBD_Start>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007510:	f7f9 fdc6 	bl	80010a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007514:	bf00      	nop
 8007516:	bd80      	pop	{r7, pc}
 8007518:	20000130 	.word	0x20000130
 800751c:	20000424 	.word	0x20000424
 8007520:	20000018 	.word	0x20000018
 8007524:	2000011c 	.word	0x2000011c

08007528 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800752c:	2200      	movs	r2, #0
 800752e:	4905      	ldr	r1, [pc, #20]	; (8007544 <CDC_Init_FS+0x1c>)
 8007530:	4805      	ldr	r0, [pc, #20]	; (8007548 <CDC_Init_FS+0x20>)
 8007532:	f7fe fdce 	bl	80060d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007536:	4905      	ldr	r1, [pc, #20]	; (800754c <CDC_Init_FS+0x24>)
 8007538:	4803      	ldr	r0, [pc, #12]	; (8007548 <CDC_Init_FS+0x20>)
 800753a:	f7fe fde8 	bl	800610e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800753e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007540:	4618      	mov	r0, r3
 8007542:	bd80      	pop	{r7, pc}
 8007544:	20000ef4 	.word	0x20000ef4
 8007548:	20000424 	.word	0x20000424
 800754c:	200006f4 	.word	0x200006f4

08007550 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007550:	b480      	push	{r7}
 8007552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007554:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007556:	4618      	mov	r0, r3
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	4603      	mov	r3, r0
 8007568:	6039      	str	r1, [r7, #0]
 800756a:	71fb      	strb	r3, [r7, #7]
 800756c:	4613      	mov	r3, r2
 800756e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	2b23      	cmp	r3, #35	; 0x23
 8007574:	d84a      	bhi.n	800760c <CDC_Control_FS+0xac>
 8007576:	a201      	add	r2, pc, #4	; (adr r2, 800757c <CDC_Control_FS+0x1c>)
 8007578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757c:	0800760d 	.word	0x0800760d
 8007580:	0800760d 	.word	0x0800760d
 8007584:	0800760d 	.word	0x0800760d
 8007588:	0800760d 	.word	0x0800760d
 800758c:	0800760d 	.word	0x0800760d
 8007590:	0800760d 	.word	0x0800760d
 8007594:	0800760d 	.word	0x0800760d
 8007598:	0800760d 	.word	0x0800760d
 800759c:	0800760d 	.word	0x0800760d
 80075a0:	0800760d 	.word	0x0800760d
 80075a4:	0800760d 	.word	0x0800760d
 80075a8:	0800760d 	.word	0x0800760d
 80075ac:	0800760d 	.word	0x0800760d
 80075b0:	0800760d 	.word	0x0800760d
 80075b4:	0800760d 	.word	0x0800760d
 80075b8:	0800760d 	.word	0x0800760d
 80075bc:	0800760d 	.word	0x0800760d
 80075c0:	0800760d 	.word	0x0800760d
 80075c4:	0800760d 	.word	0x0800760d
 80075c8:	0800760d 	.word	0x0800760d
 80075cc:	0800760d 	.word	0x0800760d
 80075d0:	0800760d 	.word	0x0800760d
 80075d4:	0800760d 	.word	0x0800760d
 80075d8:	0800760d 	.word	0x0800760d
 80075dc:	0800760d 	.word	0x0800760d
 80075e0:	0800760d 	.word	0x0800760d
 80075e4:	0800760d 	.word	0x0800760d
 80075e8:	0800760d 	.word	0x0800760d
 80075ec:	0800760d 	.word	0x0800760d
 80075f0:	0800760d 	.word	0x0800760d
 80075f4:	0800760d 	.word	0x0800760d
 80075f8:	0800760d 	.word	0x0800760d
 80075fc:	0800760d 	.word	0x0800760d
 8007600:	0800760d 	.word	0x0800760d
 8007604:	0800760d 	.word	0x0800760d
 8007608:	0800760d 	.word	0x0800760d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800760c:	bf00      	nop
  }

  return (USBD_OK);
 800760e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007610:	4618      	mov	r0, r3
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007626:	6879      	ldr	r1, [r7, #4]
 8007628:	4805      	ldr	r0, [pc, #20]	; (8007640 <CDC_Receive_FS+0x24>)
 800762a:	f7fe fd70 	bl	800610e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800762e:	4804      	ldr	r0, [pc, #16]	; (8007640 <CDC_Receive_FS+0x24>)
 8007630:	f7fe fdb6 	bl	80061a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007634:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20000424 	.word	0x20000424

08007644 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007654:	4b0d      	ldr	r3, [pc, #52]	; (800768c <CDC_Transmit_FS+0x48>)
 8007656:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800765a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007666:	2301      	movs	r3, #1
 8007668:	e00b      	b.n	8007682 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800766a:	887b      	ldrh	r3, [r7, #2]
 800766c:	461a      	mov	r2, r3
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	4806      	ldr	r0, [pc, #24]	; (800768c <CDC_Transmit_FS+0x48>)
 8007672:	f7fe fd2e 	bl	80060d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007676:	4805      	ldr	r0, [pc, #20]	; (800768c <CDC_Transmit_FS+0x48>)
 8007678:	f7fe fd62 	bl	8006140 <USBD_CDC_TransmitPacket>
 800767c:	4603      	mov	r3, r0
 800767e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007680:	7bfb      	ldrb	r3, [r7, #15]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	20000424 	.word	0x20000424

08007690 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007690:	b480      	push	{r7}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	4613      	mov	r3, r2
 800769c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80076a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
	...

080076b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	6039      	str	r1, [r7, #0]
 80076be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	2212      	movs	r2, #18
 80076c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076c6:	4b03      	ldr	r3, [pc, #12]	; (80076d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	2000014c 	.word	0x2000014c

080076d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	4603      	mov	r3, r0
 80076e0:	6039      	str	r1, [r7, #0]
 80076e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2204      	movs	r2, #4
 80076e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076ea:	4b03      	ldr	r3, [pc, #12]	; (80076f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	20000160 	.word	0x20000160

080076fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	4603      	mov	r3, r0
 8007704:	6039      	str	r1, [r7, #0]
 8007706:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007708:	79fb      	ldrb	r3, [r7, #7]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d105      	bne.n	800771a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	4907      	ldr	r1, [pc, #28]	; (8007730 <USBD_FS_ProductStrDescriptor+0x34>)
 8007712:	4808      	ldr	r0, [pc, #32]	; (8007734 <USBD_FS_ProductStrDescriptor+0x38>)
 8007714:	f7ff fdf7 	bl	8007306 <USBD_GetString>
 8007718:	e004      	b.n	8007724 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	4904      	ldr	r1, [pc, #16]	; (8007730 <USBD_FS_ProductStrDescriptor+0x34>)
 800771e:	4805      	ldr	r0, [pc, #20]	; (8007734 <USBD_FS_ProductStrDescriptor+0x38>)
 8007720:	f7ff fdf1 	bl	8007306 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007724:	4b02      	ldr	r3, [pc, #8]	; (8007730 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	200016f4 	.word	0x200016f4
 8007734:	08007f88 	.word	0x08007f88

08007738 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	4603      	mov	r3, r0
 8007740:	6039      	str	r1, [r7, #0]
 8007742:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	4904      	ldr	r1, [pc, #16]	; (8007758 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007748:	4804      	ldr	r0, [pc, #16]	; (800775c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800774a:	f7ff fddc 	bl	8007306 <USBD_GetString>
  return USBD_StrDesc;
 800774e:	4b02      	ldr	r3, [pc, #8]	; (8007758 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007750:	4618      	mov	r0, r3
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	200016f4 	.word	0x200016f4
 800775c:	08007fa0 	.word	0x08007fa0

08007760 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	4603      	mov	r3, r0
 8007768:	6039      	str	r1, [r7, #0]
 800776a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	221a      	movs	r2, #26
 8007770:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007772:	f000 f843 	bl	80077fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007776:	4b02      	ldr	r3, [pc, #8]	; (8007780 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007778:	4618      	mov	r0, r3
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	20000164 	.word	0x20000164

08007784 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	4603      	mov	r3, r0
 800778c:	6039      	str	r1, [r7, #0]
 800778e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007790:	79fb      	ldrb	r3, [r7, #7]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d105      	bne.n	80077a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	4907      	ldr	r1, [pc, #28]	; (80077b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800779a:	4808      	ldr	r0, [pc, #32]	; (80077bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800779c:	f7ff fdb3 	bl	8007306 <USBD_GetString>
 80077a0:	e004      	b.n	80077ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	4904      	ldr	r1, [pc, #16]	; (80077b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077a6:	4805      	ldr	r0, [pc, #20]	; (80077bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80077a8:	f7ff fdad 	bl	8007306 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077ac:	4b02      	ldr	r3, [pc, #8]	; (80077b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	200016f4 	.word	0x200016f4
 80077bc:	08007fb4 	.word	0x08007fb4

080077c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4603      	mov	r3, r0
 80077c8:	6039      	str	r1, [r7, #0]
 80077ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077cc:	79fb      	ldrb	r3, [r7, #7]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d105      	bne.n	80077de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	4907      	ldr	r1, [pc, #28]	; (80077f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077d6:	4808      	ldr	r0, [pc, #32]	; (80077f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077d8:	f7ff fd95 	bl	8007306 <USBD_GetString>
 80077dc:	e004      	b.n	80077e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	4904      	ldr	r1, [pc, #16]	; (80077f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077e2:	4805      	ldr	r0, [pc, #20]	; (80077f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077e4:	f7ff fd8f 	bl	8007306 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077e8:	4b02      	ldr	r3, [pc, #8]	; (80077f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	200016f4 	.word	0x200016f4
 80077f8:	08007fc0 	.word	0x08007fc0

080077fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007802:	4b0f      	ldr	r3, [pc, #60]	; (8007840 <Get_SerialNum+0x44>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007808:	4b0e      	ldr	r3, [pc, #56]	; (8007844 <Get_SerialNum+0x48>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800780e:	4b0e      	ldr	r3, [pc, #56]	; (8007848 <Get_SerialNum+0x4c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4413      	add	r3, r2
 800781a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d009      	beq.n	8007836 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007822:	2208      	movs	r2, #8
 8007824:	4909      	ldr	r1, [pc, #36]	; (800784c <Get_SerialNum+0x50>)
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 f814 	bl	8007854 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800782c:	2204      	movs	r2, #4
 800782e:	4908      	ldr	r1, [pc, #32]	; (8007850 <Get_SerialNum+0x54>)
 8007830:	68b8      	ldr	r0, [r7, #8]
 8007832:	f000 f80f 	bl	8007854 <IntToUnicode>
  }
}
 8007836:	bf00      	nop
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	1fff7a10 	.word	0x1fff7a10
 8007844:	1fff7a14 	.word	0x1fff7a14
 8007848:	1fff7a18 	.word	0x1fff7a18
 800784c:	20000166 	.word	0x20000166
 8007850:	20000176 	.word	0x20000176

08007854 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	4613      	mov	r3, r2
 8007860:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007862:	2300      	movs	r3, #0
 8007864:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007866:	2300      	movs	r3, #0
 8007868:	75fb      	strb	r3, [r7, #23]
 800786a:	e027      	b.n	80078bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	0f1b      	lsrs	r3, r3, #28
 8007870:	2b09      	cmp	r3, #9
 8007872:	d80b      	bhi.n	800788c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	0f1b      	lsrs	r3, r3, #28
 8007878:	b2da      	uxtb	r2, r3
 800787a:	7dfb      	ldrb	r3, [r7, #23]
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	4619      	mov	r1, r3
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	440b      	add	r3, r1
 8007884:	3230      	adds	r2, #48	; 0x30
 8007886:	b2d2      	uxtb	r2, r2
 8007888:	701a      	strb	r2, [r3, #0]
 800788a:	e00a      	b.n	80078a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	0f1b      	lsrs	r3, r3, #28
 8007890:	b2da      	uxtb	r2, r3
 8007892:	7dfb      	ldrb	r3, [r7, #23]
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	4619      	mov	r1, r3
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	440b      	add	r3, r1
 800789c:	3237      	adds	r2, #55	; 0x37
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	011b      	lsls	r3, r3, #4
 80078a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80078a8:	7dfb      	ldrb	r3, [r7, #23]
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	3301      	adds	r3, #1
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	4413      	add	r3, r2
 80078b2:	2200      	movs	r2, #0
 80078b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078b6:	7dfb      	ldrb	r3, [r7, #23]
 80078b8:	3301      	adds	r3, #1
 80078ba:	75fb      	strb	r3, [r7, #23]
 80078bc:	7dfa      	ldrb	r2, [r7, #23]
 80078be:	79fb      	ldrb	r3, [r7, #7]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d3d3      	bcc.n	800786c <IntToUnicode+0x18>
  }
}
 80078c4:	bf00      	nop
 80078c6:	bf00      	nop
 80078c8:	371c      	adds	r7, #28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
	...

080078d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b08a      	sub	sp, #40	; 0x28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078dc:	f107 0314 	add.w	r3, r7, #20
 80078e0:	2200      	movs	r2, #0
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	605a      	str	r2, [r3, #4]
 80078e6:	609a      	str	r2, [r3, #8]
 80078e8:	60da      	str	r2, [r3, #12]
 80078ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078f4:	d147      	bne.n	8007986 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078f6:	2300      	movs	r3, #0
 80078f8:	613b      	str	r3, [r7, #16]
 80078fa:	4b25      	ldr	r3, [pc, #148]	; (8007990 <HAL_PCD_MspInit+0xbc>)
 80078fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fe:	4a24      	ldr	r2, [pc, #144]	; (8007990 <HAL_PCD_MspInit+0xbc>)
 8007900:	f043 0301 	orr.w	r3, r3, #1
 8007904:	6313      	str	r3, [r2, #48]	; 0x30
 8007906:	4b22      	ldr	r3, [pc, #136]	; (8007990 <HAL_PCD_MspInit+0xbc>)
 8007908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	613b      	str	r3, [r7, #16]
 8007910:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007918:	2300      	movs	r3, #0
 800791a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800791c:	2300      	movs	r3, #0
 800791e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007920:	f107 0314 	add.w	r3, r7, #20
 8007924:	4619      	mov	r1, r3
 8007926:	481b      	ldr	r0, [pc, #108]	; (8007994 <HAL_PCD_MspInit+0xc0>)
 8007928:	f7f9 fe72 	bl	8001610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800792c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007932:	2302      	movs	r3, #2
 8007934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007936:	2300      	movs	r3, #0
 8007938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800793a:	2300      	movs	r3, #0
 800793c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800793e:	230a      	movs	r3, #10
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007942:	f107 0314 	add.w	r3, r7, #20
 8007946:	4619      	mov	r1, r3
 8007948:	4812      	ldr	r0, [pc, #72]	; (8007994 <HAL_PCD_MspInit+0xc0>)
 800794a:	f7f9 fe61 	bl	8001610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800794e:	4b10      	ldr	r3, [pc, #64]	; (8007990 <HAL_PCD_MspInit+0xbc>)
 8007950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007952:	4a0f      	ldr	r2, [pc, #60]	; (8007990 <HAL_PCD_MspInit+0xbc>)
 8007954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007958:	6353      	str	r3, [r2, #52]	; 0x34
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
 800795e:	4b0c      	ldr	r3, [pc, #48]	; (8007990 <HAL_PCD_MspInit+0xbc>)
 8007960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007962:	4a0b      	ldr	r2, [pc, #44]	; (8007990 <HAL_PCD_MspInit+0xbc>)
 8007964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007968:	6453      	str	r3, [r2, #68]	; 0x44
 800796a:	4b09      	ldr	r3, [pc, #36]	; (8007990 <HAL_PCD_MspInit+0xbc>)
 800796c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800796e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007976:	2200      	movs	r2, #0
 8007978:	2100      	movs	r1, #0
 800797a:	2043      	movs	r0, #67	; 0x43
 800797c:	f7f9 fe11 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007980:	2043      	movs	r0, #67	; 0x43
 8007982:	f7f9 fe2a 	bl	80015da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007986:	bf00      	nop
 8007988:	3728      	adds	r7, #40	; 0x28
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	40023800 	.word	0x40023800
 8007994:	40020000 	.word	0x40020000

08007998 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80079ac:	4619      	mov	r1, r3
 80079ae:	4610      	mov	r0, r2
 80079b0:	f7fe fcc2 	bl	8006338 <USBD_LL_SetupStage>
}
 80079b4:	bf00      	nop
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	460b      	mov	r3, r1
 80079c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80079ce:	78fa      	ldrb	r2, [r7, #3]
 80079d0:	6879      	ldr	r1, [r7, #4]
 80079d2:	4613      	mov	r3, r2
 80079d4:	00db      	lsls	r3, r3, #3
 80079d6:	1a9b      	subs	r3, r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	440b      	add	r3, r1
 80079dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	78fb      	ldrb	r3, [r7, #3]
 80079e4:	4619      	mov	r1, r3
 80079e6:	f7fe fcfc 	bl	80063e2 <USBD_LL_DataOutStage>
}
 80079ea:	bf00      	nop
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b082      	sub	sp, #8
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	460b      	mov	r3, r1
 80079fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007a04:	78fa      	ldrb	r2, [r7, #3]
 8007a06:	6879      	ldr	r1, [r7, #4]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	00db      	lsls	r3, r3, #3
 8007a0c:	1a9b      	subs	r3, r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	440b      	add	r3, r1
 8007a12:	3348      	adds	r3, #72	; 0x48
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	78fb      	ldrb	r3, [r7, #3]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	f7fe fd45 	bl	80064a8 <USBD_LL_DataInStage>
}
 8007a1e:	bf00      	nop
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b082      	sub	sp, #8
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fe fe59 	bl	80066ec <USBD_LL_SOF>
}
 8007a3a:	bf00      	nop
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b084      	sub	sp, #16
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d102      	bne.n	8007a5c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]
 8007a5a:	e008      	b.n	8007a6e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d102      	bne.n	8007a6a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007a64:	2301      	movs	r3, #1
 8007a66:	73fb      	strb	r3, [r7, #15]
 8007a68:	e001      	b.n	8007a6e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007a6a:	f7f9 fb19 	bl	80010a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a74:	7bfa      	ldrb	r2, [r7, #15]
 8007a76:	4611      	mov	r1, r2
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7fe fdf9 	bl	8006670 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fe fda5 	bl	80065d4 <USBD_LL_Reset>
}
 8007a8a:	bf00      	nop
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fe fdf4 	bl	8006690 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6812      	ldr	r2, [r2, #0]
 8007ab6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007aba:	f043 0301 	orr.w	r3, r3, #1
 8007abe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a1b      	ldr	r3, [r3, #32]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d005      	beq.n	8007ad4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ac8:	4b04      	ldr	r3, [pc, #16]	; (8007adc <HAL_PCD_SuspendCallback+0x48>)
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	4a03      	ldr	r2, [pc, #12]	; (8007adc <HAL_PCD_SuspendCallback+0x48>)
 8007ace:	f043 0306 	orr.w	r3, r3, #6
 8007ad2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ad4:	bf00      	nop
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	e000ed00 	.word	0xe000ed00

08007ae0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fe fde4 	bl	80066bc <USBD_LL_Resume>
}
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b0e:	78fa      	ldrb	r2, [r7, #3]
 8007b10:	4611      	mov	r1, r2
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe fe32 	bl	800677c <USBD_LL_IsoOUTIncomplete>
}
 8007b18:	bf00      	nop
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b32:	78fa      	ldrb	r2, [r7, #3]
 8007b34:	4611      	mov	r1, r2
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fe fdfa 	bl	8006730 <USBD_LL_IsoINIncomplete>
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fe fe38 	bl	80067c8 <USBD_LL_DevConnected>
}
 8007b58:	bf00      	nop
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fe fe35 	bl	80067de <USBD_LL_DevDisconnected>
}
 8007b74:	bf00      	nop
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d13c      	bne.n	8007c06 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b8c:	4a20      	ldr	r2, [pc, #128]	; (8007c10 <USBD_LL_Init+0x94>)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a1e      	ldr	r2, [pc, #120]	; (8007c10 <USBD_LL_Init+0x94>)
 8007b98:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b9c:	4b1c      	ldr	r3, [pc, #112]	; (8007c10 <USBD_LL_Init+0x94>)
 8007b9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ba2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ba4:	4b1a      	ldr	r3, [pc, #104]	; (8007c10 <USBD_LL_Init+0x94>)
 8007ba6:	2204      	movs	r2, #4
 8007ba8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007baa:	4b19      	ldr	r3, [pc, #100]	; (8007c10 <USBD_LL_Init+0x94>)
 8007bac:	2202      	movs	r2, #2
 8007bae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007bb0:	4b17      	ldr	r3, [pc, #92]	; (8007c10 <USBD_LL_Init+0x94>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007bb6:	4b16      	ldr	r3, [pc, #88]	; (8007c10 <USBD_LL_Init+0x94>)
 8007bb8:	2202      	movs	r2, #2
 8007bba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007bbc:	4b14      	ldr	r3, [pc, #80]	; (8007c10 <USBD_LL_Init+0x94>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007bc2:	4b13      	ldr	r3, [pc, #76]	; (8007c10 <USBD_LL_Init+0x94>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007bc8:	4b11      	ldr	r3, [pc, #68]	; (8007c10 <USBD_LL_Init+0x94>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007bce:	4b10      	ldr	r3, [pc, #64]	; (8007c10 <USBD_LL_Init+0x94>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007bd4:	4b0e      	ldr	r3, [pc, #56]	; (8007c10 <USBD_LL_Init+0x94>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007bda:	480d      	ldr	r0, [pc, #52]	; (8007c10 <USBD_LL_Init+0x94>)
 8007bdc:	f7fa fe87 	bl	80028ee <HAL_PCD_Init>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007be6:	f7f9 fa5b 	bl	80010a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007bea:	2180      	movs	r1, #128	; 0x80
 8007bec:	4808      	ldr	r0, [pc, #32]	; (8007c10 <USBD_LL_Init+0x94>)
 8007bee:	f7fb ffe4 	bl	8003bba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007bf2:	2240      	movs	r2, #64	; 0x40
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	4806      	ldr	r0, [pc, #24]	; (8007c10 <USBD_LL_Init+0x94>)
 8007bf8:	f7fb ff98 	bl	8003b2c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007bfc:	2280      	movs	r2, #128	; 0x80
 8007bfe:	2101      	movs	r1, #1
 8007c00:	4803      	ldr	r0, [pc, #12]	; (8007c10 <USBD_LL_Init+0x94>)
 8007c02:	f7fb ff93 	bl	8003b2c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	200018f4 	.word	0x200018f4

08007c14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fa ff7c 	bl	8002b28 <HAL_PCD_Start>
 8007c30:	4603      	mov	r3, r0
 8007c32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 f942 	bl	8007ec0 <USBD_Get_USB_Status>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	4608      	mov	r0, r1
 8007c54:	4611      	mov	r1, r2
 8007c56:	461a      	mov	r2, r3
 8007c58:	4603      	mov	r3, r0
 8007c5a:	70fb      	strb	r3, [r7, #3]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	70bb      	strb	r3, [r7, #2]
 8007c60:	4613      	mov	r3, r2
 8007c62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c72:	78bb      	ldrb	r3, [r7, #2]
 8007c74:	883a      	ldrh	r2, [r7, #0]
 8007c76:	78f9      	ldrb	r1, [r7, #3]
 8007c78:	f7fb fb60 	bl	800333c <HAL_PCD_EP_Open>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 f91c 	bl	8007ec0 <USBD_Get_USB_Status>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cb0:	78fa      	ldrb	r2, [r7, #3]
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fb fba9 	bl	800340c <HAL_PCD_EP_Close>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 f8fd 	bl	8007ec0 <USBD_Get_USB_Status>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cca:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cee:	78fa      	ldrb	r2, [r7, #3]
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fb fc81 	bl	80035fa <HAL_PCD_EP_SetStall>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 f8de 	bl	8007ec0 <USBD_Get_USB_Status>
 8007d04:	4603      	mov	r3, r0
 8007d06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b084      	sub	sp, #16
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d2c:	78fa      	ldrb	r2, [r7, #3]
 8007d2e:	4611      	mov	r1, r2
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fb fcc6 	bl	80036c2 <HAL_PCD_EP_ClrStall>
 8007d36:	4603      	mov	r3, r0
 8007d38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d3a:	7bfb      	ldrb	r3, [r7, #15]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 f8bf 	bl	8007ec0 <USBD_Get_USB_Status>
 8007d42:	4603      	mov	r3, r0
 8007d44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d46:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	da0b      	bge.n	8007d84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d6c:	78fb      	ldrb	r3, [r7, #3]
 8007d6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d72:	68f9      	ldr	r1, [r7, #12]
 8007d74:	4613      	mov	r3, r2
 8007d76:	00db      	lsls	r3, r3, #3
 8007d78:	1a9b      	subs	r3, r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	440b      	add	r3, r1
 8007d7e:	333e      	adds	r3, #62	; 0x3e
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	e00b      	b.n	8007d9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d84:	78fb      	ldrb	r3, [r7, #3]
 8007d86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d8a:	68f9      	ldr	r1, [r7, #12]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	00db      	lsls	r3, r3, #3
 8007d90:	1a9b      	subs	r3, r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	440b      	add	r3, r1
 8007d96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db8:	2300      	movs	r3, #0
 8007dba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dc2:	78fa      	ldrb	r2, [r7, #3]
 8007dc4:	4611      	mov	r1, r2
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fb fa93 	bl	80032f2 <HAL_PCD_SetAddress>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 f874 	bl	8007ec0 <USBD_Get_USB_Status>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ddc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b086      	sub	sp, #24
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	60f8      	str	r0, [r7, #12]
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	603b      	str	r3, [r7, #0]
 8007df2:	460b      	mov	r3, r1
 8007df4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e04:	7af9      	ldrb	r1, [r7, #11]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	f7fb fbac 	bl	8003566 <HAL_PCD_EP_Transmit>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e12:	7dfb      	ldrb	r3, [r7, #23]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 f853 	bl	8007ec0 <USBD_Get_USB_Status>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	607a      	str	r2, [r7, #4]
 8007e32:	603b      	str	r3, [r7, #0]
 8007e34:	460b      	mov	r3, r1
 8007e36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e46:	7af9      	ldrb	r1, [r7, #11]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	f7fb fb28 	bl	80034a0 <HAL_PCD_EP_Receive>
 8007e50:	4603      	mov	r3, r0
 8007e52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 f832 	bl	8007ec0 <USBD_Get_USB_Status>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e60:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3718      	adds	r7, #24
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b082      	sub	sp, #8
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	460b      	mov	r3, r1
 8007e74:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e7c:	78fa      	ldrb	r2, [r7, #3]
 8007e7e:	4611      	mov	r1, r2
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fb fb58 	bl	8003536 <HAL_PCD_EP_GetRxCount>
 8007e86:	4603      	mov	r3, r0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e98:	4b03      	ldr	r3, [pc, #12]	; (8007ea8 <USBD_static_malloc+0x18>)
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	200001a0 	.word	0x200001a0

08007eac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]

}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ece:	79fb      	ldrb	r3, [r7, #7]
 8007ed0:	2b03      	cmp	r3, #3
 8007ed2:	d817      	bhi.n	8007f04 <USBD_Get_USB_Status+0x44>
 8007ed4:	a201      	add	r2, pc, #4	; (adr r2, 8007edc <USBD_Get_USB_Status+0x1c>)
 8007ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eda:	bf00      	nop
 8007edc:	08007eed 	.word	0x08007eed
 8007ee0:	08007ef3 	.word	0x08007ef3
 8007ee4:	08007ef9 	.word	0x08007ef9
 8007ee8:	08007eff 	.word	0x08007eff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	73fb      	strb	r3, [r7, #15]
    break;
 8007ef0:	e00b      	b.n	8007f0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ef6:	e008      	b.n	8007f0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	73fb      	strb	r3, [r7, #15]
    break;
 8007efc:	e005      	b.n	8007f0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007efe:	2303      	movs	r3, #3
 8007f00:	73fb      	strb	r3, [r7, #15]
    break;
 8007f02:	e002      	b.n	8007f0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f04:	2303      	movs	r3, #3
 8007f06:	73fb      	strb	r3, [r7, #15]
    break;
 8007f08:	bf00      	nop
  }
  return usb_status;
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <__libc_init_array>:
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	4d0d      	ldr	r5, [pc, #52]	; (8007f50 <__libc_init_array+0x38>)
 8007f1c:	4c0d      	ldr	r4, [pc, #52]	; (8007f54 <__libc_init_array+0x3c>)
 8007f1e:	1b64      	subs	r4, r4, r5
 8007f20:	10a4      	asrs	r4, r4, #2
 8007f22:	2600      	movs	r6, #0
 8007f24:	42a6      	cmp	r6, r4
 8007f26:	d109      	bne.n	8007f3c <__libc_init_array+0x24>
 8007f28:	4d0b      	ldr	r5, [pc, #44]	; (8007f58 <__libc_init_array+0x40>)
 8007f2a:	4c0c      	ldr	r4, [pc, #48]	; (8007f5c <__libc_init_array+0x44>)
 8007f2c:	f000 f820 	bl	8007f70 <_init>
 8007f30:	1b64      	subs	r4, r4, r5
 8007f32:	10a4      	asrs	r4, r4, #2
 8007f34:	2600      	movs	r6, #0
 8007f36:	42a6      	cmp	r6, r4
 8007f38:	d105      	bne.n	8007f46 <__libc_init_array+0x2e>
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}
 8007f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f40:	4798      	blx	r3
 8007f42:	3601      	adds	r6, #1
 8007f44:	e7ee      	b.n	8007f24 <__libc_init_array+0xc>
 8007f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f4a:	4798      	blx	r3
 8007f4c:	3601      	adds	r6, #1
 8007f4e:	e7f2      	b.n	8007f36 <__libc_init_array+0x1e>
 8007f50:	08007ff0 	.word	0x08007ff0
 8007f54:	08007ff0 	.word	0x08007ff0
 8007f58:	08007ff0 	.word	0x08007ff0
 8007f5c:	08007ff4 	.word	0x08007ff4

08007f60 <memset>:
 8007f60:	4402      	add	r2, r0
 8007f62:	4603      	mov	r3, r0
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d100      	bne.n	8007f6a <memset+0xa>
 8007f68:	4770      	bx	lr
 8007f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f6e:	e7f9      	b.n	8007f64 <memset+0x4>

08007f70 <_init>:
 8007f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f72:	bf00      	nop
 8007f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f76:	bc08      	pop	{r3}
 8007f78:	469e      	mov	lr, r3
 8007f7a:	4770      	bx	lr

08007f7c <_fini>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	bf00      	nop
 8007f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f82:	bc08      	pop	{r3}
 8007f84:	469e      	mov	lr, r3
 8007f86:	4770      	bx	lr
