
Firmware_MAXM86161.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007b3c  08007b3c  00017b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b9c  08007b9c  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08007b9c  08007b9c  00017b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ba4  08007ba4  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ba4  08007ba4  00017ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ba8  08007ba8  00017ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00001b70  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001cf0  20001cf0  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016fa4  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032c5  00000000  00000000  00037154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  0003a420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ce0  00000000  00000000  0003b230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002391d  00000000  00000000  0003bf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001301a  00000000  00000000  0005f82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c74f0  00000000  00000000  00072847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00139d37  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000395c  00000000  00000000  00139d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007b24 	.word	0x08007b24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08007b24 	.word	0x08007b24

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MAXM86161_I2C_Write>:
MAXM86161_Init_TypeDef ppg_config;

/**
 * Write MAXM86161 register(s)
 */
bool MAXM86161_I2C_Write(uint8_t regName, uint8_t* regValue, uint8_t numBytes) {
 80004c0:	b5b0      	push	{r4, r5, r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
 80004cc:	4613      	mov	r3, r2
 80004ce:	71bb      	strb	r3, [r7, #6]
 80004d0:	466b      	mov	r3, sp
 80004d2:	461d      	mov	r5, r3
	uint8_t tx_buffer[numBytes + 1];
 80004d4:	79bb      	ldrb	r3, [r7, #6]
 80004d6:	1c5c      	adds	r4, r3, #1
 80004d8:	1e63      	subs	r3, r4, #1
 80004da:	613b      	str	r3, [r7, #16]
 80004dc:	4623      	mov	r3, r4
 80004de:	4618      	mov	r0, r3
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	f04f 0200 	mov.w	r2, #0
 80004e8:	f04f 0300 	mov.w	r3, #0
 80004ec:	00cb      	lsls	r3, r1, #3
 80004ee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80004f2:	00c2      	lsls	r2, r0, #3
 80004f4:	4623      	mov	r3, r4
 80004f6:	4618      	mov	r0, r3
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	f04f 0200 	mov.w	r2, #0
 8000500:	f04f 0300 	mov.w	r3, #0
 8000504:	00cb      	lsls	r3, r1, #3
 8000506:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800050a:	00c2      	lsls	r2, r0, #3
 800050c:	4623      	mov	r3, r4
 800050e:	3307      	adds	r3, #7
 8000510:	08db      	lsrs	r3, r3, #3
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	ebad 0d03 	sub.w	sp, sp, r3
 8000518:	ab02      	add	r3, sp, #8
 800051a:	3300      	adds	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
	uint8_t i;
	tx_buffer[0] = regName;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	79fa      	ldrb	r2, [r7, #7]
 8000522:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < numBytes; i++)
 8000524:	2300      	movs	r3, #0
 8000526:	75fb      	strb	r3, [r7, #23]
 8000528:	e00a      	b.n	8000540 <MAXM86161_I2C_Write+0x80>
		tx_buffer[i + 1] = regValue[i];
 800052a:	7dfb      	ldrb	r3, [r7, #23]
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	441a      	add	r2, r3
 8000530:	7dfb      	ldrb	r3, [r7, #23]
 8000532:	3301      	adds	r3, #1
 8000534:	7811      	ldrb	r1, [r2, #0]
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < numBytes; i++)
 800053a:	7dfb      	ldrb	r3, [r7, #23]
 800053c:	3301      	adds	r3, #1
 800053e:	75fb      	strb	r3, [r7, #23]
 8000540:	7dfa      	ldrb	r2, [r7, #23]
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	429a      	cmp	r2, r3
 8000546:	d3f0      	bcc.n	800052a <MAXM86161_I2C_Write+0x6a>

	return HAL_I2C_Master_Transmit(&hi2c_ppg_max, MAXM86161_I2C_ADDRESS, tx_buffer,
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	79bb      	ldrb	r3, [r7, #6]
 800054c:	b29b      	uxth	r3, r3
 800054e:	3301      	adds	r3, #1
 8000550:	b29b      	uxth	r3, r3
 8000552:	2164      	movs	r1, #100	; 0x64
 8000554:	9100      	str	r1, [sp, #0]
 8000556:	21c4      	movs	r1, #196	; 0xc4
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <MAXM86161_I2C_Write+0xb4>)
 800055a:	f001 f951 	bl	8001800 <HAL_I2C_Master_Transmit>
 800055e:	4603      	mov	r3, r0
			numBytes + 1, 100) == HAL_OK;
 8000560:	2b00      	cmp	r3, #0
 8000562:	bf0c      	ite	eq
 8000564:	2301      	moveq	r3, #1
 8000566:	2300      	movne	r3, #0
 8000568:	b2db      	uxtb	r3, r3
 800056a:	46ad      	mov	sp, r5
}
 800056c:	4618      	mov	r0, r3
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bdb0      	pop	{r4, r5, r7, pc}
 8000574:	200003c0 	.word	0x200003c0

08000578 <MAXM86161_I2C_Read>:

/**
 * Read MAXM86161 register(s)
 */
bool MAXM86161_I2C_Read(uint8_t regName, uint8_t* readByte, uint8_t numBytes) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af02      	add	r7, sp, #8
 800057e:	4603      	mov	r3, r0
 8000580:	6039      	str	r1, [r7, #0]
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	4613      	mov	r3, r2
 8000586:	71bb      	strb	r3, [r7, #6]
	bool res = true;
 8000588:	2301      	movs	r3, #1
 800058a:	73fb      	strb	r3, [r7, #15]
	res &= (HAL_I2C_Master_Transmit(&hi2c_ppg_max, MAXM86161_I2C_ADDRESS, &regName,
 800058c:	1dfa      	adds	r2, r7, #7
 800058e:	2364      	movs	r3, #100	; 0x64
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2301      	movs	r3, #1
 8000594:	21c4      	movs	r1, #196	; 0xc4
 8000596:	4816      	ldr	r0, [pc, #88]	; (80005f0 <MAXM86161_I2C_Read+0x78>)
 8000598:	f001 f932 	bl	8001800 <HAL_I2C_Master_Transmit>
 800059c:	4603      	mov	r3, r0
			1, 100) == HAL_OK);
 800059e:	2b00      	cmp	r3, #0
 80005a0:	bf0c      	ite	eq
 80005a2:	2301      	moveq	r3, #1
 80005a4:	2300      	movne	r3, #0
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	461a      	mov	r2, r3
	res &= (HAL_I2C_Master_Transmit(&hi2c_ppg_max, MAXM86161_I2C_ADDRESS, &regName,
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	4013      	ands	r3, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	bf14      	ite	ne
 80005b2:	2301      	movne	r3, #1
 80005b4:	2300      	moveq	r3, #0
 80005b6:	73fb      	strb	r3, [r7, #15]
	res &= HAL_I2C_Master_Receive(&hi2c_ppg_max, MAXM86161_I2C_ADDRESS, readByte,
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	2264      	movs	r2, #100	; 0x64
 80005be:	9200      	str	r2, [sp, #0]
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	21c4      	movs	r1, #196	; 0xc4
 80005c4:	480a      	ldr	r0, [pc, #40]	; (80005f0 <MAXM86161_I2C_Read+0x78>)
 80005c6:	f001 fa19 	bl	80019fc <HAL_I2C_Master_Receive>
 80005ca:	4603      	mov	r3, r0
			numBytes, 100) == HAL_OK;
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	bf0c      	ite	eq
 80005d0:	2301      	moveq	r3, #1
 80005d2:	2300      	movne	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	461a      	mov	r2, r3
	res &= HAL_I2C_Master_Receive(&hi2c_ppg_max, MAXM86161_I2C_ADDRESS, readByte,
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	4013      	ands	r3, r2
 80005dc:	2b00      	cmp	r3, #0
 80005de:	bf14      	ite	ne
 80005e0:	2301      	movne	r3, #1
 80005e2:	2300      	moveq	r3, #0
 80005e4:	73fb      	strb	r3, [r7, #15]
	return res;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200003c0 	.word	0x200003c0

080005f4 <MAXM86161_Config>:
}

/**
 * Configuration of MAXM86161 operation
 */
bool MAXM86161_Config(MAXM86161_Init_TypeDef initStruct){
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	463c      	mov	r4, r7
 80005fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	bool result = true;
 8000600:	2301      	movs	r3, #1
 8000602:	75fb      	strb	r3, [r7, #23]
	uint8_t temp;

	temp = 0x01; //Soft Reset
 8000604:	2301      	movs	r3, #1
 8000606:	75bb      	strb	r3, [r7, #22]
	result &= MAXM86161_I2C_Write(MAXM86161_SYSTEM_CONTROL, &temp, 1);
 8000608:	f107 0316 	add.w	r3, r7, #22
 800060c:	2201      	movs	r2, #1
 800060e:	4619      	mov	r1, r3
 8000610:	200d      	movs	r0, #13
 8000612:	f7ff ff55 	bl	80004c0 <MAXM86161_I2C_Write>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	7dfb      	ldrb	r3, [r7, #23]
 800061c:	4013      	ands	r3, r2
 800061e:	2b00      	cmp	r3, #0
 8000620:	bf14      	ite	ne
 8000622:	2301      	movne	r3, #1
 8000624:	2300      	moveq	r3, #0
 8000626:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f000 fcb9 	bl	8000fa0 <HAL_Delay>

	temp = initStruct.shutdown | initStruct.low_power;
 800062e:	783a      	ldrb	r2, [r7, #0]
 8000630:	7afb      	ldrb	r3, [r7, #11]
 8000632:	4313      	orrs	r3, r2
 8000634:	b2db      	uxtb	r3, r3
 8000636:	75bb      	strb	r3, [r7, #22]
	result &= MAXM86161_I2C_Write(MAXM86161_SYSTEM_CONTROL, &temp, 1);
 8000638:	f107 0316 	add.w	r3, r7, #22
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	200d      	movs	r0, #13
 8000642:	f7ff ff3d 	bl	80004c0 <MAXM86161_I2C_Write>
 8000646:	4603      	mov	r3, r0
 8000648:	461a      	mov	r2, r3
 800064a:	7dfb      	ldrb	r3, [r7, #23]
 800064c:	4013      	ands	r3, r2
 800064e:	2b00      	cmp	r3, #0
 8000650:	bf14      	ite	ne
 8000652:	2301      	movne	r3, #1
 8000654:	2300      	moveq	r3, #0
 8000656:	75fb      	strb	r3, [r7, #23]

	temp = initStruct.integration_time | initStruct.full_scale;
 8000658:	793a      	ldrb	r2, [r7, #4]
 800065a:	78fb      	ldrb	r3, [r7, #3]
 800065c:	4313      	orrs	r3, r2
 800065e:	b2db      	uxtb	r3, r3
 8000660:	75bb      	strb	r3, [r7, #22]
	result &= MAXM86161_I2C_Write(MAXM86161_PPG_CONFIGURATION_1, &temp, 1);
 8000662:	f107 0316 	add.w	r3, r7, #22
 8000666:	2201      	movs	r2, #1
 8000668:	4619      	mov	r1, r3
 800066a:	2011      	movs	r0, #17
 800066c:	f7ff ff28 	bl	80004c0 <MAXM86161_I2C_Write>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	7dfb      	ldrb	r3, [r7, #23]
 8000676:	4013      	ands	r3, r2
 8000678:	2b00      	cmp	r3, #0
 800067a:	bf14      	ite	ne
 800067c:	2301      	movne	r3, #1
 800067e:	2300      	moveq	r3, #0
 8000680:	75fb      	strb	r3, [r7, #23]

	temp = initStruct.sample_avg | initStruct.frequency;
 8000682:	7a3a      	ldrb	r2, [r7, #8]
 8000684:	787b      	ldrb	r3, [r7, #1]
 8000686:	4313      	orrs	r3, r2
 8000688:	b2db      	uxtb	r3, r3
 800068a:	75bb      	strb	r3, [r7, #22]
	result &= MAXM86161_I2C_Write(MAXM86161_PPG_CONFIGURATION_2, &temp, 1);
 800068c:	f107 0316 	add.w	r3, r7, #22
 8000690:	2201      	movs	r2, #1
 8000692:	4619      	mov	r1, r3
 8000694:	2012      	movs	r0, #18
 8000696:	f7ff ff13 	bl	80004c0 <MAXM86161_I2C_Write>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	7dfb      	ldrb	r3, [r7, #23]
 80006a0:	4013      	ands	r3, r2
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	bf14      	ite	ne
 80006a6:	2301      	movne	r3, #1
 80006a8:	2300      	moveq	r3, #0
 80006aa:	75fb      	strb	r3, [r7, #23]

	temp = initStruct.led1_range | initStruct.led2_range | initStruct.led3_range;
 80006ac:	797a      	ldrb	r2, [r7, #5]
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	75bb      	strb	r3, [r7, #22]
	result &= MAXM86161_I2C_Write(MAXM86161_LED_RANGE_1, &temp, 1);
 80006bc:	f107 0316 	add.w	r3, r7, #22
 80006c0:	2201      	movs	r2, #1
 80006c2:	4619      	mov	r1, r3
 80006c4:	202a      	movs	r0, #42	; 0x2a
 80006c6:	f7ff fefb 	bl	80004c0 <MAXM86161_I2C_Write>
 80006ca:	4603      	mov	r3, r0
 80006cc:	461a      	mov	r2, r3
 80006ce:	7dfb      	ldrb	r3, [r7, #23]
 80006d0:	4013      	ands	r3, r2
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	bf14      	ite	ne
 80006d6:	2301      	movne	r3, #1
 80006d8:	2300      	moveq	r3, #0
 80006da:	75fb      	strb	r3, [r7, #23]

	result &= MAXM86161_I2C_Write(MAXM86161_LED1_PA, &initStruct.pa[0], 1);
 80006dc:	463b      	mov	r3, r7
 80006de:	330d      	adds	r3, #13
 80006e0:	2201      	movs	r2, #1
 80006e2:	4619      	mov	r1, r3
 80006e4:	2023      	movs	r0, #35	; 0x23
 80006e6:	f7ff feeb 	bl	80004c0 <MAXM86161_I2C_Write>
 80006ea:	4603      	mov	r3, r0
 80006ec:	461a      	mov	r2, r3
 80006ee:	7dfb      	ldrb	r3, [r7, #23]
 80006f0:	4013      	ands	r3, r2
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	bf14      	ite	ne
 80006f6:	2301      	movne	r3, #1
 80006f8:	2300      	moveq	r3, #0
 80006fa:	75fb      	strb	r3, [r7, #23]
	result &= MAXM86161_I2C_Write(MAXM86161_LED2_PA, &initStruct.pa[1], 1);
 80006fc:	463b      	mov	r3, r7
 80006fe:	330e      	adds	r3, #14
 8000700:	2201      	movs	r2, #1
 8000702:	4619      	mov	r1, r3
 8000704:	2024      	movs	r0, #36	; 0x24
 8000706:	f7ff fedb 	bl	80004c0 <MAXM86161_I2C_Write>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	7dfb      	ldrb	r3, [r7, #23]
 8000710:	4013      	ands	r3, r2
 8000712:	2b00      	cmp	r3, #0
 8000714:	bf14      	ite	ne
 8000716:	2301      	movne	r3, #1
 8000718:	2300      	moveq	r3, #0
 800071a:	75fb      	strb	r3, [r7, #23]
	result &= MAXM86161_I2C_Write(MAXM86161_LED3_PA, &initStruct.pa[2], 1);
 800071c:	463b      	mov	r3, r7
 800071e:	330f      	adds	r3, #15
 8000720:	2201      	movs	r2, #1
 8000722:	4619      	mov	r1, r3
 8000724:	2025      	movs	r0, #37	; 0x25
 8000726:	f7ff fecb 	bl	80004c0 <MAXM86161_I2C_Write>
 800072a:	4603      	mov	r3, r0
 800072c:	461a      	mov	r2, r3
 800072e:	7dfb      	ldrb	r3, [r7, #23]
 8000730:	4013      	ands	r3, r2
 8000732:	2b00      	cmp	r3, #0
 8000734:	bf14      	ite	ne
 8000736:	2301      	movne	r3, #1
 8000738:	2300      	moveq	r3, #0
 800073a:	75fb      	strb	r3, [r7, #23]

	temp = 0x21;
 800073c:	2321      	movs	r3, #33	; 0x21
 800073e:	75bb      	strb	r3, [r7, #22]
	result &= MAXM86161_I2C_Write(MAXM86161_LED_SEQUENCE_REGISTER_1, &temp, 1);
 8000740:	f107 0316 	add.w	r3, r7, #22
 8000744:	2201      	movs	r2, #1
 8000746:	4619      	mov	r1, r3
 8000748:	2020      	movs	r0, #32
 800074a:	f7ff feb9 	bl	80004c0 <MAXM86161_I2C_Write>
 800074e:	4603      	mov	r3, r0
 8000750:	461a      	mov	r2, r3
 8000752:	7dfb      	ldrb	r3, [r7, #23]
 8000754:	4013      	ands	r3, r2
 8000756:	2b00      	cmp	r3, #0
 8000758:	bf14      	ite	ne
 800075a:	2301      	movne	r3, #1
 800075c:	2300      	moveq	r3, #0
 800075e:	75fb      	strb	r3, [r7, #23]
	temp = 0x03;
 8000760:	2303      	movs	r3, #3
 8000762:	75bb      	strb	r3, [r7, #22]
	result &= MAXM86161_I2C_Write(MAXM86161_LED_SEQUENCE_REGISTER_2, &temp, 1);
 8000764:	f107 0316 	add.w	r3, r7, #22
 8000768:	2201      	movs	r2, #1
 800076a:	4619      	mov	r1, r3
 800076c:	2021      	movs	r0, #33	; 0x21
 800076e:	f7ff fea7 	bl	80004c0 <MAXM86161_I2C_Write>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	7dfb      	ldrb	r3, [r7, #23]
 8000778:	4013      	ands	r3, r2
 800077a:	2b00      	cmp	r3, #0
 800077c:	bf14      	ite	ne
 800077e:	2301      	movne	r3, #1
 8000780:	2300      	moveq	r3, #0
 8000782:	75fb      	strb	r3, [r7, #23]

	temp = initStruct.fifo_rollover;
 8000784:	7b3b      	ldrb	r3, [r7, #12]
 8000786:	75bb      	strb	r3, [r7, #22]
	result &= MAXM86161_I2C_Write(MAXM86161_REG_FIFO_CONF_2, &temp, 1);
 8000788:	f107 0316 	add.w	r3, r7, #22
 800078c:	2201      	movs	r2, #1
 800078e:	4619      	mov	r1, r3
 8000790:	200a      	movs	r0, #10
 8000792:	f7ff fe95 	bl	80004c0 <MAXM86161_I2C_Write>
 8000796:	4603      	mov	r3, r0
 8000798:	461a      	mov	r2, r3
 800079a:	7dfb      	ldrb	r3, [r7, #23]
 800079c:	4013      	ands	r3, r2
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bf14      	ite	ne
 80007a2:	2301      	movne	r3, #1
 80007a4:	2300      	moveq	r3, #0
 80007a6:	75fb      	strb	r3, [r7, #23]


	return result;
 80007a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	371c      	adds	r7, #28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd90      	pop	{r4, r7, pc}

080007b2 <MAXM86161_ReadData>:

/**
 * Raw data readout
 */
bool MAXM86161_ReadData(uint8_t* raw_data_green, uint8_t* raw_data_ir, uint8_t* raw_data_red) {
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b088      	sub	sp, #32
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	60f8      	str	r0, [r7, #12]
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
	bool result = true;
 80007be:	2301      	movs	r3, #1
 80007c0:	77fb      	strb	r3, [r7, #31]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c2:	b672      	cpsid	i
}
 80007c4:	bf00      	nop
	uint8_t temp[9];

	__disable_irq();
	result &= MAXM86161_I2C_Read(MAXM86161_REG_FIFO_DATA, temp, 9);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	2209      	movs	r2, #9
 80007cc:	4619      	mov	r1, r3
 80007ce:	2008      	movs	r0, #8
 80007d0:	f7ff fed2 	bl	8000578 <MAXM86161_I2C_Read>
 80007d4:	4603      	mov	r3, r0
 80007d6:	461a      	mov	r2, r3
 80007d8:	7ffb      	ldrb	r3, [r7, #31]
 80007da:	4013      	ands	r3, r2
 80007dc:	2b00      	cmp	r3, #0
 80007de:	bf14      	ite	ne
 80007e0:	2301      	movne	r3, #1
 80007e2:	2300      	moveq	r3, #0
 80007e4:	77fb      	strb	r3, [r7, #31]
  __ASM volatile ("cpsie i" : : : "memory");
 80007e6:	b662      	cpsie	i
}
 80007e8:	bf00      	nop
	__enable_irq();

	raw_data_green[0] = temp[0];
 80007ea:	7d3a      	ldrb	r2, [r7, #20]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	701a      	strb	r2, [r3, #0]
	raw_data_green[1] = temp[1];
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3301      	adds	r3, #1
 80007f4:	7d7a      	ldrb	r2, [r7, #21]
 80007f6:	701a      	strb	r2, [r3, #0]
	raw_data_green[2] = temp[2];
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3302      	adds	r3, #2
 80007fc:	7dba      	ldrb	r2, [r7, #22]
 80007fe:	701a      	strb	r2, [r3, #0]


	raw_data_ir[0] = temp[3];
 8000800:	7dfa      	ldrb	r2, [r7, #23]
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	701a      	strb	r2, [r3, #0]
	raw_data_ir[1] = temp[4];
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	3301      	adds	r3, #1
 800080a:	7e3a      	ldrb	r2, [r7, #24]
 800080c:	701a      	strb	r2, [r3, #0]
	raw_data_ir[2] = temp[5];
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	3302      	adds	r3, #2
 8000812:	7e7a      	ldrb	r2, [r7, #25]
 8000814:	701a      	strb	r2, [r3, #0]


	raw_data_red[0] = temp[6];
 8000816:	7eba      	ldrb	r2, [r7, #26]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	701a      	strb	r2, [r3, #0]
	raw_data_red[1] = temp[7];
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3301      	adds	r3, #1
 8000820:	7efa      	ldrb	r2, [r7, #27]
 8000822:	701a      	strb	r2, [r3, #0]
	raw_data_red[2] = temp[8];
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3302      	adds	r3, #2
 8000828:	7f3a      	ldrb	r2, [r7, #28]
 800082a:	701a      	strb	r2, [r3, #0]

	return result;
 800082c:	7ffb      	ldrb	r3, [r7, #31]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3720      	adds	r7, #32
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000836:	b580      	push	{r7, lr}
 8000838:	b08a      	sub	sp, #40	; 0x28
 800083a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800083c:	f000 fb3e 	bl	8000ebc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000840:	f000 f85a 	bl	80008f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000844:	f000 f8f2 	bl	8000a2c <MX_GPIO_Init>
	MX_I2C3_Init();
 8000848:	f000 f8c2 	bl	80009d0 <MX_I2C3_Init>
	MX_USB_DEVICE_Init();
 800084c:	f006 fc16 	bl	800707c <MX_USB_DEVICE_Init>

	/* USER CODE BEGIN 2 */
	HAL_Delay(500);
 8000850:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000854:	f000 fba4 	bl	8000fa0 <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	bool result = true;
 8000858:	2301      	movs	r3, #1
 800085a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	MAXM86161_Init_TypeDef ppg;
	ppg.shutdown = MAXM86161_SHDNMODE_ON;
 800085e:	2300      	movs	r3, #0
 8000860:	753b      	strb	r3, [r7, #20]
	ppg.integration_time = MAXM86161_IT_4;
 8000862:	230c      	movs	r3, #12
 8000864:	763b      	strb	r3, [r7, #24]
	ppg.full_scale = MAXM86161_FS_16384;
 8000866:	2308      	movs	r3, #8
 8000868:	75fb      	strb	r3, [r7, #23]
	ppg.sample_avg = MAXM86161_NO_AVG;
 800086a:	2300      	movs	r3, #0
 800086c:	773b      	strb	r3, [r7, #28]
	ppg.frequency = MAXM86161_SR_100HZ;
 800086e:	2318      	movs	r3, #24
 8000870:	757b      	strb	r3, [r7, #21]
	ppg.low_power = MAXM86161_LPMODE_OFF;
 8000872:	2300      	movs	r3, #0
 8000874:	77fb      	strb	r3, [r7, #31]

	ppg.led1_range = MAXM86161_LED1_RGE_1;
 8000876:	2301      	movs	r3, #1
 8000878:	767b      	strb	r3, [r7, #25]
	ppg.led2_range = MAXM86161_LED2_RGE_1;
 800087a:	2304      	movs	r3, #4
 800087c:	76bb      	strb	r3, [r7, #26]
	ppg.led3_range = MAXM86161_LED3_RGE_1;
 800087e:	2310      	movs	r3, #16
 8000880:	76fb      	strb	r3, [r7, #27]

	ppg.pa[0] = 0xF0; //GREEN
 8000882:	23f0      	movs	r3, #240	; 0xf0
 8000884:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	ppg.pa[1] = 0xF0;//IR
 8000888:	23f0      	movs	r3, #240	; 0xf0
 800088a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	ppg.pa[2] = 0xF0;//RED
 800088e:	23f0      	movs	r3, #240	; 0xf0
 8000890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	ppg.fifo_rollover = MAX86916_FIFO_ROLLOVER_OFF;
 8000894:	2300      	movs	r3, #0
 8000896:	f887 3020 	strb.w	r3, [r7, #32]

	result &= MAXM86161_Config(ppg);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008a0:	f7ff fea8 	bl	80005f4 <MAXM86161_Config>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008ac:	4013      	ands	r3, r2
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	bf14      	ite	ne
 80008b2:	2301      	movne	r3, #1
 80008b4:	2300      	moveq	r3, #0
 80008b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


	while (1) {
		uint8_t samples[14] = {0};
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	811a      	strh	r2, [r3, #8]
		samples[0] = '?';
 80008ca:	233f      	movs	r3, #63	; 0x3f
 80008cc:	713b      	strb	r3, [r7, #4]
		samples[1] = '!';
 80008ce:	2321      	movs	r3, #33	; 0x21
 80008d0:	717b      	strb	r3, [r7, #5]

		MAXM86161_ReadData(samples + 3, samples + 7, samples + 11);
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	3303      	adds	r3, #3
 80008d6:	1d39      	adds	r1, r7, #4
 80008d8:	3107      	adds	r1, #7
 80008da:	1d3a      	adds	r2, r7, #4
 80008dc:	320b      	adds	r2, #11
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff67 	bl	80007b2 <MAXM86161_ReadData>
		CDC_Transmit_FS(samples, 14);
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	210e      	movs	r1, #14
 80008e8:	4618      	mov	r0, r3
 80008ea:	f006 fc85 	bl	80071f8 <CDC_Transmit_FS>
		HAL_Delay(20); //PPG clock sets to 100Hz
 80008ee:	2014      	movs	r0, #20
 80008f0:	f000 fb56 	bl	8000fa0 <HAL_Delay>
	while (1) {
 80008f4:	e7e1      	b.n	80008ba <main+0x84>
	...

080008f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b094      	sub	sp, #80	; 0x50
 80008fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008fe:	f107 0320 	add.w	r3, r7, #32
 8000902:	2230      	movs	r2, #48	; 0x30
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f007 f904 	bl	8007b14 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <SystemClock_Config+0xd0>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a28      	ldr	r2, [pc, #160]	; (80009c8 <SystemClock_Config+0xd0>)
 8000926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <SystemClock_Config+0xd0>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	4b23      	ldr	r3, [pc, #140]	; (80009cc <SystemClock_Config+0xd4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a22      	ldr	r2, [pc, #136]	; (80009cc <SystemClock_Config+0xd4>)
 8000942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <SystemClock_Config+0xd4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000954:	2303      	movs	r3, #3
 8000956:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095e:	2301      	movs	r3, #1
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000962:	2310      	movs	r3, #16
 8000964:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000966:	2302      	movs	r3, #2
 8000968:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000970:	2308      	movs	r3, #8
 8000972:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000974:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000978:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800097a:	2304      	movs	r3, #4
 800097c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800097e:	2307      	movs	r3, #7
 8000980:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000982:	f107 0320 	add.w	r3, r7, #32
 8000986:	4618      	mov	r0, r3
 8000988:	f002 ff0e 	bl	80037a8 <HAL_RCC_OscConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0x9e>
		Error_Handler();
 8000992:	f000 f98b 	bl	8000cac <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000996:	230f      	movs	r3, #15
 8000998:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f003 f971 	bl	8003c98 <HAL_RCC_ClockConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0xc8>
		Error_Handler();
 80009bc:	f000 f976 	bl	8000cac <Error_Handler>
	}
}
 80009c0:	bf00      	nop
 80009c2:	3750      	adds	r7, #80	; 0x50
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40007000 	.word	0x40007000

080009d0 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_I2C3_Init+0x50>)
 80009d6:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <MX_I2C3_Init+0x54>)
 80009d8:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_I2C3_Init+0x50>)
 80009dc:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <MX_I2C3_Init+0x58>)
 80009de:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_I2C3_Init+0x50>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_I2C3_Init+0x50>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_I2C3_Init+0x50>)
 80009ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f2:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <MX_I2C3_Init+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_I2C3_Init+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <MX_I2C3_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_I2C3_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_I2C3_Init+0x50>)
 8000a0e:	f000 fdb3 	bl	8001578 <HAL_I2C_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_I2C3_Init+0x4c>
		Error_Handler();
 8000a18:	f000 f948 	bl	8000cac <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200003c0 	.word	0x200003c0
 8000a24:	40005c00 	.word	0x40005c00
 8000a28:	000186a0 	.word	0x000186a0

08000a2c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08c      	sub	sp, #48	; 0x30
 8000a30:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
 8000a46:	4b93      	ldr	r3, [pc, #588]	; (8000c94 <MX_GPIO_Init+0x268>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a92      	ldr	r2, [pc, #584]	; (8000c94 <MX_GPIO_Init+0x268>)
 8000a4c:	f043 0310 	orr.w	r3, r3, #16
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b90      	ldr	r3, [pc, #576]	; (8000c94 <MX_GPIO_Init+0x268>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0310 	and.w	r3, r3, #16
 8000a5a:	61bb      	str	r3, [r7, #24]
 8000a5c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	4b8c      	ldr	r3, [pc, #560]	; (8000c94 <MX_GPIO_Init+0x268>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a8b      	ldr	r2, [pc, #556]	; (8000c94 <MX_GPIO_Init+0x268>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b89      	ldr	r3, [pc, #548]	; (8000c94 <MX_GPIO_Init+0x268>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b85      	ldr	r3, [pc, #532]	; (8000c94 <MX_GPIO_Init+0x268>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a84      	ldr	r2, [pc, #528]	; (8000c94 <MX_GPIO_Init+0x268>)
 8000a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b82      	ldr	r3, [pc, #520]	; (8000c94 <MX_GPIO_Init+0x268>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b7e      	ldr	r3, [pc, #504]	; (8000c94 <MX_GPIO_Init+0x268>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a7d      	ldr	r2, [pc, #500]	; (8000c94 <MX_GPIO_Init+0x268>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b7b      	ldr	r3, [pc, #492]	; (8000c94 <MX_GPIO_Init+0x268>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	4b77      	ldr	r3, [pc, #476]	; (8000c94 <MX_GPIO_Init+0x268>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a76      	ldr	r2, [pc, #472]	; (8000c94 <MX_GPIO_Init+0x268>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b74      	ldr	r3, [pc, #464]	; (8000c94 <MX_GPIO_Init+0x268>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b70      	ldr	r3, [pc, #448]	; (8000c94 <MX_GPIO_Init+0x268>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a6f      	ldr	r2, [pc, #444]	; (8000c94 <MX_GPIO_Init+0x268>)
 8000ad8:	f043 0308 	orr.w	r3, r3, #8
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b6d      	ldr	r3, [pc, #436]	; (8000c94 <MX_GPIO_Init+0x268>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2108      	movs	r1, #8
 8000aee:	486a      	ldr	r0, [pc, #424]	; (8000c98 <MX_GPIO_Init+0x26c>)
 8000af0:	f000 fd28 	bl	8001544 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000af4:	2201      	movs	r2, #1
 8000af6:	2101      	movs	r1, #1
 8000af8:	4868      	ldr	r0, [pc, #416]	; (8000c9c <MX_GPIO_Init+0x270>)
 8000afa:	f000 fd23 	bl	8001544 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000afe:	2200      	movs	r2, #0
 8000b00:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b04:	4866      	ldr	r0, [pc, #408]	; (8000ca0 <MX_GPIO_Init+0x274>)
 8000b06:	f000 fd1d 	bl	8001544 <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b0a:	2308      	movs	r3, #8
 8000b0c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	485d      	ldr	r0, [pc, #372]	; (8000c98 <MX_GPIO_Init+0x26c>)
 8000b22:	f000 fb73 	bl	800120c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4857      	ldr	r0, [pc, #348]	; (8000c9c <MX_GPIO_Init+0x270>)
 8000b3e:	f000 fb65 	bl	800120c <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b42:	2308      	movs	r3, #8
 8000b44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b52:	2305      	movs	r3, #5
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	484f      	ldr	r0, [pc, #316]	; (8000c9c <MX_GPIO_Init+0x270>)
 8000b5e:	f000 fb55 	bl	800120c <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b6a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	484b      	ldr	r0, [pc, #300]	; (8000ca4 <MX_GPIO_Init+0x278>)
 8000b78:	f000 fb48 	bl	800120c <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b7c:	2310      	movs	r3, #16
 8000b7e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b8c:	2306      	movs	r3, #6
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4843      	ldr	r0, [pc, #268]	; (8000ca4 <MX_GPIO_Init+0x278>)
 8000b98:	f000 fb38 	bl	800120c <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 8000b9c:	23e0      	movs	r3, #224	; 0xe0
 8000b9e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bac:	2305      	movs	r3, #5
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	483b      	ldr	r0, [pc, #236]	; (8000ca4 <MX_GPIO_Init+0x278>)
 8000bb8:	f000 fb28 	bl	800120c <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4836      	ldr	r0, [pc, #216]	; (8000ca8 <MX_GPIO_Init+0x27c>)
 8000bd0:	f000 fb1c 	bl	800120c <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be6:	2305      	movs	r3, #5
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	482d      	ldr	r0, [pc, #180]	; (8000ca8 <MX_GPIO_Init+0x27c>)
 8000bf2:	f000 fb0b 	bl	800120c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000bf6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000bfa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4824      	ldr	r0, [pc, #144]	; (8000ca0 <MX_GPIO_Init+0x274>)
 8000c10:	f000 fafc 	bl	800120c <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 8000c14:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c18:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c26:	2306      	movs	r3, #6
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	481a      	ldr	r0, [pc, #104]	; (8000c9c <MX_GPIO_Init+0x270>)
 8000c32:	f000 faeb 	bl	800120c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c36:	2320      	movs	r3, #32
 8000c38:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4815      	ldr	r0, [pc, #84]	; (8000ca0 <MX_GPIO_Init+0x274>)
 8000c4a:	f000 fadf 	bl	800120c <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin | Audio_SDA_Pin;
 8000c4e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c52:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c54:	2312      	movs	r3, #18
 8000c56:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c60:	2304      	movs	r3, #4
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480f      	ldr	r0, [pc, #60]	; (8000ca8 <MX_GPIO_Init+0x27c>)
 8000c6c:	f000 face 	bl	800120c <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c74:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c78:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <MX_GPIO_Init+0x26c>)
 8000c86:	f000 fac1 	bl	800120c <HAL_GPIO_Init>

}
 8000c8a:	bf00      	nop
 8000c8c:	3730      	adds	r7, #48	; 0x30
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40020800 	.word	0x40020800
 8000ca0:	40020c00 	.word	0x40020c00
 8000ca4:	40020000 	.word	0x40020000
 8000ca8:	40020400 	.word	0x40020400

08000cac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cb4:	e7fe      	b.n	8000cb4 <Error_Handler+0x8>
	...

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	4a0f      	ldr	r2, [pc, #60]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_MspInit+0x4c>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cf6:	2007      	movs	r0, #7
 8000cf8:	f000 fa46 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40023800 	.word	0x40023800

08000d08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a29      	ldr	r2, [pc, #164]	; (8000dcc <HAL_I2C_MspInit+0xc4>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d14b      	bne.n	8000dc2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <HAL_I2C_MspInit+0xc8>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a27      	ldr	r2, [pc, #156]	; (8000dd0 <HAL_I2C_MspInit+0xc8>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <HAL_I2C_MspInit+0xc8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <HAL_I2C_MspInit+0xc8>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a20      	ldr	r2, [pc, #128]	; (8000dd0 <HAL_I2C_MspInit+0xc8>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_I2C_MspInit+0xc8>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d68:	2312      	movs	r3, #18
 8000d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d70:	2301      	movs	r3, #1
 8000d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d74:	2304      	movs	r3, #4
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4815      	ldr	r0, [pc, #84]	; (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d80:	f000 fa44 	bl	800120c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8a:	2312      	movs	r3, #18
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d92:	2301      	movs	r3, #1
 8000d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d96:	2304      	movs	r3, #4
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <HAL_I2C_MspInit+0xd0>)
 8000da2:	f000 fa33 	bl	800120c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_I2C_MspInit+0xc8>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_I2C_MspInit+0xc8>)
 8000db0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_I2C_MspInit+0xc8>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	; 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40005c00 	.word	0x40005c00
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020800 	.word	0x40020800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <NMI_Handler+0x4>

08000de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <MemManage_Handler+0x4>

08000dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e28:	f000 f89a 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <OTG_FS_IRQHandler+0x10>)
 8000e36:	f001 fc84 	bl	8002742 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200018e8 	.word	0x200018e8

08000e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <SystemInit+0x20>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <SystemInit+0x20>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e6e:	490e      	ldr	r1, [pc, #56]	; (8000ea8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e70:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e84:	4c0b      	ldr	r4, [pc, #44]	; (8000eb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e92:	f7ff ffd7 	bl	8000e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e96:	f006 fe19 	bl	8007acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9a:	f7ff fccc 	bl	8000836 <main>
  bx  lr    
 8000e9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ea0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea8:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000eac:	08007bac 	.word	0x08007bac
  ldr r2, =_sbss
 8000eb0:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000eb4:	20001cf0 	.word	0x20001cf0

08000eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC_IRQHandler>
	...

08000ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <HAL_Init+0x40>)
 8000ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <HAL_Init+0x40>)
 8000ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <HAL_Init+0x40>)
 8000ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 f94f 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 f808 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef0:	f7ff fee2 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023c00 	.word	0x40023c00

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x54>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x58>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f967 	bl	80011f2 <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f000 f92f 	bl	800119e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <HAL_InitTick+0x5c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000004 	.word	0x20000004

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000414 	.word	0x20000414

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000414 	.word	0x20000414

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff ffee 	bl	8000f88 <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffde 	bl	8000f88 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4907      	ldr	r1, [pc, #28]	; (8001084 <__NVIC_EnableIRQ+0x38>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	; (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001154:	d301      	bcc.n	800115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001156:	2301      	movs	r3, #1
 8001158:	e00f      	b.n	800117a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <SysTick_Config+0x40>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001162:	210f      	movs	r1, #15
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f7ff ff8e 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <SysTick_Config+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <SysTick_Config+0x40>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010

08001188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff29 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b0:	f7ff ff3e 	bl	8001030 <__NVIC_GetPriorityGrouping>
 80011b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	6978      	ldr	r0, [r7, #20]
 80011bc:	f7ff ff8e 	bl	80010dc <NVIC_EncodePriority>
 80011c0:	4602      	mov	r2, r0
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff5d 	bl	8001088 <__NVIC_SetPriority>
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff31 	bl	800104c <__NVIC_EnableIRQ>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffa2 	bl	8001144 <SysTick_Config>
 8001200:	4603      	mov	r3, r0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e16b      	b.n	8001500 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	429a      	cmp	r2, r3
 8001242:	f040 815a 	bne.w	80014fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d005      	beq.n	800125e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125a:	2b02      	cmp	r3, #2
 800125c:	d130      	bne.n	80012c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001294:	2201      	movs	r2, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f003 0201 	and.w	r2, r3, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d017      	beq.n	80012fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d123      	bne.n	8001350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	08da      	lsrs	r2, r3, #3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3208      	adds	r2, #8
 8001310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	08da      	lsrs	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3208      	adds	r2, #8
 800134a:	69b9      	ldr	r1, [r7, #24]
 800134c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0203 	and.w	r2, r3, #3
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80b4 	beq.w	80014fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b60      	ldr	r3, [pc, #384]	; (8001518 <HAL_GPIO_Init+0x30c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a5f      	ldr	r2, [pc, #380]	; (8001518 <HAL_GPIO_Init+0x30c>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b5d      	ldr	r3, [pc, #372]	; (8001518 <HAL_GPIO_Init+0x30c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ae:	4a5b      	ldr	r2, [pc, #364]	; (800151c <HAL_GPIO_Init+0x310>)
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	3302      	adds	r3, #2
 80013b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	220f      	movs	r2, #15
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a52      	ldr	r2, [pc, #328]	; (8001520 <HAL_GPIO_Init+0x314>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d02b      	beq.n	8001432 <HAL_GPIO_Init+0x226>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a51      	ldr	r2, [pc, #324]	; (8001524 <HAL_GPIO_Init+0x318>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d025      	beq.n	800142e <HAL_GPIO_Init+0x222>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a50      	ldr	r2, [pc, #320]	; (8001528 <HAL_GPIO_Init+0x31c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d01f      	beq.n	800142a <HAL_GPIO_Init+0x21e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4f      	ldr	r2, [pc, #316]	; (800152c <HAL_GPIO_Init+0x320>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d019      	beq.n	8001426 <HAL_GPIO_Init+0x21a>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4e      	ldr	r2, [pc, #312]	; (8001530 <HAL_GPIO_Init+0x324>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d013      	beq.n	8001422 <HAL_GPIO_Init+0x216>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4d      	ldr	r2, [pc, #308]	; (8001534 <HAL_GPIO_Init+0x328>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d00d      	beq.n	800141e <HAL_GPIO_Init+0x212>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4c      	ldr	r2, [pc, #304]	; (8001538 <HAL_GPIO_Init+0x32c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d007      	beq.n	800141a <HAL_GPIO_Init+0x20e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4b      	ldr	r2, [pc, #300]	; (800153c <HAL_GPIO_Init+0x330>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d101      	bne.n	8001416 <HAL_GPIO_Init+0x20a>
 8001412:	2307      	movs	r3, #7
 8001414:	e00e      	b.n	8001434 <HAL_GPIO_Init+0x228>
 8001416:	2308      	movs	r3, #8
 8001418:	e00c      	b.n	8001434 <HAL_GPIO_Init+0x228>
 800141a:	2306      	movs	r3, #6
 800141c:	e00a      	b.n	8001434 <HAL_GPIO_Init+0x228>
 800141e:	2305      	movs	r3, #5
 8001420:	e008      	b.n	8001434 <HAL_GPIO_Init+0x228>
 8001422:	2304      	movs	r3, #4
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x228>
 8001426:	2303      	movs	r3, #3
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x228>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x228>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x228>
 8001432:	2300      	movs	r3, #0
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	f002 0203 	and.w	r2, r2, #3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001444:	4935      	ldr	r1, [pc, #212]	; (800151c <HAL_GPIO_Init+0x310>)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001452:	4b3b      	ldr	r3, [pc, #236]	; (8001540 <HAL_GPIO_Init+0x334>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001476:	4a32      	ldr	r2, [pc, #200]	; (8001540 <HAL_GPIO_Init+0x334>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800147c:	4b30      	ldr	r3, [pc, #192]	; (8001540 <HAL_GPIO_Init+0x334>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014a0:	4a27      	ldr	r2, [pc, #156]	; (8001540 <HAL_GPIO_Init+0x334>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a6:	4b26      	ldr	r3, [pc, #152]	; (8001540 <HAL_GPIO_Init+0x334>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ca:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <HAL_GPIO_Init+0x334>)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_GPIO_Init+0x334>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f4:	4a12      	ldr	r2, [pc, #72]	; (8001540 <HAL_GPIO_Init+0x334>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	f67f ae90 	bls.w	8001228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40013800 	.word	0x40013800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020400 	.word	0x40020400
 8001528:	40020800 	.word	0x40020800
 800152c:	40020c00 	.word	0x40020c00
 8001530:	40021000 	.word	0x40021000
 8001534:	40021400 	.word	0x40021400
 8001538:	40021800 	.word	0x40021800
 800153c:	40021c00 	.word	0x40021c00
 8001540:	40013c00 	.word	0x40013c00

08001544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
 8001550:	4613      	mov	r3, r2
 8001552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001554:	787b      	ldrb	r3, [r7, #1]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001560:	e003      	b.n	800156a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	041a      	lsls	r2, r3, #16
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	619a      	str	r2, [r3, #24]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e12b      	b.n	80017e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d106      	bne.n	80015a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff fbb2 	bl	8000d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2224      	movs	r2, #36	; 0x24
 80015a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015dc:	f002 fd30 	bl	8004040 <HAL_RCC_GetPCLK1Freq>
 80015e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4a81      	ldr	r2, [pc, #516]	; (80017ec <HAL_I2C_Init+0x274>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d807      	bhi.n	80015fc <HAL_I2C_Init+0x84>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4a80      	ldr	r2, [pc, #512]	; (80017f0 <HAL_I2C_Init+0x278>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	bf94      	ite	ls
 80015f4:	2301      	movls	r3, #1
 80015f6:	2300      	movhi	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	e006      	b.n	800160a <HAL_I2C_Init+0x92>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4a7d      	ldr	r2, [pc, #500]	; (80017f4 <HAL_I2C_Init+0x27c>)
 8001600:	4293      	cmp	r3, r2
 8001602:	bf94      	ite	ls
 8001604:	2301      	movls	r3, #1
 8001606:	2300      	movhi	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0e7      	b.n	80017e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4a78      	ldr	r2, [pc, #480]	; (80017f8 <HAL_I2C_Init+0x280>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0c9b      	lsrs	r3, r3, #18
 800161c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	430a      	orrs	r2, r1
 8001630:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4a6a      	ldr	r2, [pc, #424]	; (80017ec <HAL_I2C_Init+0x274>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d802      	bhi.n	800164c <HAL_I2C_Init+0xd4>
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	3301      	adds	r3, #1
 800164a:	e009      	b.n	8001660 <HAL_I2C_Init+0xe8>
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001652:	fb02 f303 	mul.w	r3, r2, r3
 8001656:	4a69      	ldr	r2, [pc, #420]	; (80017fc <HAL_I2C_Init+0x284>)
 8001658:	fba2 2303 	umull	r2, r3, r2, r3
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	3301      	adds	r3, #1
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	430b      	orrs	r3, r1
 8001666:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001672:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	495c      	ldr	r1, [pc, #368]	; (80017ec <HAL_I2C_Init+0x274>)
 800167c:	428b      	cmp	r3, r1
 800167e:	d819      	bhi.n	80016b4 <HAL_I2C_Init+0x13c>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	1e59      	subs	r1, r3, #1
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fbb1 f3f3 	udiv	r3, r1, r3
 800168e:	1c59      	adds	r1, r3, #1
 8001690:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001694:	400b      	ands	r3, r1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00a      	beq.n	80016b0 <HAL_I2C_Init+0x138>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1e59      	subs	r1, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016a8:	3301      	adds	r3, #1
 80016aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ae:	e051      	b.n	8001754 <HAL_I2C_Init+0x1dc>
 80016b0:	2304      	movs	r3, #4
 80016b2:	e04f      	b.n	8001754 <HAL_I2C_Init+0x1dc>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d111      	bne.n	80016e0 <HAL_I2C_Init+0x168>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1e58      	subs	r0, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	440b      	add	r3, r1
 80016ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ce:	3301      	adds	r3, #1
 80016d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf0c      	ite	eq
 80016d8:	2301      	moveq	r3, #1
 80016da:	2300      	movne	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	e012      	b.n	8001706 <HAL_I2C_Init+0x18e>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1e58      	subs	r0, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	0099      	lsls	r1, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bf0c      	ite	eq
 8001700:	2301      	moveq	r3, #1
 8001702:	2300      	movne	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_I2C_Init+0x196>
 800170a:	2301      	movs	r3, #1
 800170c:	e022      	b.n	8001754 <HAL_I2C_Init+0x1dc>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10e      	bne.n	8001734 <HAL_I2C_Init+0x1bc>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1e58      	subs	r0, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6859      	ldr	r1, [r3, #4]
 800171e:	460b      	mov	r3, r1
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	440b      	add	r3, r1
 8001724:	fbb0 f3f3 	udiv	r3, r0, r3
 8001728:	3301      	adds	r3, #1
 800172a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001732:	e00f      	b.n	8001754 <HAL_I2C_Init+0x1dc>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1e58      	subs	r0, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6859      	ldr	r1, [r3, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	0099      	lsls	r1, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	fbb0 f3f3 	udiv	r3, r0, r3
 800174a:	3301      	adds	r3, #1
 800174c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	6809      	ldr	r1, [r1, #0]
 8001758:	4313      	orrs	r3, r2
 800175a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69da      	ldr	r2, [r3, #28]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001782:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6911      	ldr	r1, [r2, #16]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68d2      	ldr	r2, [r2, #12]
 800178e:	4311      	orrs	r1, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	430b      	orrs	r3, r1
 8001796:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0201 	orr.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2220      	movs	r2, #32
 80017ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	000186a0 	.word	0x000186a0
 80017f0:	001e847f 	.word	0x001e847f
 80017f4:	003d08ff 	.word	0x003d08ff
 80017f8:	431bde83 	.word	0x431bde83
 80017fc:	10624dd3 	.word	0x10624dd3

08001800 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af02      	add	r7, sp, #8
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	461a      	mov	r2, r3
 800180c:	460b      	mov	r3, r1
 800180e:	817b      	strh	r3, [r7, #10]
 8001810:	4613      	mov	r3, r2
 8001812:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001814:	f7ff fbb8 	bl	8000f88 <HAL_GetTick>
 8001818:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b20      	cmp	r3, #32
 8001824:	f040 80e0 	bne.w	80019e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2319      	movs	r3, #25
 800182e:	2201      	movs	r2, #1
 8001830:	4970      	ldr	r1, [pc, #448]	; (80019f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 fc58 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800183e:	2302      	movs	r3, #2
 8001840:	e0d3      	b.n	80019ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_I2C_Master_Transmit+0x50>
 800184c:	2302      	movs	r3, #2
 800184e:	e0cc      	b.n	80019ea <HAL_I2C_Master_Transmit+0x1ea>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b01      	cmp	r3, #1
 8001864:	d007      	beq.n	8001876 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f042 0201 	orr.w	r2, r2, #1
 8001874:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001884:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2221      	movs	r2, #33	; 0x21
 800188a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2210      	movs	r2, #16
 8001892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	893a      	ldrh	r2, [r7, #8]
 80018a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4a50      	ldr	r2, [pc, #320]	; (80019f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018b8:	8979      	ldrh	r1, [r7, #10]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	6a3a      	ldr	r2, [r7, #32]
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f000 fac2 	bl	8001e48 <I2C_MasterRequestWrite>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e08d      	b.n	80019ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018e4:	e066      	b.n	80019b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	6a39      	ldr	r1, [r7, #32]
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 fcd2 	bl	8002294 <I2C_WaitOnTXEFlagUntilTimeout>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00d      	beq.n	8001912 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d107      	bne.n	800190e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800190c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e06b      	b.n	80019ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192c:	b29b      	uxth	r3, r3
 800192e:	3b01      	subs	r3, #1
 8001930:	b29a      	uxth	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193a:	3b01      	subs	r3, #1
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b04      	cmp	r3, #4
 800194e:	d11b      	bne.n	8001988 <HAL_I2C_Master_Transmit+0x188>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001954:	2b00      	cmp	r3, #0
 8001956:	d017      	beq.n	8001988 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001972:	b29b      	uxth	r3, r3
 8001974:	3b01      	subs	r3, #1
 8001976:	b29a      	uxth	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001980:	3b01      	subs	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	6a39      	ldr	r1, [r7, #32]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 fcc2 	bl	8002316 <I2C_WaitOnBTFFlagUntilTimeout>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00d      	beq.n	80019b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	2b04      	cmp	r3, #4
 800199e:	d107      	bne.n	80019b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e01a      	b.n	80019ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d194      	bne.n	80018e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2220      	movs	r2, #32
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	e000      	b.n	80019ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019e8:	2302      	movs	r3, #2
  }
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	00100002 	.word	0x00100002
 80019f8:	ffff0000 	.word	0xffff0000

080019fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	; 0x30
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	461a      	mov	r2, r3
 8001a08:	460b      	mov	r3, r1
 8001a0a:	817b      	strh	r3, [r7, #10]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff faba 	bl	8000f88 <HAL_GetTick>
 8001a14:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	f040 820b 	bne.w	8001e3a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2319      	movs	r3, #25
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	497c      	ldr	r1, [pc, #496]	; (8001c20 <HAL_I2C_Master_Receive+0x224>)
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 fb5a 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e1fe      	b.n	8001e3c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_I2C_Master_Receive+0x50>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e1f7      	b.n	8001e3c <HAL_I2C_Master_Receive+0x440>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d007      	beq.n	8001a72 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 0201 	orr.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2222      	movs	r2, #34	; 0x22
 8001a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	893a      	ldrh	r2, [r7, #8]
 8001aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4a5c      	ldr	r2, [pc, #368]	; (8001c24 <HAL_I2C_Master_Receive+0x228>)
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ab4:	8979      	ldrh	r1, [r7, #10]
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 fa46 	bl	8001f4c <I2C_MasterRequestRead>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e1b8      	b.n	8001e3c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d113      	bne.n	8001afa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	623b      	str	r3, [r7, #32]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	623b      	str	r3, [r7, #32]
 8001ae6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e18c      	b.n	8001e14 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d11b      	bne.n	8001b3a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	e16c      	b.n	8001e14 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d11b      	bne.n	8001b7a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	e14c      	b.n	8001e14 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ba0:	e138      	b.n	8001e14 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	f200 80f1 	bhi.w	8001d8e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d123      	bne.n	8001bfc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 fbed 	bl	8002398 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e139      	b.n	8001e3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bfa:	e10b      	b.n	8001e14 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d14e      	bne.n	8001ca2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4906      	ldr	r1, [pc, #24]	; (8001c28 <HAL_I2C_Master_Receive+0x22c>)
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 fa6a 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d008      	beq.n	8001c2c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e10e      	b.n	8001e3c <HAL_I2C_Master_Receive+0x440>
 8001c1e:	bf00      	nop
 8001c20:	00100002 	.word	0x00100002
 8001c24:	ffff0000 	.word	0xffff0000
 8001c28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ca0:	e0b8      	b.n	8001e14 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca8:	2200      	movs	r2, #0
 8001caa:	4966      	ldr	r1, [pc, #408]	; (8001e44 <HAL_I2C_Master_Receive+0x448>)
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 fa1b 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0bf      	b.n	8001e3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691a      	ldr	r2, [r3, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d04:	2200      	movs	r2, #0
 8001d06:	494f      	ldr	r1, [pc, #316]	; (8001e44 <HAL_I2C_Master_Receive+0x448>)
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 f9ed 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e091      	b.n	8001e3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d8c:	e042      	b.n	8001e14 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 fb00 	bl	8002398 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e04c      	b.n	8001e3c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d118      	bne.n	8001e14 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f47f aec2 	bne.w	8001ba2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2220      	movs	r2, #32
 8001e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e000      	b.n	8001e3c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001e3a:	2302      	movs	r3, #2
  }
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3728      	adds	r7, #40	; 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	00010004 	.word	0x00010004

08001e48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	460b      	mov	r3, r1
 8001e56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d006      	beq.n	8001e72 <I2C_MasterRequestWrite+0x2a>
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d003      	beq.n	8001e72 <I2C_MasterRequestWrite+0x2a>
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e70:	d108      	bne.n	8001e84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e00b      	b.n	8001e9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	2b12      	cmp	r3, #18
 8001e8a:	d107      	bne.n	8001e9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f91d 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00d      	beq.n	8001ed0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ec2:	d103      	bne.n	8001ecc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e035      	b.n	8001f3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ed8:	d108      	bne.n	8001eec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eda:	897b      	ldrh	r3, [r7, #10]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ee8:	611a      	str	r2, [r3, #16]
 8001eea:	e01b      	b.n	8001f24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001eec:	897b      	ldrh	r3, [r7, #10]
 8001eee:	11db      	asrs	r3, r3, #7
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f003 0306 	and.w	r3, r3, #6
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f063 030f 	orn	r3, r3, #15
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	490e      	ldr	r1, [pc, #56]	; (8001f44 <I2C_MasterRequestWrite+0xfc>)
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f943 	bl	8002196 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e010      	b.n	8001f3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f1a:	897b      	ldrh	r3, [r7, #10]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4907      	ldr	r1, [pc, #28]	; (8001f48 <I2C_MasterRequestWrite+0x100>)
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f933 	bl	8002196 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	00010008 	.word	0x00010008
 8001f48:	00010002 	.word	0x00010002

08001f4c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f70:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d006      	beq.n	8001f86 <I2C_MasterRequestRead+0x3a>
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d003      	beq.n	8001f86 <I2C_MasterRequestRead+0x3a>
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f84:	d108      	bne.n	8001f98 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	e00b      	b.n	8001fb0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	2b11      	cmp	r3, #17
 8001f9e:	d107      	bne.n	8001fb0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 f893 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00d      	beq.n	8001fe4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd6:	d103      	bne.n	8001fe0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e079      	b.n	80020d8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fec:	d108      	bne.n	8002000 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001fee:	897b      	ldrh	r3, [r7, #10]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	611a      	str	r2, [r3, #16]
 8001ffe:	e05f      	b.n	80020c0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002000:	897b      	ldrh	r3, [r7, #10]
 8002002:	11db      	asrs	r3, r3, #7
 8002004:	b2db      	uxtb	r3, r3
 8002006:	f003 0306 	and.w	r3, r3, #6
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f063 030f 	orn	r3, r3, #15
 8002010:	b2da      	uxtb	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4930      	ldr	r1, [pc, #192]	; (80020e0 <I2C_MasterRequestRead+0x194>)
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f8b9 	bl	8002196 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e054      	b.n	80020d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800202e:	897b      	ldrh	r3, [r7, #10]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4929      	ldr	r1, [pc, #164]	; (80020e4 <I2C_MasterRequestRead+0x198>)
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f8a9 	bl	8002196 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e044      	b.n	80020d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002072:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 f831 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00d      	beq.n	80020a8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800209a:	d103      	bne.n	80020a4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e017      	b.n	80020d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80020a8:	897b      	ldrh	r3, [r7, #10]
 80020aa:	11db      	asrs	r3, r3, #7
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	f003 0306 	and.w	r3, r3, #6
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	f063 030e 	orn	r3, r3, #14
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4907      	ldr	r1, [pc, #28]	; (80020e4 <I2C_MasterRequestRead+0x198>)
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f865 	bl	8002196 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	00010008 	.word	0x00010008
 80020e4:	00010002 	.word	0x00010002

080020e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020f8:	e025      	b.n	8002146 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d021      	beq.n	8002146 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002102:	f7fe ff41 	bl	8000f88 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d302      	bcc.n	8002118 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d116      	bne.n	8002146 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2220      	movs	r2, #32
 8002122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f043 0220 	orr.w	r2, r3, #32
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e023      	b.n	800218e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	0c1b      	lsrs	r3, r3, #16
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b01      	cmp	r3, #1
 800214e:	d10d      	bne.n	800216c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4013      	ands	r3, r2
 800215c:	b29b      	uxth	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	bf0c      	ite	eq
 8002162:	2301      	moveq	r3, #1
 8002164:	2300      	movne	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	e00c      	b.n	8002186 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	43da      	mvns	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4013      	ands	r3, r2
 8002178:	b29b      	uxth	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	bf0c      	ite	eq
 800217e:	2301      	moveq	r3, #1
 8002180:	2300      	movne	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	429a      	cmp	r2, r3
 800218a:	d0b6      	beq.n	80020fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021a4:	e051      	b.n	800224a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b4:	d123      	bne.n	80021fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f043 0204 	orr.w	r2, r3, #4
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e046      	b.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d021      	beq.n	800224a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002206:	f7fe febf 	bl	8000f88 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	429a      	cmp	r2, r3
 8002214:	d302      	bcc.n	800221c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d116      	bne.n	800224a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2220      	movs	r2, #32
 8002226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f043 0220 	orr.w	r2, r3, #32
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e020      	b.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b01      	cmp	r3, #1
 8002252:	d10c      	bne.n	800226e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	43da      	mvns	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4013      	ands	r3, r2
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	bf14      	ite	ne
 8002266:	2301      	movne	r3, #1
 8002268:	2300      	moveq	r3, #0
 800226a:	b2db      	uxtb	r3, r3
 800226c:	e00b      	b.n	8002286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	43da      	mvns	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4013      	ands	r3, r2
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf14      	ite	ne
 8002280:	2301      	movne	r3, #1
 8002282:	2300      	moveq	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d18d      	bne.n	80021a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022a0:	e02d      	b.n	80022fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f8ce 	bl	8002444 <I2C_IsAcknowledgeFailed>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e02d      	b.n	800230e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b8:	d021      	beq.n	80022fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ba:	f7fe fe65 	bl	8000f88 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d302      	bcc.n	80022d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d116      	bne.n	80022fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f043 0220 	orr.w	r2, r3, #32
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e007      	b.n	800230e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002308:	2b80      	cmp	r3, #128	; 0x80
 800230a:	d1ca      	bne.n	80022a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002322:	e02d      	b.n	8002380 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 f88d 	bl	8002444 <I2C_IsAcknowledgeFailed>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e02d      	b.n	8002390 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233a:	d021      	beq.n	8002380 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233c:	f7fe fe24 	bl	8000f88 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	429a      	cmp	r2, r3
 800234a:	d302      	bcc.n	8002352 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d116      	bne.n	8002380 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f043 0220 	orr.w	r2, r3, #32
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e007      	b.n	8002390 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b04      	cmp	r3, #4
 800238c:	d1ca      	bne.n	8002324 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023a4:	e042      	b.n	800242c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	f003 0310 	and.w	r3, r3, #16
 80023b0:	2b10      	cmp	r3, #16
 80023b2:	d119      	bne.n	80023e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f06f 0210 	mvn.w	r2, #16
 80023bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e029      	b.n	800243c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e8:	f7fe fdce 	bl	8000f88 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d302      	bcc.n	80023fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d116      	bne.n	800242c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	f043 0220 	orr.w	r2, r3, #32
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e007      	b.n	800243c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002436:	2b40      	cmp	r3, #64	; 0x40
 8002438:	d1b5      	bne.n	80023a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245a:	d11b      	bne.n	8002494 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002464:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f043 0204 	orr.w	r2, r3, #4
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a4:	b08f      	sub	sp, #60	; 0x3c
 80024a6:	af0a      	add	r7, sp, #40	; 0x28
 80024a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e10f      	b.n	80026d4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d106      	bne.n	80024d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f004 ffda 	bl	8007488 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2203      	movs	r2, #3
 80024d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f001 fecd 	bl	8004292 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	603b      	str	r3, [r7, #0]
 80024fe:	687e      	ldr	r6, [r7, #4]
 8002500:	466d      	mov	r5, sp
 8002502:	f106 0410 	add.w	r4, r6, #16
 8002506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800250a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800250c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800250e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002512:	e885 0003 	stmia.w	r5, {r0, r1}
 8002516:	1d33      	adds	r3, r6, #4
 8002518:	cb0e      	ldmia	r3, {r1, r2, r3}
 800251a:	6838      	ldr	r0, [r7, #0]
 800251c:	f001 fda4 	bl	8004068 <USB_CoreInit>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2202      	movs	r2, #2
 800252a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0d0      	b.n	80026d4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f001 febb 	bl	80042b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	e04a      	b.n	80025da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002544:	7bfa      	ldrb	r2, [r7, #15]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	333d      	adds	r3, #61	; 0x3d
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	333c      	adds	r3, #60	; 0x3c
 8002568:	7bfa      	ldrb	r2, [r7, #15]
 800256a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	b298      	uxth	r0, r3
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	3342      	adds	r3, #66	; 0x42
 8002580:	4602      	mov	r2, r0
 8002582:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	333f      	adds	r3, #63	; 0x3f
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	3344      	adds	r3, #68	; 0x44
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025ac:	7bfa      	ldrb	r2, [r7, #15]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	3348      	adds	r3, #72	; 0x48
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	3350      	adds	r3, #80	; 0x50
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	3301      	adds	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d3af      	bcc.n	8002544 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e4:	2300      	movs	r3, #0
 80025e6:	73fb      	strb	r3, [r7, #15]
 80025e8:	e044      	b.n	8002674 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002600:	7bfa      	ldrb	r2, [r7, #15]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002612:	7bfa      	ldrb	r2, [r7, #15]
 8002614:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	3301      	adds	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	429a      	cmp	r2, r3
 800267c:	d3b5      	bcc.n	80025ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	687e      	ldr	r6, [r7, #4]
 8002686:	466d      	mov	r5, sp
 8002688:	f106 0410 	add.w	r4, r6, #16
 800268c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800268e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002694:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002698:	e885 0003 	stmia.w	r5, {r0, r1}
 800269c:	1d33      	adds	r3, r6, #4
 800269e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a0:	6838      	ldr	r0, [r7, #0]
 80026a2:	f001 fe53 	bl	800434c <USB_DevInit>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e00d      	b.n	80026d4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f002 fecf 	bl	8005470 <USB_DevDisconnect>

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_PCD_Start+0x1c>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e020      	b.n	800273a <HAL_PCD_Start+0x5e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	2b01      	cmp	r3, #1
 8002706:	d109      	bne.n	800271c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800270c:	2b01      	cmp	r3, #1
 800270e:	d005      	beq.n	800271c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002714:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f001 fda5 	bl	8004270 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f002 fe7f 	bl	800542e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002742:	b590      	push	{r4, r7, lr}
 8002744:	b08d      	sub	sp, #52	; 0x34
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f002 ff3d 	bl	80055d8 <USB_GetMode>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	f040 839d 	bne.w	8002ea0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f002 fea1 	bl	80054b2 <USB_ReadInterrupts>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 8393 	beq.w	8002e9e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f002 fe98 	bl	80054b2 <USB_ReadInterrupts>
 8002782:	4603      	mov	r3, r0
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b02      	cmp	r3, #2
 800278a:	d107      	bne.n	800279c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f002 0202 	and.w	r2, r2, #2
 800279a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f002 fe86 	bl	80054b2 <USB_ReadInterrupts>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	d161      	bne.n	8002874 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0210 	bic.w	r2, r2, #16
 80027be:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	f003 020f 	and.w	r2, r3, #15
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	4413      	add	r3, r2
 80027dc:	3304      	adds	r3, #4
 80027de:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	0c5b      	lsrs	r3, r3, #17
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d124      	bne.n	8002836 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d035      	beq.n	8002864 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002806:	b29b      	uxth	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	6a38      	ldr	r0, [r7, #32]
 800280c:	f002 fcbd 	bl	800518a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	091b      	lsrs	r3, r3, #4
 8002818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800281c:	441a      	add	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800282e:	441a      	add	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	619a      	str	r2, [r3, #24]
 8002834:	e016      	b.n	8002864 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	0c5b      	lsrs	r3, r3, #17
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	2b06      	cmp	r3, #6
 8002840:	d110      	bne.n	8002864 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002848:	2208      	movs	r2, #8
 800284a:	4619      	mov	r1, r3
 800284c:	6a38      	ldr	r0, [r7, #32]
 800284e:	f002 fc9c 	bl	800518a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	699a      	ldr	r2, [r3, #24]
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800285e:	441a      	add	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0210 	orr.w	r2, r2, #16
 8002872:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f002 fe1a 	bl	80054b2 <USB_ReadInterrupts>
 800287e:	4603      	mov	r3, r0
 8002880:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002884:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002888:	d16e      	bne.n	8002968 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f002 fe20 	bl	80054d8 <USB_ReadDevAllOutEpInterrupt>
 8002898:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800289a:	e062      	b.n	8002962 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d057      	beq.n	8002956 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f002 fe45 	bl	8005540 <USB_ReadDevOutEPInterrupt>
 80028b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00c      	beq.n	80028dc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ce:	461a      	mov	r2, r3
 80028d0:	2301      	movs	r3, #1
 80028d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fdb0 	bl	800343c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00c      	beq.n	8002900 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f2:	461a      	mov	r2, r3
 80028f4:	2308      	movs	r3, #8
 80028f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 feaa 	bl	8003654 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	4413      	add	r3, r2
 8002912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002916:	461a      	mov	r2, r3
 8002918:	2310      	movs	r3, #16
 800291a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d008      	beq.n	8002938 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	4413      	add	r3, r2
 800292e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002932:	461a      	mov	r2, r3
 8002934:	2320      	movs	r3, #32
 8002936:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	4413      	add	r3, r2
 800294a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800294e:	461a      	mov	r2, r3
 8002950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002954:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	3301      	adds	r3, #1
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	d199      	bne.n	800289c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f002 fda0 	bl	80054b2 <USB_ReadInterrupts>
 8002972:	4603      	mov	r3, r0
 8002974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002978:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800297c:	f040 80c0 	bne.w	8002b00 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f002 fdc1 	bl	800550c <USB_ReadDevAllInEpInterrupt>
 800298a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002990:	e0b2      	b.n	8002af8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80a7 	beq.w	8002aec <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f002 fde7 	bl	800557c <USB_ReadDevInEPInterrupt>
 80029ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d057      	beq.n	8002a6a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	2201      	movs	r2, #1
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69f9      	ldr	r1, [r7, #28]
 80029d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029da:	4013      	ands	r3, r2
 80029dc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ea:	461a      	mov	r2, r3
 80029ec:	2301      	movs	r3, #1
 80029ee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d132      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	3348      	adds	r3, #72	; 0x48
 8002a08:	6819      	ldr	r1, [r3, #0]
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4403      	add	r3, r0
 8002a18:	3344      	adds	r3, #68	; 0x44
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4419      	add	r1, r3
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4403      	add	r3, r0
 8002a2c:	3348      	adds	r3, #72	; 0x48
 8002a2e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d113      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x31c>
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	3350      	adds	r3, #80	; 0x50
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d108      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a56:	461a      	mov	r2, r3
 8002a58:	2101      	movs	r1, #1
 8002a5a:	f002 fdef 	bl	800563c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	4619      	mov	r1, r3
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f004 fd9e 	bl	80075a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a80:	461a      	mov	r2, r3
 8002a82:	2308      	movs	r3, #8
 8002a84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2310      	movs	r3, #16
 8002aa0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2340      	movs	r3, #64	; 0x40
 8002abc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fc1b 	bl	8003322 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	3301      	adds	r3, #1
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af4:	085b      	lsrs	r3, r3, #1
 8002af6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f47f af49 	bne.w	8002992 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f002 fcd4 	bl	80054b2 <USB_ReadInterrupts>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b14:	d122      	bne.n	8002b5c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d108      	bne.n	8002b46 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fe26 	bl	8003790 <HAL_PCDEx_LPM_Callback>
 8002b44:	e002      	b.n	8002b4c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f004 fda4 	bl	8007694 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002b5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f002 fca6 	bl	80054b2 <USB_ReadInterrupts>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b70:	d112      	bne.n	8002b98 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d102      	bne.n	8002b88 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f004 fd60 	bl	8007648 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b96:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 fc88 	bl	80054b2 <USB_ReadInterrupts>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bac:	f040 80c7 	bne.w	8002d3e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2110      	movs	r1, #16
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 fd22 	bl	8004614 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bd4:	e056      	b.n	8002c84 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002be2:	461a      	mov	r2, r3
 8002be4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002be8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bfa:	0151      	lsls	r1, r2, #5
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	440a      	add	r2, r1
 8002c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c08:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c1a:	0151      	lsls	r1, r2, #5
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	440a      	add	r2, r1
 8002c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c36:	461a      	mov	r2, r3
 8002c38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c4e:	0151      	lsls	r1, r2, #5
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	440a      	add	r2, r1
 8002c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c6e:	0151      	lsls	r1, r2, #5
 8002c70:	69fa      	ldr	r2, [r7, #28]
 8002c72:	440a      	add	r2, r1
 8002c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c80:	3301      	adds	r3, #1
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d3a3      	bcc.n	8002bd6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c9c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ca0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d016      	beq.n	8002cd8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb4:	69fa      	ldr	r2, [r7, #28]
 8002cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cba:	f043 030b 	orr.w	r3, r3, #11
 8002cbe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cd0:	f043 030b 	orr.w	r3, r3, #11
 8002cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd6:	e015      	b.n	8002d04 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ce6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002cee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cfe:	f043 030b 	orr.w	r3, r3, #11
 8002d02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f002 fc87 	bl	800563c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f002 fbb5 	bl	80054b2 <USB_ReadInterrupts>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d52:	d124      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f002 fc4b 	bl	80055f4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f001 fcb3 	bl	80046ce <USB_GetDevSpeed>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681c      	ldr	r4, [r3, #0]
 8002d74:	f001 f958 	bl	8004028 <HAL_RCC_GetHCLKFreq>
 8002d78:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	461a      	mov	r2, r3
 8002d82:	4620      	mov	r0, r4
 8002d84:	f001 f9d2 	bl	800412c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f004 fc34 	bl	80075f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f002 fb85 	bl	80054b2 <USB_ReadInterrupts>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d10a      	bne.n	8002dc8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f004 fc11 	bl	80075da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f002 0208 	and.w	r2, r2, #8
 8002dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f002 fb70 	bl	80054b2 <USB_ReadInterrupts>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ddc:	d10f      	bne.n	8002dfe <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	4619      	mov	r1, r3
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f004 fc73 	bl	80076d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f002 fb55 	bl	80054b2 <USB_ReadInterrupts>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e12:	d10f      	bne.n	8002e34 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f004 fc46 	bl	80076b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f002 fb3a 	bl	80054b2 <USB_ReadInterrupts>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e48:	d10a      	bne.n	8002e60 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f004 fc54 	bl	80076f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f002 fb24 	bl	80054b2 <USB_ReadInterrupts>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d115      	bne.n	8002ea0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f004 fc44 	bl	8007714 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	e000      	b.n	8002ea0 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002e9e:	bf00      	nop
    }
  }
}
 8002ea0:	3734      	adds	r7, #52	; 0x34
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd90      	pop	{r4, r7, pc}

08002ea6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_PCD_SetAddress+0x1a>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e013      	b.n	8002ee8 <HAL_PCD_SetAddress+0x42>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f002 fa82 	bl	80053e2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	4608      	mov	r0, r1
 8002efa:	4611      	mov	r1, r2
 8002efc:	461a      	mov	r2, r3
 8002efe:	4603      	mov	r3, r0
 8002f00:	70fb      	strb	r3, [r7, #3]
 8002f02:	460b      	mov	r3, r1
 8002f04:	803b      	strh	r3, [r7, #0]
 8002f06:	4613      	mov	r3, r2
 8002f08:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	da0f      	bge.n	8002f36 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	f003 020f 	and.w	r2, r3, #15
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	3338      	adds	r3, #56	; 0x38
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	705a      	strb	r2, [r3, #1]
 8002f34:	e00f      	b.n	8002f56 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f36:	78fb      	ldrb	r3, [r7, #3]
 8002f38:	f003 020f 	and.w	r2, r3, #15
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f62:	883a      	ldrh	r2, [r7, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	78ba      	ldrb	r2, [r7, #2]
 8002f6c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f80:	78bb      	ldrb	r3, [r7, #2]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d102      	bne.n	8002f8c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_PCD_EP_Open+0xaa>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e00e      	b.n	8002fb8 <HAL_PCD_EP_Open+0xc8>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68f9      	ldr	r1, [r7, #12]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 fbb5 	bl	8004718 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002fb6:	7afb      	ldrb	r3, [r7, #11]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da0f      	bge.n	8002ff4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	f003 020f 	and.w	r2, r3, #15
 8002fda:	4613      	mov	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	3338      	adds	r3, #56	; 0x38
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3304      	adds	r3, #4
 8002fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	705a      	strb	r2, [r3, #1]
 8002ff2:	e00f      	b.n	8003014 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	f003 020f 	and.w	r2, r3, #15
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	3304      	adds	r3, #4
 800300c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	b2da      	uxtb	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_PCD_EP_Close+0x6e>
 800302a:	2302      	movs	r3, #2
 800302c:	e00e      	b.n	800304c <HAL_PCD_EP_Close+0x8c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68f9      	ldr	r1, [r7, #12]
 800303c:	4618      	mov	r0, r3
 800303e:	f001 fbf3 	bl	8004828 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	607a      	str	r2, [r7, #4]
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	460b      	mov	r3, r1
 8003062:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003064:	7afb      	ldrb	r3, [r7, #11]
 8003066:	f003 020f 	and.w	r2, r3, #15
 800306a:	4613      	mov	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4413      	add	r3, r2
 800307a:	3304      	adds	r3, #4
 800307c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2200      	movs	r2, #0
 8003094:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003096:	7afb      	ldrb	r3, [r7, #11]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	b2da      	uxtb	r2, r3
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d102      	bne.n	80030b0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030b0:	7afb      	ldrb	r3, [r7, #11]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	6979      	ldr	r1, [r7, #20]
 80030c8:	f001 fece 	bl	8004e68 <USB_EP0StartXfer>
 80030cc:	e008      	b.n	80030e0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	6979      	ldr	r1, [r7, #20]
 80030dc:	f001 fc80 	bl	80049e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	460b      	mov	r3, r1
 80030f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	f003 020f 	and.w	r2, r3, #15
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800310c:	681b      	ldr	r3, [r3, #0]
}
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b086      	sub	sp, #24
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
 8003126:	460b      	mov	r3, r1
 8003128:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800312a:	7afb      	ldrb	r3, [r7, #11]
 800312c:	f003 020f 	and.w	r2, r3, #15
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	3338      	adds	r3, #56	; 0x38
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4413      	add	r3, r2
 800313e:	3304      	adds	r3, #4
 8003140:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2200      	movs	r2, #0
 8003152:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2201      	movs	r2, #1
 8003158:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800315a:	7afb      	ldrb	r3, [r7, #11]
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	b2da      	uxtb	r2, r3
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d102      	bne.n	8003174 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003174:	7afb      	ldrb	r3, [r7, #11]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	461a      	mov	r2, r3
 800318a:	6979      	ldr	r1, [r7, #20]
 800318c:	f001 fe6c 	bl	8004e68 <USB_EP0StartXfer>
 8003190:	e008      	b.n	80031a4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	6979      	ldr	r1, [r7, #20]
 80031a0:	f001 fc1e 	bl	80049e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	460b      	mov	r3, r1
 80031b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	f003 020f 	and.w	r2, r3, #15
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d901      	bls.n	80031cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e050      	b.n	800326e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	da0f      	bge.n	80031f4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f003 020f 	and.w	r2, r3, #15
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	3338      	adds	r3, #56	; 0x38
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	3304      	adds	r3, #4
 80031ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	705a      	strb	r2, [r3, #1]
 80031f2:	e00d      	b.n	8003210 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	3304      	adds	r3, #4
 8003208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	b2da      	uxtb	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_PCD_EP_SetStall+0x82>
 800322c:	2302      	movs	r3, #2
 800322e:	e01e      	b.n	800326e <HAL_PCD_EP_SetStall+0xc0>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68f9      	ldr	r1, [r7, #12]
 800323e:	4618      	mov	r0, r3
 8003240:	f001 fffb 	bl	800523a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10a      	bne.n	8003264 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	b2d9      	uxtb	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800325e:	461a      	mov	r2, r3
 8003260:	f002 f9ec 	bl	800563c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	460b      	mov	r3, r1
 8003280:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 020f 	and.w	r2, r3, #15
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	429a      	cmp	r2, r3
 800328e:	d901      	bls.n	8003294 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e042      	b.n	800331a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003298:	2b00      	cmp	r3, #0
 800329a:	da0f      	bge.n	80032bc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	f003 020f 	and.w	r2, r3, #15
 80032a2:	4613      	mov	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	3338      	adds	r3, #56	; 0x38
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	3304      	adds	r3, #4
 80032b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	705a      	strb	r2, [r3, #1]
 80032ba:	e00f      	b.n	80032dc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032bc:	78fb      	ldrb	r3, [r7, #3]
 80032be:	f003 020f 	and.w	r2, r3, #15
 80032c2:	4613      	mov	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	3304      	adds	r3, #4
 80032d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_PCD_EP_ClrStall+0x86>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e00e      	b.n	800331a <HAL_PCD_EP_ClrStall+0xa4>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68f9      	ldr	r1, [r7, #12]
 800330a:	4618      	mov	r0, r3
 800330c:	f002 f803 	bl	8005316 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b08a      	sub	sp, #40	; 0x28
 8003326:	af02      	add	r7, sp, #8
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	3338      	adds	r3, #56	; 0x38
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	3304      	adds	r3, #4
 8003348:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	429a      	cmp	r2, r3
 8003354:	d901      	bls.n	800335a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e06c      	b.n	8003434 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	429a      	cmp	r2, r3
 800336e:	d902      	bls.n	8003376 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3303      	adds	r3, #3
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800337e:	e02b      	b.n	80033d8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	695a      	ldr	r2, [r3, #20]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	429a      	cmp	r2, r3
 8003394:	d902      	bls.n	800339c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	3303      	adds	r3, #3
 80033a0:	089b      	lsrs	r3, r3, #2
 80033a2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	68d9      	ldr	r1, [r3, #12]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	4603      	mov	r3, r0
 80033ba:	6978      	ldr	r0, [r7, #20]
 80033bc:	f001 fea7 	bl	800510e <USB_WritePacket>

    ep->xfer_buff  += len;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	441a      	add	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	699a      	ldr	r2, [r3, #24]
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	441a      	add	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d809      	bhi.n	8003402 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d203      	bcs.n	8003402 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1be      	bne.n	8003380 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	429a      	cmp	r2, r3
 800340c:	d811      	bhi.n	8003432 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	2201      	movs	r2, #1
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	43db      	mvns	r3, r3
 8003428:	6939      	ldr	r1, [r7, #16]
 800342a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800342e:	4013      	ands	r3, r2
 8003430:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3720      	adds	r7, #32
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	333c      	adds	r3, #60	; 0x3c
 8003454:	3304      	adds	r3, #4
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b01      	cmp	r3, #1
 8003470:	f040 80a0 	bne.w	80035b4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d015      	beq.n	80034aa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4a72      	ldr	r2, [pc, #456]	; (800364c <PCD_EP_OutXfrComplete_int+0x210>)
 8003482:	4293      	cmp	r3, r2
 8003484:	f240 80dd 	bls.w	8003642 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 80d7 	beq.w	8003642 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a0:	461a      	mov	r2, r3
 80034a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034a6:	6093      	str	r3, [r2, #8]
 80034a8:	e0cb      	b.n	8003642 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d009      	beq.n	80034c8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c0:	461a      	mov	r2, r3
 80034c2:	2320      	movs	r3, #32
 80034c4:	6093      	str	r3, [r2, #8]
 80034c6:	e0bc      	b.n	8003642 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 80b7 	bne.w	8003642 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4a5d      	ldr	r2, [pc, #372]	; (800364c <PCD_EP_OutXfrComplete_int+0x210>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d90f      	bls.n	80034fc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f2:	461a      	mov	r2, r3
 80034f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034f8:	6093      	str	r3, [r2, #8]
 80034fa:	e0a2      	b.n	8003642 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800350e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	0159      	lsls	r1, r3, #5
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	440b      	add	r3, r1
 8003518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003522:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	4613      	mov	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4403      	add	r3, r0
 8003532:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003536:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800354a:	6819      	ldr	r1, [r3, #0]
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4403      	add	r3, r0
 800355a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4419      	add	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4403      	add	r3, r0
 8003570:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003574:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d114      	bne.n	80035a6 <PCD_EP_OutXfrComplete_int+0x16a>
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d108      	bne.n	80035a6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800359e:	461a      	mov	r2, r3
 80035a0:	2101      	movs	r1, #1
 80035a2:	f002 f84b 	bl	800563c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	4619      	mov	r1, r3
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f003 ffdf 	bl	8007570 <HAL_PCD_DataOutStageCallback>
 80035b2:	e046      	b.n	8003642 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a26      	ldr	r2, [pc, #152]	; (8003650 <PCD_EP_OutXfrComplete_int+0x214>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d124      	bne.n	8003606 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d2:	461a      	mov	r2, r3
 80035d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035d8:	6093      	str	r3, [r2, #8]
 80035da:	e032      	b.n	8003642 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f2:	461a      	mov	r2, r3
 80035f4:	2320      	movs	r3, #32
 80035f6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	4619      	mov	r1, r3
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f003 ffb6 	bl	8007570 <HAL_PCD_DataOutStageCallback>
 8003604:	e01d      	b.n	8003642 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d114      	bne.n	8003636 <PCD_EP_OutXfrComplete_int+0x1fa>
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d108      	bne.n	8003636 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800362e:	461a      	mov	r2, r3
 8003630:	2100      	movs	r1, #0
 8003632:	f002 f803 	bl	800563c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	4619      	mov	r1, r3
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f003 ff97 	bl	8007570 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	4f54300a 	.word	0x4f54300a
 8003650:	4f54310a 	.word	0x4f54310a

08003654 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	333c      	adds	r3, #60	; 0x3c
 800366c:	3304      	adds	r3, #4
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4413      	add	r3, r2
 800367a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a15      	ldr	r2, [pc, #84]	; (80036dc <PCD_EP_OutSetupPacket_int+0x88>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d90e      	bls.n	80036a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003690:	2b00      	cmp	r3, #0
 8003692:	d009      	beq.n	80036a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a0:	461a      	mov	r2, r3
 80036a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f003 ff4f 	bl	800754c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4a0a      	ldr	r2, [pc, #40]	; (80036dc <PCD_EP_OutSetupPacket_int+0x88>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d90c      	bls.n	80036d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d108      	bne.n	80036d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036c8:	461a      	mov	r2, r3
 80036ca:	2101      	movs	r1, #1
 80036cc:	f001 ffb6 	bl	800563c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	4f54300a 	.word	0x4f54300a

080036e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	70fb      	strb	r3, [r7, #3]
 80036ec:	4613      	mov	r3, r2
 80036ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d107      	bne.n	800370e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036fe:	883b      	ldrh	r3, [r7, #0]
 8003700:	0419      	lsls	r1, r3, #16
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	430a      	orrs	r2, r1
 800370a:	629a      	str	r2, [r3, #40]	; 0x28
 800370c:	e028      	b.n	8003760 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	0c1b      	lsrs	r3, r3, #16
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	4413      	add	r3, r2
 800371a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800371c:	2300      	movs	r3, #0
 800371e:	73fb      	strb	r3, [r7, #15]
 8003720:	e00d      	b.n	800373e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	3340      	adds	r3, #64	; 0x40
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	0c1b      	lsrs	r3, r3, #16
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	4413      	add	r3, r2
 8003736:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	3301      	adds	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
 800373e:	7bfa      	ldrb	r2, [r7, #15]
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	3b01      	subs	r3, #1
 8003744:	429a      	cmp	r2, r3
 8003746:	d3ec      	bcc.n	8003722 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003748:	883b      	ldrh	r3, [r7, #0]
 800374a:	0418      	lsls	r0, r3, #16
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	3b01      	subs	r3, #1
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	4302      	orrs	r2, r0
 8003758:	3340      	adds	r3, #64	; 0x40
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	460b      	mov	r3, r1
 8003778:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	887a      	ldrh	r2, [r7, #2]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e264      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d075      	beq.n	80038b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037c6:	4ba3      	ldr	r3, [pc, #652]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d00c      	beq.n	80037ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d2:	4ba0      	ldr	r3, [pc, #640]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d112      	bne.n	8003804 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037de:	4b9d      	ldr	r3, [pc, #628]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ea:	d10b      	bne.n	8003804 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ec:	4b99      	ldr	r3, [pc, #612]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d05b      	beq.n	80038b0 <HAL_RCC_OscConfig+0x108>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d157      	bne.n	80038b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e23f      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d106      	bne.n	800381c <HAL_RCC_OscConfig+0x74>
 800380e:	4b91      	ldr	r3, [pc, #580]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a90      	ldr	r2, [pc, #576]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	e01d      	b.n	8003858 <HAL_RCC_OscConfig+0xb0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003824:	d10c      	bne.n	8003840 <HAL_RCC_OscConfig+0x98>
 8003826:	4b8b      	ldr	r3, [pc, #556]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a8a      	ldr	r2, [pc, #552]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	4b88      	ldr	r3, [pc, #544]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a87      	ldr	r2, [pc, #540]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e00b      	b.n	8003858 <HAL_RCC_OscConfig+0xb0>
 8003840:	4b84      	ldr	r3, [pc, #528]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a83      	ldr	r2, [pc, #524]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	4b81      	ldr	r3, [pc, #516]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a80      	ldr	r2, [pc, #512]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d013      	beq.n	8003888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fd fb92 	bl	8000f88 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003868:	f7fd fb8e 	bl	8000f88 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e204      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	4b76      	ldr	r3, [pc, #472]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0xc0>
 8003886:	e014      	b.n	80038b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003888:	f7fd fb7e 	bl	8000f88 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003890:	f7fd fb7a 	bl	8000f88 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e1f0      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a2:	4b6c      	ldr	r3, [pc, #432]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0xe8>
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d063      	beq.n	8003986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038be:	4b65      	ldr	r3, [pc, #404]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00b      	beq.n	80038e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ca:	4b62      	ldr	r3, [pc, #392]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d11c      	bne.n	8003910 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038d6:	4b5f      	ldr	r3, [pc, #380]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d116      	bne.n	8003910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e2:	4b5c      	ldr	r3, [pc, #368]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <HAL_RCC_OscConfig+0x152>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d001      	beq.n	80038fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e1c4      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fa:	4b56      	ldr	r3, [pc, #344]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4952      	ldr	r1, [pc, #328]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 800390a:	4313      	orrs	r3, r2
 800390c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390e:	e03a      	b.n	8003986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d020      	beq.n	800395a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003918:	4b4f      	ldr	r3, [pc, #316]	; (8003a58 <HAL_RCC_OscConfig+0x2b0>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391e:	f7fd fb33 	bl	8000f88 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003926:	f7fd fb2f 	bl	8000f88 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e1a5      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003938:	4b46      	ldr	r3, [pc, #280]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003944:	4b43      	ldr	r3, [pc, #268]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4940      	ldr	r1, [pc, #256]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003954:	4313      	orrs	r3, r2
 8003956:	600b      	str	r3, [r1, #0]
 8003958:	e015      	b.n	8003986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395a:	4b3f      	ldr	r3, [pc, #252]	; (8003a58 <HAL_RCC_OscConfig+0x2b0>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fd fb12 	bl	8000f88 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003968:	f7fd fb0e 	bl	8000f88 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e184      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397a:	4b36      	ldr	r3, [pc, #216]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d030      	beq.n	80039f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d016      	beq.n	80039c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399a:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <HAL_RCC_OscConfig+0x2b4>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fd faf2 	bl	8000f88 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a8:	f7fd faee 	bl	8000f88 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e164      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ba:	4b26      	ldr	r3, [pc, #152]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x200>
 80039c6:	e015      	b.n	80039f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c8:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <HAL_RCC_OscConfig+0x2b4>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ce:	f7fd fadb 	bl	8000f88 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d6:	f7fd fad7 	bl	8000f88 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e14d      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e8:	4b1a      	ldr	r3, [pc, #104]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80039ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f0      	bne.n	80039d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80a0 	beq.w	8003b42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a02:	2300      	movs	r3, #0
 8003a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a06:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10f      	bne.n	8003a32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	4a0e      	ldr	r2, [pc, #56]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a20:	6413      	str	r3, [r2, #64]	; 0x40
 8003a22:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	60bb      	str	r3, [r7, #8]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCC_OscConfig+0x2b8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d121      	bne.n	8003a82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a3e:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <HAL_RCC_OscConfig+0x2b8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a07      	ldr	r2, [pc, #28]	; (8003a60 <HAL_RCC_OscConfig+0x2b8>)
 8003a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4a:	f7fd fa9d 	bl	8000f88 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a50:	e011      	b.n	8003a76 <HAL_RCC_OscConfig+0x2ce>
 8003a52:	bf00      	nop
 8003a54:	40023800 	.word	0x40023800
 8003a58:	42470000 	.word	0x42470000
 8003a5c:	42470e80 	.word	0x42470e80
 8003a60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a64:	f7fd fa90 	bl	8000f88 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e106      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a76:	4b85      	ldr	r3, [pc, #532]	; (8003c8c <HAL_RCC_OscConfig+0x4e4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d106      	bne.n	8003a98 <HAL_RCC_OscConfig+0x2f0>
 8003a8a:	4b81      	ldr	r3, [pc, #516]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8e:	4a80      	ldr	r2, [pc, #512]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6713      	str	r3, [r2, #112]	; 0x70
 8003a96:	e01c      	b.n	8003ad2 <HAL_RCC_OscConfig+0x32a>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b05      	cmp	r3, #5
 8003a9e:	d10c      	bne.n	8003aba <HAL_RCC_OscConfig+0x312>
 8003aa0:	4b7b      	ldr	r3, [pc, #492]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	4a7a      	ldr	r2, [pc, #488]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003aa6:	f043 0304 	orr.w	r3, r3, #4
 8003aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003aac:	4b78      	ldr	r3, [pc, #480]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab0:	4a77      	ldr	r2, [pc, #476]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab8:	e00b      	b.n	8003ad2 <HAL_RCC_OscConfig+0x32a>
 8003aba:	4b75      	ldr	r3, [pc, #468]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	4a74      	ldr	r2, [pc, #464]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac6:	4b72      	ldr	r3, [pc, #456]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	4a71      	ldr	r2, [pc, #452]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003acc:	f023 0304 	bic.w	r3, r3, #4
 8003ad0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d015      	beq.n	8003b06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ada:	f7fd fa55 	bl	8000f88 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae0:	e00a      	b.n	8003af8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae2:	f7fd fa51 	bl	8000f88 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e0c5      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af8:	4b65      	ldr	r3, [pc, #404]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ee      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x33a>
 8003b04:	e014      	b.n	8003b30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b06:	f7fd fa3f 	bl	8000f88 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0c:	e00a      	b.n	8003b24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b0e:	f7fd fa3b 	bl	8000f88 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e0af      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b24:	4b5a      	ldr	r3, [pc, #360]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1ee      	bne.n	8003b0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d105      	bne.n	8003b42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b36:	4b56      	ldr	r3, [pc, #344]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	4a55      	ldr	r2, [pc, #340]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 809b 	beq.w	8003c82 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b4c:	4b50      	ldr	r3, [pc, #320]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 030c 	and.w	r3, r3, #12
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d05c      	beq.n	8003c12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d141      	bne.n	8003be4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b60:	4b4c      	ldr	r3, [pc, #304]	; (8003c94 <HAL_RCC_OscConfig+0x4ec>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b66:	f7fd fa0f 	bl	8000f88 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6e:	f7fd fa0b 	bl	8000f88 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e081      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b80:	4b43      	ldr	r3, [pc, #268]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f0      	bne.n	8003b6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	019b      	lsls	r3, r3, #6
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	085b      	lsrs	r3, r3, #1
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	041b      	lsls	r3, r3, #16
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	061b      	lsls	r3, r3, #24
 8003bb0:	4937      	ldr	r1, [pc, #220]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb6:	4b37      	ldr	r3, [pc, #220]	; (8003c94 <HAL_RCC_OscConfig+0x4ec>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbc:	f7fd f9e4 	bl	8000f88 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc4:	f7fd f9e0 	bl	8000f88 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e056      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd6:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x41c>
 8003be2:	e04e      	b.n	8003c82 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be4:	4b2b      	ldr	r3, [pc, #172]	; (8003c94 <HAL_RCC_OscConfig+0x4ec>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bea:	f7fd f9cd 	bl	8000f88 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf2:	f7fd f9c9 	bl	8000f88 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e03f      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c04:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1f0      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x44a>
 8003c10:	e037      	b.n	8003c82 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e032      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c1e:	4b1c      	ldr	r3, [pc, #112]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d028      	beq.n	8003c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d121      	bne.n	8003c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d11a      	bne.n	8003c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c4e:	4013      	ands	r3, r2
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c54:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d111      	bne.n	8003c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c64:	085b      	lsrs	r3, r3, #1
 8003c66:	3b01      	subs	r3, #1
 8003c68:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d107      	bne.n	8003c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d001      	beq.n	8003c82 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40007000 	.word	0x40007000
 8003c90:	40023800 	.word	0x40023800
 8003c94:	42470060 	.word	0x42470060

08003c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0cc      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cac:	4b68      	ldr	r3, [pc, #416]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d90c      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b65      	ldr	r3, [pc, #404]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b63      	ldr	r3, [pc, #396]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0b8      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d020      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cec:	4b59      	ldr	r3, [pc, #356]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a58      	ldr	r2, [pc, #352]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d04:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a52      	ldr	r2, [pc, #328]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d10:	4b50      	ldr	r3, [pc, #320]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	494d      	ldr	r1, [pc, #308]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d044      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	4b47      	ldr	r3, [pc, #284]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d119      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e07f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d003      	beq.n	8003d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d56:	4b3f      	ldr	r3, [pc, #252]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e06f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d66:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e067      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d76:	4b37      	ldr	r3, [pc, #220]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f023 0203 	bic.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4934      	ldr	r1, [pc, #208]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d88:	f7fd f8fe 	bl	8000f88 <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d90:	f7fd f8fa 	bl	8000f88 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e04f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 020c 	and.w	r2, r3, #12
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d1eb      	bne.n	8003d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003db8:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d20c      	bcs.n	8003de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e032      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dec:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4916      	ldr	r1, [pc, #88]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0a:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	490e      	ldr	r1, [pc, #56]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e1e:	f000 f821 	bl	8003e64 <HAL_RCC_GetSysClockFreq>
 8003e22:	4602      	mov	r2, r0
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	490a      	ldr	r1, [pc, #40]	; (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003e30:	5ccb      	ldrb	r3, [r1, r3]
 8003e32:	fa22 f303 	lsr.w	r3, r2, r3
 8003e36:	4a09      	ldr	r2, [pc, #36]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fd f85e 	bl	8000f00 <HAL_InitTick>

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023c00 	.word	0x40023c00
 8003e54:	40023800 	.word	0x40023800
 8003e58:	08007b84 	.word	0x08007b84
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	20000004 	.word	0x20000004

08003e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	2300      	movs	r3, #0
 8003e76:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e7c:	4b67      	ldr	r3, [pc, #412]	; (800401c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d00d      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	f200 80bd 	bhi.w	8004008 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x34>
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d003      	beq.n	8003e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e96:	e0b7      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e98:	4b61      	ldr	r3, [pc, #388]	; (8004020 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e9a:	60bb      	str	r3, [r7, #8]
       break;
 8003e9c:	e0b7      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e9e:	4b61      	ldr	r3, [pc, #388]	; (8004024 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003ea0:	60bb      	str	r3, [r7, #8]
      break;
 8003ea2:	e0b4      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea4:	4b5d      	ldr	r3, [pc, #372]	; (800401c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eae:	4b5b      	ldr	r3, [pc, #364]	; (800401c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d04d      	beq.n	8003f56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eba:	4b58      	ldr	r3, [pc, #352]	; (800401c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	099b      	lsrs	r3, r3, #6
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003eca:	f04f 0100 	mov.w	r1, #0
 8003ece:	ea02 0800 	and.w	r8, r2, r0
 8003ed2:	ea03 0901 	and.w	r9, r3, r1
 8003ed6:	4640      	mov	r0, r8
 8003ed8:	4649      	mov	r1, r9
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	014b      	lsls	r3, r1, #5
 8003ee4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ee8:	0142      	lsls	r2, r0, #5
 8003eea:	4610      	mov	r0, r2
 8003eec:	4619      	mov	r1, r3
 8003eee:	ebb0 0008 	subs.w	r0, r0, r8
 8003ef2:	eb61 0109 	sbc.w	r1, r1, r9
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	018b      	lsls	r3, r1, #6
 8003f00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f04:	0182      	lsls	r2, r0, #6
 8003f06:	1a12      	subs	r2, r2, r0
 8003f08:	eb63 0301 	sbc.w	r3, r3, r1
 8003f0c:	f04f 0000 	mov.w	r0, #0
 8003f10:	f04f 0100 	mov.w	r1, #0
 8003f14:	00d9      	lsls	r1, r3, #3
 8003f16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f1a:	00d0      	lsls	r0, r2, #3
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	eb12 0208 	adds.w	r2, r2, r8
 8003f24:	eb43 0309 	adc.w	r3, r3, r9
 8003f28:	f04f 0000 	mov.w	r0, #0
 8003f2c:	f04f 0100 	mov.w	r1, #0
 8003f30:	0259      	lsls	r1, r3, #9
 8003f32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003f36:	0250      	lsls	r0, r2, #9
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	f7fc f93e 	bl	80001c8 <__aeabi_uldivmod>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4613      	mov	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e04a      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f56:	4b31      	ldr	r3, [pc, #196]	; (800401c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	099b      	lsrs	r3, r3, #6
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f66:	f04f 0100 	mov.w	r1, #0
 8003f6a:	ea02 0400 	and.w	r4, r2, r0
 8003f6e:	ea03 0501 	and.w	r5, r3, r1
 8003f72:	4620      	mov	r0, r4
 8003f74:	4629      	mov	r1, r5
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	014b      	lsls	r3, r1, #5
 8003f80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f84:	0142      	lsls	r2, r0, #5
 8003f86:	4610      	mov	r0, r2
 8003f88:	4619      	mov	r1, r3
 8003f8a:	1b00      	subs	r0, r0, r4
 8003f8c:	eb61 0105 	sbc.w	r1, r1, r5
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	018b      	lsls	r3, r1, #6
 8003f9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f9e:	0182      	lsls	r2, r0, #6
 8003fa0:	1a12      	subs	r2, r2, r0
 8003fa2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fa6:	f04f 0000 	mov.w	r0, #0
 8003faa:	f04f 0100 	mov.w	r1, #0
 8003fae:	00d9      	lsls	r1, r3, #3
 8003fb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fb4:	00d0      	lsls	r0, r2, #3
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	1912      	adds	r2, r2, r4
 8003fbc:	eb45 0303 	adc.w	r3, r5, r3
 8003fc0:	f04f 0000 	mov.w	r0, #0
 8003fc4:	f04f 0100 	mov.w	r1, #0
 8003fc8:	0299      	lsls	r1, r3, #10
 8003fca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003fce:	0290      	lsls	r0, r2, #10
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	f7fc f8f2 	bl	80001c8 <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4613      	mov	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	0c1b      	lsrs	r3, r3, #16
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	60bb      	str	r3, [r7, #8]
      break;
 8004006:	e002      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800400a:	60bb      	str	r3, [r7, #8]
      break;
 800400c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800400e:	68bb      	ldr	r3, [r7, #8]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800
 8004020:	00f42400 	.word	0x00f42400
 8004024:	007a1200 	.word	0x007a1200

08004028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800402c:	4b03      	ldr	r3, [pc, #12]	; (800403c <HAL_RCC_GetHCLKFreq+0x14>)
 800402e:	681b      	ldr	r3, [r3, #0]
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20000000 	.word	0x20000000

08004040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004044:	f7ff fff0 	bl	8004028 <HAL_RCC_GetHCLKFreq>
 8004048:	4602      	mov	r2, r0
 800404a:	4b05      	ldr	r3, [pc, #20]	; (8004060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	0a9b      	lsrs	r3, r3, #10
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	4903      	ldr	r1, [pc, #12]	; (8004064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004056:	5ccb      	ldrb	r3, [r1, r3]
 8004058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800405c:	4618      	mov	r0, r3
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40023800 	.word	0x40023800
 8004064:	08007b94 	.word	0x08007b94

08004068 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004068:	b084      	sub	sp, #16
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	f107 001c 	add.w	r0, r7, #28
 8004076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407c:	2b01      	cmp	r3, #1
 800407e:	d122      	bne.n	80040c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80040a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d105      	bne.n	80040ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f001 fb1c 	bl	80056f8 <USB_CoreReset>
 80040c0:	4603      	mov	r3, r0
 80040c2:	73fb      	strb	r3, [r7, #15]
 80040c4:	e01a      	b.n	80040fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f001 fb10 	bl	80056f8 <USB_CoreReset>
 80040d8:	4603      	mov	r3, r0
 80040da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	639a      	str	r2, [r3, #56]	; 0x38
 80040ee:	e005      	b.n	80040fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d10b      	bne.n	800411a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f043 0206 	orr.w	r2, r3, #6
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f043 0220 	orr.w	r2, r3, #32
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800411a:	7bfb      	ldrb	r3, [r7, #15]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004126:	b004      	add	sp, #16
 8004128:	4770      	bx	lr
	...

0800412c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	4613      	mov	r3, r2
 8004138:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d165      	bne.n	800420c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4a41      	ldr	r2, [pc, #260]	; (8004248 <USB_SetTurnaroundTime+0x11c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d906      	bls.n	8004156 <USB_SetTurnaroundTime+0x2a>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4a40      	ldr	r2, [pc, #256]	; (800424c <USB_SetTurnaroundTime+0x120>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d202      	bcs.n	8004156 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004150:	230f      	movs	r3, #15
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e062      	b.n	800421c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4a3c      	ldr	r2, [pc, #240]	; (800424c <USB_SetTurnaroundTime+0x120>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d306      	bcc.n	800416c <USB_SetTurnaroundTime+0x40>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	4a3b      	ldr	r2, [pc, #236]	; (8004250 <USB_SetTurnaroundTime+0x124>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d202      	bcs.n	800416c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004166:	230e      	movs	r3, #14
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	e057      	b.n	800421c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4a38      	ldr	r2, [pc, #224]	; (8004250 <USB_SetTurnaroundTime+0x124>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d306      	bcc.n	8004182 <USB_SetTurnaroundTime+0x56>
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4a37      	ldr	r2, [pc, #220]	; (8004254 <USB_SetTurnaroundTime+0x128>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d202      	bcs.n	8004182 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800417c:	230d      	movs	r3, #13
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	e04c      	b.n	800421c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4a33      	ldr	r2, [pc, #204]	; (8004254 <USB_SetTurnaroundTime+0x128>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d306      	bcc.n	8004198 <USB_SetTurnaroundTime+0x6c>
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4a32      	ldr	r2, [pc, #200]	; (8004258 <USB_SetTurnaroundTime+0x12c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d802      	bhi.n	8004198 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004192:	230c      	movs	r3, #12
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	e041      	b.n	800421c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4a2f      	ldr	r2, [pc, #188]	; (8004258 <USB_SetTurnaroundTime+0x12c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d906      	bls.n	80041ae <USB_SetTurnaroundTime+0x82>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4a2e      	ldr	r2, [pc, #184]	; (800425c <USB_SetTurnaroundTime+0x130>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d802      	bhi.n	80041ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80041a8:	230b      	movs	r3, #11
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	e036      	b.n	800421c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	4a2a      	ldr	r2, [pc, #168]	; (800425c <USB_SetTurnaroundTime+0x130>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d906      	bls.n	80041c4 <USB_SetTurnaroundTime+0x98>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4a29      	ldr	r2, [pc, #164]	; (8004260 <USB_SetTurnaroundTime+0x134>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d802      	bhi.n	80041c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80041be:	230a      	movs	r3, #10
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	e02b      	b.n	800421c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4a26      	ldr	r2, [pc, #152]	; (8004260 <USB_SetTurnaroundTime+0x134>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d906      	bls.n	80041da <USB_SetTurnaroundTime+0xae>
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4a25      	ldr	r2, [pc, #148]	; (8004264 <USB_SetTurnaroundTime+0x138>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d202      	bcs.n	80041da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80041d4:	2309      	movs	r3, #9
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	e020      	b.n	800421c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	4a21      	ldr	r2, [pc, #132]	; (8004264 <USB_SetTurnaroundTime+0x138>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d306      	bcc.n	80041f0 <USB_SetTurnaroundTime+0xc4>
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	4a20      	ldr	r2, [pc, #128]	; (8004268 <USB_SetTurnaroundTime+0x13c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d802      	bhi.n	80041f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80041ea:	2308      	movs	r3, #8
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	e015      	b.n	800421c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4a1d      	ldr	r2, [pc, #116]	; (8004268 <USB_SetTurnaroundTime+0x13c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d906      	bls.n	8004206 <USB_SetTurnaroundTime+0xda>
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4a1c      	ldr	r2, [pc, #112]	; (800426c <USB_SetTurnaroundTime+0x140>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d202      	bcs.n	8004206 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004200:	2307      	movs	r3, #7
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e00a      	b.n	800421c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004206:	2306      	movs	r3, #6
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	e007      	b.n	800421c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d102      	bne.n	8004218 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004212:	2309      	movs	r3, #9
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	e001      	b.n	800421c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004218:	2309      	movs	r3, #9
 800421a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	029b      	lsls	r3, r3, #10
 8004230:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004234:	431a      	orrs	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	00d8acbf 	.word	0x00d8acbf
 800424c:	00e4e1c0 	.word	0x00e4e1c0
 8004250:	00f42400 	.word	0x00f42400
 8004254:	01067380 	.word	0x01067380
 8004258:	011a499f 	.word	0x011a499f
 800425c:	01312cff 	.word	0x01312cff
 8004260:	014ca43f 	.word	0x014ca43f
 8004264:	016e3600 	.word	0x016e3600
 8004268:	01a6ab1f 	.word	0x01a6ab1f
 800426c:	01e84800 	.word	0x01e84800

08004270 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f043 0201 	orr.w	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f023 0201 	bic.w	r2, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d115      	bne.n	8004302 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042e2:	2001      	movs	r0, #1
 80042e4:	f7fc fe5c 	bl	8000fa0 <HAL_Delay>
      ms++;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3301      	adds	r3, #1
 80042ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f001 f972 	bl	80055d8 <USB_GetMode>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d01e      	beq.n	8004338 <USB_SetCurrentMode+0x84>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b31      	cmp	r3, #49	; 0x31
 80042fe:	d9f0      	bls.n	80042e2 <USB_SetCurrentMode+0x2e>
 8004300:	e01a      	b.n	8004338 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d115      	bne.n	8004334 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004314:	2001      	movs	r0, #1
 8004316:	f7fc fe43 	bl	8000fa0 <HAL_Delay>
      ms++;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3301      	adds	r3, #1
 800431e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f001 f959 	bl	80055d8 <USB_GetMode>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <USB_SetCurrentMode+0x84>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b31      	cmp	r3, #49	; 0x31
 8004330:	d9f0      	bls.n	8004314 <USB_SetCurrentMode+0x60>
 8004332:	e001      	b.n	8004338 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e005      	b.n	8004344 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b32      	cmp	r3, #50	; 0x32
 800433c:	d101      	bne.n	8004342 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800434c:	b084      	sub	sp, #16
 800434e:	b580      	push	{r7, lr}
 8004350:	b086      	sub	sp, #24
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800435a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004366:	2300      	movs	r3, #0
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	e009      	b.n	8004380 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	3340      	adds	r3, #64	; 0x40
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	2200      	movs	r2, #0
 8004378:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	3301      	adds	r3, #1
 800437e:	613b      	str	r3, [r7, #16]
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	2b0e      	cmp	r3, #14
 8004384:	d9f2      	bls.n	800436c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004388:	2b00      	cmp	r3, #0
 800438a:	d11c      	bne.n	80043c6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800439a:	f043 0302 	orr.w	r3, r3, #2
 800439e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	639a      	str	r2, [r3, #56]	; 0x38
 80043c4:	e00b      	b.n	80043de <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043e4:	461a      	mov	r2, r3
 80043e6:	2300      	movs	r3, #0
 80043e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f0:	4619      	mov	r1, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f8:	461a      	mov	r2, r3
 80043fa:	680b      	ldr	r3, [r1, #0]
 80043fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004400:	2b01      	cmp	r3, #1
 8004402:	d10c      	bne.n	800441e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d104      	bne.n	8004414 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800440a:	2100      	movs	r1, #0
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f945 	bl	800469c <USB_SetDevSpeed>
 8004412:	e008      	b.n	8004426 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004414:	2101      	movs	r1, #1
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f940 	bl	800469c <USB_SetDevSpeed>
 800441c:	e003      	b.n	8004426 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800441e:	2103      	movs	r1, #3
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f93b 	bl	800469c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004426:	2110      	movs	r1, #16
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f8f3 	bl	8004614 <USB_FlushTxFifo>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f90f 	bl	800465c <USB_FlushRxFifo>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444e:	461a      	mov	r2, r3
 8004450:	2300      	movs	r3, #0
 8004452:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445a:	461a      	mov	r2, r3
 800445c:	2300      	movs	r3, #0
 800445e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004466:	461a      	mov	r2, r3
 8004468:	2300      	movs	r3, #0
 800446a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800446c:	2300      	movs	r3, #0
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	e043      	b.n	80044fa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004484:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004488:	d118      	bne.n	80044bc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10a      	bne.n	80044a6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449c:	461a      	mov	r2, r3
 800449e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	e013      	b.n	80044ce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b2:	461a      	mov	r2, r3
 80044b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	e008      	b.n	80044ce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c8:	461a      	mov	r2, r3
 80044ca:	2300      	movs	r3, #0
 80044cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044da:	461a      	mov	r2, r3
 80044dc:	2300      	movs	r3, #0
 80044de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ec:	461a      	mov	r2, r3
 80044ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	3301      	adds	r3, #1
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d3b7      	bcc.n	8004472 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004502:	2300      	movs	r3, #0
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	e043      	b.n	8004590 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800451a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800451e:	d118      	bne.n	8004552 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10a      	bne.n	800453c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004532:	461a      	mov	r2, r3
 8004534:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	e013      	b.n	8004564 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004548:	461a      	mov	r2, r3
 800454a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	e008      	b.n	8004564 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455e:	461a      	mov	r2, r3
 8004560:	2300      	movs	r3, #0
 8004562:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004570:	461a      	mov	r2, r3
 8004572:	2300      	movs	r3, #0
 8004574:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004582:	461a      	mov	r2, r3
 8004584:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004588:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	3301      	adds	r3, #1
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	429a      	cmp	r2, r3
 8004596:	d3b7      	bcc.n	8004508 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80045b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d105      	bne.n	80045cc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	f043 0210 	orr.w	r2, r3, #16
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699a      	ldr	r2, [r3, #24]
 80045d0:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <USB_DevInit+0x2c4>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f043 0208 	orr.w	r2, r3, #8
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d107      	bne.n	8004600 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045f8:	f043 0304 	orr.w	r3, r3, #4
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004600:	7dfb      	ldrb	r3, [r7, #23]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800460c:	b004      	add	sp, #16
 800460e:	4770      	bx	lr
 8004610:	803c3800 	.word	0x803c3800

08004614 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	019b      	lsls	r3, r3, #6
 8004626:	f043 0220 	orr.w	r2, r3, #32
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3301      	adds	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	4a08      	ldr	r2, [pc, #32]	; (8004658 <USB_FlushTxFifo+0x44>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e006      	b.n	800464c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b20      	cmp	r3, #32
 8004648:	d0f1      	beq.n	800462e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	00030d40 	.word	0x00030d40

0800465c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2210      	movs	r2, #16
 800466c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3301      	adds	r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	4a08      	ldr	r2, [pc, #32]	; (8004698 <USB_FlushRxFifo+0x3c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e006      	b.n	800468c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b10      	cmp	r3, #16
 8004688:	d0f1      	beq.n	800466e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	00030d40 	.word	0x00030d40

0800469c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	78fb      	ldrb	r3, [r7, #3]
 80046b6:	68f9      	ldr	r1, [r7, #12]
 80046b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046bc:	4313      	orrs	r3, r2
 80046be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b087      	sub	sp, #28
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 0306 	and.w	r3, r3, #6
 80046e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d102      	bne.n	80046f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80046ee:	2300      	movs	r3, #0
 80046f0:	75fb      	strb	r3, [r7, #23]
 80046f2:	e00a      	b.n	800470a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d002      	beq.n	8004700 <USB_GetDevSpeed+0x32>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b06      	cmp	r3, #6
 80046fe:	d102      	bne.n	8004706 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004700:	2302      	movs	r3, #2
 8004702:	75fb      	strb	r3, [r7, #23]
 8004704:	e001      	b.n	800470a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004706:	230f      	movs	r3, #15
 8004708:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800470a:	7dfb      	ldrb	r3, [r7, #23]
}
 800470c:	4618      	mov	r0, r3
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	785b      	ldrb	r3, [r3, #1]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d13a      	bne.n	80047aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473a:	69da      	ldr	r2, [r3, #28]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	2101      	movs	r1, #1
 8004746:	fa01 f303 	lsl.w	r3, r1, r3
 800474a:	b29b      	uxth	r3, r3
 800474c:	68f9      	ldr	r1, [r7, #12]
 800474e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004752:	4313      	orrs	r3, r2
 8004754:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d155      	bne.n	8004818 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	78db      	ldrb	r3, [r3, #3]
 8004786:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004788:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	059b      	lsls	r3, r3, #22
 800478e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004790:	4313      	orrs	r3, r2
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	0151      	lsls	r1, r2, #5
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	440a      	add	r2, r1
 800479a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800479e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	e036      	b.n	8004818 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b0:	69da      	ldr	r2, [r3, #28]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	2101      	movs	r1, #1
 80047bc:	fa01 f303 	lsl.w	r3, r1, r3
 80047c0:	041b      	lsls	r3, r3, #16
 80047c2:	68f9      	ldr	r1, [r7, #12]
 80047c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047c8:	4313      	orrs	r3, r2
 80047ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d11a      	bne.n	8004818 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	78db      	ldrb	r3, [r3, #3]
 80047fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047fe:	430b      	orrs	r3, r1
 8004800:	4313      	orrs	r3, r2
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	0151      	lsls	r1, r2, #5
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	440a      	add	r2, r1
 800480a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800480e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004816:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
	...

08004828 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	785b      	ldrb	r3, [r3, #1]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d161      	bne.n	8004908 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800485a:	d11f      	bne.n	800489c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	0151      	lsls	r1, r2, #5
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	440a      	add	r2, r1
 8004872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004876:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800487a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	0151      	lsls	r1, r2, #5
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	440a      	add	r2, r1
 8004892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004896:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800489a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	2101      	movs	r1, #1
 80048ae:	fa01 f303 	lsl.w	r3, r1, r3
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	43db      	mvns	r3, r3
 80048b6:	68f9      	ldr	r1, [r7, #12]
 80048b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048bc:	4013      	ands	r3, r2
 80048be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	2101      	movs	r1, #1
 80048d2:	fa01 f303 	lsl.w	r3, r1, r3
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	68f9      	ldr	r1, [r7, #12]
 80048dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048e0:	4013      	ands	r3, r2
 80048e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	0159      	lsls	r1, r3, #5
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	440b      	add	r3, r1
 80048fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fe:	4619      	mov	r1, r3
 8004900:	4b35      	ldr	r3, [pc, #212]	; (80049d8 <USB_DeactivateEndpoint+0x1b0>)
 8004902:	4013      	ands	r3, r2
 8004904:	600b      	str	r3, [r1, #0]
 8004906:	e060      	b.n	80049ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800491a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800491e:	d11f      	bne.n	8004960 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	0151      	lsls	r1, r2, #5
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	440a      	add	r2, r1
 8004936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800493a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800493e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	0151      	lsls	r1, r2, #5
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	440a      	add	r2, r1
 8004956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800495a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800495e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	2101      	movs	r1, #1
 8004972:	fa01 f303 	lsl.w	r3, r1, r3
 8004976:	041b      	lsls	r3, r3, #16
 8004978:	43db      	mvns	r3, r3
 800497a:	68f9      	ldr	r1, [r7, #12]
 800497c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004980:	4013      	ands	r3, r2
 8004982:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498a:	69da      	ldr	r2, [r3, #28]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	2101      	movs	r1, #1
 8004996:	fa01 f303 	lsl.w	r3, r1, r3
 800499a:	041b      	lsls	r3, r3, #16
 800499c:	43db      	mvns	r3, r3
 800499e:	68f9      	ldr	r1, [r7, #12]
 80049a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049a4:	4013      	ands	r3, r2
 80049a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	0159      	lsls	r1, r3, #5
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	440b      	add	r3, r1
 80049be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c2:	4619      	mov	r1, r3
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <USB_DeactivateEndpoint+0x1b4>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	ec337800 	.word	0xec337800
 80049dc:	eff37800 	.word	0xeff37800

080049e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08a      	sub	sp, #40	; 0x28
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	4613      	mov	r3, r2
 80049ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	785b      	ldrb	r3, [r3, #1]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	f040 815c 	bne.w	8004cba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d132      	bne.n	8004a70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	0151      	lsls	r1, r2, #5
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	440a      	add	r2, r1
 8004a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	0151      	lsls	r1, r2, #5
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	440a      	add	r2, r1
 8004a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	0151      	lsls	r1, r2, #5
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	440a      	add	r2, r1
 8004a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a68:	0cdb      	lsrs	r3, r3, #19
 8004a6a:	04db      	lsls	r3, r3, #19
 8004a6c:	6113      	str	r3, [r2, #16]
 8004a6e:	e074      	b.n	8004b5a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	0151      	lsls	r1, r2, #5
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	440a      	add	r2, r1
 8004a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a8a:	0cdb      	lsrs	r3, r3, #19
 8004a8c:	04db      	lsls	r3, r3, #19
 8004a8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	0151      	lsls	r1, r2, #5
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	440a      	add	r2, r1
 8004aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aaa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004aae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ab2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	6959      	ldr	r1, [r3, #20]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	440b      	add	r3, r1
 8004acc:	1e59      	subs	r1, r3, #1
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ad6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ad8:	4b9d      	ldr	r3, [pc, #628]	; (8004d50 <USB_EPStartXfer+0x370>)
 8004ada:	400b      	ands	r3, r1
 8004adc:	69b9      	ldr	r1, [r7, #24]
 8004ade:	0148      	lsls	r0, r1, #5
 8004ae0:	69f9      	ldr	r1, [r7, #28]
 8004ae2:	4401      	add	r1, r0
 8004ae4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b02:	69b9      	ldr	r1, [r7, #24]
 8004b04:	0148      	lsls	r0, r1, #5
 8004b06:	69f9      	ldr	r1, [r7, #28]
 8004b08:	4401      	add	r1, r0
 8004b0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	78db      	ldrb	r3, [r3, #3]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d11f      	bne.n	8004b5a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	0151      	lsls	r1, r2, #5
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	440a      	add	r2, r1
 8004b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b34:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004b38:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	0151      	lsls	r1, r2, #5
 8004b4c:	69fa      	ldr	r2, [r7, #28]
 8004b4e:	440a      	add	r2, r1
 8004b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b58:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d14b      	bne.n	8004bf8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d009      	beq.n	8004b7c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b74:	461a      	mov	r2, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	78db      	ldrb	r3, [r3, #3]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d128      	bne.n	8004bd6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d110      	bne.n	8004bb6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	0151      	lsls	r1, r2, #5
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	440a      	add	r2, r1
 8004baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	e00f      	b.n	8004bd6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	0151      	lsls	r1, r2, #5
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	440a      	add	r2, r1
 8004bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	0151      	lsls	r1, r2, #5
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	440a      	add	r2, r1
 8004bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e12f      	b.n	8004e58 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c16:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	78db      	ldrb	r3, [r3, #3]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d015      	beq.n	8004c4c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8117 	beq.w	8004e58 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c40:	69f9      	ldr	r1, [r7, #28]
 8004c42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c46:	4313      	orrs	r3, r2
 8004c48:	634b      	str	r3, [r1, #52]	; 0x34
 8004c4a:	e105      	b.n	8004e58 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d110      	bne.n	8004c7e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	0151      	lsls	r1, r2, #5
 8004c6e:	69fa      	ldr	r2, [r7, #28]
 8004c70:	440a      	add	r2, r1
 8004c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	e00f      	b.n	8004c9e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	0151      	lsls	r1, r2, #5
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	440a      	add	r2, r1
 8004c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	68d9      	ldr	r1, [r3, #12]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781a      	ldrb	r2, [r3, #0]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	b298      	uxth	r0, r3
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 fa2b 	bl	800510e <USB_WritePacket>
 8004cb8:	e0ce      	b.n	8004e58 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	0151      	lsls	r1, r2, #5
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	440a      	add	r2, r1
 8004cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cd4:	0cdb      	lsrs	r3, r3, #19
 8004cd6:	04db      	lsls	r3, r3, #19
 8004cd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	0151      	lsls	r1, r2, #5
 8004cec:	69fa      	ldr	r2, [r7, #28]
 8004cee:	440a      	add	r2, r1
 8004cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cf8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cfc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d126      	bne.n	8004d54 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d1c:	69b9      	ldr	r1, [r7, #24]
 8004d1e:	0148      	lsls	r0, r1, #5
 8004d20:	69f9      	ldr	r1, [r7, #28]
 8004d22:	4401      	add	r1, r0
 8004d24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	0151      	lsls	r1, r2, #5
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	440a      	add	r2, r1
 8004d42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d4a:	6113      	str	r3, [r2, #16]
 8004d4c:	e036      	b.n	8004dbc <USB_EPStartXfer+0x3dc>
 8004d4e:	bf00      	nop
 8004d50:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	695a      	ldr	r2, [r3, #20]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	1e5a      	subs	r2, r3, #1
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	8afb      	ldrh	r3, [r7, #22]
 8004d7a:	04d9      	lsls	r1, r3, #19
 8004d7c:	4b39      	ldr	r3, [pc, #228]	; (8004e64 <USB_EPStartXfer+0x484>)
 8004d7e:	400b      	ands	r3, r1
 8004d80:	69b9      	ldr	r1, [r7, #24]
 8004d82:	0148      	lsls	r0, r1, #5
 8004d84:	69f9      	ldr	r1, [r7, #28]
 8004d86:	4401      	add	r1, r0
 8004d88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9c:	691a      	ldr	r2, [r3, #16]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	8af9      	ldrh	r1, [r7, #22]
 8004da4:	fb01 f303 	mul.w	r3, r1, r3
 8004da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dac:	69b9      	ldr	r1, [r7, #24]
 8004dae:	0148      	lsls	r0, r1, #5
 8004db0:	69f9      	ldr	r1, [r7, #28]
 8004db2:	4401      	add	r1, r0
 8004db4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004db8:	4313      	orrs	r3, r2
 8004dba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d10d      	bne.n	8004dde <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d009      	beq.n	8004dde <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	68d9      	ldr	r1, [r3, #12]
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dda:	460a      	mov	r2, r1
 8004ddc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	78db      	ldrb	r3, [r3, #3]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d128      	bne.n	8004e38 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d110      	bne.n	8004e18 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	0151      	lsls	r1, r2, #5
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	440a      	add	r2, r1
 8004e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	e00f      	b.n	8004e38 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	0151      	lsls	r1, r2, #5
 8004e2a:	69fa      	ldr	r2, [r7, #28]
 8004e2c:	440a      	add	r2, r1
 8004e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3720      	adds	r7, #32
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	1ff80000 	.word	0x1ff80000

08004e68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	4613      	mov	r3, r2
 8004e74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	785b      	ldrb	r3, [r3, #1]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	f040 80cd 	bne.w	8005024 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d132      	bne.n	8004ef8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	0151      	lsls	r1, r2, #5
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	440a      	add	r2, r1
 8004ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004eb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	0151      	lsls	r1, r2, #5
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	440a      	add	r2, r1
 8004ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ed4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	0151      	lsls	r1, r2, #5
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	440a      	add	r2, r1
 8004eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef0:	0cdb      	lsrs	r3, r3, #19
 8004ef2:	04db      	lsls	r3, r3, #19
 8004ef4:	6113      	str	r3, [r2, #16]
 8004ef6:	e04e      	b.n	8004f96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	0151      	lsls	r1, r2, #5
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f12:	0cdb      	lsrs	r3, r3, #19
 8004f14:	04db      	lsls	r3, r3, #19
 8004f16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	0151      	lsls	r1, r2, #5
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	440a      	add	r2, r1
 8004f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f3a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d903      	bls.n	8004f50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	0151      	lsls	r1, r2, #5
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	440a      	add	r2, r1
 8004f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f86:	6939      	ldr	r1, [r7, #16]
 8004f88:	0148      	lsls	r0, r1, #5
 8004f8a:	6979      	ldr	r1, [r7, #20]
 8004f8c:	4401      	add	r1, r0
 8004f8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f92:	4313      	orrs	r3, r2
 8004f94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d11e      	bne.n	8004fda <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d009      	beq.n	8004fb8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	0151      	lsls	r1, r2, #5
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	440a      	add	r2, r1
 8004fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	e092      	b.n	8005100 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	0151      	lsls	r1, r2, #5
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	440a      	add	r2, r1
 8004ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ff8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d07e      	beq.n	8005100 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	2101      	movs	r1, #1
 8005014:	fa01 f303 	lsl.w	r3, r1, r3
 8005018:	6979      	ldr	r1, [r7, #20]
 800501a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800501e:	4313      	orrs	r3, r2
 8005020:	634b      	str	r3, [r1, #52]	; 0x34
 8005022:	e06d      	b.n	8005100 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	440a      	add	r2, r1
 800503a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800503e:	0cdb      	lsrs	r3, r3, #19
 8005040:	04db      	lsls	r3, r3, #19
 8005042:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	0151      	lsls	r1, r2, #5
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	440a      	add	r2, r1
 800505a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800505e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005062:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005066:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	0151      	lsls	r1, r2, #5
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	440a      	add	r2, r1
 800508e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005096:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a4:	691a      	ldr	r2, [r3, #16]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ae:	6939      	ldr	r1, [r7, #16]
 80050b0:	0148      	lsls	r0, r1, #5
 80050b2:	6979      	ldr	r1, [r7, #20]
 80050b4:	4401      	add	r1, r0
 80050b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050ba:	4313      	orrs	r3, r2
 80050bc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d10d      	bne.n	80050e0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d009      	beq.n	80050e0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	68d9      	ldr	r1, [r3, #12]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050dc:	460a      	mov	r2, r1
 80050de:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800510e:	b480      	push	{r7}
 8005110:	b089      	sub	sp, #36	; 0x24
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	4611      	mov	r1, r2
 800511a:	461a      	mov	r2, r3
 800511c:	460b      	mov	r3, r1
 800511e:	71fb      	strb	r3, [r7, #7]
 8005120:	4613      	mov	r3, r2
 8005122:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800512c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005130:	2b00      	cmp	r3, #0
 8005132:	d123      	bne.n	800517c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005134:	88bb      	ldrh	r3, [r7, #4]
 8005136:	3303      	adds	r3, #3
 8005138:	089b      	lsrs	r3, r3, #2
 800513a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800513c:	2300      	movs	r3, #0
 800513e:	61bb      	str	r3, [r7, #24]
 8005140:	e018      	b.n	8005174 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	031a      	lsls	r2, r3, #12
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	4413      	add	r3, r2
 800514a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800514e:	461a      	mov	r2, r3
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	3301      	adds	r3, #1
 800515a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	3301      	adds	r3, #1
 8005160:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	3301      	adds	r3, #1
 8005166:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	3301      	adds	r3, #1
 800516c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	3301      	adds	r3, #1
 8005172:	61bb      	str	r3, [r7, #24]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	429a      	cmp	r2, r3
 800517a:	d3e2      	bcc.n	8005142 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3724      	adds	r7, #36	; 0x24
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800518a:	b480      	push	{r7}
 800518c:	b08b      	sub	sp, #44	; 0x2c
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	4613      	mov	r3, r2
 8005196:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	089b      	lsrs	r3, r3, #2
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80051a8:	88fb      	ldrh	r3, [r7, #6]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80051b0:	2300      	movs	r3, #0
 80051b2:	623b      	str	r3, [r7, #32]
 80051b4:	e014      	b.n	80051e0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	601a      	str	r2, [r3, #0]
    pDest++;
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	3301      	adds	r3, #1
 80051c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	3301      	adds	r3, #1
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	3301      	adds	r3, #1
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	3301      	adds	r3, #1
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	3301      	adds	r3, #1
 80051de:	623b      	str	r3, [r7, #32]
 80051e0:	6a3a      	ldr	r2, [r7, #32]
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d3e6      	bcc.n	80051b6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051e8:	8bfb      	ldrh	r3, [r7, #30]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d01e      	beq.n	800522c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f8:	461a      	mov	r2, r3
 80051fa:	f107 0310 	add.w	r3, r7, #16
 80051fe:	6812      	ldr	r2, [r2, #0]
 8005200:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	fa22 f303 	lsr.w	r3, r2, r3
 800520e:	b2da      	uxtb	r2, r3
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	701a      	strb	r2, [r3, #0]
      i++;
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	3301      	adds	r3, #1
 8005218:	623b      	str	r3, [r7, #32]
      pDest++;
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	3301      	adds	r3, #1
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005220:	8bfb      	ldrh	r3, [r7, #30]
 8005222:	3b01      	subs	r3, #1
 8005224:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005226:	8bfb      	ldrh	r3, [r7, #30]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1ea      	bne.n	8005202 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800522e:	4618      	mov	r0, r3
 8005230:	372c      	adds	r7, #44	; 0x2c
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800523a:	b480      	push	{r7}
 800523c:	b085      	sub	sp, #20
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	785b      	ldrb	r3, [r3, #1]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d12c      	bne.n	80052b0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	db12      	blt.n	800528e <USB_EPSetStall+0x54>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00f      	beq.n	800528e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	0151      	lsls	r1, r2, #5
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	440a      	add	r2, r1
 8005284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005288:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800528c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e02b      	b.n	8005308 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	db12      	blt.n	80052e8 <USB_EPSetStall+0xae>
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00f      	beq.n	80052e8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	0151      	lsls	r1, r2, #5
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	440a      	add	r2, r1
 80052de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052e6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	0151      	lsls	r1, r2, #5
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	440a      	add	r2, r1
 80052fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005302:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005306:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005316:	b480      	push	{r7}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	785b      	ldrb	r3, [r3, #1]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d128      	bne.n	8005384 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	0151      	lsls	r1, r2, #5
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	440a      	add	r2, r1
 8005348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800534c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005350:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	78db      	ldrb	r3, [r3, #3]
 8005356:	2b03      	cmp	r3, #3
 8005358:	d003      	beq.n	8005362 <USB_EPClearStall+0x4c>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	78db      	ldrb	r3, [r3, #3]
 800535e:	2b02      	cmp	r3, #2
 8005360:	d138      	bne.n	80053d4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	0151      	lsls	r1, r2, #5
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	440a      	add	r2, r1
 8005378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	e027      	b.n	80053d4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	440a      	add	r2, r1
 800539a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800539e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	78db      	ldrb	r3, [r3, #3]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d003      	beq.n	80053b4 <USB_EPClearStall+0x9e>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	78db      	ldrb	r3, [r3, #3]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d10f      	bne.n	80053d4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	0151      	lsls	r1, r2, #5
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	440a      	add	r2, r1
 80053ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053d2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	460b      	mov	r3, r1
 80053ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005400:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005404:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	78fb      	ldrb	r3, [r7, #3]
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005416:	68f9      	ldr	r1, [r7, #12]
 8005418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800541c:	4313      	orrs	r3, r2
 800541e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800542e:	b480      	push	{r7}
 8005430:	b085      	sub	sp, #20
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005448:	f023 0303 	bic.w	r3, r3, #3
 800544c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800545c:	f023 0302 	bic.w	r3, r3, #2
 8005460:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800548a:	f023 0303 	bic.w	r3, r3, #3
 800548e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800549e:	f043 0302 	orr.w	r3, r3, #2
 80054a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4013      	ands	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054ca:	68fb      	ldr	r3, [r7, #12]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	4013      	ands	r3, r2
 80054fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	0c1b      	lsrs	r3, r3, #16
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	4013      	ands	r3, r2
 800552e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	b29b      	uxth	r3, r3
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	4013      	ands	r3, r2
 800556c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800556e:	68bb      	ldr	r3, [r7, #8]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	fa22 f303 	lsr.w	r3, r2, r3
 80055ac:	01db      	lsls	r3, r3, #7
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80055b6:	78fb      	ldrb	r3, [r7, #3]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4013      	ands	r3, r2
 80055c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055ca:	68bb      	ldr	r3, [r7, #8]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	371c      	adds	r7, #28
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0301 	and.w	r3, r3, #1
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800560e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005612:	f023 0307 	bic.w	r3, r3, #7
 8005616:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800562a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
	...

0800563c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	460b      	mov	r3, r1
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	333c      	adds	r3, #60	; 0x3c
 8005652:	3304      	adds	r3, #4
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4a26      	ldr	r2, [pc, #152]	; (80056f4 <USB_EP0_OutStart+0xb8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d90a      	bls.n	8005676 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800566c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005670:	d101      	bne.n	8005676 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	e037      	b.n	80056e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567c:	461a      	mov	r2, r3
 800567e:	2300      	movs	r3, #0
 8005680:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005690:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005694:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056a4:	f043 0318 	orr.w	r3, r3, #24
 80056a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80056bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80056be:	7afb      	ldrb	r3, [r7, #11]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d10f      	bne.n	80056e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ca:	461a      	mov	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056de:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80056e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	4f54300a 	.word	0x4f54300a

080056f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3301      	adds	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	4a13      	ldr	r2, [pc, #76]	; (8005758 <USB_CoreReset+0x60>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d901      	bls.n	8005714 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e01a      	b.n	800574a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	daf3      	bge.n	8005704 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f043 0201 	orr.w	r2, r3, #1
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3301      	adds	r3, #1
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	4a09      	ldr	r2, [pc, #36]	; (8005758 <USB_CoreReset+0x60>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d901      	bls.n	800573c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e006      	b.n	800574a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b01      	cmp	r3, #1
 8005746:	d0f1      	beq.n	800572c <USB_CoreReset+0x34>

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	00030d40 	.word	0x00030d40

0800575c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	460b      	mov	r3, r1
 8005766:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005768:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800576c:	f002 f96a 	bl	8007a44 <USBD_static_malloc>
 8005770:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d105      	bne.n	8005784 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005780:	2302      	movs	r3, #2
 8005782:	e066      	b.n	8005852 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	7c1b      	ldrb	r3, [r3, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d119      	bne.n	80057c8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005798:	2202      	movs	r2, #2
 800579a:	2181      	movs	r1, #129	; 0x81
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f002 f82e 	bl	80077fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057ac:	2202      	movs	r2, #2
 80057ae:	2101      	movs	r1, #1
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f002 f824 	bl	80077fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2210      	movs	r2, #16
 80057c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80057c6:	e016      	b.n	80057f6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80057c8:	2340      	movs	r3, #64	; 0x40
 80057ca:	2202      	movs	r2, #2
 80057cc:	2181      	movs	r1, #129	; 0x81
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f002 f815 	bl	80077fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057da:	2340      	movs	r3, #64	; 0x40
 80057dc:	2202      	movs	r2, #2
 80057de:	2101      	movs	r1, #1
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f002 f80c 	bl	80077fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2210      	movs	r2, #16
 80057f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80057f6:	2308      	movs	r3, #8
 80057f8:	2203      	movs	r2, #3
 80057fa:	2182      	movs	r1, #130	; 0x82
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f001 fffe 	bl	80077fe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	7c1b      	ldrb	r3, [r3, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d109      	bne.n	8005840 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005836:	2101      	movs	r1, #1
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f002 f8cf 	bl	80079dc <USBD_LL_PrepareReceive>
 800583e:	e007      	b.n	8005850 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005846:	2340      	movs	r3, #64	; 0x40
 8005848:	2101      	movs	r1, #1
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f002 f8c6 	bl	80079dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b082      	sub	sp, #8
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	460b      	mov	r3, r1
 8005864:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005866:	2181      	movs	r1, #129	; 0x81
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f001 ffee 	bl	800784a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005874:	2101      	movs	r1, #1
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f001 ffe7 	bl	800784a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005884:	2182      	movs	r1, #130	; 0x82
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f001 ffdf 	bl	800784a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00e      	beq.n	80058c4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058b6:	4618      	mov	r0, r3
 80058b8:	f002 f8d2 	bl	8007a60 <USBD_static_free>
    pdev->pClassData = NULL;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e0af      	b.n	8005a58 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005900:	2b00      	cmp	r3, #0
 8005902:	d03f      	beq.n	8005984 <USBD_CDC_Setup+0xb4>
 8005904:	2b20      	cmp	r3, #32
 8005906:	f040 809f 	bne.w	8005a48 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	88db      	ldrh	r3, [r3, #6]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d02e      	beq.n	8005970 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	b25b      	sxtb	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	da16      	bge.n	800594a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005928:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	88d2      	ldrh	r2, [r2, #6]
 800592e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	88db      	ldrh	r3, [r3, #6]
 8005934:	2b07      	cmp	r3, #7
 8005936:	bf28      	it	cs
 8005938:	2307      	movcs	r3, #7
 800593a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	89fa      	ldrh	r2, [r7, #14]
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f001 fb19 	bl	8006f7a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005948:	e085      	b.n	8005a56 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	785a      	ldrb	r2, [r3, #1]
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	88db      	ldrh	r3, [r3, #6]
 8005958:	b2da      	uxtb	r2, r3
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005960:	6939      	ldr	r1, [r7, #16]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	88db      	ldrh	r3, [r3, #6]
 8005966:	461a      	mov	r2, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f001 fb32 	bl	8006fd2 <USBD_CtlPrepareRx>
      break;
 800596e:	e072      	b.n	8005a56 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	7850      	ldrb	r0, [r2, #1]
 800597c:	2200      	movs	r2, #0
 800597e:	6839      	ldr	r1, [r7, #0]
 8005980:	4798      	blx	r3
      break;
 8005982:	e068      	b.n	8005a56 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	785b      	ldrb	r3, [r3, #1]
 8005988:	2b0b      	cmp	r3, #11
 800598a:	d852      	bhi.n	8005a32 <USBD_CDC_Setup+0x162>
 800598c:	a201      	add	r2, pc, #4	; (adr r2, 8005994 <USBD_CDC_Setup+0xc4>)
 800598e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005992:	bf00      	nop
 8005994:	080059c5 	.word	0x080059c5
 8005998:	08005a41 	.word	0x08005a41
 800599c:	08005a33 	.word	0x08005a33
 80059a0:	08005a33 	.word	0x08005a33
 80059a4:	08005a33 	.word	0x08005a33
 80059a8:	08005a33 	.word	0x08005a33
 80059ac:	08005a33 	.word	0x08005a33
 80059b0:	08005a33 	.word	0x08005a33
 80059b4:	08005a33 	.word	0x08005a33
 80059b8:	08005a33 	.word	0x08005a33
 80059bc:	080059ef 	.word	0x080059ef
 80059c0:	08005a19 	.word	0x08005a19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d107      	bne.n	80059e0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80059d0:	f107 030a 	add.w	r3, r7, #10
 80059d4:	2202      	movs	r2, #2
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f001 face 	bl	8006f7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059de:	e032      	b.n	8005a46 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80059e0:	6839      	ldr	r1, [r7, #0]
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f001 fa58 	bl	8006e98 <USBD_CtlError>
            ret = USBD_FAIL;
 80059e8:	2303      	movs	r3, #3
 80059ea:	75fb      	strb	r3, [r7, #23]
          break;
 80059ec:	e02b      	b.n	8005a46 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d107      	bne.n	8005a0a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80059fa:	f107 030d 	add.w	r3, r7, #13
 80059fe:	2201      	movs	r2, #1
 8005a00:	4619      	mov	r1, r3
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f001 fab9 	bl	8006f7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a08:	e01d      	b.n	8005a46 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f001 fa43 	bl	8006e98 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a12:	2303      	movs	r3, #3
 8005a14:	75fb      	strb	r3, [r7, #23]
          break;
 8005a16:	e016      	b.n	8005a46 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d00f      	beq.n	8005a44 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f001 fa36 	bl	8006e98 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005a30:	e008      	b.n	8005a44 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 fa2f 	bl	8006e98 <USBD_CtlError>
          ret = USBD_FAIL;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	75fb      	strb	r3, [r7, #23]
          break;
 8005a3e:	e002      	b.n	8005a46 <USBD_CDC_Setup+0x176>
          break;
 8005a40:	bf00      	nop
 8005a42:	e008      	b.n	8005a56 <USBD_CDC_Setup+0x186>
          break;
 8005a44:	bf00      	nop
      }
      break;
 8005a46:	e006      	b.n	8005a56 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005a48:	6839      	ldr	r1, [r7, #0]
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f001 fa24 	bl	8006e98 <USBD_CtlError>
      ret = USBD_FAIL;
 8005a50:	2303      	movs	r3, #3
 8005a52:	75fb      	strb	r3, [r7, #23]
      break;
 8005a54:	bf00      	nop
  }

  return (uint8_t)ret;
 8005a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005a72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e04f      	b.n	8005b22 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a88:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005a8a:	78fa      	ldrb	r2, [r7, #3]
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	3318      	adds	r3, #24
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d029      	beq.n	8005af4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005aa0:	78fa      	ldrb	r2, [r7, #3]
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	3318      	adds	r3, #24
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	78f9      	ldrb	r1, [r7, #3]
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	1a5b      	subs	r3, r3, r1
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4403      	add	r3, r0
 8005ac0:	3344      	adds	r3, #68	; 0x44
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	fbb2 f1f3 	udiv	r1, r2, r3
 8005ac8:	fb03 f301 	mul.w	r3, r3, r1
 8005acc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d110      	bne.n	8005af4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005ad2:	78fa      	ldrb	r2, [r7, #3]
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	440b      	add	r3, r1
 8005ae0:	3318      	adds	r3, #24
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005ae6:	78f9      	ldrb	r1, [r7, #3]
 8005ae8:	2300      	movs	r3, #0
 8005aea:	2200      	movs	r2, #0
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f001 ff54 	bl	800799a <USBD_LL_Transmit>
 8005af2:	e015      	b.n	8005b20 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00b      	beq.n	8005b20 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005b1c:	78fa      	ldrb	r2, [r7, #3]
 8005b1e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	460b      	mov	r3, r1
 8005b34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e015      	b.n	8005b78 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b4c:	78fb      	ldrb	r3, [r7, #3]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 ff64 	bl	8007a1e <USBD_LL_GetRxDataSize>
 8005b56:	4602      	mov	r2, r0
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b72:	4611      	mov	r1, r2
 8005b74:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b8e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e01b      	b.n	8005bd2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d015      	beq.n	8005bd0 <USBD_CDC_EP0_RxReady+0x50>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005baa:	2bff      	cmp	r3, #255	; 0xff
 8005bac:	d010      	beq.n	8005bd0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005bbc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005bc4:	b292      	uxth	r2, r2
 8005bc6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	22ff      	movs	r2, #255	; 0xff
 8005bcc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2243      	movs	r2, #67	; 0x43
 8005be8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005bea:	4b03      	ldr	r3, [pc, #12]	; (8005bf8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	20000094 	.word	0x20000094

08005bfc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2243      	movs	r2, #67	; 0x43
 8005c08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005c0a:	4b03      	ldr	r3, [pc, #12]	; (8005c18 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	20000050 	.word	0x20000050

08005c1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2243      	movs	r2, #67	; 0x43
 8005c28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005c2a:	4b03      	ldr	r3, [pc, #12]	; (8005c38 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	200000d8 	.word	0x200000d8

08005c3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	220a      	movs	r2, #10
 8005c48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005c4a:	4b03      	ldr	r3, [pc, #12]	; (8005c58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	2000000c 	.word	0x2000000c

08005c5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e004      	b.n	8005c7a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b087      	sub	sp, #28
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c98:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e008      	b.n	8005cb6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b085      	sub	sp, #20
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cd2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e004      	b.n	8005ce8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d02:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005d04:	2301      	movs	r3, #1
 8005d06:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e01a      	b.n	8005d4c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d114      	bne.n	8005d4a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005d3e:	2181      	movs	r1, #129	; 0x81
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f001 fe2a 	bl	800799a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e016      	b.n	8005da0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	7c1b      	ldrb	r3, [r3, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d109      	bne.n	8005d8e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d84:	2101      	movs	r1, #1
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f001 fe28 	bl	80079dc <USBD_LL_PrepareReceive>
 8005d8c:	e007      	b.n	8005d9e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d94:	2340      	movs	r3, #64	; 0x40
 8005d96:	2101      	movs	r1, #1
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f001 fe1f 	bl	80079dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	4613      	mov	r3, r2
 8005db4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e01f      	b.n	8005e00 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	79fa      	ldrb	r2, [r7, #7]
 8005df2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f001 fc9b 	bl	8007730 <USBD_LL_Init>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3718      	adds	r7, #24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e016      	b.n	8005e4e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00b      	beq.n	8005e4c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	f107 020e 	add.w	r2, r7, #14
 8005e40:	4610      	mov	r0, r2
 8005e42:	4798      	blx	r3
 8005e44:	4602      	mov	r2, r0
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b082      	sub	sp, #8
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f001 fcb2 	bl	80077c8 <USBD_LL_Start>
 8005e64:	4603      	mov	r3, r0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e90:	2303      	movs	r3, #3
 8005e92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d009      	beq.n	8005eb2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	78fa      	ldrb	r2, [r7, #3]
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	4798      	blx	r3
 8005eae:	4603      	mov	r3, r0
 8005eb0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d007      	beq.n	8005ee2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	78fa      	ldrb	r2, [r7, #3]
 8005edc:	4611      	mov	r1, r2
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	4798      	blx	r3
  }

  return USBD_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005efc:	6839      	ldr	r1, [r7, #0]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 ff90 	bl	8006e24 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005f12:	461a      	mov	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f20:	f003 031f 	and.w	r3, r3, #31
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d01a      	beq.n	8005f5e <USBD_LL_SetupStage+0x72>
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d822      	bhi.n	8005f72 <USBD_LL_SetupStage+0x86>
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <USBD_LL_SetupStage+0x4a>
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d00a      	beq.n	8005f4a <USBD_LL_SetupStage+0x5e>
 8005f34:	e01d      	b.n	8005f72 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fa62 	bl	8006408 <USBD_StdDevReq>
 8005f44:	4603      	mov	r3, r0
 8005f46:	73fb      	strb	r3, [r7, #15]
      break;
 8005f48:	e020      	b.n	8005f8c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fac6 	bl	80064e4 <USBD_StdItfReq>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f5c:	e016      	b.n	8005f8c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f64:	4619      	mov	r1, r3
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fb05 	bl	8006576 <USBD_StdEPReq>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f70:	e00c      	b.n	8005f8c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 fc81 	bl	8007888 <USBD_LL_StallEP>
 8005f86:	4603      	mov	r3, r0
 8005f88:	73fb      	strb	r3, [r7, #15]
      break;
 8005f8a:	bf00      	nop
  }

  return ret;
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b086      	sub	sp, #24
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	607a      	str	r2, [r7, #4]
 8005fa2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005fa4:	7afb      	ldrb	r3, [r7, #11]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d138      	bne.n	800601c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005fb0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d14a      	bne.n	8006052 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d913      	bls.n	8005ff0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	1ad2      	subs	r2, r2, r3
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	bf28      	it	cs
 8005fe2:	4613      	movcs	r3, r2
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f001 f80f 	bl	800700c <USBD_CtlContinueRx>
 8005fee:	e030      	b.n	8006052 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d10b      	bne.n	8006014 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f001 f80a 	bl	800702e <USBD_CtlSendStatus>
 800601a:	e01a      	b.n	8006052 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b03      	cmp	r3, #3
 8006026:	d114      	bne.n	8006052 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00e      	beq.n	8006052 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	7afa      	ldrb	r2, [r7, #11]
 800603e:	4611      	mov	r1, r2
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	4798      	blx	r3
 8006044:	4603      	mov	r3, r0
 8006046:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006048:	7dfb      	ldrb	r3, [r7, #23]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800604e:	7dfb      	ldrb	r3, [r7, #23]
 8006050:	e000      	b.n	8006054 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	460b      	mov	r3, r1
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800606a:	7afb      	ldrb	r3, [r7, #11]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d16b      	bne.n	8006148 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3314      	adds	r3, #20
 8006074:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800607c:	2b02      	cmp	r3, #2
 800607e:	d156      	bne.n	800612e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	429a      	cmp	r2, r3
 800608a:	d914      	bls.n	80060b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	1ad2      	subs	r2, r2, r3
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	461a      	mov	r2, r3
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 ff84 	bl	8006fb0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060a8:	2300      	movs	r3, #0
 80060aa:	2200      	movs	r2, #0
 80060ac:	2100      	movs	r1, #0
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f001 fc94 	bl	80079dc <USBD_LL_PrepareReceive>
 80060b4:	e03b      	b.n	800612e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d11c      	bne.n	80060fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d316      	bcc.n	80060fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80060d8:	429a      	cmp	r2, r3
 80060da:	d20f      	bcs.n	80060fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80060dc:	2200      	movs	r2, #0
 80060de:	2100      	movs	r1, #0
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 ff65 	bl	8006fb0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060ee:	2300      	movs	r3, #0
 80060f0:	2200      	movs	r2, #0
 80060f2:	2100      	movs	r1, #0
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f001 fc71 	bl	80079dc <USBD_LL_PrepareReceive>
 80060fa:	e018      	b.n	800612e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b03      	cmp	r3, #3
 8006106:	d10b      	bne.n	8006120 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006120:	2180      	movs	r1, #128	; 0x80
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f001 fbb0 	bl	8007888 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 ff93 	bl	8007054 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006134:	2b01      	cmp	r3, #1
 8006136:	d122      	bne.n	800617e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7ff fe98 	bl	8005e6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006146:	e01a      	b.n	800617e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b03      	cmp	r3, #3
 8006152:	d114      	bne.n	800617e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00e      	beq.n	800617e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	7afa      	ldrb	r2, [r7, #11]
 800616a:	4611      	mov	r1, r2
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	4798      	blx	r3
 8006170:	4603      	mov	r3, r0
 8006172:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800617a:	7dfb      	ldrb	r3, [r7, #23]
 800617c:	e000      	b.n	8006180 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3718      	adds	r7, #24
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e02f      	b.n	800621c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00f      	beq.n	80061e6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d009      	beq.n	80061e6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6852      	ldr	r2, [r2, #4]
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	4611      	mov	r1, r2
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061e6:	2340      	movs	r3, #64	; 0x40
 80061e8:	2200      	movs	r2, #0
 80061ea:	2100      	movs	r1, #0
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f001 fb06 	bl	80077fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2240      	movs	r2, #64	; 0x40
 80061fe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006202:	2340      	movs	r3, #64	; 0x40
 8006204:	2200      	movs	r2, #0
 8006206:	2180      	movs	r1, #128	; 0x80
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f001 faf8 	bl	80077fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2240      	movs	r2, #64	; 0x40
 8006218:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	78fa      	ldrb	r2, [r7, #3]
 8006234:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006252:	b2da      	uxtb	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2204      	movs	r2, #4
 800625e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b04      	cmp	r3, #4
 8006282:	d106      	bne.n	8006292 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800628a:	b2da      	uxtb	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e012      	b.n	80062dc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d10b      	bne.n	80062da <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e014      	b.n	8006328 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b03      	cmp	r3, #3
 8006308:	d10d      	bne.n	8006326 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	78fa      	ldrb	r2, [r7, #3]
 8006320:	4611      	mov	r1, r2
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	460b      	mov	r3, r1
 800633a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006346:	2303      	movs	r3, #3
 8006348:	e014      	b.n	8006374 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b03      	cmp	r3, #3
 8006354:	d10d      	bne.n	8006372 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	2b00      	cmp	r3, #0
 8006360:	d007      	beq.n	8006372 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	78fa      	ldrb	r2, [r7, #3]
 800636c:	4611      	mov	r1, r2
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d009      	beq.n	80063c0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6852      	ldr	r2, [r2, #4]
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	4611      	mov	r1, r2
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	4798      	blx	r3
  }

  return USBD_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b087      	sub	sp, #28
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	3301      	adds	r3, #1
 80063e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80063e8:	8a3b      	ldrh	r3, [r7, #16]
 80063ea:	021b      	lsls	r3, r3, #8
 80063ec:	b21a      	sxth	r2, r3
 80063ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	b21b      	sxth	r3, r3
 80063f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80063f8:	89fb      	ldrh	r3, [r7, #14]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	371c      	adds	r7, #28
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
	...

08006408 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800641e:	2b40      	cmp	r3, #64	; 0x40
 8006420:	d005      	beq.n	800642e <USBD_StdDevReq+0x26>
 8006422:	2b40      	cmp	r3, #64	; 0x40
 8006424:	d853      	bhi.n	80064ce <USBD_StdDevReq+0xc6>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00b      	beq.n	8006442 <USBD_StdDevReq+0x3a>
 800642a:	2b20      	cmp	r3, #32
 800642c:	d14f      	bne.n	80064ce <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	6839      	ldr	r1, [r7, #0]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	4798      	blx	r3
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]
      break;
 8006440:	e04a      	b.n	80064d8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	785b      	ldrb	r3, [r3, #1]
 8006446:	2b09      	cmp	r3, #9
 8006448:	d83b      	bhi.n	80064c2 <USBD_StdDevReq+0xba>
 800644a:	a201      	add	r2, pc, #4	; (adr r2, 8006450 <USBD_StdDevReq+0x48>)
 800644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006450:	080064a5 	.word	0x080064a5
 8006454:	080064b9 	.word	0x080064b9
 8006458:	080064c3 	.word	0x080064c3
 800645c:	080064af 	.word	0x080064af
 8006460:	080064c3 	.word	0x080064c3
 8006464:	08006483 	.word	0x08006483
 8006468:	08006479 	.word	0x08006479
 800646c:	080064c3 	.word	0x080064c3
 8006470:	0800649b 	.word	0x0800649b
 8006474:	0800648d 	.word	0x0800648d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f9de 	bl	800683c <USBD_GetDescriptor>
          break;
 8006480:	e024      	b.n	80064cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006482:	6839      	ldr	r1, [r7, #0]
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fb43 	bl	8006b10 <USBD_SetAddress>
          break;
 800648a:	e01f      	b.n	80064cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fb82 	bl	8006b98 <USBD_SetConfig>
 8006494:	4603      	mov	r3, r0
 8006496:	73fb      	strb	r3, [r7, #15]
          break;
 8006498:	e018      	b.n	80064cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fc21 	bl	8006ce4 <USBD_GetConfig>
          break;
 80064a2:	e013      	b.n	80064cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fc52 	bl	8006d50 <USBD_GetStatus>
          break;
 80064ac:	e00e      	b.n	80064cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fc81 	bl	8006db8 <USBD_SetFeature>
          break;
 80064b6:	e009      	b.n	80064cc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fc90 	bl	8006de0 <USBD_ClrFeature>
          break;
 80064c0:	e004      	b.n	80064cc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fce7 	bl	8006e98 <USBD_CtlError>
          break;
 80064ca:	bf00      	nop
      }
      break;
 80064cc:	e004      	b.n	80064d8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fce1 	bl	8006e98 <USBD_CtlError>
      break;
 80064d6:	bf00      	nop
  }

  return ret;
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop

080064e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064fa:	2b40      	cmp	r3, #64	; 0x40
 80064fc:	d005      	beq.n	800650a <USBD_StdItfReq+0x26>
 80064fe:	2b40      	cmp	r3, #64	; 0x40
 8006500:	d82f      	bhi.n	8006562 <USBD_StdItfReq+0x7e>
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <USBD_StdItfReq+0x26>
 8006506:	2b20      	cmp	r3, #32
 8006508:	d12b      	bne.n	8006562 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006510:	b2db      	uxtb	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	2b02      	cmp	r3, #2
 8006516:	d81d      	bhi.n	8006554 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	889b      	ldrh	r3, [r3, #4]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b01      	cmp	r3, #1
 8006520:	d813      	bhi.n	800654a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	4798      	blx	r3
 8006530:	4603      	mov	r3, r0
 8006532:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	88db      	ldrh	r3, [r3, #6]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d110      	bne.n	800655e <USBD_StdItfReq+0x7a>
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10d      	bne.n	800655e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fd73 	bl	800702e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006548:	e009      	b.n	800655e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fca3 	bl	8006e98 <USBD_CtlError>
          break;
 8006552:	e004      	b.n	800655e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fc9e 	bl	8006e98 <USBD_CtlError>
          break;
 800655c:	e000      	b.n	8006560 <USBD_StdItfReq+0x7c>
          break;
 800655e:	bf00      	nop
      }
      break;
 8006560:	e004      	b.n	800656c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fc97 	bl	8006e98 <USBD_CtlError>
      break;
 800656a:	bf00      	nop
  }

  return ret;
 800656c:	7bfb      	ldrb	r3, [r7, #15]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b084      	sub	sp, #16
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	889b      	ldrh	r3, [r3, #4]
 8006588:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006592:	2b40      	cmp	r3, #64	; 0x40
 8006594:	d007      	beq.n	80065a6 <USBD_StdEPReq+0x30>
 8006596:	2b40      	cmp	r3, #64	; 0x40
 8006598:	f200 8145 	bhi.w	8006826 <USBD_StdEPReq+0x2b0>
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00c      	beq.n	80065ba <USBD_StdEPReq+0x44>
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	f040 8140 	bne.w	8006826 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	4798      	blx	r3
 80065b4:	4603      	mov	r3, r0
 80065b6:	73fb      	strb	r3, [r7, #15]
      break;
 80065b8:	e13a      	b.n	8006830 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	785b      	ldrb	r3, [r3, #1]
 80065be:	2b03      	cmp	r3, #3
 80065c0:	d007      	beq.n	80065d2 <USBD_StdEPReq+0x5c>
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	f300 8129 	bgt.w	800681a <USBD_StdEPReq+0x2a4>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d07f      	beq.n	80066cc <USBD_StdEPReq+0x156>
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d03c      	beq.n	800664a <USBD_StdEPReq+0xd4>
 80065d0:	e123      	b.n	800681a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d002      	beq.n	80065e4 <USBD_StdEPReq+0x6e>
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d016      	beq.n	8006610 <USBD_StdEPReq+0x9a>
 80065e2:	e02c      	b.n	800663e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065e4:	7bbb      	ldrb	r3, [r7, #14]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00d      	beq.n	8006606 <USBD_StdEPReq+0x90>
 80065ea:	7bbb      	ldrb	r3, [r7, #14]
 80065ec:	2b80      	cmp	r3, #128	; 0x80
 80065ee:	d00a      	beq.n	8006606 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065f0:	7bbb      	ldrb	r3, [r7, #14]
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f001 f947 	bl	8007888 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065fa:	2180      	movs	r1, #128	; 0x80
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f001 f943 	bl	8007888 <USBD_LL_StallEP>
 8006602:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006604:	e020      	b.n	8006648 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fc45 	bl	8006e98 <USBD_CtlError>
              break;
 800660e:	e01b      	b.n	8006648 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	885b      	ldrh	r3, [r3, #2]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10e      	bne.n	8006636 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006618:	7bbb      	ldrb	r3, [r7, #14]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00b      	beq.n	8006636 <USBD_StdEPReq+0xc0>
 800661e:	7bbb      	ldrb	r3, [r7, #14]
 8006620:	2b80      	cmp	r3, #128	; 0x80
 8006622:	d008      	beq.n	8006636 <USBD_StdEPReq+0xc0>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	88db      	ldrh	r3, [r3, #6]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d104      	bne.n	8006636 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800662c:	7bbb      	ldrb	r3, [r7, #14]
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 f929 	bl	8007888 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fcf9 	bl	800702e <USBD_CtlSendStatus>

              break;
 800663c:	e004      	b.n	8006648 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800663e:	6839      	ldr	r1, [r7, #0]
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fc29 	bl	8006e98 <USBD_CtlError>
              break;
 8006646:	bf00      	nop
          }
          break;
 8006648:	e0ec      	b.n	8006824 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d002      	beq.n	800665c <USBD_StdEPReq+0xe6>
 8006656:	2b03      	cmp	r3, #3
 8006658:	d016      	beq.n	8006688 <USBD_StdEPReq+0x112>
 800665a:	e030      	b.n	80066be <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00d      	beq.n	800667e <USBD_StdEPReq+0x108>
 8006662:	7bbb      	ldrb	r3, [r7, #14]
 8006664:	2b80      	cmp	r3, #128	; 0x80
 8006666:	d00a      	beq.n	800667e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006668:	7bbb      	ldrb	r3, [r7, #14]
 800666a:	4619      	mov	r1, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 f90b 	bl	8007888 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006672:	2180      	movs	r1, #128	; 0x80
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 f907 	bl	8007888 <USBD_LL_StallEP>
 800667a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800667c:	e025      	b.n	80066ca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fc09 	bl	8006e98 <USBD_CtlError>
              break;
 8006686:	e020      	b.n	80066ca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	885b      	ldrh	r3, [r3, #2]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d11b      	bne.n	80066c8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006690:	7bbb      	ldrb	r3, [r7, #14]
 8006692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006696:	2b00      	cmp	r3, #0
 8006698:	d004      	beq.n	80066a4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800669a:	7bbb      	ldrb	r3, [r7, #14]
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f001 f911 	bl	80078c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fcc2 	bl	800702e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	4798      	blx	r3
 80066b8:	4603      	mov	r3, r0
 80066ba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80066bc:	e004      	b.n	80066c8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fbe9 	bl	8006e98 <USBD_CtlError>
              break;
 80066c6:	e000      	b.n	80066ca <USBD_StdEPReq+0x154>
              break;
 80066c8:	bf00      	nop
          }
          break;
 80066ca:	e0ab      	b.n	8006824 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d002      	beq.n	80066de <USBD_StdEPReq+0x168>
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d032      	beq.n	8006742 <USBD_StdEPReq+0x1cc>
 80066dc:	e097      	b.n	800680e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066de:	7bbb      	ldrb	r3, [r7, #14]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d007      	beq.n	80066f4 <USBD_StdEPReq+0x17e>
 80066e4:	7bbb      	ldrb	r3, [r7, #14]
 80066e6:	2b80      	cmp	r3, #128	; 0x80
 80066e8:	d004      	beq.n	80066f4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fbd3 	bl	8006e98 <USBD_CtlError>
                break;
 80066f2:	e091      	b.n	8006818 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	da0b      	bge.n	8006714 <USBD_StdEPReq+0x19e>
 80066fc:	7bbb      	ldrb	r3, [r7, #14]
 80066fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006702:	4613      	mov	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	3310      	adds	r3, #16
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	4413      	add	r3, r2
 8006710:	3304      	adds	r3, #4
 8006712:	e00b      	b.n	800672c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006714:	7bbb      	ldrb	r3, [r7, #14]
 8006716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800671a:	4613      	mov	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	4413      	add	r3, r2
 800672a:	3304      	adds	r3, #4
 800672c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2200      	movs	r2, #0
 8006732:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2202      	movs	r2, #2
 8006738:	4619      	mov	r1, r3
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fc1d 	bl	8006f7a <USBD_CtlSendData>
              break;
 8006740:	e06a      	b.n	8006818 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006742:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006746:	2b00      	cmp	r3, #0
 8006748:	da11      	bge.n	800676e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800674a:	7bbb      	ldrb	r3, [r7, #14]
 800674c:	f003 020f 	and.w	r2, r3, #15
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	3324      	adds	r3, #36	; 0x24
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d117      	bne.n	8006794 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fb96 	bl	8006e98 <USBD_CtlError>
                  break;
 800676c:	e054      	b.n	8006818 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800676e:	7bbb      	ldrb	r3, [r7, #14]
 8006770:	f003 020f 	and.w	r2, r3, #15
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d104      	bne.n	8006794 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fb83 	bl	8006e98 <USBD_CtlError>
                  break;
 8006792:	e041      	b.n	8006818 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006798:	2b00      	cmp	r3, #0
 800679a:	da0b      	bge.n	80067b4 <USBD_StdEPReq+0x23e>
 800679c:	7bbb      	ldrb	r3, [r7, #14]
 800679e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	3310      	adds	r3, #16
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	4413      	add	r3, r2
 80067b0:	3304      	adds	r3, #4
 80067b2:	e00b      	b.n	80067cc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
 80067b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	4413      	add	r3, r2
 80067ca:	3304      	adds	r3, #4
 80067cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067ce:	7bbb      	ldrb	r3, [r7, #14]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <USBD_StdEPReq+0x264>
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
 80067d6:	2b80      	cmp	r3, #128	; 0x80
 80067d8:	d103      	bne.n	80067e2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2200      	movs	r2, #0
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	e00e      	b.n	8006800 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80067e2:	7bbb      	ldrb	r3, [r7, #14]
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f001 f88c 	bl	8007904 <USBD_LL_IsStallEP>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2201      	movs	r2, #1
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	e002      	b.n	8006800 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2200      	movs	r2, #0
 80067fe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2202      	movs	r2, #2
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fbb7 	bl	8006f7a <USBD_CtlSendData>
              break;
 800680c:	e004      	b.n	8006818 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fb41 	bl	8006e98 <USBD_CtlError>
              break;
 8006816:	bf00      	nop
          }
          break;
 8006818:	e004      	b.n	8006824 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fb3b 	bl	8006e98 <USBD_CtlError>
          break;
 8006822:	bf00      	nop
      }
      break;
 8006824:	e004      	b.n	8006830 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fb35 	bl	8006e98 <USBD_CtlError>
      break;
 800682e:	bf00      	nop
  }

  return ret;
 8006830:	7bfb      	ldrb	r3, [r7, #15]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800684a:	2300      	movs	r3, #0
 800684c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	885b      	ldrh	r3, [r3, #2]
 8006856:	0a1b      	lsrs	r3, r3, #8
 8006858:	b29b      	uxth	r3, r3
 800685a:	3b01      	subs	r3, #1
 800685c:	2b06      	cmp	r3, #6
 800685e:	f200 8128 	bhi.w	8006ab2 <USBD_GetDescriptor+0x276>
 8006862:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <USBD_GetDescriptor+0x2c>)
 8006864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006868:	08006885 	.word	0x08006885
 800686c:	0800689d 	.word	0x0800689d
 8006870:	080068dd 	.word	0x080068dd
 8006874:	08006ab3 	.word	0x08006ab3
 8006878:	08006ab3 	.word	0x08006ab3
 800687c:	08006a53 	.word	0x08006a53
 8006880:	08006a7f 	.word	0x08006a7f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	7c12      	ldrb	r2, [r2, #16]
 8006890:	f107 0108 	add.w	r1, r7, #8
 8006894:	4610      	mov	r0, r2
 8006896:	4798      	blx	r3
 8006898:	60f8      	str	r0, [r7, #12]
      break;
 800689a:	e112      	b.n	8006ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	7c1b      	ldrb	r3, [r3, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10d      	bne.n	80068c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	f107 0208 	add.w	r2, r7, #8
 80068b0:	4610      	mov	r0, r2
 80068b2:	4798      	blx	r3
 80068b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3301      	adds	r3, #1
 80068ba:	2202      	movs	r2, #2
 80068bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068be:	e100      	b.n	8006ac2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c8:	f107 0208 	add.w	r2, r7, #8
 80068cc:	4610      	mov	r0, r2
 80068ce:	4798      	blx	r3
 80068d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3301      	adds	r3, #1
 80068d6:	2202      	movs	r2, #2
 80068d8:	701a      	strb	r2, [r3, #0]
      break;
 80068da:	e0f2      	b.n	8006ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	885b      	ldrh	r3, [r3, #2]
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b05      	cmp	r3, #5
 80068e4:	f200 80ac 	bhi.w	8006a40 <USBD_GetDescriptor+0x204>
 80068e8:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <USBD_GetDescriptor+0xb4>)
 80068ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ee:	bf00      	nop
 80068f0:	08006909 	.word	0x08006909
 80068f4:	0800693d 	.word	0x0800693d
 80068f8:	08006971 	.word	0x08006971
 80068fc:	080069a5 	.word	0x080069a5
 8006900:	080069d9 	.word	0x080069d9
 8006904:	08006a0d 	.word	0x08006a0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00b      	beq.n	800692c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	7c12      	ldrb	r2, [r2, #16]
 8006920:	f107 0108 	add.w	r1, r7, #8
 8006924:	4610      	mov	r0, r2
 8006926:	4798      	blx	r3
 8006928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800692a:	e091      	b.n	8006a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fab2 	bl	8006e98 <USBD_CtlError>
            err++;
 8006934:	7afb      	ldrb	r3, [r7, #11]
 8006936:	3301      	adds	r3, #1
 8006938:	72fb      	strb	r3, [r7, #11]
          break;
 800693a:	e089      	b.n	8006a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00b      	beq.n	8006960 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	7c12      	ldrb	r2, [r2, #16]
 8006954:	f107 0108 	add.w	r1, r7, #8
 8006958:	4610      	mov	r0, r2
 800695a:	4798      	blx	r3
 800695c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800695e:	e077      	b.n	8006a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fa98 	bl	8006e98 <USBD_CtlError>
            err++;
 8006968:	7afb      	ldrb	r3, [r7, #11]
 800696a:	3301      	adds	r3, #1
 800696c:	72fb      	strb	r3, [r7, #11]
          break;
 800696e:	e06f      	b.n	8006a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00b      	beq.n	8006994 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	7c12      	ldrb	r2, [r2, #16]
 8006988:	f107 0108 	add.w	r1, r7, #8
 800698c:	4610      	mov	r0, r2
 800698e:	4798      	blx	r3
 8006990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006992:	e05d      	b.n	8006a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006994:	6839      	ldr	r1, [r7, #0]
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fa7e 	bl	8006e98 <USBD_CtlError>
            err++;
 800699c:	7afb      	ldrb	r3, [r7, #11]
 800699e:	3301      	adds	r3, #1
 80069a0:	72fb      	strb	r3, [r7, #11]
          break;
 80069a2:	e055      	b.n	8006a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00b      	beq.n	80069c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	7c12      	ldrb	r2, [r2, #16]
 80069bc:	f107 0108 	add.w	r1, r7, #8
 80069c0:	4610      	mov	r0, r2
 80069c2:	4798      	blx	r3
 80069c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069c6:	e043      	b.n	8006a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fa64 	bl	8006e98 <USBD_CtlError>
            err++;
 80069d0:	7afb      	ldrb	r3, [r7, #11]
 80069d2:	3301      	adds	r3, #1
 80069d4:	72fb      	strb	r3, [r7, #11]
          break;
 80069d6:	e03b      	b.n	8006a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00b      	beq.n	80069fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	7c12      	ldrb	r2, [r2, #16]
 80069f0:	f107 0108 	add.w	r1, r7, #8
 80069f4:	4610      	mov	r0, r2
 80069f6:	4798      	blx	r3
 80069f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069fa:	e029      	b.n	8006a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069fc:	6839      	ldr	r1, [r7, #0]
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fa4a 	bl	8006e98 <USBD_CtlError>
            err++;
 8006a04:	7afb      	ldrb	r3, [r7, #11]
 8006a06:	3301      	adds	r3, #1
 8006a08:	72fb      	strb	r3, [r7, #11]
          break;
 8006a0a:	e021      	b.n	8006a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00b      	beq.n	8006a30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	7c12      	ldrb	r2, [r2, #16]
 8006a24:	f107 0108 	add.w	r1, r7, #8
 8006a28:	4610      	mov	r0, r2
 8006a2a:	4798      	blx	r3
 8006a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a2e:	e00f      	b.n	8006a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fa30 	bl	8006e98 <USBD_CtlError>
            err++;
 8006a38:	7afb      	ldrb	r3, [r7, #11]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a3e:	e007      	b.n	8006a50 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fa28 	bl	8006e98 <USBD_CtlError>
          err++;
 8006a48:	7afb      	ldrb	r3, [r7, #11]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006a4e:	bf00      	nop
      }
      break;
 8006a50:	e037      	b.n	8006ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	7c1b      	ldrb	r3, [r3, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d109      	bne.n	8006a6e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a62:	f107 0208 	add.w	r2, r7, #8
 8006a66:	4610      	mov	r0, r2
 8006a68:	4798      	blx	r3
 8006a6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a6c:	e029      	b.n	8006ac2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fa11 	bl	8006e98 <USBD_CtlError>
        err++;
 8006a76:	7afb      	ldrb	r3, [r7, #11]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	72fb      	strb	r3, [r7, #11]
      break;
 8006a7c:	e021      	b.n	8006ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	7c1b      	ldrb	r3, [r3, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10d      	bne.n	8006aa2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8e:	f107 0208 	add.w	r2, r7, #8
 8006a92:	4610      	mov	r0, r2
 8006a94:	4798      	blx	r3
 8006a96:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	2207      	movs	r2, #7
 8006a9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006aa0:	e00f      	b.n	8006ac2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f9f7 	bl	8006e98 <USBD_CtlError>
        err++;
 8006aaa:	7afb      	ldrb	r3, [r7, #11]
 8006aac:	3301      	adds	r3, #1
 8006aae:	72fb      	strb	r3, [r7, #11]
      break;
 8006ab0:	e007      	b.n	8006ac2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f9ef 	bl	8006e98 <USBD_CtlError>
      err++;
 8006aba:	7afb      	ldrb	r3, [r7, #11]
 8006abc:	3301      	adds	r3, #1
 8006abe:	72fb      	strb	r3, [r7, #11]
      break;
 8006ac0:	bf00      	nop
  }

  if (err != 0U)
 8006ac2:	7afb      	ldrb	r3, [r7, #11]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d11e      	bne.n	8006b06 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	88db      	ldrh	r3, [r3, #6]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d016      	beq.n	8006afe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006ad0:	893b      	ldrh	r3, [r7, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00e      	beq.n	8006af4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	88da      	ldrh	r2, [r3, #6]
 8006ada:	893b      	ldrh	r3, [r7, #8]
 8006adc:	4293      	cmp	r3, r2
 8006ade:	bf28      	it	cs
 8006ae0:	4613      	movcs	r3, r2
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ae6:	893b      	ldrh	r3, [r7, #8]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	68f9      	ldr	r1, [r7, #12]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fa44 	bl	8006f7a <USBD_CtlSendData>
 8006af2:	e009      	b.n	8006b08 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f9ce 	bl	8006e98 <USBD_CtlError>
 8006afc:	e004      	b.n	8006b08 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fa95 	bl	800702e <USBD_CtlSendStatus>
 8006b04:	e000      	b.n	8006b08 <USBD_GetDescriptor+0x2cc>
    return;
 8006b06:	bf00      	nop
  }
}
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop

08006b10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	889b      	ldrh	r3, [r3, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d131      	bne.n	8006b86 <USBD_SetAddress+0x76>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	88db      	ldrh	r3, [r3, #6]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d12d      	bne.n	8006b86 <USBD_SetAddress+0x76>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	885b      	ldrh	r3, [r3, #2]
 8006b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b30:	d829      	bhi.n	8006b86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	885b      	ldrh	r3, [r3, #2]
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	d104      	bne.n	8006b54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f9a3 	bl	8006e98 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b52:	e01d      	b.n	8006b90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	7bfa      	ldrb	r2, [r7, #15]
 8006b58:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fefb 	bl	800795c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fa61 	bl	800702e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d004      	beq.n	8006b7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2202      	movs	r2, #2
 8006b76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b7a:	e009      	b.n	8006b90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b84:	e004      	b.n	8006b90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f985 	bl	8006e98 <USBD_CtlError>
  }
}
 8006b8e:	bf00      	nop
 8006b90:	bf00      	nop
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	885b      	ldrh	r3, [r3, #2]
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	4b4c      	ldr	r3, [pc, #304]	; (8006ce0 <USBD_SetConfig+0x148>)
 8006bae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bb0:	4b4b      	ldr	r3, [pc, #300]	; (8006ce0 <USBD_SetConfig+0x148>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d905      	bls.n	8006bc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006bb8:	6839      	ldr	r1, [r7, #0]
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f96c 	bl	8006e98 <USBD_CtlError>
    return USBD_FAIL;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e088      	b.n	8006cd6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d002      	beq.n	8006bd6 <USBD_SetConfig+0x3e>
 8006bd0:	2b03      	cmp	r3, #3
 8006bd2:	d025      	beq.n	8006c20 <USBD_SetConfig+0x88>
 8006bd4:	e071      	b.n	8006cba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006bd6:	4b42      	ldr	r3, [pc, #264]	; (8006ce0 <USBD_SetConfig+0x148>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d01c      	beq.n	8006c18 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006bde:	4b40      	ldr	r3, [pc, #256]	; (8006ce0 <USBD_SetConfig+0x148>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006be8:	4b3d      	ldr	r3, [pc, #244]	; (8006ce0 <USBD_SetConfig+0x148>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff f948 	bl	8005e84 <USBD_SetClassConfig>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f949 	bl	8006e98 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c06:	e065      	b.n	8006cd4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fa10 	bl	800702e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2203      	movs	r2, #3
 8006c12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006c16:	e05d      	b.n	8006cd4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fa08 	bl	800702e <USBD_CtlSendStatus>
      break;
 8006c1e:	e059      	b.n	8006cd4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006c20:	4b2f      	ldr	r3, [pc, #188]	; (8006ce0 <USBD_SetConfig+0x148>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d112      	bne.n	8006c4e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006c30:	4b2b      	ldr	r3, [pc, #172]	; (8006ce0 <USBD_SetConfig+0x148>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c3a:	4b29      	ldr	r3, [pc, #164]	; (8006ce0 <USBD_SetConfig+0x148>)
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7ff f93b 	bl	8005ebc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f9f1 	bl	800702e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c4c:	e042      	b.n	8006cd4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006c4e:	4b24      	ldr	r3, [pc, #144]	; (8006ce0 <USBD_SetConfig+0x148>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d02a      	beq.n	8006cb2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff f929 	bl	8005ebc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c6a:	4b1d      	ldr	r3, [pc, #116]	; (8006ce0 <USBD_SetConfig+0x148>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c74:	4b1a      	ldr	r3, [pc, #104]	; (8006ce0 <USBD_SetConfig+0x148>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7ff f902 	bl	8005e84 <USBD_SetClassConfig>
 8006c80:	4603      	mov	r3, r0
 8006c82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00f      	beq.n	8006caa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f903 	bl	8006e98 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff f90e 	bl	8005ebc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006ca8:	e014      	b.n	8006cd4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f9bf 	bl	800702e <USBD_CtlSendStatus>
      break;
 8006cb0:	e010      	b.n	8006cd4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f9bb 	bl	800702e <USBD_CtlSendStatus>
      break;
 8006cb8:	e00c      	b.n	8006cd4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f8eb 	bl	8006e98 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cc2:	4b07      	ldr	r3, [pc, #28]	; (8006ce0 <USBD_SetConfig+0x148>)
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff f8f7 	bl	8005ebc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8006cd2:	bf00      	nop
  }

  return ret;
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	2000019c 	.word	0x2000019c

08006ce4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	88db      	ldrh	r3, [r3, #6]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d004      	beq.n	8006d00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f8cd 	bl	8006e98 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006cfe:	e023      	b.n	8006d48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	dc02      	bgt.n	8006d12 <USBD_GetConfig+0x2e>
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	dc03      	bgt.n	8006d18 <USBD_GetConfig+0x34>
 8006d10:	e015      	b.n	8006d3e <USBD_GetConfig+0x5a>
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d00b      	beq.n	8006d2e <USBD_GetConfig+0x4a>
 8006d16:	e012      	b.n	8006d3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	3308      	adds	r3, #8
 8006d22:	2201      	movs	r2, #1
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f927 	bl	8006f7a <USBD_CtlSendData>
        break;
 8006d2c:	e00c      	b.n	8006d48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	3304      	adds	r3, #4
 8006d32:	2201      	movs	r2, #1
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f91f 	bl	8006f7a <USBD_CtlSendData>
        break;
 8006d3c:	e004      	b.n	8006d48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006d3e:	6839      	ldr	r1, [r7, #0]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f8a9 	bl	8006e98 <USBD_CtlError>
        break;
 8006d46:	bf00      	nop
}
 8006d48:	bf00      	nop
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	3b01      	subs	r3, #1
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d81e      	bhi.n	8006da6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	88db      	ldrh	r3, [r3, #6]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d004      	beq.n	8006d7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f890 	bl	8006e98 <USBD_CtlError>
        break;
 8006d78:	e01a      	b.n	8006db0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d005      	beq.n	8006d96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	f043 0202 	orr.w	r2, r3, #2
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	330c      	adds	r3, #12
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f8eb 	bl	8006f7a <USBD_CtlSendData>
      break;
 8006da4:	e004      	b.n	8006db0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f875 	bl	8006e98 <USBD_CtlError>
      break;
 8006dae:	bf00      	nop
  }
}
 8006db0:	bf00      	nop
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	885b      	ldrh	r3, [r3, #2]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d106      	bne.n	8006dd8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f92b 	bl	800702e <USBD_CtlSendStatus>
  }
}
 8006dd8:	bf00      	nop
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	3b01      	subs	r3, #1
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d80b      	bhi.n	8006e10 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	885b      	ldrh	r3, [r3, #2]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d10c      	bne.n	8006e1a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f910 	bl	800702e <USBD_CtlSendStatus>
      }
      break;
 8006e0e:	e004      	b.n	8006e1a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f840 	bl	8006e98 <USBD_CtlError>
      break;
 8006e18:	e000      	b.n	8006e1c <USBD_ClrFeature+0x3c>
      break;
 8006e1a:	bf00      	nop
  }
}
 8006e1c:	bf00      	nop
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	781a      	ldrb	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	781a      	ldrb	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f7ff fabb 	bl	80063ca <SWAPBYTE>
 8006e54:	4603      	mov	r3, r0
 8006e56:	461a      	mov	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3301      	adds	r3, #1
 8006e66:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f7ff faae 	bl	80063ca <SWAPBYTE>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	461a      	mov	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f7ff faa1 	bl	80063ca <SWAPBYTE>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	80da      	strh	r2, [r3, #6]
}
 8006e90:	bf00      	nop
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ea2:	2180      	movs	r1, #128	; 0x80
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fcef 	bl	8007888 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006eaa:	2100      	movs	r1, #0
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fceb 	bl	8007888 <USBD_LL_StallEP>
}
 8006eb2:	bf00      	nop
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b086      	sub	sp, #24
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d036      	beq.n	8006f3e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006ed4:	6938      	ldr	r0, [r7, #16]
 8006ed6:	f000 f836 	bl	8006f46 <USBD_GetLen>
 8006eda:	4603      	mov	r3, r0
 8006edc:	3301      	adds	r3, #1
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ee8:	7dfb      	ldrb	r3, [r7, #23]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	4413      	add	r3, r2
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	7812      	ldrb	r2, [r2, #0]
 8006ef2:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	4413      	add	r3, r2
 8006f00:	2203      	movs	r2, #3
 8006f02:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	3301      	adds	r3, #1
 8006f08:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006f0a:	e013      	b.n	8006f34 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006f0c:	7dfb      	ldrb	r3, [r7, #23]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	4413      	add	r3, r2
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	7812      	ldrb	r2, [r2, #0]
 8006f16:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	613b      	str	r3, [r7, #16]
    idx++;
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
 8006f20:	3301      	adds	r3, #1
 8006f22:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	4413      	add	r3, r2
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f2e:	7dfb      	ldrb	r3, [r7, #23]
 8006f30:	3301      	adds	r3, #1
 8006f32:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e7      	bne.n	8006f0c <USBD_GetString+0x52>
 8006f3c:	e000      	b.n	8006f40 <USBD_GetString+0x86>
    return;
 8006f3e:	bf00      	nop
  }
}
 8006f40:	3718      	adds	r7, #24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b085      	sub	sp, #20
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f56:	e005      	b.n	8006f64 <USBD_GetLen+0x1e>
  {
    len++;
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	3301      	adds	r3, #1
 8006f62:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1f5      	bne.n	8006f58 <USBD_GetLen+0x12>
  }

  return len;
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2202      	movs	r2, #2
 8006f8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 fcfa 	bl	800799a <USBD_LL_Transmit>

  return USBD_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 fce9 	bl	800799a <USBD_LL_Transmit>

  return USBD_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b084      	sub	sp, #16
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2203      	movs	r2, #3
 8006fe2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 fced 	bl	80079dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	2100      	movs	r1, #0
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f000 fcdc 	bl	80079dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b082      	sub	sp, #8
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2204      	movs	r2, #4
 800703a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800703e:	2300      	movs	r3, #0
 8007040:	2200      	movs	r2, #0
 8007042:	2100      	movs	r1, #0
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fca8 	bl	800799a <USBD_LL_Transmit>

  return USBD_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2205      	movs	r2, #5
 8007060:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007064:	2300      	movs	r3, #0
 8007066:	2200      	movs	r2, #0
 8007068:	2100      	movs	r1, #0
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fcb6 	bl	80079dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007080:	2200      	movs	r2, #0
 8007082:	4912      	ldr	r1, [pc, #72]	; (80070cc <MX_USB_DEVICE_Init+0x50>)
 8007084:	4812      	ldr	r0, [pc, #72]	; (80070d0 <MX_USB_DEVICE_Init+0x54>)
 8007086:	f7fe fe8f 	bl	8005da8 <USBD_Init>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007090:	f7f9 fe0c 	bl	8000cac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007094:	490f      	ldr	r1, [pc, #60]	; (80070d4 <MX_USB_DEVICE_Init+0x58>)
 8007096:	480e      	ldr	r0, [pc, #56]	; (80070d0 <MX_USB_DEVICE_Init+0x54>)
 8007098:	f7fe feb6 	bl	8005e08 <USBD_RegisterClass>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80070a2:	f7f9 fe03 	bl	8000cac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80070a6:	490c      	ldr	r1, [pc, #48]	; (80070d8 <MX_USB_DEVICE_Init+0x5c>)
 80070a8:	4809      	ldr	r0, [pc, #36]	; (80070d0 <MX_USB_DEVICE_Init+0x54>)
 80070aa:	f7fe fdd7 	bl	8005c5c <USBD_CDC_RegisterInterface>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80070b4:	f7f9 fdfa 	bl	8000cac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80070b8:	4805      	ldr	r0, [pc, #20]	; (80070d0 <MX_USB_DEVICE_Init+0x54>)
 80070ba:	f7fe fecc 	bl	8005e56 <USBD_Start>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80070c4:	f7f9 fdf2 	bl	8000cac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80070c8:	bf00      	nop
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20000130 	.word	0x20000130
 80070d0:	20000418 	.word	0x20000418
 80070d4:	20000018 	.word	0x20000018
 80070d8:	2000011c 	.word	0x2000011c

080070dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80070e0:	2200      	movs	r2, #0
 80070e2:	4905      	ldr	r1, [pc, #20]	; (80070f8 <CDC_Init_FS+0x1c>)
 80070e4:	4805      	ldr	r0, [pc, #20]	; (80070fc <CDC_Init_FS+0x20>)
 80070e6:	f7fe fdce 	bl	8005c86 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80070ea:	4905      	ldr	r1, [pc, #20]	; (8007100 <CDC_Init_FS+0x24>)
 80070ec:	4803      	ldr	r0, [pc, #12]	; (80070fc <CDC_Init_FS+0x20>)
 80070ee:	f7fe fde8 	bl	8005cc2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80070f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	20000ee8 	.word	0x20000ee8
 80070fc:	20000418 	.word	0x20000418
 8007100:	200006e8 	.word	0x200006e8

08007104 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007108:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800710a:	4618      	mov	r0, r3
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	4603      	mov	r3, r0
 800711c:	6039      	str	r1, [r7, #0]
 800711e:	71fb      	strb	r3, [r7, #7]
 8007120:	4613      	mov	r3, r2
 8007122:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	2b23      	cmp	r3, #35	; 0x23
 8007128:	d84a      	bhi.n	80071c0 <CDC_Control_FS+0xac>
 800712a:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <CDC_Control_FS+0x1c>)
 800712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007130:	080071c1 	.word	0x080071c1
 8007134:	080071c1 	.word	0x080071c1
 8007138:	080071c1 	.word	0x080071c1
 800713c:	080071c1 	.word	0x080071c1
 8007140:	080071c1 	.word	0x080071c1
 8007144:	080071c1 	.word	0x080071c1
 8007148:	080071c1 	.word	0x080071c1
 800714c:	080071c1 	.word	0x080071c1
 8007150:	080071c1 	.word	0x080071c1
 8007154:	080071c1 	.word	0x080071c1
 8007158:	080071c1 	.word	0x080071c1
 800715c:	080071c1 	.word	0x080071c1
 8007160:	080071c1 	.word	0x080071c1
 8007164:	080071c1 	.word	0x080071c1
 8007168:	080071c1 	.word	0x080071c1
 800716c:	080071c1 	.word	0x080071c1
 8007170:	080071c1 	.word	0x080071c1
 8007174:	080071c1 	.word	0x080071c1
 8007178:	080071c1 	.word	0x080071c1
 800717c:	080071c1 	.word	0x080071c1
 8007180:	080071c1 	.word	0x080071c1
 8007184:	080071c1 	.word	0x080071c1
 8007188:	080071c1 	.word	0x080071c1
 800718c:	080071c1 	.word	0x080071c1
 8007190:	080071c1 	.word	0x080071c1
 8007194:	080071c1 	.word	0x080071c1
 8007198:	080071c1 	.word	0x080071c1
 800719c:	080071c1 	.word	0x080071c1
 80071a0:	080071c1 	.word	0x080071c1
 80071a4:	080071c1 	.word	0x080071c1
 80071a8:	080071c1 	.word	0x080071c1
 80071ac:	080071c1 	.word	0x080071c1
 80071b0:	080071c1 	.word	0x080071c1
 80071b4:	080071c1 	.word	0x080071c1
 80071b8:	080071c1 	.word	0x080071c1
 80071bc:	080071c1 	.word	0x080071c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80071c0:	bf00      	nop
  }

  return (USBD_OK);
 80071c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80071da:	6879      	ldr	r1, [r7, #4]
 80071dc:	4805      	ldr	r0, [pc, #20]	; (80071f4 <CDC_Receive_FS+0x24>)
 80071de:	f7fe fd70 	bl	8005cc2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80071e2:	4804      	ldr	r0, [pc, #16]	; (80071f4 <CDC_Receive_FS+0x24>)
 80071e4:	f7fe fdb6 	bl	8005d54 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80071e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000418 	.word	0x20000418

080071f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	460b      	mov	r3, r1
 8007202:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007208:	4b0d      	ldr	r3, [pc, #52]	; (8007240 <CDC_Transmit_FS+0x48>)
 800720a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800720e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800721a:	2301      	movs	r3, #1
 800721c:	e00b      	b.n	8007236 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800721e:	887b      	ldrh	r3, [r7, #2]
 8007220:	461a      	mov	r2, r3
 8007222:	6879      	ldr	r1, [r7, #4]
 8007224:	4806      	ldr	r0, [pc, #24]	; (8007240 <CDC_Transmit_FS+0x48>)
 8007226:	f7fe fd2e 	bl	8005c86 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800722a:	4805      	ldr	r0, [pc, #20]	; (8007240 <CDC_Transmit_FS+0x48>)
 800722c:	f7fe fd62 	bl	8005cf4 <USBD_CDC_TransmitPacket>
 8007230:	4603      	mov	r3, r0
 8007232:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007234:	7bfb      	ldrb	r3, [r7, #15]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20000418 	.word	0x20000418

08007244 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	4613      	mov	r3, r2
 8007250:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007256:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800725a:	4618      	mov	r0, r3
 800725c:	371c      	adds	r7, #28
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
	...

08007268 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	4603      	mov	r3, r0
 8007270:	6039      	str	r1, [r7, #0]
 8007272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	2212      	movs	r2, #18
 8007278:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800727a:	4b03      	ldr	r3, [pc, #12]	; (8007288 <USBD_FS_DeviceDescriptor+0x20>)
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	2000014c 	.word	0x2000014c

0800728c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	4603      	mov	r3, r0
 8007294:	6039      	str	r1, [r7, #0]
 8007296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2204      	movs	r2, #4
 800729c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800729e:	4b03      	ldr	r3, [pc, #12]	; (80072ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	20000160 	.word	0x20000160

080072b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	4603      	mov	r3, r0
 80072b8:	6039      	str	r1, [r7, #0]
 80072ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072bc:	79fb      	ldrb	r3, [r7, #7]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d105      	bne.n	80072ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	4907      	ldr	r1, [pc, #28]	; (80072e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80072c6:	4808      	ldr	r0, [pc, #32]	; (80072e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80072c8:	f7ff fdf7 	bl	8006eba <USBD_GetString>
 80072cc:	e004      	b.n	80072d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	4904      	ldr	r1, [pc, #16]	; (80072e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80072d2:	4805      	ldr	r0, [pc, #20]	; (80072e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80072d4:	f7ff fdf1 	bl	8006eba <USBD_GetString>
  }
  return USBD_StrDesc;
 80072d8:	4b02      	ldr	r3, [pc, #8]	; (80072e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	200016e8 	.word	0x200016e8
 80072e8:	08007b3c 	.word	0x08007b3c

080072ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	4603      	mov	r3, r0
 80072f4:	6039      	str	r1, [r7, #0]
 80072f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	4904      	ldr	r1, [pc, #16]	; (800730c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80072fc:	4804      	ldr	r0, [pc, #16]	; (8007310 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80072fe:	f7ff fddc 	bl	8006eba <USBD_GetString>
  return USBD_StrDesc;
 8007302:	4b02      	ldr	r3, [pc, #8]	; (800730c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007304:	4618      	mov	r0, r3
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	200016e8 	.word	0x200016e8
 8007310:	08007b54 	.word	0x08007b54

08007314 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	4603      	mov	r3, r0
 800731c:	6039      	str	r1, [r7, #0]
 800731e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	221a      	movs	r2, #26
 8007324:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007326:	f000 f843 	bl	80073b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800732a:	4b02      	ldr	r3, [pc, #8]	; (8007334 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800732c:	4618      	mov	r0, r3
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	20000164 	.word	0x20000164

08007338 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	4603      	mov	r3, r0
 8007340:	6039      	str	r1, [r7, #0]
 8007342:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007344:	79fb      	ldrb	r3, [r7, #7]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d105      	bne.n	8007356 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	4907      	ldr	r1, [pc, #28]	; (800736c <USBD_FS_ConfigStrDescriptor+0x34>)
 800734e:	4808      	ldr	r0, [pc, #32]	; (8007370 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007350:	f7ff fdb3 	bl	8006eba <USBD_GetString>
 8007354:	e004      	b.n	8007360 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	4904      	ldr	r1, [pc, #16]	; (800736c <USBD_FS_ConfigStrDescriptor+0x34>)
 800735a:	4805      	ldr	r0, [pc, #20]	; (8007370 <USBD_FS_ConfigStrDescriptor+0x38>)
 800735c:	f7ff fdad 	bl	8006eba <USBD_GetString>
  }
  return USBD_StrDesc;
 8007360:	4b02      	ldr	r3, [pc, #8]	; (800736c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	200016e8 	.word	0x200016e8
 8007370:	08007b68 	.word	0x08007b68

08007374 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	4603      	mov	r3, r0
 800737c:	6039      	str	r1, [r7, #0]
 800737e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007380:	79fb      	ldrb	r3, [r7, #7]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d105      	bne.n	8007392 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	4907      	ldr	r1, [pc, #28]	; (80073a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800738a:	4808      	ldr	r0, [pc, #32]	; (80073ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800738c:	f7ff fd95 	bl	8006eba <USBD_GetString>
 8007390:	e004      	b.n	800739c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	4904      	ldr	r1, [pc, #16]	; (80073a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007396:	4805      	ldr	r0, [pc, #20]	; (80073ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007398:	f7ff fd8f 	bl	8006eba <USBD_GetString>
  }
  return USBD_StrDesc;
 800739c:	4b02      	ldr	r3, [pc, #8]	; (80073a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	200016e8 	.word	0x200016e8
 80073ac:	08007b74 	.word	0x08007b74

080073b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80073b6:	4b0f      	ldr	r3, [pc, #60]	; (80073f4 <Get_SerialNum+0x44>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80073bc:	4b0e      	ldr	r3, [pc, #56]	; (80073f8 <Get_SerialNum+0x48>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80073c2:	4b0e      	ldr	r3, [pc, #56]	; (80073fc <Get_SerialNum+0x4c>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4413      	add	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d009      	beq.n	80073ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80073d6:	2208      	movs	r2, #8
 80073d8:	4909      	ldr	r1, [pc, #36]	; (8007400 <Get_SerialNum+0x50>)
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 f814 	bl	8007408 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80073e0:	2204      	movs	r2, #4
 80073e2:	4908      	ldr	r1, [pc, #32]	; (8007404 <Get_SerialNum+0x54>)
 80073e4:	68b8      	ldr	r0, [r7, #8]
 80073e6:	f000 f80f 	bl	8007408 <IntToUnicode>
  }
}
 80073ea:	bf00      	nop
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	1fff7a10 	.word	0x1fff7a10
 80073f8:	1fff7a14 	.word	0x1fff7a14
 80073fc:	1fff7a18 	.word	0x1fff7a18
 8007400:	20000166 	.word	0x20000166
 8007404:	20000176 	.word	0x20000176

08007408 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	4613      	mov	r3, r2
 8007414:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007416:	2300      	movs	r3, #0
 8007418:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800741a:	2300      	movs	r3, #0
 800741c:	75fb      	strb	r3, [r7, #23]
 800741e:	e027      	b.n	8007470 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	0f1b      	lsrs	r3, r3, #28
 8007424:	2b09      	cmp	r3, #9
 8007426:	d80b      	bhi.n	8007440 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	0f1b      	lsrs	r3, r3, #28
 800742c:	b2da      	uxtb	r2, r3
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	4619      	mov	r1, r3
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	440b      	add	r3, r1
 8007438:	3230      	adds	r2, #48	; 0x30
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]
 800743e:	e00a      	b.n	8007456 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	0f1b      	lsrs	r3, r3, #28
 8007444:	b2da      	uxtb	r2, r3
 8007446:	7dfb      	ldrb	r3, [r7, #23]
 8007448:	005b      	lsls	r3, r3, #1
 800744a:	4619      	mov	r1, r3
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	440b      	add	r3, r1
 8007450:	3237      	adds	r2, #55	; 0x37
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	011b      	lsls	r3, r3, #4
 800745a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	005b      	lsls	r3, r3, #1
 8007460:	3301      	adds	r3, #1
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	4413      	add	r3, r2
 8007466:	2200      	movs	r2, #0
 8007468:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800746a:	7dfb      	ldrb	r3, [r7, #23]
 800746c:	3301      	adds	r3, #1
 800746e:	75fb      	strb	r3, [r7, #23]
 8007470:	7dfa      	ldrb	r2, [r7, #23]
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	429a      	cmp	r2, r3
 8007476:	d3d3      	bcc.n	8007420 <IntToUnicode+0x18>
  }
}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	371c      	adds	r7, #28
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
	...

08007488 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b08a      	sub	sp, #40	; 0x28
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007490:	f107 0314 	add.w	r3, r7, #20
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	605a      	str	r2, [r3, #4]
 800749a:	609a      	str	r2, [r3, #8]
 800749c:	60da      	str	r2, [r3, #12]
 800749e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074a8:	d147      	bne.n	800753a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074aa:	2300      	movs	r3, #0
 80074ac:	613b      	str	r3, [r7, #16]
 80074ae:	4b25      	ldr	r3, [pc, #148]	; (8007544 <HAL_PCD_MspInit+0xbc>)
 80074b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b2:	4a24      	ldr	r2, [pc, #144]	; (8007544 <HAL_PCD_MspInit+0xbc>)
 80074b4:	f043 0301 	orr.w	r3, r3, #1
 80074b8:	6313      	str	r3, [r2, #48]	; 0x30
 80074ba:	4b22      	ldr	r3, [pc, #136]	; (8007544 <HAL_PCD_MspInit+0xbc>)
 80074bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	613b      	str	r3, [r7, #16]
 80074c4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80074c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074cc:	2300      	movs	r3, #0
 80074ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074d0:	2300      	movs	r3, #0
 80074d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80074d4:	f107 0314 	add.w	r3, r7, #20
 80074d8:	4619      	mov	r1, r3
 80074da:	481b      	ldr	r0, [pc, #108]	; (8007548 <HAL_PCD_MspInit+0xc0>)
 80074dc:	f7f9 fe96 	bl	800120c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80074e0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80074e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074e6:	2302      	movs	r3, #2
 80074e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074ee:	2300      	movs	r3, #0
 80074f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80074f2:	230a      	movs	r3, #10
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074f6:	f107 0314 	add.w	r3, r7, #20
 80074fa:	4619      	mov	r1, r3
 80074fc:	4812      	ldr	r0, [pc, #72]	; (8007548 <HAL_PCD_MspInit+0xc0>)
 80074fe:	f7f9 fe85 	bl	800120c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007502:	4b10      	ldr	r3, [pc, #64]	; (8007544 <HAL_PCD_MspInit+0xbc>)
 8007504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007506:	4a0f      	ldr	r2, [pc, #60]	; (8007544 <HAL_PCD_MspInit+0xbc>)
 8007508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800750c:	6353      	str	r3, [r2, #52]	; 0x34
 800750e:	2300      	movs	r3, #0
 8007510:	60fb      	str	r3, [r7, #12]
 8007512:	4b0c      	ldr	r3, [pc, #48]	; (8007544 <HAL_PCD_MspInit+0xbc>)
 8007514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007516:	4a0b      	ldr	r2, [pc, #44]	; (8007544 <HAL_PCD_MspInit+0xbc>)
 8007518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800751c:	6453      	str	r3, [r2, #68]	; 0x44
 800751e:	4b09      	ldr	r3, [pc, #36]	; (8007544 <HAL_PCD_MspInit+0xbc>)
 8007520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800752a:	2200      	movs	r2, #0
 800752c:	2100      	movs	r1, #0
 800752e:	2043      	movs	r0, #67	; 0x43
 8007530:	f7f9 fe35 	bl	800119e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007534:	2043      	movs	r0, #67	; 0x43
 8007536:	f7f9 fe4e 	bl	80011d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800753a:	bf00      	nop
 800753c:	3728      	adds	r7, #40	; 0x28
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	40023800 	.word	0x40023800
 8007548:	40020000 	.word	0x40020000

0800754c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007560:	4619      	mov	r1, r3
 8007562:	4610      	mov	r0, r2
 8007564:	f7fe fcc2 	bl	8005eec <USBD_LL_SetupStage>
}
 8007568:	bf00      	nop
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007582:	78fa      	ldrb	r2, [r7, #3]
 8007584:	6879      	ldr	r1, [r7, #4]
 8007586:	4613      	mov	r3, r2
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	1a9b      	subs	r3, r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	440b      	add	r3, r1
 8007590:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	78fb      	ldrb	r3, [r7, #3]
 8007598:	4619      	mov	r1, r3
 800759a:	f7fe fcfc 	bl	8005f96 <USBD_LL_DataOutStage>
}
 800759e:	bf00      	nop
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	460b      	mov	r3, r1
 80075b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80075b8:	78fa      	ldrb	r2, [r7, #3]
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	4613      	mov	r3, r2
 80075be:	00db      	lsls	r3, r3, #3
 80075c0:	1a9b      	subs	r3, r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	440b      	add	r3, r1
 80075c6:	3348      	adds	r3, #72	; 0x48
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	78fb      	ldrb	r3, [r7, #3]
 80075cc:	4619      	mov	r1, r3
 80075ce:	f7fe fd45 	bl	800605c <USBD_LL_DataInStage>
}
 80075d2:	bf00      	nop
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fe fe59 	bl	80062a0 <USBD_LL_SOF>
}
 80075ee:	bf00      	nop
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80075fe:	2301      	movs	r3, #1
 8007600:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d102      	bne.n	8007610 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800760a:	2300      	movs	r3, #0
 800760c:	73fb      	strb	r3, [r7, #15]
 800760e:	e008      	b.n	8007622 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	2b02      	cmp	r3, #2
 8007616:	d102      	bne.n	800761e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007618:	2301      	movs	r3, #1
 800761a:	73fb      	strb	r3, [r7, #15]
 800761c:	e001      	b.n	8007622 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800761e:	f7f9 fb45 	bl	8000cac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007628:	7bfa      	ldrb	r2, [r7, #15]
 800762a:	4611      	mov	r1, r2
 800762c:	4618      	mov	r0, r3
 800762e:	f7fe fdf9 	bl	8006224 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007638:	4618      	mov	r0, r3
 800763a:	f7fe fda5 	bl	8006188 <USBD_LL_Reset>
}
 800763e:	bf00      	nop
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
	...

08007648 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe fdf4 	bl	8006244 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	6812      	ldr	r2, [r2, #0]
 800766a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800766e:	f043 0301 	orr.w	r3, r3, #1
 8007672:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d005      	beq.n	8007688 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800767c:	4b04      	ldr	r3, [pc, #16]	; (8007690 <HAL_PCD_SuspendCallback+0x48>)
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	4a03      	ldr	r2, [pc, #12]	; (8007690 <HAL_PCD_SuspendCallback+0x48>)
 8007682:	f043 0306 	orr.w	r3, r3, #6
 8007686:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	e000ed00 	.word	0xe000ed00

08007694 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fe fde4 	bl	8006270 <USBD_LL_Resume>
}
 80076a8:	bf00      	nop
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076c2:	78fa      	ldrb	r2, [r7, #3]
 80076c4:	4611      	mov	r1, r2
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fe fe32 	bl	8006330 <USBD_LL_IsoOUTIncomplete>
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	460b      	mov	r3, r1
 80076de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076e6:	78fa      	ldrb	r2, [r7, #3]
 80076e8:	4611      	mov	r1, r2
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fdfa 	bl	80062e4 <USBD_LL_IsoINIncomplete>
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007706:	4618      	mov	r0, r3
 8007708:	f7fe fe38 	bl	800637c <USBD_LL_DevConnected>
}
 800770c:	bf00      	nop
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007722:	4618      	mov	r0, r3
 8007724:	f7fe fe35 	bl	8006392 <USBD_LL_DevDisconnected>
}
 8007728:	bf00      	nop
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d13c      	bne.n	80077ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007740:	4a20      	ldr	r2, [pc, #128]	; (80077c4 <USBD_LL_Init+0x94>)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a1e      	ldr	r2, [pc, #120]	; (80077c4 <USBD_LL_Init+0x94>)
 800774c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007750:	4b1c      	ldr	r3, [pc, #112]	; (80077c4 <USBD_LL_Init+0x94>)
 8007752:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007756:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007758:	4b1a      	ldr	r3, [pc, #104]	; (80077c4 <USBD_LL_Init+0x94>)
 800775a:	2204      	movs	r2, #4
 800775c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800775e:	4b19      	ldr	r3, [pc, #100]	; (80077c4 <USBD_LL_Init+0x94>)
 8007760:	2202      	movs	r2, #2
 8007762:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007764:	4b17      	ldr	r3, [pc, #92]	; (80077c4 <USBD_LL_Init+0x94>)
 8007766:	2200      	movs	r2, #0
 8007768:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800776a:	4b16      	ldr	r3, [pc, #88]	; (80077c4 <USBD_LL_Init+0x94>)
 800776c:	2202      	movs	r2, #2
 800776e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007770:	4b14      	ldr	r3, [pc, #80]	; (80077c4 <USBD_LL_Init+0x94>)
 8007772:	2200      	movs	r2, #0
 8007774:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007776:	4b13      	ldr	r3, [pc, #76]	; (80077c4 <USBD_LL_Init+0x94>)
 8007778:	2200      	movs	r2, #0
 800777a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800777c:	4b11      	ldr	r3, [pc, #68]	; (80077c4 <USBD_LL_Init+0x94>)
 800777e:	2200      	movs	r2, #0
 8007780:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007782:	4b10      	ldr	r3, [pc, #64]	; (80077c4 <USBD_LL_Init+0x94>)
 8007784:	2200      	movs	r2, #0
 8007786:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007788:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <USBD_LL_Init+0x94>)
 800778a:	2200      	movs	r2, #0
 800778c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800778e:	480d      	ldr	r0, [pc, #52]	; (80077c4 <USBD_LL_Init+0x94>)
 8007790:	f7fa fe87 	bl	80024a2 <HAL_PCD_Init>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800779a:	f7f9 fa87 	bl	8000cac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800779e:	2180      	movs	r1, #128	; 0x80
 80077a0:	4808      	ldr	r0, [pc, #32]	; (80077c4 <USBD_LL_Init+0x94>)
 80077a2:	f7fb ffe4 	bl	800376e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80077a6:	2240      	movs	r2, #64	; 0x40
 80077a8:	2100      	movs	r1, #0
 80077aa:	4806      	ldr	r0, [pc, #24]	; (80077c4 <USBD_LL_Init+0x94>)
 80077ac:	f7fb ff98 	bl	80036e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80077b0:	2280      	movs	r2, #128	; 0x80
 80077b2:	2101      	movs	r1, #1
 80077b4:	4803      	ldr	r0, [pc, #12]	; (80077c4 <USBD_LL_Init+0x94>)
 80077b6:	f7fb ff93 	bl	80036e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	200018e8 	.word	0x200018e8

080077c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fa ff7c 	bl	80026dc <HAL_PCD_Start>
 80077e4:	4603      	mov	r3, r0
 80077e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 f942 	bl	8007a74 <USBD_Get_USB_Status>
 80077f0:	4603      	mov	r3, r0
 80077f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b084      	sub	sp, #16
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	4608      	mov	r0, r1
 8007808:	4611      	mov	r1, r2
 800780a:	461a      	mov	r2, r3
 800780c:	4603      	mov	r3, r0
 800780e:	70fb      	strb	r3, [r7, #3]
 8007810:	460b      	mov	r3, r1
 8007812:	70bb      	strb	r3, [r7, #2]
 8007814:	4613      	mov	r3, r2
 8007816:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007826:	78bb      	ldrb	r3, [r7, #2]
 8007828:	883a      	ldrh	r2, [r7, #0]
 800782a:	78f9      	ldrb	r1, [r7, #3]
 800782c:	f7fb fb60 	bl	8002ef0 <HAL_PCD_EP_Open>
 8007830:	4603      	mov	r3, r0
 8007832:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	4618      	mov	r0, r3
 8007838:	f000 f91c 	bl	8007a74 <USBD_Get_USB_Status>
 800783c:	4603      	mov	r3, r0
 800783e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007840:	7bbb      	ldrb	r3, [r7, #14]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b084      	sub	sp, #16
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	460b      	mov	r3, r1
 8007854:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007864:	78fa      	ldrb	r2, [r7, #3]
 8007866:	4611      	mov	r1, r2
 8007868:	4618      	mov	r0, r3
 800786a:	f7fb fba9 	bl	8002fc0 <HAL_PCD_EP_Close>
 800786e:	4603      	mov	r3, r0
 8007870:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007872:	7bfb      	ldrb	r3, [r7, #15]
 8007874:	4618      	mov	r0, r3
 8007876:	f000 f8fd 	bl	8007a74 <USBD_Get_USB_Status>
 800787a:	4603      	mov	r3, r0
 800787c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800787e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	460b      	mov	r3, r1
 8007892:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078a2:	78fa      	ldrb	r2, [r7, #3]
 80078a4:	4611      	mov	r1, r2
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fb fc81 	bl	80031ae <HAL_PCD_EP_SetStall>
 80078ac:	4603      	mov	r3, r0
 80078ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 f8de 	bl	8007a74 <USBD_Get_USB_Status>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	460b      	mov	r3, r1
 80078d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078e0:	78fa      	ldrb	r2, [r7, #3]
 80078e2:	4611      	mov	r1, r2
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fb fcc6 	bl	8003276 <HAL_PCD_EP_ClrStall>
 80078ea:	4603      	mov	r3, r0
 80078ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 f8bf 	bl	8007a74 <USBD_Get_USB_Status>
 80078f6:	4603      	mov	r3, r0
 80078f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	460b      	mov	r3, r1
 800790e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007916:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007918:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800791c:	2b00      	cmp	r3, #0
 800791e:	da0b      	bge.n	8007938 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007926:	68f9      	ldr	r1, [r7, #12]
 8007928:	4613      	mov	r3, r2
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	1a9b      	subs	r3, r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	440b      	add	r3, r1
 8007932:	333e      	adds	r3, #62	; 0x3e
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	e00b      	b.n	8007950 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007938:	78fb      	ldrb	r3, [r7, #3]
 800793a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800793e:	68f9      	ldr	r1, [r7, #12]
 8007940:	4613      	mov	r3, r2
 8007942:	00db      	lsls	r3, r3, #3
 8007944:	1a9b      	subs	r3, r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	440b      	add	r3, r1
 800794a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800794e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007950:	4618      	mov	r0, r3
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	460b      	mov	r3, r1
 8007966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007976:	78fa      	ldrb	r2, [r7, #3]
 8007978:	4611      	mov	r1, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f7fb fa93 	bl	8002ea6 <HAL_PCD_SetAddress>
 8007980:	4603      	mov	r3, r0
 8007982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	4618      	mov	r0, r3
 8007988:	f000 f874 	bl	8007a74 <USBD_Get_USB_Status>
 800798c:	4603      	mov	r3, r0
 800798e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007990:	7bbb      	ldrb	r3, [r7, #14]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b086      	sub	sp, #24
 800799e:	af00      	add	r7, sp, #0
 80079a0:	60f8      	str	r0, [r7, #12]
 80079a2:	607a      	str	r2, [r7, #4]
 80079a4:	603b      	str	r3, [r7, #0]
 80079a6:	460b      	mov	r3, r1
 80079a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80079b8:	7af9      	ldrb	r1, [r7, #11]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	f7fb fbac 	bl	800311a <HAL_PCD_EP_Transmit>
 80079c2:	4603      	mov	r3, r0
 80079c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 f853 	bl	8007a74 <USBD_Get_USB_Status>
 80079ce:	4603      	mov	r3, r0
 80079d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80079d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3718      	adds	r7, #24
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	607a      	str	r2, [r7, #4]
 80079e6:	603b      	str	r3, [r7, #0]
 80079e8:	460b      	mov	r3, r1
 80079ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80079fa:	7af9      	ldrb	r1, [r7, #11]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	f7fb fb28 	bl	8003054 <HAL_PCD_EP_Receive>
 8007a04:	4603      	mov	r3, r0
 8007a06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 f832 	bl	8007a74 <USBD_Get_USB_Status>
 8007a10:	4603      	mov	r3, r0
 8007a12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a14:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b082      	sub	sp, #8
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	460b      	mov	r3, r1
 8007a28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a30:	78fa      	ldrb	r2, [r7, #3]
 8007a32:	4611      	mov	r1, r2
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fb fb58 	bl	80030ea <HAL_PCD_EP_GetRxCount>
 8007a3a:	4603      	mov	r3, r0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007a4c:	4b03      	ldr	r3, [pc, #12]	; (8007a5c <USBD_static_malloc+0x18>)
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	200001a0 	.word	0x200001a0

08007a60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]

}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a82:	79fb      	ldrb	r3, [r7, #7]
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	d817      	bhi.n	8007ab8 <USBD_Get_USB_Status+0x44>
 8007a88:	a201      	add	r2, pc, #4	; (adr r2, 8007a90 <USBD_Get_USB_Status+0x1c>)
 8007a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8e:	bf00      	nop
 8007a90:	08007aa1 	.word	0x08007aa1
 8007a94:	08007aa7 	.word	0x08007aa7
 8007a98:	08007aad 	.word	0x08007aad
 8007a9c:	08007ab3 	.word	0x08007ab3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8007aa4:	e00b      	b.n	8007abe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	73fb      	strb	r3, [r7, #15]
    break;
 8007aaa:	e008      	b.n	8007abe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007aac:	2301      	movs	r3, #1
 8007aae:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab0:	e005      	b.n	8007abe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab6:	e002      	b.n	8007abe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	73fb      	strb	r3, [r7, #15]
    break;
 8007abc:	bf00      	nop
  }
  return usb_status;
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <__libc_init_array>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	4d0d      	ldr	r5, [pc, #52]	; (8007b04 <__libc_init_array+0x38>)
 8007ad0:	4c0d      	ldr	r4, [pc, #52]	; (8007b08 <__libc_init_array+0x3c>)
 8007ad2:	1b64      	subs	r4, r4, r5
 8007ad4:	10a4      	asrs	r4, r4, #2
 8007ad6:	2600      	movs	r6, #0
 8007ad8:	42a6      	cmp	r6, r4
 8007ada:	d109      	bne.n	8007af0 <__libc_init_array+0x24>
 8007adc:	4d0b      	ldr	r5, [pc, #44]	; (8007b0c <__libc_init_array+0x40>)
 8007ade:	4c0c      	ldr	r4, [pc, #48]	; (8007b10 <__libc_init_array+0x44>)
 8007ae0:	f000 f820 	bl	8007b24 <_init>
 8007ae4:	1b64      	subs	r4, r4, r5
 8007ae6:	10a4      	asrs	r4, r4, #2
 8007ae8:	2600      	movs	r6, #0
 8007aea:	42a6      	cmp	r6, r4
 8007aec:	d105      	bne.n	8007afa <__libc_init_array+0x2e>
 8007aee:	bd70      	pop	{r4, r5, r6, pc}
 8007af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af4:	4798      	blx	r3
 8007af6:	3601      	adds	r6, #1
 8007af8:	e7ee      	b.n	8007ad8 <__libc_init_array+0xc>
 8007afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007afe:	4798      	blx	r3
 8007b00:	3601      	adds	r6, #1
 8007b02:	e7f2      	b.n	8007aea <__libc_init_array+0x1e>
 8007b04:	08007ba4 	.word	0x08007ba4
 8007b08:	08007ba4 	.word	0x08007ba4
 8007b0c:	08007ba4 	.word	0x08007ba4
 8007b10:	08007ba8 	.word	0x08007ba8

08007b14 <memset>:
 8007b14:	4402      	add	r2, r0
 8007b16:	4603      	mov	r3, r0
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d100      	bne.n	8007b1e <memset+0xa>
 8007b1c:	4770      	bx	lr
 8007b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b22:	e7f9      	b.n	8007b18 <memset+0x4>

08007b24 <_init>:
 8007b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b26:	bf00      	nop
 8007b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2a:	bc08      	pop	{r3}
 8007b2c:	469e      	mov	lr, r3
 8007b2e:	4770      	bx	lr

08007b30 <_fini>:
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b32:	bf00      	nop
 8007b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b36:	bc08      	pop	{r3}
 8007b38:	469e      	mov	lr, r3
 8007b3a:	4770      	bx	lr
