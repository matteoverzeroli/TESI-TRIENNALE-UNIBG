
Firmware_MAXM86161.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007594  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800771c  0800771c  0001771c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800777c  0800777c  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800777c  0800777c  0001777c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007784  08007784  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007784  08007784  00017784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007788  08007788  00017788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800778c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00001b70  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001cf0  20001cf0  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016883  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000329f  00000000  00000000  00036a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  00039cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ce0  00000000  00000000  0003aae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023911  00000000  00000000  0003b7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012ee9  00000000  00000000  0005f0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6fa6  00000000  00000000  00071fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00138f68  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003958  00000000  00000000  00138fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007704 	.word	0x08007704

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08007704 	.word	0x08007704

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MAXM86161_I2C_Read>:
}

/**
 * Read MAXM86161 register(s)
 */
bool MAXM86161_I2C_Read(uint8_t regName, uint8_t* readByte, uint8_t numBytes) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
 80004cc:	4613      	mov	r3, r2
 80004ce:	71bb      	strb	r3, [r7, #6]
	bool res = true;
 80004d0:	2301      	movs	r3, #1
 80004d2:	73fb      	strb	r3, [r7, #15]
	res &= (HAL_I2C_Master_Transmit(&hi2c_ppg_max, MAXM86161_I2C_ADDRESS, &regName,
 80004d4:	1dfa      	adds	r2, r7, #7
 80004d6:	2364      	movs	r3, #100	; 0x64
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	2301      	movs	r3, #1
 80004dc:	21c4      	movs	r1, #196	; 0xc4
 80004de:	4816      	ldr	r0, [pc, #88]	; (8000538 <MAXM86161_I2C_Read+0x78>)
 80004e0:	f000 ffd4 	bl	800148c <HAL_I2C_Master_Transmit>
 80004e4:	4603      	mov	r3, r0
			1, 100) == HAL_OK);
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	bf0c      	ite	eq
 80004ea:	2301      	moveq	r3, #1
 80004ec:	2300      	movne	r3, #0
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	461a      	mov	r2, r3
	res &= (HAL_I2C_Master_Transmit(&hi2c_ppg_max, MAXM86161_I2C_ADDRESS, &regName,
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	4013      	ands	r3, r2
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	bf14      	ite	ne
 80004fa:	2301      	movne	r3, #1
 80004fc:	2300      	moveq	r3, #0
 80004fe:	73fb      	strb	r3, [r7, #15]
	res &= HAL_I2C_Master_Receive(&hi2c_ppg_max, MAXM86161_I2C_ADDRESS, readByte,
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	b29b      	uxth	r3, r3
 8000504:	2264      	movs	r2, #100	; 0x64
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	21c4      	movs	r1, #196	; 0xc4
 800050c:	480a      	ldr	r0, [pc, #40]	; (8000538 <MAXM86161_I2C_Read+0x78>)
 800050e:	f001 f8bb 	bl	8001688 <HAL_I2C_Master_Receive>
 8000512:	4603      	mov	r3, r0
			numBytes, 100) == HAL_OK;
 8000514:	2b00      	cmp	r3, #0
 8000516:	bf0c      	ite	eq
 8000518:	2301      	moveq	r3, #1
 800051a:	2300      	movne	r3, #0
 800051c:	b2db      	uxtb	r3, r3
 800051e:	461a      	mov	r2, r3
	res &= HAL_I2C_Master_Receive(&hi2c_ppg_max, MAXM86161_I2C_ADDRESS, readByte,
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	4013      	ands	r3, r2
 8000524:	2b00      	cmp	r3, #0
 8000526:	bf14      	ite	ne
 8000528:	2301      	movne	r3, #1
 800052a:	2300      	moveq	r3, #0
 800052c:	73fb      	strb	r3, [r7, #15]
	return res;
 800052e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000530:	4618      	mov	r0, r3
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200003c0 	.word	0x200003c0

0800053c <MAXM86161_Read_Part_ID>:

/**
 * Read sensor part ID
 */
uint8_t MAXM86161_Read_Part_ID(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
	uint8_t part_id;
	MAXM86161_I2C_Read(MAXM86161_REG_PART_ID, &part_id, 1);
 8000542:	1dfb      	adds	r3, r7, #7
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	20ff      	movs	r0, #255	; 0xff
 800054a:	f7ff ffb9 	bl	80004c0 <MAXM86161_I2C_Read>
	return part_id;
 800054e:	79fb      	ldrb	r3, [r7, #7]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800055e:	f000 faf3 	bl	8000b48 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000562:	f000 f80f 	bl	8000584 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000566:	f000 f8a7 	bl	80006b8 <MX_GPIO_Init>
	MX_I2C3_Init();
 800056a:	f000 f877 	bl	800065c <MX_I2C3_Init>
	MX_USB_DEVICE_Init();
 800056e:	f006 fb9b 	bl	8006ca8 <MX_USB_DEVICE_Init>

	/* USER CODE BEGIN 2 */
	HAL_Delay(500);
 8000572:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000576:	f000 fb59 	bl	8000c2c <HAL_Delay>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	uint8_t part_id;
	part_id = MAXM86161_Read_Part_ID();
 800057a:	f7ff ffdf 	bl	800053c <MAXM86161_Read_Part_ID>
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]

	while (1) {
 8000582:	e7fe      	b.n	8000582 <main+0x2a>

08000584 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f007 f8ae 	bl	80076f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b29      	ldr	r3, [pc, #164]	; (8000654 <SystemClock_Config+0xd0>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a28      	ldr	r2, [pc, #160]	; (8000654 <SystemClock_Config+0xd0>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b26      	ldr	r3, [pc, #152]	; (8000654 <SystemClock_Config+0xd0>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b23      	ldr	r3, [pc, #140]	; (8000658 <SystemClock_Config+0xd4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a22      	ldr	r2, [pc, #136]	; (8000658 <SystemClock_Config+0xd4>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b20      	ldr	r3, [pc, #128]	; (8000658 <SystemClock_Config+0xd4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80005e0:	2303      	movs	r3, #3
 80005e2:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ea:	2301      	movs	r3, #1
 80005ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ee:	2310      	movs	r3, #16
 80005f0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000600:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000604:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000606:	2304      	movs	r3, #4
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800060a:	2307      	movs	r3, #7
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	4618      	mov	r0, r3
 8000614:	f002 ff0e 	bl	8003434 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x9e>
		Error_Handler();
 800061e:	f000 f98b 	bl	8000938 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f003 f971 	bl	8003924 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xc8>
		Error_Handler();
 8000648:	f000 f976 	bl	8000938 <Error_Handler>
	}
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	; 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_I2C3_Init+0x50>)
 8000662:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <MX_I2C3_Init+0x54>)
 8000664:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_I2C3_Init+0x50>)
 8000668:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_I2C3_Init+0x58>)
 800066a:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_I2C3_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_I2C3_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_I2C3_Init+0x50>)
 800067a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800067e:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <MX_I2C3_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_I2C3_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MX_I2C3_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_I2C3_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_I2C3_Init+0x50>)
 800069a:	f000 fdb3 	bl	8001204 <HAL_I2C_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_I2C3_Init+0x4c>
		Error_Handler();
 80006a4:	f000 f948 	bl	8000938 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200003c0 	.word	0x200003c0
 80006b0:	40005c00 	.word	0x40005c00
 80006b4:	000186a0 	.word	0x000186a0

080006b8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08c      	sub	sp, #48	; 0x30
 80006bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
 80006d2:	4b93      	ldr	r3, [pc, #588]	; (8000920 <MX_GPIO_Init+0x268>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a92      	ldr	r2, [pc, #584]	; (8000920 <MX_GPIO_Init+0x268>)
 80006d8:	f043 0310 	orr.w	r3, r3, #16
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b90      	ldr	r3, [pc, #576]	; (8000920 <MX_GPIO_Init+0x268>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0310 	and.w	r3, r3, #16
 80006e6:	61bb      	str	r3, [r7, #24]
 80006e8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
 80006ee:	4b8c      	ldr	r3, [pc, #560]	; (8000920 <MX_GPIO_Init+0x268>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a8b      	ldr	r2, [pc, #556]	; (8000920 <MX_GPIO_Init+0x268>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b89      	ldr	r3, [pc, #548]	; (8000920 <MX_GPIO_Init+0x268>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	4b85      	ldr	r3, [pc, #532]	; (8000920 <MX_GPIO_Init+0x268>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a84      	ldr	r2, [pc, #528]	; (8000920 <MX_GPIO_Init+0x268>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b82      	ldr	r3, [pc, #520]	; (8000920 <MX_GPIO_Init+0x268>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	4b7e      	ldr	r3, [pc, #504]	; (8000920 <MX_GPIO_Init+0x268>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a7d      	ldr	r2, [pc, #500]	; (8000920 <MX_GPIO_Init+0x268>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b7b      	ldr	r3, [pc, #492]	; (8000920 <MX_GPIO_Init+0x268>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b77      	ldr	r3, [pc, #476]	; (8000920 <MX_GPIO_Init+0x268>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a76      	ldr	r2, [pc, #472]	; (8000920 <MX_GPIO_Init+0x268>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b74      	ldr	r3, [pc, #464]	; (8000920 <MX_GPIO_Init+0x268>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b70      	ldr	r3, [pc, #448]	; (8000920 <MX_GPIO_Init+0x268>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a6f      	ldr	r2, [pc, #444]	; (8000920 <MX_GPIO_Init+0x268>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b6d      	ldr	r3, [pc, #436]	; (8000920 <MX_GPIO_Init+0x268>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2108      	movs	r1, #8
 800077a:	486a      	ldr	r0, [pc, #424]	; (8000924 <MX_GPIO_Init+0x26c>)
 800077c:	f000 fd28 	bl	80011d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000780:	2201      	movs	r2, #1
 8000782:	2101      	movs	r1, #1
 8000784:	4868      	ldr	r0, [pc, #416]	; (8000928 <MX_GPIO_Init+0x270>)
 8000786:	f000 fd23 	bl	80011d0 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 800078a:	2200      	movs	r2, #0
 800078c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000790:	4866      	ldr	r0, [pc, #408]	; (800092c <MX_GPIO_Init+0x274>)
 8000792:	f000 fd1d 	bl	80011d0 <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000796:	2308      	movs	r3, #8
 8000798:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4619      	mov	r1, r3
 80007ac:	485d      	ldr	r0, [pc, #372]	; (8000924 <MX_GPIO_Init+0x26c>)
 80007ae:	f000 fb73 	bl	8000e98 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	4857      	ldr	r0, [pc, #348]	; (8000928 <MX_GPIO_Init+0x270>)
 80007ca:	f000 fb65 	bl	8000e98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007ce:	2308      	movs	r3, #8
 80007d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	2302      	movs	r3, #2
 80007d4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007de:	2305      	movs	r3, #5
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	484f      	ldr	r0, [pc, #316]	; (8000928 <MX_GPIO_Init+0x270>)
 80007ea:	f000 fb55 	bl	8000e98 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007f6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	484b      	ldr	r0, [pc, #300]	; (8000930 <MX_GPIO_Init+0x278>)
 8000804:	f000 fb48 	bl	8000e98 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000808:	2310      	movs	r3, #16
 800080a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000818:	2306      	movs	r3, #6
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	4843      	ldr	r0, [pc, #268]	; (8000930 <MX_GPIO_Init+0x278>)
 8000824:	f000 fb38 	bl	8000e98 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 8000828:	23e0      	movs	r3, #224	; 0xe0
 800082a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000838:	2305      	movs	r3, #5
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	483b      	ldr	r0, [pc, #236]	; (8000930 <MX_GPIO_Init+0x278>)
 8000844:	f000 fb28 	bl	8000e98 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000848:	2304      	movs	r3, #4
 800084a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4836      	ldr	r0, [pc, #216]	; (8000934 <MX_GPIO_Init+0x27c>)
 800085c:	f000 fb1c 	bl	8000e98 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000864:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000872:	2305      	movs	r3, #5
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	482d      	ldr	r0, [pc, #180]	; (8000934 <MX_GPIO_Init+0x27c>)
 800087e:	f000 fb0b 	bl	8000e98 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000882:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000886:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4824      	ldr	r0, [pc, #144]	; (800092c <MX_GPIO_Init+0x274>)
 800089c:	f000 fafc 	bl	8000e98 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 80008a0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b2:	2306      	movs	r3, #6
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	481a      	ldr	r0, [pc, #104]	; (8000928 <MX_GPIO_Init+0x270>)
 80008be:	f000 faeb 	bl	8000e98 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008c2:	2320      	movs	r3, #32
 80008c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4815      	ldr	r0, [pc, #84]	; (800092c <MX_GPIO_Init+0x274>)
 80008d6:	f000 fadf 	bl	8000e98 <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin | Audio_SDA_Pin;
 80008da:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e0:	2312      	movs	r3, #18
 80008e2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ec:	2304      	movs	r3, #4
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	480f      	ldr	r0, [pc, #60]	; (8000934 <MX_GPIO_Init+0x27c>)
 80008f8:	f000 face 	bl	8000e98 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000900:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000904:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_GPIO_Init+0x26c>)
 8000912:	f000 fac1 	bl	8000e98 <HAL_GPIO_Init>

}
 8000916:	bf00      	nop
 8000918:	3730      	adds	r7, #48	; 0x30
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40021000 	.word	0x40021000
 8000928:	40020800 	.word	0x40020800
 800092c:	40020c00 	.word	0x40020c00
 8000930:	40020000 	.word	0x40020000
 8000934:	40020400 	.word	0x40020400

08000938 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <HAL_MspInit+0x4c>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000982:	2007      	movs	r0, #7
 8000984:	f000 fa46 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a29      	ldr	r2, [pc, #164]	; (8000a58 <HAL_I2C_MspInit+0xc4>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d14b      	bne.n	8000a4e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <HAL_I2C_MspInit+0xc8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a27      	ldr	r2, [pc, #156]	; (8000a5c <HAL_I2C_MspInit+0xc8>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <HAL_I2C_MspInit+0xc8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <HAL_I2C_MspInit+0xc8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a20      	ldr	r2, [pc, #128]	; (8000a5c <HAL_I2C_MspInit+0xc8>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <HAL_I2C_MspInit+0xc8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f4:	2312      	movs	r3, #18
 80009f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009fc:	2301      	movs	r3, #1
 80009fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a00:	2304      	movs	r3, #4
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4815      	ldr	r0, [pc, #84]	; (8000a60 <HAL_I2C_MspInit+0xcc>)
 8000a0c:	f000 fa44 	bl	8000e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a16:	2312      	movs	r3, #18
 8000a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a22:	2304      	movs	r3, #4
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <HAL_I2C_MspInit+0xd0>)
 8000a2e:	f000 fa33 	bl	8000e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_I2C_MspInit+0xc8>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <HAL_I2C_MspInit+0xc8>)
 8000a3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_I2C_MspInit+0xc8>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	; 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40005c00 	.word	0x40005c00
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020800 	.word	0x40020800
 8000a64:	40020000 	.word	0x40020000

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <NMI_Handler+0x4>

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab4:	f000 f89a 	bl	8000bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <OTG_FS_IRQHandler+0x10>)
 8000ac2:	f001 fc84 	bl	80023ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200018e8 	.word	0x200018e8

08000ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <SystemInit+0x20>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <SystemInit+0x20>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000afa:	490e      	ldr	r1, [pc, #56]	; (8000b34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000afc:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b00:	e002      	b.n	8000b08 <LoopCopyDataInit>

08000b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b06:	3304      	adds	r3, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b0c:	d3f9      	bcc.n	8000b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b10:	4c0b      	ldr	r4, [pc, #44]	; (8000b40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b14:	e001      	b.n	8000b1a <LoopFillZerobss>

08000b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b18:	3204      	adds	r2, #4

08000b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b1c:	d3fb      	bcc.n	8000b16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b1e:	f7ff ffd7 	bl	8000ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b22:	f006 fdc3 	bl	80076ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b26:	f7ff fd17 	bl	8000558 <main>
  bx  lr    
 8000b2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000b38:	0800778c 	.word	0x0800778c
  ldr r2, =_sbss
 8000b3c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000b40:	20001cf0 	.word	0x20001cf0

08000b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <HAL_Init+0x40>)
 8000b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_Init+0x40>)
 8000b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_Init+0x40>)
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f94f 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 f808 	bl	8000b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff fee2 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023c00 	.word	0x40023c00

08000b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_InitTick+0x54>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x58>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f967 	bl	8000e7e <HAL_SYSTICK_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00e      	b.n	8000bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d80a      	bhi.n	8000bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f000 f92f 	bl	8000e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bcc:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <HAL_InitTick+0x5c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000004 	.word	0x20000004

08000bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x20>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x24>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_IncTick+0x24>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000414 	.word	0x20000414

08000c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <HAL_GetTick+0x14>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000414 	.word	0x20000414

08000c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c34:	f7ff ffee 	bl	8000c14 <HAL_GetTick>
 8000c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c44:	d005      	beq.n	8000c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <HAL_Delay+0x44>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c52:	bf00      	nop
 8000c54:	f7ff ffde 	bl	8000c14 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d8f7      	bhi.n	8000c54 <HAL_Delay+0x28>
  {
  }
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000008 	.word	0x20000008

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db0b      	blt.n	8000d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f003 021f 	and.w	r2, r3, #31
 8000cf0:	4907      	ldr	r1, [pc, #28]	; (8000d10 <__NVIC_EnableIRQ+0x38>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	; (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	; (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	; 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de0:	d301      	bcc.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00f      	b.n	8000e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <SysTick_Config+0x40>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	210f      	movs	r1, #15
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f7ff ff8e 	bl	8000d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <SysTick_Config+0x40>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SysTick_Config+0x40>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff29 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3c:	f7ff ff3e 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	6978      	ldr	r0, [r7, #20]
 8000e48:	f7ff ff8e 	bl	8000d68 <NVIC_EncodePriority>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff5d 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff31 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffa2 	bl	8000dd0 <SysTick_Config>
 8000e8c:	4603      	mov	r3, r0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	e16b      	b.n	800118c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 815a 	bne.w	8001186 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d005      	beq.n	8000eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d130      	bne.n	8000f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d017      	beq.n	8000f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d123      	bne.n	8000fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	69b9      	ldr	r1, [r7, #24]
 8000fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80b4 	beq.w	8001186 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b60      	ldr	r3, [pc, #384]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a5f      	ldr	r2, [pc, #380]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b5d      	ldr	r3, [pc, #372]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	4a5b      	ldr	r2, [pc, #364]	; (80011a8 <HAL_GPIO_Init+0x310>)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a52      	ldr	r2, [pc, #328]	; (80011ac <HAL_GPIO_Init+0x314>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d02b      	beq.n	80010be <HAL_GPIO_Init+0x226>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a51      	ldr	r2, [pc, #324]	; (80011b0 <HAL_GPIO_Init+0x318>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d025      	beq.n	80010ba <HAL_GPIO_Init+0x222>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <HAL_GPIO_Init+0x31c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d01f      	beq.n	80010b6 <HAL_GPIO_Init+0x21e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4f      	ldr	r2, [pc, #316]	; (80011b8 <HAL_GPIO_Init+0x320>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d019      	beq.n	80010b2 <HAL_GPIO_Init+0x21a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4e      	ldr	r2, [pc, #312]	; (80011bc <HAL_GPIO_Init+0x324>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d013      	beq.n	80010ae <HAL_GPIO_Init+0x216>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4d      	ldr	r2, [pc, #308]	; (80011c0 <HAL_GPIO_Init+0x328>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d00d      	beq.n	80010aa <HAL_GPIO_Init+0x212>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4c      	ldr	r2, [pc, #304]	; (80011c4 <HAL_GPIO_Init+0x32c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d007      	beq.n	80010a6 <HAL_GPIO_Init+0x20e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4b      	ldr	r2, [pc, #300]	; (80011c8 <HAL_GPIO_Init+0x330>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_GPIO_Init+0x20a>
 800109e:	2307      	movs	r3, #7
 80010a0:	e00e      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010a2:	2308      	movs	r3, #8
 80010a4:	e00c      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010a6:	2306      	movs	r3, #6
 80010a8:	e00a      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010aa:	2305      	movs	r3, #5
 80010ac:	e008      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010ae:	2304      	movs	r3, #4
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e004      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010be:	2300      	movs	r3, #0
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	f002 0203 	and.w	r2, r2, #3
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4093      	lsls	r3, r2
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d0:	4935      	ldr	r1, [pc, #212]	; (80011a8 <HAL_GPIO_Init+0x310>)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010de:	4b3b      	ldr	r3, [pc, #236]	; (80011cc <HAL_GPIO_Init+0x334>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001102:	4a32      	ldr	r2, [pc, #200]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001108:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_GPIO_Init+0x334>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800112c:	4a27      	ldr	r2, [pc, #156]	; (80011cc <HAL_GPIO_Init+0x334>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001156:	4a1d      	ldr	r2, [pc, #116]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_GPIO_Init+0x334>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3301      	adds	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	2b0f      	cmp	r3, #15
 8001190:	f67f ae90 	bls.w	8000eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40013800 	.word	0x40013800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40021400 	.word	0x40021400
 80011c4:	40021800 	.word	0x40021800
 80011c8:	40021c00 	.word	0x40021c00
 80011cc:	40013c00 	.word	0x40013c00

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011ec:	e003      	b.n	80011f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	041a      	lsls	r2, r3, #16
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e12b      	b.n	800146e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d106      	bne.n	8001230 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fbb2 	bl	8000994 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2224      	movs	r2, #36	; 0x24
 8001234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0201 	bic.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001256:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001266:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001268:	f002 fd30 	bl	8003ccc <HAL_RCC_GetPCLK1Freq>
 800126c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4a81      	ldr	r2, [pc, #516]	; (8001478 <HAL_I2C_Init+0x274>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d807      	bhi.n	8001288 <HAL_I2C_Init+0x84>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4a80      	ldr	r2, [pc, #512]	; (800147c <HAL_I2C_Init+0x278>)
 800127c:	4293      	cmp	r3, r2
 800127e:	bf94      	ite	ls
 8001280:	2301      	movls	r3, #1
 8001282:	2300      	movhi	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	e006      	b.n	8001296 <HAL_I2C_Init+0x92>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4a7d      	ldr	r2, [pc, #500]	; (8001480 <HAL_I2C_Init+0x27c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	bf94      	ite	ls
 8001290:	2301      	movls	r3, #1
 8001292:	2300      	movhi	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e0e7      	b.n	800146e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4a78      	ldr	r2, [pc, #480]	; (8001484 <HAL_I2C_Init+0x280>)
 80012a2:	fba2 2303 	umull	r2, r3, r2, r3
 80012a6:	0c9b      	lsrs	r3, r3, #18
 80012a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a6a      	ldr	r2, [pc, #424]	; (8001478 <HAL_I2C_Init+0x274>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d802      	bhi.n	80012d8 <HAL_I2C_Init+0xd4>
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	3301      	adds	r3, #1
 80012d6:	e009      	b.n	80012ec <HAL_I2C_Init+0xe8>
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	4a69      	ldr	r2, [pc, #420]	; (8001488 <HAL_I2C_Init+0x284>)
 80012e4:	fba2 2303 	umull	r2, r3, r2, r3
 80012e8:	099b      	lsrs	r3, r3, #6
 80012ea:	3301      	adds	r3, #1
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	430b      	orrs	r3, r1
 80012f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	495c      	ldr	r1, [pc, #368]	; (8001478 <HAL_I2C_Init+0x274>)
 8001308:	428b      	cmp	r3, r1
 800130a:	d819      	bhi.n	8001340 <HAL_I2C_Init+0x13c>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1e59      	subs	r1, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	fbb1 f3f3 	udiv	r3, r1, r3
 800131a:	1c59      	adds	r1, r3, #1
 800131c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001320:	400b      	ands	r3, r1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00a      	beq.n	800133c <HAL_I2C_Init+0x138>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	1e59      	subs	r1, r3, #1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fbb1 f3f3 	udiv	r3, r1, r3
 8001334:	3301      	adds	r3, #1
 8001336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800133a:	e051      	b.n	80013e0 <HAL_I2C_Init+0x1dc>
 800133c:	2304      	movs	r3, #4
 800133e:	e04f      	b.n	80013e0 <HAL_I2C_Init+0x1dc>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d111      	bne.n	800136c <HAL_I2C_Init+0x168>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	1e58      	subs	r0, r3, #1
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	440b      	add	r3, r1
 8001356:	fbb0 f3f3 	udiv	r3, r0, r3
 800135a:	3301      	adds	r3, #1
 800135c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001360:	2b00      	cmp	r3, #0
 8001362:	bf0c      	ite	eq
 8001364:	2301      	moveq	r3, #1
 8001366:	2300      	movne	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	e012      	b.n	8001392 <HAL_I2C_Init+0x18e>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	1e58      	subs	r0, r3, #1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6859      	ldr	r1, [r3, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	0099      	lsls	r1, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001382:	3301      	adds	r3, #1
 8001384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf0c      	ite	eq
 800138c:	2301      	moveq	r3, #1
 800138e:	2300      	movne	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_I2C_Init+0x196>
 8001396:	2301      	movs	r3, #1
 8001398:	e022      	b.n	80013e0 <HAL_I2C_Init+0x1dc>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10e      	bne.n	80013c0 <HAL_I2C_Init+0x1bc>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	1e58      	subs	r0, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6859      	ldr	r1, [r3, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	440b      	add	r3, r1
 80013b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80013b4:	3301      	adds	r3, #1
 80013b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013be:	e00f      	b.n	80013e0 <HAL_I2C_Init+0x1dc>
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	1e58      	subs	r0, r3, #1
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6859      	ldr	r1, [r3, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	0099      	lsls	r1, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013d6:	3301      	adds	r3, #1
 80013d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	6809      	ldr	r1, [r1, #0]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69da      	ldr	r2, [r3, #28]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800140e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6911      	ldr	r1, [r2, #16]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68d2      	ldr	r2, [r2, #12]
 800141a:	4311      	orrs	r1, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	430b      	orrs	r3, r1
 8001422:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0201 	orr.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2220      	movs	r2, #32
 800145a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	000186a0 	.word	0x000186a0
 800147c:	001e847f 	.word	0x001e847f
 8001480:	003d08ff 	.word	0x003d08ff
 8001484:	431bde83 	.word	0x431bde83
 8001488:	10624dd3 	.word	0x10624dd3

0800148c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af02      	add	r7, sp, #8
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	461a      	mov	r2, r3
 8001498:	460b      	mov	r3, r1
 800149a:	817b      	strh	r3, [r7, #10]
 800149c:	4613      	mov	r3, r2
 800149e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff fbb8 	bl	8000c14 <HAL_GetTick>
 80014a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b20      	cmp	r3, #32
 80014b0:	f040 80e0 	bne.w	8001674 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2319      	movs	r3, #25
 80014ba:	2201      	movs	r2, #1
 80014bc:	4970      	ldr	r1, [pc, #448]	; (8001680 <HAL_I2C_Master_Transmit+0x1f4>)
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f000 fc58 	bl	8001d74 <I2C_WaitOnFlagUntilTimeout>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80014ca:	2302      	movs	r3, #2
 80014cc:	e0d3      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_I2C_Master_Transmit+0x50>
 80014d8:	2302      	movs	r3, #2
 80014da:	e0cc      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d007      	beq.n	8001502 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f042 0201 	orr.w	r2, r2, #1
 8001500:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001510:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2221      	movs	r2, #33	; 0x21
 8001516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2210      	movs	r2, #16
 800151e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	893a      	ldrh	r2, [r7, #8]
 8001532:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001538:	b29a      	uxth	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4a50      	ldr	r2, [pc, #320]	; (8001684 <HAL_I2C_Master_Transmit+0x1f8>)
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001544:	8979      	ldrh	r1, [r7, #10]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	6a3a      	ldr	r2, [r7, #32]
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 fac2 	bl	8001ad4 <I2C_MasterRequestWrite>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e08d      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001570:	e066      	b.n	8001640 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	6a39      	ldr	r1, [r7, #32]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 fcd2 	bl	8001f20 <I2C_WaitOnTXEFlagUntilTimeout>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00d      	beq.n	800159e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	2b04      	cmp	r3, #4
 8001588:	d107      	bne.n	800159a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001598:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e06b      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	781a      	ldrb	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	3b01      	subs	r3, #1
 80015bc:	b29a      	uxth	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d11b      	bne.n	8001614 <HAL_I2C_Master_Transmit+0x188>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d017      	beq.n	8001614 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	781a      	ldrb	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3b01      	subs	r3, #1
 8001602:	b29a      	uxth	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160c:	3b01      	subs	r3, #1
 800160e:	b29a      	uxth	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	6a39      	ldr	r1, [r7, #32]
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 fcc2 	bl	8001fa2 <I2C_WaitOnBTFFlagUntilTimeout>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00d      	beq.n	8001640 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	2b04      	cmp	r3, #4
 800162a:	d107      	bne.n	800163c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800163a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e01a      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001644:	2b00      	cmp	r3, #0
 8001646:	d194      	bne.n	8001572 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2220      	movs	r2, #32
 800165c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	e000      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001674:	2302      	movs	r3, #2
  }
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	00100002 	.word	0x00100002
 8001684:	ffff0000 	.word	0xffff0000

08001688 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08c      	sub	sp, #48	; 0x30
 800168c:	af02      	add	r7, sp, #8
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	461a      	mov	r2, r3
 8001694:	460b      	mov	r3, r1
 8001696:	817b      	strh	r3, [r7, #10]
 8001698:	4613      	mov	r3, r2
 800169a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff faba 	bl	8000c14 <HAL_GetTick>
 80016a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b20      	cmp	r3, #32
 80016ac:	f040 820b 	bne.w	8001ac6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2319      	movs	r3, #25
 80016b6:	2201      	movs	r2, #1
 80016b8:	497c      	ldr	r1, [pc, #496]	; (80018ac <HAL_I2C_Master_Receive+0x224>)
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 fb5a 	bl	8001d74 <I2C_WaitOnFlagUntilTimeout>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80016c6:	2302      	movs	r3, #2
 80016c8:	e1fe      	b.n	8001ac8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_I2C_Master_Receive+0x50>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e1f7      	b.n	8001ac8 <HAL_I2C_Master_Receive+0x440>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d007      	beq.n	80016fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0201 	orr.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800170c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2222      	movs	r2, #34	; 0x22
 8001712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2210      	movs	r2, #16
 800171a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	893a      	ldrh	r2, [r7, #8]
 800172e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001734:	b29a      	uxth	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4a5c      	ldr	r2, [pc, #368]	; (80018b0 <HAL_I2C_Master_Receive+0x228>)
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001740:	8979      	ldrh	r1, [r7, #10]
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 fa46 	bl	8001bd8 <I2C_MasterRequestRead>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e1b8      	b.n	8001ac8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175a:	2b00      	cmp	r3, #0
 800175c:	d113      	bne.n	8001786 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	623b      	str	r3, [r7, #32]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	623b      	str	r3, [r7, #32]
 8001772:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e18c      	b.n	8001aa0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178a:	2b01      	cmp	r3, #1
 800178c:	d11b      	bne.n	80017c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800179c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	e16c      	b.n	8001aa0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d11b      	bne.n	8001806 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	61bb      	str	r3, [r7, #24]
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	e14c      	b.n	8001aa0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001814:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800182c:	e138      	b.n	8001aa0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001832:	2b03      	cmp	r3, #3
 8001834:	f200 80f1 	bhi.w	8001a1a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183c:	2b01      	cmp	r3, #1
 800183e:	d123      	bne.n	8001888 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001842:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 fbed 	bl	8002024 <I2C_WaitOnRXNEFlagUntilTimeout>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e139      	b.n	8001ac8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	691a      	ldr	r2, [r3, #16]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001870:	3b01      	subs	r3, #1
 8001872:	b29a      	uxth	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800187c:	b29b      	uxth	r3, r3
 800187e:	3b01      	subs	r3, #1
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001886:	e10b      	b.n	8001aa0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188c:	2b02      	cmp	r3, #2
 800188e:	d14e      	bne.n	800192e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001896:	2200      	movs	r2, #0
 8001898:	4906      	ldr	r1, [pc, #24]	; (80018b4 <HAL_I2C_Master_Receive+0x22c>)
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f000 fa6a 	bl	8001d74 <I2C_WaitOnFlagUntilTimeout>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d008      	beq.n	80018b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e10e      	b.n	8001ac8 <HAL_I2C_Master_Receive+0x440>
 80018aa:	bf00      	nop
 80018ac:	00100002 	.word	0x00100002
 80018b0:	ffff0000 	.word	0xffff0000
 80018b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	691a      	ldr	r2, [r3, #16]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001916:	3b01      	subs	r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001922:	b29b      	uxth	r3, r3
 8001924:	3b01      	subs	r3, #1
 8001926:	b29a      	uxth	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800192c:	e0b8      	b.n	8001aa0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001934:	2200      	movs	r2, #0
 8001936:	4966      	ldr	r1, [pc, #408]	; (8001ad0 <HAL_I2C_Master_Receive+0x448>)
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 fa1b 	bl	8001d74 <I2C_WaitOnFlagUntilTimeout>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0bf      	b.n	8001ac8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	691a      	ldr	r2, [r3, #16]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001974:	3b01      	subs	r3, #1
 8001976:	b29a      	uxth	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001980:	b29b      	uxth	r3, r3
 8001982:	3b01      	subs	r3, #1
 8001984:	b29a      	uxth	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001990:	2200      	movs	r2, #0
 8001992:	494f      	ldr	r1, [pc, #316]	; (8001ad0 <HAL_I2C_Master_Receive+0x448>)
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 f9ed 	bl	8001d74 <I2C_WaitOnFlagUntilTimeout>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e091      	b.n	8001ac8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d0:	3b01      	subs	r3, #1
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019dc:	b29b      	uxth	r3, r3
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a02:	3b01      	subs	r3, #1
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a18:	e042      	b.n	8001aa0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 fb00 	bl	8002024 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e04c      	b.n	8001ac8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d118      	bne.n	8001aa0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f47f aec2 	bne.w	800182e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2220      	movs	r2, #32
 8001aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001ac6:	2302      	movs	r3, #2
  }
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3728      	adds	r7, #40	; 0x28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	00010004 	.word	0x00010004

08001ad4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d006      	beq.n	8001afe <I2C_MasterRequestWrite+0x2a>
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d003      	beq.n	8001afe <I2C_MasterRequestWrite+0x2a>
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001afc:	d108      	bne.n	8001b10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e00b      	b.n	8001b28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	2b12      	cmp	r3, #18
 8001b16:	d107      	bne.n	8001b28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 f91d 	bl	8001d74 <I2C_WaitOnFlagUntilTimeout>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00d      	beq.n	8001b5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b4e:	d103      	bne.n	8001b58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e035      	b.n	8001bc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b64:	d108      	bne.n	8001b78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b66:	897b      	ldrh	r3, [r7, #10]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b74:	611a      	str	r2, [r3, #16]
 8001b76:	e01b      	b.n	8001bb0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b78:	897b      	ldrh	r3, [r7, #10]
 8001b7a:	11db      	asrs	r3, r3, #7
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	f003 0306 	and.w	r3, r3, #6
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	f063 030f 	orn	r3, r3, #15
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	490e      	ldr	r1, [pc, #56]	; (8001bd0 <I2C_MasterRequestWrite+0xfc>)
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 f943 	bl	8001e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e010      	b.n	8001bc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ba6:	897b      	ldrh	r3, [r7, #10]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	4907      	ldr	r1, [pc, #28]	; (8001bd4 <I2C_MasterRequestWrite+0x100>)
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 f933 	bl	8001e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	00010008 	.word	0x00010008
 8001bd4:	00010002 	.word	0x00010002

08001bd8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	460b      	mov	r3, r1
 8001be6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bfc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d006      	beq.n	8001c12 <I2C_MasterRequestRead+0x3a>
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d003      	beq.n	8001c12 <I2C_MasterRequestRead+0x3a>
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c10:	d108      	bne.n	8001c24 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e00b      	b.n	8001c3c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	2b11      	cmp	r3, #17
 8001c2a:	d107      	bne.n	8001c3c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 f893 	bl	8001d74 <I2C_WaitOnFlagUntilTimeout>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00d      	beq.n	8001c70 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c62:	d103      	bne.n	8001c6c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e079      	b.n	8001d64 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c78:	d108      	bne.n	8001c8c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001c7a:	897b      	ldrh	r3, [r7, #10]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	611a      	str	r2, [r3, #16]
 8001c8a:	e05f      	b.n	8001d4c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c8c:	897b      	ldrh	r3, [r7, #10]
 8001c8e:	11db      	asrs	r3, r3, #7
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	f003 0306 	and.w	r3, r3, #6
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	f063 030f 	orn	r3, r3, #15
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	4930      	ldr	r1, [pc, #192]	; (8001d6c <I2C_MasterRequestRead+0x194>)
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 f8b9 	bl	8001e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e054      	b.n	8001d64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001cba:	897b      	ldrh	r3, [r7, #10]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4929      	ldr	r1, [pc, #164]	; (8001d70 <I2C_MasterRequestRead+0x198>)
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 f8a9 	bl	8001e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e044      	b.n	8001d64 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f831 	bl	8001d74 <I2C_WaitOnFlagUntilTimeout>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00d      	beq.n	8001d34 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d26:	d103      	bne.n	8001d30 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e017      	b.n	8001d64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001d34:	897b      	ldrh	r3, [r7, #10]
 8001d36:	11db      	asrs	r3, r3, #7
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	f003 0306 	and.w	r3, r3, #6
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f063 030e 	orn	r3, r3, #14
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	4907      	ldr	r1, [pc, #28]	; (8001d70 <I2C_MasterRequestRead+0x198>)
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 f865 	bl	8001e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	00010008 	.word	0x00010008
 8001d70:	00010002 	.word	0x00010002

08001d74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	4613      	mov	r3, r2
 8001d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d84:	e025      	b.n	8001dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d8c:	d021      	beq.n	8001dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d8e:	f7fe ff41 	bl	8000c14 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d302      	bcc.n	8001da4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d116      	bne.n	8001dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2220      	movs	r2, #32
 8001dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f043 0220 	orr.w	r2, r3, #32
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e023      	b.n	8001e1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	0c1b      	lsrs	r3, r3, #16
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d10d      	bne.n	8001df8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	43da      	mvns	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4013      	ands	r3, r2
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	bf0c      	ite	eq
 8001dee:	2301      	moveq	r3, #1
 8001df0:	2300      	movne	r3, #0
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	e00c      	b.n	8001e12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4013      	ands	r3, r2
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bf0c      	ite	eq
 8001e0a:	2301      	moveq	r3, #1
 8001e0c:	2300      	movne	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d0b6      	beq.n	8001d86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e30:	e051      	b.n	8001ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e40:	d123      	bne.n	8001e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2220      	movs	r2, #32
 8001e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f043 0204 	orr.w	r2, r3, #4
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e046      	b.n	8001f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e90:	d021      	beq.n	8001ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e92:	f7fe febf 	bl	8000c14 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d302      	bcc.n	8001ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d116      	bne.n	8001ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f043 0220 	orr.w	r2, r3, #32
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e020      	b.n	8001f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	0c1b      	lsrs	r3, r3, #16
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d10c      	bne.n	8001efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4013      	ands	r3, r2
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	bf14      	ite	ne
 8001ef2:	2301      	movne	r3, #1
 8001ef4:	2300      	moveq	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	e00b      	b.n	8001f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	43da      	mvns	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	4013      	ands	r3, r2
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf14      	ite	ne
 8001f0c:	2301      	movne	r3, #1
 8001f0e:	2300      	moveq	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d18d      	bne.n	8001e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f2c:	e02d      	b.n	8001f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 f8ce 	bl	80020d0 <I2C_IsAcknowledgeFailed>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e02d      	b.n	8001f9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d021      	beq.n	8001f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f46:	f7fe fe65 	bl	8000c14 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d302      	bcc.n	8001f5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d116      	bne.n	8001f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f043 0220 	orr.w	r2, r3, #32
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e007      	b.n	8001f9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f94:	2b80      	cmp	r3, #128	; 0x80
 8001f96:	d1ca      	bne.n	8001f2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fae:	e02d      	b.n	800200c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 f88d 	bl	80020d0 <I2C_IsAcknowledgeFailed>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e02d      	b.n	800201c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc6:	d021      	beq.n	800200c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc8:	f7fe fe24 	bl	8000c14 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d302      	bcc.n	8001fde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d116      	bne.n	800200c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	f043 0220 	orr.w	r2, r3, #32
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e007      	b.n	800201c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b04      	cmp	r3, #4
 8002018:	d1ca      	bne.n	8001fb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002030:	e042      	b.n	80020b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b10      	cmp	r3, #16
 800203e:	d119      	bne.n	8002074 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0210 	mvn.w	r2, #16
 8002048:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e029      	b.n	80020c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002074:	f7fe fdce 	bl	8000c14 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	429a      	cmp	r2, r3
 8002082:	d302      	bcc.n	800208a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d116      	bne.n	80020b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f043 0220 	orr.w	r2, r3, #32
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e007      	b.n	80020c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c2:	2b40      	cmp	r3, #64	; 0x40
 80020c4:	d1b5      	bne.n	8002032 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e6:	d11b      	bne.n	8002120 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f043 0204 	orr.w	r2, r3, #4
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800212e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002130:	b08f      	sub	sp, #60	; 0x3c
 8002132:	af0a      	add	r7, sp, #40	; 0x28
 8002134:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e10f      	b.n	8002360 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f004 ff84 	bl	8007068 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2203      	movs	r2, #3
 8002164:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d102      	bne.n	800217a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f001 fecd 	bl	8003f1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	687e      	ldr	r6, [r7, #4]
 800218c:	466d      	mov	r5, sp
 800218e:	f106 0410 	add.w	r4, r6, #16
 8002192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800219a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800219e:	e885 0003 	stmia.w	r5, {r0, r1}
 80021a2:	1d33      	adds	r3, r6, #4
 80021a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021a6:	6838      	ldr	r0, [r7, #0]
 80021a8:	f001 fda4 	bl	8003cf4 <USB_CoreInit>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d005      	beq.n	80021be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2202      	movs	r2, #2
 80021b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0d0      	b.n	8002360 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f001 febb 	bl	8003f40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	e04a      	b.n	8002266 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	333d      	adds	r3, #61	; 0x3d
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	333c      	adds	r3, #60	; 0x3c
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	b298      	uxth	r0, r3
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	3342      	adds	r3, #66	; 0x42
 800220c:	4602      	mov	r2, r0
 800220e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	333f      	adds	r3, #63	; 0x3f
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	3344      	adds	r3, #68	; 0x44
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	3348      	adds	r3, #72	; 0x48
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	3350      	adds	r3, #80	; 0x50
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	3301      	adds	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	429a      	cmp	r2, r3
 800226e:	d3af      	bcc.n	80021d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	e044      	b.n	8002300 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	1a9b      	subs	r3, r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	1a9b      	subs	r3, r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	3301      	adds	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	429a      	cmp	r2, r3
 8002308:	d3b5      	bcc.n	8002276 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	687e      	ldr	r6, [r7, #4]
 8002312:	466d      	mov	r5, sp
 8002314:	f106 0410 	add.w	r4, r6, #16
 8002318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800231a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800231c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800231e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002320:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002324:	e885 0003 	stmia.w	r5, {r0, r1}
 8002328:	1d33      	adds	r3, r6, #4
 800232a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800232c:	6838      	ldr	r0, [r7, #0]
 800232e:	f001 fe53 	bl	8003fd8 <USB_DevInit>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e00d      	b.n	8002360 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f002 fecf 	bl	80050fc <USB_DevDisconnect>

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002368 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_PCD_Start+0x1c>
 8002380:	2302      	movs	r3, #2
 8002382:	e020      	b.n	80023c6 <HAL_PCD_Start+0x5e>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	2b01      	cmp	r3, #1
 8002392:	d109      	bne.n	80023a8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002398:	2b01      	cmp	r3, #1
 800239a:	d005      	beq.n	80023a8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f001 fda5 	bl	8003efc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 fe7f 	bl	80050ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023ce:	b590      	push	{r4, r7, lr}
 80023d0:	b08d      	sub	sp, #52	; 0x34
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f002 ff3d 	bl	8005264 <USB_GetMode>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f040 839d 	bne.w	8002b2c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f002 fea1 	bl	800513e <USB_ReadInterrupts>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8393 	beq.w	8002b2a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f002 fe98 	bl	800513e <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b02      	cmp	r3, #2
 8002416:	d107      	bne.n	8002428 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695a      	ldr	r2, [r3, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f002 0202 	and.w	r2, r2, #2
 8002426:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f002 fe86 	bl	800513e <USB_ReadInterrupts>
 8002432:	4603      	mov	r3, r0
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b10      	cmp	r3, #16
 800243a:	d161      	bne.n	8002500 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0210 	bic.w	r2, r2, #16
 800244a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	f003 020f 	and.w	r2, r3, #15
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	4413      	add	r3, r2
 8002468:	3304      	adds	r3, #4
 800246a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	0c5b      	lsrs	r3, r3, #17
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	2b02      	cmp	r3, #2
 8002476:	d124      	bne.n	80024c2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800247e:	4013      	ands	r3, r2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d035      	beq.n	80024f0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	091b      	lsrs	r3, r3, #4
 800248c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800248e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002492:	b29b      	uxth	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	6a38      	ldr	r0, [r7, #32]
 8002498:	f002 fcbd 	bl	8004e16 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024a8:	441a      	add	r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ba:	441a      	add	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	619a      	str	r2, [r3, #24]
 80024c0:	e016      	b.n	80024f0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	0c5b      	lsrs	r3, r3, #17
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d110      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024d4:	2208      	movs	r2, #8
 80024d6:	4619      	mov	r1, r3
 80024d8:	6a38      	ldr	r0, [r7, #32]
 80024da:	f002 fc9c 	bl	8004e16 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	699a      	ldr	r2, [r3, #24]
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ea:	441a      	add	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0210 	orr.w	r2, r2, #16
 80024fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f002 fe1a 	bl	800513e <USB_ReadInterrupts>
 800250a:	4603      	mov	r3, r0
 800250c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002510:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002514:	d16e      	bne.n	80025f4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f002 fe20 	bl	8005164 <USB_ReadDevAllOutEpInterrupt>
 8002524:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002526:	e062      	b.n	80025ee <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d057      	beq.n	80025e2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f002 fe45 	bl	80051cc <USB_ReadDevOutEPInterrupt>
 8002542:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00c      	beq.n	8002568 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	4413      	add	r3, r2
 8002556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800255a:	461a      	mov	r2, r3
 800255c:	2301      	movs	r3, #1
 800255e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fdb0 	bl	80030c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00c      	beq.n	800258c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	4413      	add	r3, r2
 800257a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800257e:	461a      	mov	r2, r3
 8002580:	2308      	movs	r3, #8
 8002582:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 feaa 	bl	80032e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d008      	beq.n	80025a8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a2:	461a      	mov	r2, r3
 80025a4:	2310      	movs	r3, #16
 80025a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d008      	beq.n	80025c4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025be:	461a      	mov	r2, r3
 80025c0:	2320      	movs	r3, #32
 80025c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025da:	461a      	mov	r2, r3
 80025dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	3301      	adds	r3, #1
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ea:	085b      	lsrs	r3, r3, #1
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d199      	bne.n	8002528 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f002 fda0 	bl	800513e <USB_ReadInterrupts>
 80025fe:	4603      	mov	r3, r0
 8002600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002604:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002608:	f040 80c0 	bne.w	800278c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f002 fdc1 	bl	8005198 <USB_ReadDevAllInEpInterrupt>
 8002616:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800261c:	e0b2      	b.n	8002784 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80a7 	beq.w	8002778 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f002 fde7 	bl	8005208 <USB_ReadDevInEPInterrupt>
 800263a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d057      	beq.n	80026f6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	2201      	movs	r2, #1
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800265a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	43db      	mvns	r3, r3
 8002660:	69f9      	ldr	r1, [r7, #28]
 8002662:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002666:	4013      	ands	r3, r2
 8002668:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	4413      	add	r3, r2
 8002672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002676:	461a      	mov	r2, r3
 8002678:	2301      	movs	r3, #1
 800267a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d132      	bne.n	80026ea <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	3348      	adds	r3, #72	; 0x48
 8002694:	6819      	ldr	r1, [r3, #0]
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4403      	add	r3, r0
 80026a4:	3344      	adds	r3, #68	; 0x44
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4419      	add	r1, r3
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ae:	4613      	mov	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	1a9b      	subs	r3, r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4403      	add	r3, r0
 80026b8:	3348      	adds	r3, #72	; 0x48
 80026ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d113      	bne.n	80026ea <HAL_PCD_IRQHandler+0x31c>
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	3350      	adds	r3, #80	; 0x50
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d108      	bne.n	80026ea <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026e2:	461a      	mov	r2, r3
 80026e4:	2101      	movs	r1, #1
 80026e6:	f002 fdef 	bl	80052c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	4619      	mov	r1, r3
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f004 fd48 	bl	8007186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	4413      	add	r3, r2
 8002708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800270c:	461a      	mov	r2, r3
 800270e:	2308      	movs	r3, #8
 8002710:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	4413      	add	r3, r2
 8002724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002728:	461a      	mov	r2, r3
 800272a:	2310      	movs	r3, #16
 800272c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002744:	461a      	mov	r2, r3
 8002746:	2340      	movs	r3, #64	; 0x40
 8002748:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	4413      	add	r3, r2
 800275c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002760:	461a      	mov	r2, r3
 8002762:	2302      	movs	r3, #2
 8002764:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fc1b 	bl	8002fae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	3301      	adds	r3, #1
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002780:	085b      	lsrs	r3, r3, #1
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	2b00      	cmp	r3, #0
 8002788:	f47f af49 	bne.w	800261e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f002 fcd4 	bl	800513e <USB_ReadInterrupts>
 8002796:	4603      	mov	r3, r0
 8002798:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800279c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027a0:	d122      	bne.n	80027e8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d108      	bne.n	80027d2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027c8:	2100      	movs	r1, #0
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fe26 	bl	800341c <HAL_PCDEx_LPM_Callback>
 80027d0:	e002      	b.n	80027d8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f004 fd4e 	bl	8007274 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80027e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f002 fca6 	bl	800513e <USB_ReadInterrupts>
 80027f2:	4603      	mov	r3, r0
 80027f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027fc:	d112      	bne.n	8002824 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b01      	cmp	r3, #1
 800280c:	d102      	bne.n	8002814 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f004 fd0a 	bl	8007228 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002822:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f002 fc88 	bl	800513e <USB_ReadInterrupts>
 800282e:	4603      	mov	r3, r0
 8002830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002838:	f040 80c7 	bne.w	80029ca <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2110      	movs	r1, #16
 8002856:	4618      	mov	r0, r3
 8002858:	f001 fd22 	bl	80042a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285c:	2300      	movs	r3, #0
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002860:	e056      	b.n	8002910 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	4413      	add	r3, r2
 800286a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800286e:	461a      	mov	r2, r3
 8002870:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002874:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	4413      	add	r3, r2
 800287e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002886:	0151      	lsls	r1, r2, #5
 8002888:	69fa      	ldr	r2, [r7, #28]
 800288a:	440a      	add	r2, r1
 800288c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002890:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002894:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	4413      	add	r3, r2
 800289e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a6:	0151      	lsls	r1, r2, #5
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	440a      	add	r2, r1
 80028ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c2:	461a      	mov	r2, r3
 80028c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028da:	0151      	lsls	r1, r2, #5
 80028dc:	69fa      	ldr	r2, [r7, #28]
 80028de:	440a      	add	r2, r1
 80028e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028fa:	0151      	lsls	r1, r2, #5
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	440a      	add	r2, r1
 8002900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002904:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002908:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	3301      	adds	r3, #1
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002916:	429a      	cmp	r2, r3
 8002918:	d3a3      	bcc.n	8002862 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002928:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800292c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	2b00      	cmp	r3, #0
 8002934:	d016      	beq.n	8002964 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800293c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002946:	f043 030b 	orr.w	r3, r3, #11
 800294a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800295c:	f043 030b 	orr.w	r3, r3, #11
 8002960:	6453      	str	r3, [r2, #68]	; 0x44
 8002962:	e015      	b.n	8002990 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002972:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002976:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800297a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800298a:	f043 030b 	orr.w	r3, r3, #11
 800298e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800299e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80029a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029b4:	461a      	mov	r2, r3
 80029b6:	f002 fc87 	bl	80052c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80029c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f002 fbb5 	bl	800513e <USB_ReadInterrupts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029de:	d124      	bne.n	8002a2a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f002 fc4b 	bl	8005280 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f001 fcb3 	bl	800435a <USB_GetDevSpeed>
 80029f4:	4603      	mov	r3, r0
 80029f6:	461a      	mov	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681c      	ldr	r4, [r3, #0]
 8002a00:	f001 f958 	bl	8003cb4 <HAL_RCC_GetHCLKFreq>
 8002a04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4620      	mov	r0, r4
 8002a10:	f001 f9d2 	bl	8003db8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f004 fbde 	bl	80071d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f002 fb85 	bl	800513e <USB_ReadInterrupts>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d10a      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f004 fbbb 	bl	80071ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f002 0208 	and.w	r2, r2, #8
 8002a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f002 fb70 	bl	800513e <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a68:	d10f      	bne.n	8002a8a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	4619      	mov	r1, r3
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f004 fc1d 	bl	80072b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695a      	ldr	r2, [r3, #20]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f002 fb55 	bl	800513e <USB_ReadInterrupts>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a9e:	d10f      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f004 fbf0 	bl	8007290 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695a      	ldr	r2, [r3, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002abe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f002 fb3a 	bl	800513e <USB_ReadInterrupts>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad4:	d10a      	bne.n	8002aec <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f004 fbfe 	bl	80072d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f002 fb24 	bl	800513e <USB_ReadInterrupts>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d115      	bne.n	8002b2c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f004 fbee 	bl	80072f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6859      	ldr	r1, [r3, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	e000      	b.n	8002b2c <HAL_PCD_IRQHandler+0x75e>
      return;
 8002b2a:	bf00      	nop
    }
  }
}
 8002b2c:	3734      	adds	r7, #52	; 0x34
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd90      	pop	{r4, r7, pc}

08002b32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_PCD_SetAddress+0x1a>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e013      	b.n	8002b74 <HAL_PCD_SetAddress+0x42>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f002 fa82 	bl	800506e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	4608      	mov	r0, r1
 8002b86:	4611      	mov	r1, r2
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	70fb      	strb	r3, [r7, #3]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	803b      	strh	r3, [r7, #0]
 8002b92:	4613      	mov	r3, r2
 8002b94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	da0f      	bge.n	8002bc2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	f003 020f 	and.w	r2, r3, #15
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	3338      	adds	r3, #56	; 0x38
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	705a      	strb	r2, [r3, #1]
 8002bc0:	e00f      	b.n	8002be2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	f003 020f 	and.w	r2, r3, #15
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3304      	adds	r3, #4
 8002bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002bee:	883a      	ldrh	r2, [r7, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	78ba      	ldrb	r2, [r7, #2]
 8002bf8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	785b      	ldrb	r3, [r3, #1]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d004      	beq.n	8002c0c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c0c:	78bb      	ldrb	r3, [r7, #2]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d102      	bne.n	8002c18 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_PCD_EP_Open+0xaa>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e00e      	b.n	8002c44 <HAL_PCD_EP_Open+0xc8>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68f9      	ldr	r1, [r7, #12]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f001 fbb5 	bl	80043a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002c42:	7afb      	ldrb	r3, [r7, #11]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	da0f      	bge.n	8002c80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	f003 020f 	and.w	r2, r3, #15
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	3338      	adds	r3, #56	; 0x38
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	4413      	add	r3, r2
 8002c74:	3304      	adds	r3, #4
 8002c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	705a      	strb	r2, [r3, #1]
 8002c7e:	e00f      	b.n	8002ca0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	f003 020f 	and.w	r2, r3, #15
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	3304      	adds	r3, #4
 8002c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_PCD_EP_Close+0x6e>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e00e      	b.n	8002cd8 <HAL_PCD_EP_Close+0x8c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68f9      	ldr	r1, [r7, #12]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f001 fbf3 	bl	80044b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	460b      	mov	r3, r1
 8002cee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cf0:	7afb      	ldrb	r3, [r7, #11]
 8002cf2:	f003 020f 	and.w	r2, r3, #15
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4413      	add	r3, r2
 8002d06:	3304      	adds	r3, #4
 8002d08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d22:	7afb      	ldrb	r3, [r7, #11]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d102      	bne.n	8002d3c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d3c:	7afb      	ldrb	r3, [r7, #11]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	6979      	ldr	r1, [r7, #20]
 8002d54:	f001 fece 	bl	8004af4 <USB_EP0StartXfer>
 8002d58:	e008      	b.n	8002d6c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	6979      	ldr	r1, [r7, #20]
 8002d68:	f001 fc80 	bl	800466c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	f003 020f 	and.w	r2, r3, #15
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d98:	681b      	ldr	r3, [r3, #0]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b086      	sub	sp, #24
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	460b      	mov	r3, r1
 8002db4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db6:	7afb      	ldrb	r3, [r7, #11]
 8002db8:	f003 020f 	and.w	r2, r3, #15
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	3338      	adds	r3, #56	; 0x38
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4413      	add	r3, r2
 8002dca:	3304      	adds	r3, #4
 8002dcc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2201      	movs	r2, #1
 8002de4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002de6:	7afb      	ldrb	r3, [r7, #11]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d102      	bne.n	8002e00 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e00:	7afb      	ldrb	r3, [r7, #11]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	6979      	ldr	r1, [r7, #20]
 8002e18:	f001 fe6c 	bl	8004af4 <USB_EP0StartXfer>
 8002e1c:	e008      	b.n	8002e30 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	6979      	ldr	r1, [r7, #20]
 8002e2c:	f001 fc1e 	bl	800466c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e46:	78fb      	ldrb	r3, [r7, #3]
 8002e48:	f003 020f 	and.w	r2, r3, #15
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d901      	bls.n	8002e58 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e050      	b.n	8002efa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	da0f      	bge.n	8002e80 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	f003 020f 	and.w	r2, r3, #15
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	3338      	adds	r3, #56	; 0x38
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	3304      	adds	r3, #4
 8002e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	705a      	strb	r2, [r3, #1]
 8002e7e:	e00d      	b.n	8002e9c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	3304      	adds	r3, #4
 8002e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_PCD_EP_SetStall+0x82>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e01e      	b.n	8002efa <HAL_PCD_EP_SetStall+0xc0>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68f9      	ldr	r1, [r7, #12]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f001 fffb 	bl	8004ec6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10a      	bne.n	8002ef0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	b2d9      	uxtb	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002eea:	461a      	mov	r2, r3
 8002eec:	f002 f9ec 	bl	80052c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	f003 020f 	and.w	r2, r3, #15
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d901      	bls.n	8002f20 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e042      	b.n	8002fa6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	da0f      	bge.n	8002f48 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	f003 020f 	and.w	r2, r3, #15
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	3338      	adds	r3, #56	; 0x38
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	705a      	strb	r2, [r3, #1]
 8002f46:	e00f      	b.n	8002f68 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	f003 020f 	and.w	r2, r3, #15
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3304      	adds	r3, #4
 8002f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_PCD_EP_ClrStall+0x86>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e00e      	b.n	8002fa6 <HAL_PCD_EP_ClrStall+0xa4>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68f9      	ldr	r1, [r7, #12]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f002 f803 	bl	8004fa2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b08a      	sub	sp, #40	; 0x28
 8002fb2:	af02      	add	r7, sp, #8
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	3338      	adds	r3, #56	; 0x38
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d901      	bls.n	8002fe6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e06c      	b.n	80030c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d902      	bls.n	8003002 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3303      	adds	r3, #3
 8003006:	089b      	lsrs	r3, r3, #2
 8003008:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800300a:	e02b      	b.n	8003064 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	695a      	ldr	r2, [r3, #20]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	69fa      	ldr	r2, [r7, #28]
 800301e:	429a      	cmp	r2, r3
 8003020:	d902      	bls.n	8003028 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	3303      	adds	r3, #3
 800302c:	089b      	lsrs	r3, r3, #2
 800302e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	68d9      	ldr	r1, [r3, #12]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	b2da      	uxtb	r2, r3
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003040:	b2db      	uxtb	r3, r3
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	4603      	mov	r3, r0
 8003046:	6978      	ldr	r0, [r7, #20]
 8003048:	f001 fea7 	bl	8004d9a <USB_WritePacket>

    ep->xfer_buff  += len;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	441a      	add	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	699a      	ldr	r2, [r3, #24]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	441a      	add	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4413      	add	r3, r2
 800306c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	b29b      	uxth	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	429a      	cmp	r2, r3
 8003078:	d809      	bhi.n	800308e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003082:	429a      	cmp	r2, r3
 8003084:	d203      	bcs.n	800308e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1be      	bne.n	800300c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	429a      	cmp	r2, r3
 8003098:	d811      	bhi.n	80030be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	2201      	movs	r2, #1
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	6939      	ldr	r1, [r7, #16]
 80030b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030ba:	4013      	ands	r3, r2
 80030bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3720      	adds	r7, #32
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	333c      	adds	r3, #60	; 0x3c
 80030e0:	3304      	adds	r3, #4
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	f040 80a0 	bne.w	8003240 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d015      	beq.n	8003136 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4a72      	ldr	r2, [pc, #456]	; (80032d8 <PCD_EP_OutXfrComplete_int+0x210>)
 800310e:	4293      	cmp	r3, r2
 8003110:	f240 80dd 	bls.w	80032ce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 80d7 	beq.w	80032ce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4413      	add	r3, r2
 8003128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312c:	461a      	mov	r2, r3
 800312e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003132:	6093      	str	r3, [r2, #8]
 8003134:	e0cb      	b.n	80032ce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d009      	beq.n	8003154 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314c:	461a      	mov	r2, r3
 800314e:	2320      	movs	r3, #32
 8003150:	6093      	str	r3, [r2, #8]
 8003152:	e0bc      	b.n	80032ce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 80b7 	bne.w	80032ce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4a5d      	ldr	r2, [pc, #372]	; (80032d8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d90f      	bls.n	8003188 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317e:	461a      	mov	r2, r3
 8003180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003184:	6093      	str	r3, [r2, #8]
 8003186:	e0a2      	b.n	80032ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800319a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	0159      	lsls	r1, r3, #5
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	440b      	add	r3, r1
 80031a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80031ae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4403      	add	r3, r0
 80031be:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80031c2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	4613      	mov	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031d6:	6819      	ldr	r1, [r3, #0]
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4403      	add	r3, r0
 80031e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4419      	add	r1, r3
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	4613      	mov	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4403      	add	r3, r0
 80031fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003200:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d114      	bne.n	8003232 <PCD_EP_OutXfrComplete_int+0x16a>
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d108      	bne.n	8003232 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800322a:	461a      	mov	r2, r3
 800322c:	2101      	movs	r1, #1
 800322e:	f002 f84b 	bl	80052c8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	4619      	mov	r1, r3
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f003 ff89 	bl	8007150 <HAL_PCD_DataOutStageCallback>
 800323e:	e046      	b.n	80032ce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4a26      	ldr	r2, [pc, #152]	; (80032dc <PCD_EP_OutXfrComplete_int+0x214>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d124      	bne.n	8003292 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325e:	461a      	mov	r2, r3
 8003260:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003264:	6093      	str	r3, [r2, #8]
 8003266:	e032      	b.n	80032ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327e:	461a      	mov	r2, r3
 8003280:	2320      	movs	r3, #32
 8003282:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	4619      	mov	r1, r3
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f003 ff60 	bl	8007150 <HAL_PCD_DataOutStageCallback>
 8003290:	e01d      	b.n	80032ce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d114      	bne.n	80032c2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d108      	bne.n	80032c2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032ba:	461a      	mov	r2, r3
 80032bc:	2100      	movs	r1, #0
 80032be:	f002 f803 	bl	80052c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	4619      	mov	r1, r3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f003 ff41 	bl	8007150 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	4f54300a 	.word	0x4f54300a
 80032dc:	4f54310a 	.word	0x4f54310a

080032e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	333c      	adds	r3, #60	; 0x3c
 80032f8:	3304      	adds	r3, #4
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4413      	add	r3, r2
 8003306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a15      	ldr	r2, [pc, #84]	; (8003368 <PCD_EP_OutSetupPacket_int+0x88>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d90e      	bls.n	8003334 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800331c:	2b00      	cmp	r3, #0
 800331e:	d009      	beq.n	8003334 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4413      	add	r3, r2
 8003328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332c:	461a      	mov	r2, r3
 800332e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003332:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f003 fef9 	bl	800712c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a0a      	ldr	r2, [pc, #40]	; (8003368 <PCD_EP_OutSetupPacket_int+0x88>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d90c      	bls.n	800335c <PCD_EP_OutSetupPacket_int+0x7c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d108      	bne.n	800335c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003354:	461a      	mov	r2, r3
 8003356:	2101      	movs	r1, #1
 8003358:	f001 ffb6 	bl	80052c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	4f54300a 	.word	0x4f54300a

0800336c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	70fb      	strb	r3, [r7, #3]
 8003378:	4613      	mov	r3, r2
 800337a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d107      	bne.n	800339a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800338a:	883b      	ldrh	r3, [r7, #0]
 800338c:	0419      	lsls	r1, r3, #16
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	430a      	orrs	r2, r1
 8003396:	629a      	str	r2, [r3, #40]	; 0x28
 8003398:	e028      	b.n	80033ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	4413      	add	r3, r2
 80033a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033a8:	2300      	movs	r3, #0
 80033aa:	73fb      	strb	r3, [r7, #15]
 80033ac:	e00d      	b.n	80033ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	3340      	adds	r3, #64	; 0x40
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	0c1b      	lsrs	r3, r3, #16
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	4413      	add	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	3301      	adds	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
 80033ca:	7bfa      	ldrb	r2, [r7, #15]
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d3ec      	bcc.n	80033ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033d4:	883b      	ldrh	r3, [r7, #0]
 80033d6:	0418      	lsls	r0, r3, #16
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6819      	ldr	r1, [r3, #0]
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	3b01      	subs	r3, #1
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	4302      	orrs	r2, r0
 80033e4:	3340      	adds	r3, #64	; 0x40
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	460b      	mov	r3, r1
 8003404:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	887a      	ldrh	r2, [r7, #2]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e264      	b.n	8003910 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d075      	beq.n	800353e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003452:	4ba3      	ldr	r3, [pc, #652]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b04      	cmp	r3, #4
 800345c:	d00c      	beq.n	8003478 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345e:	4ba0      	ldr	r3, [pc, #640]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003466:	2b08      	cmp	r3, #8
 8003468:	d112      	bne.n	8003490 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346a:	4b9d      	ldr	r3, [pc, #628]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003476:	d10b      	bne.n	8003490 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	4b99      	ldr	r3, [pc, #612]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d05b      	beq.n	800353c <HAL_RCC_OscConfig+0x108>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d157      	bne.n	800353c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e23f      	b.n	8003910 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003498:	d106      	bne.n	80034a8 <HAL_RCC_OscConfig+0x74>
 800349a:	4b91      	ldr	r3, [pc, #580]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a90      	ldr	r2, [pc, #576]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	e01d      	b.n	80034e4 <HAL_RCC_OscConfig+0xb0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0x98>
 80034b2:	4b8b      	ldr	r3, [pc, #556]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a8a      	ldr	r2, [pc, #552]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	4b88      	ldr	r3, [pc, #544]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a87      	ldr	r2, [pc, #540]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	e00b      	b.n	80034e4 <HAL_RCC_OscConfig+0xb0>
 80034cc:	4b84      	ldr	r3, [pc, #528]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a83      	ldr	r2, [pc, #524]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	4b81      	ldr	r3, [pc, #516]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a80      	ldr	r2, [pc, #512]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80034de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d013      	beq.n	8003514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fd fb92 	bl	8000c14 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f4:	f7fd fb8e 	bl	8000c14 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b64      	cmp	r3, #100	; 0x64
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e204      	b.n	8003910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003506:	4b76      	ldr	r3, [pc, #472]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0xc0>
 8003512:	e014      	b.n	800353e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fd fb7e 	bl	8000c14 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800351c:	f7fd fb7a 	bl	8000c14 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	; 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e1f0      	b.n	8003910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352e:	4b6c      	ldr	r3, [pc, #432]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0xe8>
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d063      	beq.n	8003612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800354a:	4b65      	ldr	r3, [pc, #404]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00b      	beq.n	800356e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003556:	4b62      	ldr	r3, [pc, #392]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800355e:	2b08      	cmp	r3, #8
 8003560:	d11c      	bne.n	800359c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003562:	4b5f      	ldr	r3, [pc, #380]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d116      	bne.n	800359c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356e:	4b5c      	ldr	r3, [pc, #368]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_RCC_OscConfig+0x152>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d001      	beq.n	8003586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e1c4      	b.n	8003910 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003586:	4b56      	ldr	r3, [pc, #344]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4952      	ldr	r1, [pc, #328]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359a:	e03a      	b.n	8003612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d020      	beq.n	80035e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a4:	4b4f      	ldr	r3, [pc, #316]	; (80036e4 <HAL_RCC_OscConfig+0x2b0>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035aa:	f7fd fb33 	bl	8000c14 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b2:	f7fd fb2f 	bl	8000c14 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e1a5      	b.n	8003910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c4:	4b46      	ldr	r3, [pc, #280]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d0:	4b43      	ldr	r3, [pc, #268]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4940      	ldr	r1, [pc, #256]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	600b      	str	r3, [r1, #0]
 80035e4:	e015      	b.n	8003612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e6:	4b3f      	ldr	r3, [pc, #252]	; (80036e4 <HAL_RCC_OscConfig+0x2b0>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7fd fb12 	bl	8000c14 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035f4:	f7fd fb0e 	bl	8000c14 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e184      	b.n	8003910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003606:	4b36      	ldr	r3, [pc, #216]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d030      	beq.n	8003680 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d016      	beq.n	8003654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003626:	4b30      	ldr	r3, [pc, #192]	; (80036e8 <HAL_RCC_OscConfig+0x2b4>)
 8003628:	2201      	movs	r2, #1
 800362a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362c:	f7fd faf2 	bl	8000c14 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003634:	f7fd faee 	bl	8000c14 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e164      	b.n	8003910 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003646:	4b26      	ldr	r3, [pc, #152]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x200>
 8003652:	e015      	b.n	8003680 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003654:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <HAL_RCC_OscConfig+0x2b4>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365a:	f7fd fadb 	bl	8000c14 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003662:	f7fd fad7 	bl	8000c14 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e14d      	b.n	8003910 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003674:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f0      	bne.n	8003662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 80a0 	beq.w	80037ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800368e:	2300      	movs	r3, #0
 8003690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003692:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10f      	bne.n	80036be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a0e      	ldr	r2, [pc, #56]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ac:	6413      	str	r3, [r2, #64]	; 0x40
 80036ae:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ba:	2301      	movs	r3, #1
 80036bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036be:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <HAL_RCC_OscConfig+0x2b8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d121      	bne.n	800370e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ca:	4b08      	ldr	r3, [pc, #32]	; (80036ec <HAL_RCC_OscConfig+0x2b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a07      	ldr	r2, [pc, #28]	; (80036ec <HAL_RCC_OscConfig+0x2b8>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d6:	f7fd fa9d 	bl	8000c14 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036dc:	e011      	b.n	8003702 <HAL_RCC_OscConfig+0x2ce>
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800
 80036e4:	42470000 	.word	0x42470000
 80036e8:	42470e80 	.word	0x42470e80
 80036ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f0:	f7fd fa90 	bl	8000c14 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e106      	b.n	8003910 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003702:	4b85      	ldr	r3, [pc, #532]	; (8003918 <HAL_RCC_OscConfig+0x4e4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d106      	bne.n	8003724 <HAL_RCC_OscConfig+0x2f0>
 8003716:	4b81      	ldr	r3, [pc, #516]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	4a80      	ldr	r2, [pc, #512]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	6713      	str	r3, [r2, #112]	; 0x70
 8003722:	e01c      	b.n	800375e <HAL_RCC_OscConfig+0x32a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b05      	cmp	r3, #5
 800372a:	d10c      	bne.n	8003746 <HAL_RCC_OscConfig+0x312>
 800372c:	4b7b      	ldr	r3, [pc, #492]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4a7a      	ldr	r2, [pc, #488]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	6713      	str	r3, [r2, #112]	; 0x70
 8003738:	4b78      	ldr	r3, [pc, #480]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	4a77      	ldr	r2, [pc, #476]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6713      	str	r3, [r2, #112]	; 0x70
 8003744:	e00b      	b.n	800375e <HAL_RCC_OscConfig+0x32a>
 8003746:	4b75      	ldr	r3, [pc, #468]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a74      	ldr	r2, [pc, #464]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
 8003752:	4b72      	ldr	r3, [pc, #456]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	4a71      	ldr	r2, [pc, #452]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 8003758:	f023 0304 	bic.w	r3, r3, #4
 800375c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d015      	beq.n	8003792 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003766:	f7fd fa55 	bl	8000c14 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376c:	e00a      	b.n	8003784 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800376e:	f7fd fa51 	bl	8000c14 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	; 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0c5      	b.n	8003910 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003784:	4b65      	ldr	r3, [pc, #404]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ee      	beq.n	800376e <HAL_RCC_OscConfig+0x33a>
 8003790:	e014      	b.n	80037bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003792:	f7fd fa3f 	bl	8000c14 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003798:	e00a      	b.n	80037b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800379a:	f7fd fa3b 	bl	8000c14 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e0af      	b.n	8003910 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b0:	4b5a      	ldr	r3, [pc, #360]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1ee      	bne.n	800379a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d105      	bne.n	80037ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c2:	4b56      	ldr	r3, [pc, #344]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	4a55      	ldr	r2, [pc, #340]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 80037c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 809b 	beq.w	800390e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037d8:	4b50      	ldr	r3, [pc, #320]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 030c 	and.w	r3, r3, #12
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d05c      	beq.n	800389e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d141      	bne.n	8003870 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ec:	4b4c      	ldr	r3, [pc, #304]	; (8003920 <HAL_RCC_OscConfig+0x4ec>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f2:	f7fd fa0f 	bl	8000c14 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fa:	f7fd fa0b 	bl	8000c14 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e081      	b.n	8003910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380c:	4b43      	ldr	r3, [pc, #268]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f0      	bne.n	80037fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	019b      	lsls	r3, r3, #6
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	3b01      	subs	r3, #1
 8003832:	041b      	lsls	r3, r3, #16
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	061b      	lsls	r3, r3, #24
 800383c:	4937      	ldr	r1, [pc, #220]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 800383e:	4313      	orrs	r3, r2
 8003840:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003842:	4b37      	ldr	r3, [pc, #220]	; (8003920 <HAL_RCC_OscConfig+0x4ec>)
 8003844:	2201      	movs	r2, #1
 8003846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fd f9e4 	bl	8000c14 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003850:	f7fd f9e0 	bl	8000c14 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e056      	b.n	8003910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003862:	4b2e      	ldr	r3, [pc, #184]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0x41c>
 800386e:	e04e      	b.n	800390e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003870:	4b2b      	ldr	r3, [pc, #172]	; (8003920 <HAL_RCC_OscConfig+0x4ec>)
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003876:	f7fd f9cd 	bl	8000c14 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800387e:	f7fd f9c9 	bl	8000c14 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e03f      	b.n	8003910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003890:	4b22      	ldr	r3, [pc, #136]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f0      	bne.n	800387e <HAL_RCC_OscConfig+0x44a>
 800389c:	e037      	b.n	800390e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e032      	b.n	8003910 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038aa:	4b1c      	ldr	r3, [pc, #112]	; (800391c <HAL_RCC_OscConfig+0x4e8>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d028      	beq.n	800390a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d121      	bne.n	800390a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d11a      	bne.n	800390a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038da:	4013      	ands	r3, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d111      	bne.n	800390a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	3b01      	subs	r3, #1
 80038f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d107      	bne.n	800390a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d001      	beq.n	800390e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40007000 	.word	0x40007000
 800391c:	40023800 	.word	0x40023800
 8003920:	42470060 	.word	0x42470060

08003924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0cc      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003938:	4b68      	ldr	r3, [pc, #416]	; (8003adc <HAL_RCC_ClockConfig+0x1b8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d90c      	bls.n	8003960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003946:	4b65      	ldr	r3, [pc, #404]	; (8003adc <HAL_RCC_ClockConfig+0x1b8>)
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800394e:	4b63      	ldr	r3, [pc, #396]	; (8003adc <HAL_RCC_ClockConfig+0x1b8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d001      	beq.n	8003960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0b8      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d020      	beq.n	80039ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003978:	4b59      	ldr	r3, [pc, #356]	; (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	4a58      	ldr	r2, [pc, #352]	; (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003982:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003990:	4b53      	ldr	r3, [pc, #332]	; (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	4a52      	ldr	r2, [pc, #328]	; (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800399a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800399c:	4b50      	ldr	r3, [pc, #320]	; (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	494d      	ldr	r1, [pc, #308]	; (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d044      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d107      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c2:	4b47      	ldr	r3, [pc, #284]	; (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d119      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e07f      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d003      	beq.n	80039e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039de:	2b03      	cmp	r3, #3
 80039e0:	d107      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e2:	4b3f      	ldr	r3, [pc, #252]	; (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e06f      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f2:	4b3b      	ldr	r3, [pc, #236]	; (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e067      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a02:	4b37      	ldr	r3, [pc, #220]	; (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f023 0203 	bic.w	r2, r3, #3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4934      	ldr	r1, [pc, #208]	; (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a14:	f7fd f8fe 	bl	8000c14 <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a1c:	f7fd f8fa 	bl	8000c14 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e04f      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a32:	4b2b      	ldr	r3, [pc, #172]	; (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 020c 	and.w	r2, r3, #12
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d1eb      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a44:	4b25      	ldr	r3, [pc, #148]	; (8003adc <HAL_RCC_ClockConfig+0x1b8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d20c      	bcs.n	8003a6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	4b22      	ldr	r3, [pc, #136]	; (8003adc <HAL_RCC_ClockConfig+0x1b8>)
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5a:	4b20      	ldr	r3, [pc, #128]	; (8003adc <HAL_RCC_ClockConfig+0x1b8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e032      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a78:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4916      	ldr	r1, [pc, #88]	; (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a96:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	490e      	ldr	r1, [pc, #56]	; (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aaa:	f000 f821 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	490a      	ldr	r1, [pc, #40]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8003abc:	5ccb      	ldrb	r3, [r1, r3]
 8003abe:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac2:	4a09      	ldr	r2, [pc, #36]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fd f85e 	bl	8000b8c <HAL_InitTick>

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40023c00 	.word	0x40023c00
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	08007764 	.word	0x08007764
 8003ae8:	20000000 	.word	0x20000000
 8003aec:	20000004 	.word	0x20000004

08003af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003af4:	b084      	sub	sp, #16
 8003af6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	607b      	str	r3, [r7, #4]
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	2300      	movs	r3, #0
 8003b02:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b08:	4b67      	ldr	r3, [pc, #412]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 030c 	and.w	r3, r3, #12
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d00d      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0x40>
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	f200 80bd 	bhi.w	8003c94 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0x34>
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d003      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b22:	e0b7      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b24:	4b61      	ldr	r3, [pc, #388]	; (8003cac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b26:	60bb      	str	r3, [r7, #8]
       break;
 8003b28:	e0b7      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b2a:	4b61      	ldr	r3, [pc, #388]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003b2c:	60bb      	str	r3, [r7, #8]
      break;
 8003b2e:	e0b4      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b30:	4b5d      	ldr	r3, [pc, #372]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d04d      	beq.n	8003be2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b46:	4b58      	ldr	r3, [pc, #352]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	099b      	lsrs	r3, r3, #6
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b56:	f04f 0100 	mov.w	r1, #0
 8003b5a:	ea02 0800 	and.w	r8, r2, r0
 8003b5e:	ea03 0901 	and.w	r9, r3, r1
 8003b62:	4640      	mov	r0, r8
 8003b64:	4649      	mov	r1, r9
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	014b      	lsls	r3, r1, #5
 8003b70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b74:	0142      	lsls	r2, r0, #5
 8003b76:	4610      	mov	r0, r2
 8003b78:	4619      	mov	r1, r3
 8003b7a:	ebb0 0008 	subs.w	r0, r0, r8
 8003b7e:	eb61 0109 	sbc.w	r1, r1, r9
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	018b      	lsls	r3, r1, #6
 8003b8c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b90:	0182      	lsls	r2, r0, #6
 8003b92:	1a12      	subs	r2, r2, r0
 8003b94:	eb63 0301 	sbc.w	r3, r3, r1
 8003b98:	f04f 0000 	mov.w	r0, #0
 8003b9c:	f04f 0100 	mov.w	r1, #0
 8003ba0:	00d9      	lsls	r1, r3, #3
 8003ba2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ba6:	00d0      	lsls	r0, r2, #3
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	eb12 0208 	adds.w	r2, r2, r8
 8003bb0:	eb43 0309 	adc.w	r3, r3, r9
 8003bb4:	f04f 0000 	mov.w	r0, #0
 8003bb8:	f04f 0100 	mov.w	r1, #0
 8003bbc:	0259      	lsls	r1, r3, #9
 8003bbe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003bc2:	0250      	lsls	r0, r2, #9
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4610      	mov	r0, r2
 8003bca:	4619      	mov	r1, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	f7fc faf8 	bl	80001c8 <__aeabi_uldivmod>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4613      	mov	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	e04a      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be2:	4b31      	ldr	r3, [pc, #196]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	099b      	lsrs	r3, r3, #6
 8003be8:	461a      	mov	r2, r3
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bf2:	f04f 0100 	mov.w	r1, #0
 8003bf6:	ea02 0400 	and.w	r4, r2, r0
 8003bfa:	ea03 0501 	and.w	r5, r3, r1
 8003bfe:	4620      	mov	r0, r4
 8003c00:	4629      	mov	r1, r5
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	014b      	lsls	r3, r1, #5
 8003c0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c10:	0142      	lsls	r2, r0, #5
 8003c12:	4610      	mov	r0, r2
 8003c14:	4619      	mov	r1, r3
 8003c16:	1b00      	subs	r0, r0, r4
 8003c18:	eb61 0105 	sbc.w	r1, r1, r5
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	018b      	lsls	r3, r1, #6
 8003c26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c2a:	0182      	lsls	r2, r0, #6
 8003c2c:	1a12      	subs	r2, r2, r0
 8003c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c32:	f04f 0000 	mov.w	r0, #0
 8003c36:	f04f 0100 	mov.w	r1, #0
 8003c3a:	00d9      	lsls	r1, r3, #3
 8003c3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c40:	00d0      	lsls	r0, r2, #3
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	1912      	adds	r2, r2, r4
 8003c48:	eb45 0303 	adc.w	r3, r5, r3
 8003c4c:	f04f 0000 	mov.w	r0, #0
 8003c50:	f04f 0100 	mov.w	r1, #0
 8003c54:	0299      	lsls	r1, r3, #10
 8003c56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c5a:	0290      	lsls	r0, r2, #10
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	f7fc faac 	bl	80001c8 <__aeabi_uldivmod>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4613      	mov	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c78:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	0c1b      	lsrs	r3, r3, #16
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	3301      	adds	r3, #1
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c90:	60bb      	str	r3, [r7, #8]
      break;
 8003c92:	e002      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c96:	60bb      	str	r3, [r7, #8]
      break;
 8003c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	00f42400 	.word	0x00f42400
 8003cb0:	007a1200 	.word	0x007a1200

08003cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb8:	4b03      	ldr	r3, [pc, #12]	; (8003cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cba:	681b      	ldr	r3, [r3, #0]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	20000000 	.word	0x20000000

08003ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cd0:	f7ff fff0 	bl	8003cb4 <HAL_RCC_GetHCLKFreq>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	4b05      	ldr	r3, [pc, #20]	; (8003cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	0a9b      	lsrs	r3, r3, #10
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	4903      	ldr	r1, [pc, #12]	; (8003cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ce2:	5ccb      	ldrb	r3, [r1, r3]
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	08007774 	.word	0x08007774

08003cf4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	f107 001c 	add.w	r0, r7, #28
 8003d02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d122      	bne.n	8003d52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d105      	bne.n	8003d46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f001 fb1c 	bl	8005384 <USB_CoreReset>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	73fb      	strb	r3, [r7, #15]
 8003d50:	e01a      	b.n	8003d88 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f001 fb10 	bl	8005384 <USB_CoreReset>
 8003d64:	4603      	mov	r3, r0
 8003d66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	639a      	str	r2, [r3, #56]	; 0x38
 8003d7a:	e005      	b.n	8003d88 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d10b      	bne.n	8003da6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f043 0206 	orr.w	r2, r3, #6
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f043 0220 	orr.w	r2, r3, #32
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003db2:	b004      	add	sp, #16
 8003db4:	4770      	bx	lr
	...

08003db8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d165      	bne.n	8003e98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4a41      	ldr	r2, [pc, #260]	; (8003ed4 <USB_SetTurnaroundTime+0x11c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d906      	bls.n	8003de2 <USB_SetTurnaroundTime+0x2a>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4a40      	ldr	r2, [pc, #256]	; (8003ed8 <USB_SetTurnaroundTime+0x120>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d202      	bcs.n	8003de2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ddc:	230f      	movs	r3, #15
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	e062      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	4a3c      	ldr	r2, [pc, #240]	; (8003ed8 <USB_SetTurnaroundTime+0x120>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d306      	bcc.n	8003df8 <USB_SetTurnaroundTime+0x40>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4a3b      	ldr	r2, [pc, #236]	; (8003edc <USB_SetTurnaroundTime+0x124>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d202      	bcs.n	8003df8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003df2:	230e      	movs	r3, #14
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	e057      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4a38      	ldr	r2, [pc, #224]	; (8003edc <USB_SetTurnaroundTime+0x124>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d306      	bcc.n	8003e0e <USB_SetTurnaroundTime+0x56>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4a37      	ldr	r2, [pc, #220]	; (8003ee0 <USB_SetTurnaroundTime+0x128>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d202      	bcs.n	8003e0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003e08:	230d      	movs	r3, #13
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	e04c      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	4a33      	ldr	r2, [pc, #204]	; (8003ee0 <USB_SetTurnaroundTime+0x128>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d306      	bcc.n	8003e24 <USB_SetTurnaroundTime+0x6c>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4a32      	ldr	r2, [pc, #200]	; (8003ee4 <USB_SetTurnaroundTime+0x12c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d802      	bhi.n	8003e24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e1e:	230c      	movs	r3, #12
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	e041      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4a2f      	ldr	r2, [pc, #188]	; (8003ee4 <USB_SetTurnaroundTime+0x12c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d906      	bls.n	8003e3a <USB_SetTurnaroundTime+0x82>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4a2e      	ldr	r2, [pc, #184]	; (8003ee8 <USB_SetTurnaroundTime+0x130>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d802      	bhi.n	8003e3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003e34:	230b      	movs	r3, #11
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e036      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ee8 <USB_SetTurnaroundTime+0x130>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d906      	bls.n	8003e50 <USB_SetTurnaroundTime+0x98>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4a29      	ldr	r2, [pc, #164]	; (8003eec <USB_SetTurnaroundTime+0x134>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d802      	bhi.n	8003e50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003e4a:	230a      	movs	r3, #10
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e02b      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4a26      	ldr	r2, [pc, #152]	; (8003eec <USB_SetTurnaroundTime+0x134>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d906      	bls.n	8003e66 <USB_SetTurnaroundTime+0xae>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4a25      	ldr	r2, [pc, #148]	; (8003ef0 <USB_SetTurnaroundTime+0x138>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d202      	bcs.n	8003e66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003e60:	2309      	movs	r3, #9
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	e020      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4a21      	ldr	r2, [pc, #132]	; (8003ef0 <USB_SetTurnaroundTime+0x138>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d306      	bcc.n	8003e7c <USB_SetTurnaroundTime+0xc4>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	4a20      	ldr	r2, [pc, #128]	; (8003ef4 <USB_SetTurnaroundTime+0x13c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d802      	bhi.n	8003e7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003e76:	2308      	movs	r3, #8
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	e015      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ef4 <USB_SetTurnaroundTime+0x13c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d906      	bls.n	8003e92 <USB_SetTurnaroundTime+0xda>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4a1c      	ldr	r2, [pc, #112]	; (8003ef8 <USB_SetTurnaroundTime+0x140>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d202      	bcs.n	8003e92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003e8c:	2307      	movs	r3, #7
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	e00a      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003e92:	2306      	movs	r3, #6
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	e007      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d102      	bne.n	8003ea4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003e9e:	2309      	movs	r3, #9
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	e001      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003ea4:	2309      	movs	r3, #9
 8003ea6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	029b      	lsls	r3, r3, #10
 8003ebc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	371c      	adds	r7, #28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	00d8acbf 	.word	0x00d8acbf
 8003ed8:	00e4e1c0 	.word	0x00e4e1c0
 8003edc:	00f42400 	.word	0x00f42400
 8003ee0:	01067380 	.word	0x01067380
 8003ee4:	011a499f 	.word	0x011a499f
 8003ee8:	01312cff 	.word	0x01312cff
 8003eec:	014ca43f 	.word	0x014ca43f
 8003ef0:	016e3600 	.word	0x016e3600
 8003ef4:	01a6ab1f 	.word	0x01a6ab1f
 8003ef8:	01e84800 	.word	0x01e84800

08003efc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f043 0201 	orr.w	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f023 0201 	bic.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d115      	bne.n	8003f8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f6e:	2001      	movs	r0, #1
 8003f70:	f7fc fe5c 	bl	8000c2c <HAL_Delay>
      ms++;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3301      	adds	r3, #1
 8003f78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f001 f972 	bl	8005264 <USB_GetMode>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d01e      	beq.n	8003fc4 <USB_SetCurrentMode+0x84>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b31      	cmp	r3, #49	; 0x31
 8003f8a:	d9f0      	bls.n	8003f6e <USB_SetCurrentMode+0x2e>
 8003f8c:	e01a      	b.n	8003fc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f8e:	78fb      	ldrb	r3, [r7, #3]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d115      	bne.n	8003fc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	f7fc fe43 	bl	8000c2c <HAL_Delay>
      ms++;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f001 f959 	bl	8005264 <USB_GetMode>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <USB_SetCurrentMode+0x84>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b31      	cmp	r3, #49	; 0x31
 8003fbc:	d9f0      	bls.n	8003fa0 <USB_SetCurrentMode+0x60>
 8003fbe:	e001      	b.n	8003fc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e005      	b.n	8003fd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b32      	cmp	r3, #50	; 0x32
 8003fc8:	d101      	bne.n	8003fce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fd8:	b084      	sub	sp, #16
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b086      	sub	sp, #24
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003fe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	e009      	b.n	800400c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	3340      	adds	r3, #64	; 0x40
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	2200      	movs	r2, #0
 8004004:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	3301      	adds	r3, #1
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2b0e      	cmp	r3, #14
 8004010:	d9f2      	bls.n	8003ff8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d11c      	bne.n	8004052 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004026:	f043 0302 	orr.w	r3, r3, #2
 800402a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	639a      	str	r2, [r3, #56]	; 0x38
 8004050:	e00b      	b.n	800406a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004056:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004070:	461a      	mov	r2, r3
 8004072:	2300      	movs	r3, #0
 8004074:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407c:	4619      	mov	r1, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004084:	461a      	mov	r2, r3
 8004086:	680b      	ldr	r3, [r1, #0]
 8004088:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	2b01      	cmp	r3, #1
 800408e:	d10c      	bne.n	80040aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d104      	bne.n	80040a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004096:	2100      	movs	r1, #0
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f945 	bl	8004328 <USB_SetDevSpeed>
 800409e:	e008      	b.n	80040b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040a0:	2101      	movs	r1, #1
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f940 	bl	8004328 <USB_SetDevSpeed>
 80040a8:	e003      	b.n	80040b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040aa:	2103      	movs	r1, #3
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f93b 	bl	8004328 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040b2:	2110      	movs	r1, #16
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f8f3 	bl	80042a0 <USB_FlushTxFifo>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f90f 	bl	80042e8 <USB_FlushRxFifo>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040da:	461a      	mov	r2, r3
 80040dc:	2300      	movs	r3, #0
 80040de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e6:	461a      	mov	r2, r3
 80040e8:	2300      	movs	r3, #0
 80040ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f2:	461a      	mov	r2, r3
 80040f4:	2300      	movs	r3, #0
 80040f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040f8:	2300      	movs	r3, #0
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	e043      	b.n	8004186 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004110:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004114:	d118      	bne.n	8004148 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004128:	461a      	mov	r2, r3
 800412a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	e013      	b.n	800415a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413e:	461a      	mov	r2, r3
 8004140:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	e008      	b.n	800415a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004154:	461a      	mov	r2, r3
 8004156:	2300      	movs	r3, #0
 8004158:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004166:	461a      	mov	r2, r3
 8004168:	2300      	movs	r3, #0
 800416a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004178:	461a      	mov	r2, r3
 800417a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800417e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	3301      	adds	r3, #1
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	429a      	cmp	r2, r3
 800418c:	d3b7      	bcc.n	80040fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800418e:	2300      	movs	r3, #0
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	e043      	b.n	800421c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041aa:	d118      	bne.n	80041de <USB_DevInit+0x206>
    {
      if (i == 0U)
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041be:	461a      	mov	r2, r3
 80041c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	e013      	b.n	80041f0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d4:	461a      	mov	r2, r3
 80041d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	e008      	b.n	80041f0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ea:	461a      	mov	r2, r3
 80041ec:	2300      	movs	r3, #0
 80041ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fc:	461a      	mov	r2, r3
 80041fe:	2300      	movs	r3, #0
 8004200:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420e:	461a      	mov	r2, r3
 8004210:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004214:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	3301      	adds	r3, #1
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	429a      	cmp	r2, r3
 8004222:	d3b7      	bcc.n	8004194 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004232:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004236:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004244:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	2b00      	cmp	r3, #0
 800424a:	d105      	bne.n	8004258 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	f043 0210 	orr.w	r2, r3, #16
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	699a      	ldr	r2, [r3, #24]
 800425c:	4b0f      	ldr	r3, [pc, #60]	; (800429c <USB_DevInit+0x2c4>)
 800425e:	4313      	orrs	r3, r2
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d005      	beq.n	8004276 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f043 0208 	orr.w	r2, r3, #8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004278:	2b01      	cmp	r3, #1
 800427a:	d107      	bne.n	800428c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004284:	f043 0304 	orr.w	r3, r3, #4
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800428c:	7dfb      	ldrb	r3, [r7, #23]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004298:	b004      	add	sp, #16
 800429a:	4770      	bx	lr
 800429c:	803c3800 	.word	0x803c3800

080042a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	019b      	lsls	r3, r3, #6
 80042b2:	f043 0220 	orr.w	r2, r3, #32
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3301      	adds	r3, #1
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	4a08      	ldr	r2, [pc, #32]	; (80042e4 <USB_FlushTxFifo+0x44>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e006      	b.n	80042d8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b20      	cmp	r3, #32
 80042d4:	d0f1      	beq.n	80042ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	00030d40 	.word	0x00030d40

080042e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2210      	movs	r2, #16
 80042f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3301      	adds	r3, #1
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	4a08      	ldr	r2, [pc, #32]	; (8004324 <USB_FlushRxFifo+0x3c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d901      	bls.n	800430a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e006      	b.n	8004318 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	2b10      	cmp	r3, #16
 8004314:	d0f1      	beq.n	80042fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	00030d40 	.word	0x00030d40

08004328 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	68f9      	ldr	r1, [r7, #12]
 8004344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004348:	4313      	orrs	r3, r2
 800434a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800435a:	b480      	push	{r7}
 800435c:	b087      	sub	sp, #28
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 0306 	and.w	r3, r3, #6
 8004372:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d102      	bne.n	8004380 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800437a:	2300      	movs	r3, #0
 800437c:	75fb      	strb	r3, [r7, #23]
 800437e:	e00a      	b.n	8004396 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d002      	beq.n	800438c <USB_GetDevSpeed+0x32>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b06      	cmp	r3, #6
 800438a:	d102      	bne.n	8004392 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800438c:	2302      	movs	r3, #2
 800438e:	75fb      	strb	r3, [r7, #23]
 8004390:	e001      	b.n	8004396 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004392:	230f      	movs	r3, #15
 8004394:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004396:	7dfb      	ldrb	r3, [r7, #23]
}
 8004398:	4618      	mov	r0, r3
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	785b      	ldrb	r3, [r3, #1]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d13a      	bne.n	8004436 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	2101      	movs	r1, #1
 80043d2:	fa01 f303 	lsl.w	r3, r1, r3
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	68f9      	ldr	r1, [r7, #12]
 80043da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043de:	4313      	orrs	r3, r2
 80043e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d155      	bne.n	80044a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	78db      	ldrb	r3, [r3, #3]
 8004412:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004414:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	059b      	lsls	r3, r3, #22
 800441a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800441c:	4313      	orrs	r3, r2
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	0151      	lsls	r1, r2, #5
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	440a      	add	r2, r1
 8004426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800442a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	e036      	b.n	80044a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443c:	69da      	ldr	r2, [r3, #28]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	2101      	movs	r1, #1
 8004448:	fa01 f303 	lsl.w	r3, r1, r3
 800444c:	041b      	lsls	r3, r3, #16
 800444e:	68f9      	ldr	r1, [r7, #12]
 8004450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004454:	4313      	orrs	r3, r2
 8004456:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d11a      	bne.n	80044a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	78db      	ldrb	r3, [r3, #3]
 8004488:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800448a:	430b      	orrs	r3, r1
 800448c:	4313      	orrs	r3, r2
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	0151      	lsls	r1, r2, #5
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	440a      	add	r2, r1
 8004496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800449a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
	...

080044b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	785b      	ldrb	r3, [r3, #1]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d161      	bne.n	8004594 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044e6:	d11f      	bne.n	8004528 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	0151      	lsls	r1, r2, #5
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	440a      	add	r2, r1
 80044fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004502:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004506:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	0151      	lsls	r1, r2, #5
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	440a      	add	r2, r1
 800451e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004522:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004526:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	2101      	movs	r1, #1
 800453a:	fa01 f303 	lsl.w	r3, r1, r3
 800453e:	b29b      	uxth	r3, r3
 8004540:	43db      	mvns	r3, r3
 8004542:	68f9      	ldr	r1, [r7, #12]
 8004544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004548:	4013      	ands	r3, r2
 800454a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004552:	69da      	ldr	r2, [r3, #28]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	2101      	movs	r1, #1
 800455e:	fa01 f303 	lsl.w	r3, r1, r3
 8004562:	b29b      	uxth	r3, r3
 8004564:	43db      	mvns	r3, r3
 8004566:	68f9      	ldr	r1, [r7, #12]
 8004568:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800456c:	4013      	ands	r3, r2
 800456e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	0159      	lsls	r1, r3, #5
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	440b      	add	r3, r1
 8004586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458a:	4619      	mov	r1, r3
 800458c:	4b35      	ldr	r3, [pc, #212]	; (8004664 <USB_DeactivateEndpoint+0x1b0>)
 800458e:	4013      	ands	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
 8004592:	e060      	b.n	8004656 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045aa:	d11f      	bne.n	80045ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	0151      	lsls	r1, r2, #5
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	440a      	add	r2, r1
 80045c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	0151      	lsls	r1, r2, #5
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	440a      	add	r2, r1
 80045e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	2101      	movs	r1, #1
 80045fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004602:	041b      	lsls	r3, r3, #16
 8004604:	43db      	mvns	r3, r3
 8004606:	68f9      	ldr	r1, [r7, #12]
 8004608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800460c:	4013      	ands	r3, r2
 800460e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	2101      	movs	r1, #1
 8004622:	fa01 f303 	lsl.w	r3, r1, r3
 8004626:	041b      	lsls	r3, r3, #16
 8004628:	43db      	mvns	r3, r3
 800462a:	68f9      	ldr	r1, [r7, #12]
 800462c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004630:	4013      	ands	r3, r2
 8004632:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	0159      	lsls	r1, r3, #5
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	440b      	add	r3, r1
 800464a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464e:	4619      	mov	r1, r3
 8004650:	4b05      	ldr	r3, [pc, #20]	; (8004668 <USB_DeactivateEndpoint+0x1b4>)
 8004652:	4013      	ands	r3, r2
 8004654:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	ec337800 	.word	0xec337800
 8004668:	eff37800 	.word	0xeff37800

0800466c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af02      	add	r7, sp, #8
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	4613      	mov	r3, r2
 8004678:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	785b      	ldrb	r3, [r3, #1]
 8004688:	2b01      	cmp	r3, #1
 800468a:	f040 815c 	bne.w	8004946 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d132      	bne.n	80046fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	0151      	lsls	r1, r2, #5
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	440a      	add	r2, r1
 80046ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	0151      	lsls	r1, r2, #5
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	440a      	add	r2, r1
 80046d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	0151      	lsls	r1, r2, #5
 80046ec:	69fa      	ldr	r2, [r7, #28]
 80046ee:	440a      	add	r2, r1
 80046f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f4:	0cdb      	lsrs	r3, r3, #19
 80046f6:	04db      	lsls	r3, r3, #19
 80046f8:	6113      	str	r3, [r2, #16]
 80046fa:	e074      	b.n	80047e6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	0151      	lsls	r1, r2, #5
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	440a      	add	r2, r1
 8004712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004716:	0cdb      	lsrs	r3, r3, #19
 8004718:	04db      	lsls	r3, r3, #19
 800471a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	0151      	lsls	r1, r2, #5
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	440a      	add	r2, r1
 8004732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004736:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800473a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800473e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	6959      	ldr	r1, [r3, #20]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	440b      	add	r3, r1
 8004758:	1e59      	subs	r1, r3, #1
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004762:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004764:	4b9d      	ldr	r3, [pc, #628]	; (80049dc <USB_EPStartXfer+0x370>)
 8004766:	400b      	ands	r3, r1
 8004768:	69b9      	ldr	r1, [r7, #24]
 800476a:	0148      	lsls	r0, r1, #5
 800476c:	69f9      	ldr	r1, [r7, #28]
 800476e:	4401      	add	r1, r0
 8004770:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004774:	4313      	orrs	r3, r2
 8004776:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800478e:	69b9      	ldr	r1, [r7, #24]
 8004790:	0148      	lsls	r0, r1, #5
 8004792:	69f9      	ldr	r1, [r7, #28]
 8004794:	4401      	add	r1, r0
 8004796:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800479a:	4313      	orrs	r3, r2
 800479c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	78db      	ldrb	r3, [r3, #3]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d11f      	bne.n	80047e6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	0151      	lsls	r1, r2, #5
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	440a      	add	r2, r1
 80047bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80047c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	0151      	lsls	r1, r2, #5
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	440a      	add	r2, r1
 80047dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d14b      	bne.n	8004884 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d009      	beq.n	8004808 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004800:	461a      	mov	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	78db      	ldrb	r3, [r3, #3]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d128      	bne.n	8004862 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481c:	2b00      	cmp	r3, #0
 800481e:	d110      	bne.n	8004842 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	0151      	lsls	r1, r2, #5
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	440a      	add	r2, r1
 8004836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800483a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	e00f      	b.n	8004862 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	440a      	add	r2, r1
 8004858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004860:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	0151      	lsls	r1, r2, #5
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	440a      	add	r2, r1
 8004878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800487c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	e12f      	b.n	8004ae4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	0151      	lsls	r1, r2, #5
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	440a      	add	r2, r1
 800489a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800489e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	78db      	ldrb	r3, [r3, #3]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d015      	beq.n	80048d8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 8117 	beq.w	8004ae4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	2101      	movs	r1, #1
 80048c8:	fa01 f303 	lsl.w	r3, r1, r3
 80048cc:	69f9      	ldr	r1, [r7, #28]
 80048ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048d2:	4313      	orrs	r3, r2
 80048d4:	634b      	str	r3, [r1, #52]	; 0x34
 80048d6:	e105      	b.n	8004ae4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d110      	bne.n	800490a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	0151      	lsls	r1, r2, #5
 80048fa:	69fa      	ldr	r2, [r7, #28]
 80048fc:	440a      	add	r2, r1
 80048fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004902:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	e00f      	b.n	800492a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	0151      	lsls	r1, r2, #5
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	440a      	add	r2, r1
 8004920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004928:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	68d9      	ldr	r1, [r3, #12]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	781a      	ldrb	r2, [r3, #0]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	b298      	uxth	r0, r3
 8004938:	79fb      	ldrb	r3, [r7, #7]
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	4603      	mov	r3, r0
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fa2b 	bl	8004d9a <USB_WritePacket>
 8004944:	e0ce      	b.n	8004ae4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	0151      	lsls	r1, r2, #5
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	440a      	add	r2, r1
 800495c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004960:	0cdb      	lsrs	r3, r3, #19
 8004962:	04db      	lsls	r3, r3, #19
 8004964:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	0151      	lsls	r1, r2, #5
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	440a      	add	r2, r1
 800497c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004980:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004984:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004988:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d126      	bne.n	80049e0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049a8:	69b9      	ldr	r1, [r7, #24]
 80049aa:	0148      	lsls	r0, r1, #5
 80049ac:	69f9      	ldr	r1, [r7, #28]
 80049ae:	4401      	add	r1, r0
 80049b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049b4:	4313      	orrs	r3, r2
 80049b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	0151      	lsls	r1, r2, #5
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	440a      	add	r2, r1
 80049ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049d6:	6113      	str	r3, [r2, #16]
 80049d8:	e036      	b.n	8004a48 <USB_EPStartXfer+0x3dc>
 80049da:	bf00      	nop
 80049dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	695a      	ldr	r2, [r3, #20]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	4413      	add	r3, r2
 80049ea:	1e5a      	subs	r2, r3, #1
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	8afb      	ldrh	r3, [r7, #22]
 8004a06:	04d9      	lsls	r1, r3, #19
 8004a08:	4b39      	ldr	r3, [pc, #228]	; (8004af0 <USB_EPStartXfer+0x484>)
 8004a0a:	400b      	ands	r3, r1
 8004a0c:	69b9      	ldr	r1, [r7, #24]
 8004a0e:	0148      	lsls	r0, r1, #5
 8004a10:	69f9      	ldr	r1, [r7, #28]
 8004a12:	4401      	add	r1, r0
 8004a14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	8af9      	ldrh	r1, [r7, #22]
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
 8004a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a38:	69b9      	ldr	r1, [r7, #24]
 8004a3a:	0148      	lsls	r0, r1, #5
 8004a3c:	69f9      	ldr	r1, [r7, #28]
 8004a3e:	4401      	add	r1, r0
 8004a40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a44:	4313      	orrs	r3, r2
 8004a46:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d10d      	bne.n	8004a6a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	68d9      	ldr	r1, [r3, #12]
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a66:	460a      	mov	r2, r1
 8004a68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	78db      	ldrb	r3, [r3, #3]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d128      	bne.n	8004ac4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d110      	bne.n	8004aa4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	0151      	lsls	r1, r2, #5
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	440a      	add	r2, r1
 8004a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e00f      	b.n	8004ac4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	0151      	lsls	r1, r2, #5
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	440a      	add	r2, r1
 8004aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	0151      	lsls	r1, r2, #5
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	440a      	add	r2, r1
 8004ada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ade:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ae2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3720      	adds	r7, #32
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	1ff80000 	.word	0x1ff80000

08004af4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	4613      	mov	r3, r2
 8004b00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	785b      	ldrb	r3, [r3, #1]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	f040 80cd 	bne.w	8004cb0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d132      	bne.n	8004b84 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	0151      	lsls	r1, r2, #5
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	440a      	add	r2, r1
 8004b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	0151      	lsls	r1, r2, #5
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	440a      	add	r2, r1
 8004b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	0151      	lsls	r1, r2, #5
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	440a      	add	r2, r1
 8004b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b7c:	0cdb      	lsrs	r3, r3, #19
 8004b7e:	04db      	lsls	r3, r3, #19
 8004b80:	6113      	str	r3, [r2, #16]
 8004b82:	e04e      	b.n	8004c22 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	0151      	lsls	r1, r2, #5
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	440a      	add	r2, r1
 8004b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b9e:	0cdb      	lsrs	r3, r3, #19
 8004ba0:	04db      	lsls	r3, r3, #19
 8004ba2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	0151      	lsls	r1, r2, #5
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	440a      	add	r2, r1
 8004bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bbe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bc2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bc6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	695a      	ldr	r2, [r3, #20]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d903      	bls.n	8004bdc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	0151      	lsls	r1, r2, #5
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	691a      	ldr	r2, [r3, #16]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c12:	6939      	ldr	r1, [r7, #16]
 8004c14:	0148      	lsls	r0, r1, #5
 8004c16:	6979      	ldr	r1, [r7, #20]
 8004c18:	4401      	add	r1, r0
 8004c1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d11e      	bne.n	8004c66 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d009      	beq.n	8004c44 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	0151      	lsls	r1, r2, #5
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	440a      	add	r2, r1
 8004c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	e092      	b.n	8004d8c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	0151      	lsls	r1, r2, #5
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	440a      	add	r2, r1
 8004c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c84:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d07e      	beq.n	8004d8c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca4:	6979      	ldr	r1, [r7, #20]
 8004ca6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004caa:	4313      	orrs	r3, r2
 8004cac:	634b      	str	r3, [r1, #52]	; 0x34
 8004cae:	e06d      	b.n	8004d8c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	0151      	lsls	r1, r2, #5
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	440a      	add	r2, r1
 8004cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cca:	0cdb      	lsrs	r3, r3, #19
 8004ccc:	04db      	lsls	r3, r3, #19
 8004cce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	0151      	lsls	r1, r2, #5
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	440a      	add	r2, r1
 8004ce6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cf2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	0151      	lsls	r1, r2, #5
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	440a      	add	r2, r1
 8004d1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d30:	691a      	ldr	r2, [r3, #16]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d3a:	6939      	ldr	r1, [r7, #16]
 8004d3c:	0148      	lsls	r0, r1, #5
 8004d3e:	6979      	ldr	r1, [r7, #20]
 8004d40:	4401      	add	r1, r0
 8004d42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d46:	4313      	orrs	r3, r2
 8004d48:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d10d      	bne.n	8004d6c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d009      	beq.n	8004d6c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	68d9      	ldr	r1, [r3, #12]
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d68:	460a      	mov	r2, r1
 8004d6a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	0151      	lsls	r1, r2, #5
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	440a      	add	r2, r1
 8004d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b089      	sub	sp, #36	; 0x24
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	4611      	mov	r1, r2
 8004da6:	461a      	mov	r2, r3
 8004da8:	460b      	mov	r3, r1
 8004daa:	71fb      	strb	r3, [r7, #7]
 8004dac:	4613      	mov	r3, r2
 8004dae:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004db8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d123      	bne.n	8004e08 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004dc0:	88bb      	ldrh	r3, [r7, #4]
 8004dc2:	3303      	adds	r3, #3
 8004dc4:	089b      	lsrs	r3, r3, #2
 8004dc6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61bb      	str	r3, [r7, #24]
 8004dcc:	e018      	b.n	8004e00 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004dce:	79fb      	ldrb	r3, [r7, #7]
 8004dd0:	031a      	lsls	r2, r3, #12
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dda:	461a      	mov	r2, r3
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	3301      	adds	r3, #1
 8004de6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	3301      	adds	r3, #1
 8004dec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	3301      	adds	r3, #1
 8004df2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	3301      	adds	r3, #1
 8004df8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	61bb      	str	r3, [r7, #24]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d3e2      	bcc.n	8004dce <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3724      	adds	r7, #36	; 0x24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b08b      	sub	sp, #44	; 0x2c
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	4613      	mov	r3, r2
 8004e22:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e2c:	88fb      	ldrh	r3, [r7, #6]
 8004e2e:	089b      	lsrs	r3, r3, #2
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004e34:	88fb      	ldrh	r3, [r7, #6]
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	623b      	str	r3, [r7, #32]
 8004e40:	e014      	b.n	8004e6c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	3301      	adds	r3, #1
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	3301      	adds	r3, #1
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	3301      	adds	r3, #1
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	623b      	str	r3, [r7, #32]
 8004e6c:	6a3a      	ldr	r2, [r7, #32]
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d3e6      	bcc.n	8004e42 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004e74:	8bfb      	ldrh	r3, [r7, #30]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d01e      	beq.n	8004eb8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e84:	461a      	mov	r2, r3
 8004e86:	f107 0310 	add.w	r3, r7, #16
 8004e8a:	6812      	ldr	r2, [r2, #0]
 8004e8c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	701a      	strb	r2, [r3, #0]
      i++;
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004eac:	8bfb      	ldrh	r3, [r7, #30]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004eb2:	8bfb      	ldrh	r3, [r7, #30]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1ea      	bne.n	8004e8e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	372c      	adds	r7, #44	; 0x2c
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	785b      	ldrb	r3, [r3, #1]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d12c      	bne.n	8004f3c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	db12      	blt.n	8004f1a <USB_EPSetStall+0x54>
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00f      	beq.n	8004f1a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f18:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	0151      	lsls	r1, r2, #5
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	440a      	add	r2, r1
 8004f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	e02b      	b.n	8004f94 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	db12      	blt.n	8004f74 <USB_EPSetStall+0xae>
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00f      	beq.n	8004f74 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f72:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	0151      	lsls	r1, r2, #5
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	440a      	add	r2, r1
 8004f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b085      	sub	sp, #20
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	785b      	ldrb	r3, [r3, #1]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d128      	bne.n	8005010 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	0151      	lsls	r1, r2, #5
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	440a      	add	r2, r1
 8004fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fdc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	78db      	ldrb	r3, [r3, #3]
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d003      	beq.n	8004fee <USB_EPClearStall+0x4c>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	78db      	ldrb	r3, [r3, #3]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d138      	bne.n	8005060 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	0151      	lsls	r1, r2, #5
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	440a      	add	r2, r1
 8005004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	e027      	b.n	8005060 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	440a      	add	r2, r1
 8005026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800502a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800502e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	78db      	ldrb	r3, [r3, #3]
 8005034:	2b03      	cmp	r3, #3
 8005036:	d003      	beq.n	8005040 <USB_EPClearStall+0x9e>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	78db      	ldrb	r3, [r3, #3]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d10f      	bne.n	8005060 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	0151      	lsls	r1, r2, #5
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	440a      	add	r2, r1
 8005056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800505a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800506e:	b480      	push	{r7}
 8005070:	b085      	sub	sp, #20
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	460b      	mov	r3, r1
 8005078:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800508c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005090:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	78fb      	ldrb	r3, [r7, #3]
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80050a2:	68f9      	ldr	r1, [r7, #12]
 80050a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050a8:	4313      	orrs	r3, r2
 80050aa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b085      	sub	sp, #20
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80050d4:	f023 0303 	bic.w	r3, r3, #3
 80050d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050e8:	f023 0302 	bic.w	r3, r3, #2
 80050ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005116:	f023 0303 	bic.w	r3, r3, #3
 800511a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800512a:	f043 0302 	orr.w	r3, r3, #2
 800512e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4013      	ands	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005156:	68fb      	ldr	r3, [r7, #12]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	4013      	ands	r3, r2
 8005186:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	0c1b      	lsrs	r3, r3, #16
}
 800518c:	4618      	mov	r0, r3
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	4013      	ands	r3, r2
 80051ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	b29b      	uxth	r3, r3
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	4013      	ands	r3, r2
 80051f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051fa:	68bb      	ldr	r3, [r7, #8]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	fa22 f303 	lsr.w	r3, r2, r3
 8005238:	01db      	lsls	r3, r3, #7
 800523a:	b2db      	uxtb	r3, r3
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005242:	78fb      	ldrb	r3, [r7, #3]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4013      	ands	r3, r2
 8005254:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005256:	68bb      	ldr	r3, [r7, #8]
}
 8005258:	4618      	mov	r0, r3
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	f003 0301 	and.w	r3, r3, #1
}
 8005274:	4618      	mov	r0, r3
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800529a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800529e:	f023 0307 	bic.w	r3, r3, #7
 80052a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
	...

080052c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	460b      	mov	r3, r1
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	333c      	adds	r3, #60	; 0x3c
 80052de:	3304      	adds	r3, #4
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	4a26      	ldr	r2, [pc, #152]	; (8005380 <USB_EP0_OutStart+0xb8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d90a      	bls.n	8005302 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052fc:	d101      	bne.n	8005302 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	e037      	b.n	8005372 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005308:	461a      	mov	r2, r3
 800530a:	2300      	movs	r3, #0
 800530c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800531c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005320:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005330:	f043 0318 	orr.w	r3, r3, #24
 8005334:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005344:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005348:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800534a:	7afb      	ldrb	r3, [r7, #11]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d10f      	bne.n	8005370 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005356:	461a      	mov	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800536a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800536e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	4f54300a 	.word	0x4f54300a

08005384 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3301      	adds	r3, #1
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	4a13      	ldr	r2, [pc, #76]	; (80053e4 <USB_CoreReset+0x60>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d901      	bls.n	80053a0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e01a      	b.n	80053d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	daf3      	bge.n	8005390 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	f043 0201 	orr.w	r2, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	3301      	adds	r3, #1
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	4a09      	ldr	r2, [pc, #36]	; (80053e4 <USB_CoreReset+0x60>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d901      	bls.n	80053c8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e006      	b.n	80053d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d0f1      	beq.n	80053b8 <USB_CoreReset+0x34>

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	00030d40 	.word	0x00030d40

080053e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80053f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80053f8:	f002 f914 	bl	8007624 <USBD_static_malloc>
 80053fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d105      	bne.n	8005410 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800540c:	2302      	movs	r3, #2
 800540e:	e066      	b.n	80054de <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	7c1b      	ldrb	r3, [r3, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d119      	bne.n	8005454 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005424:	2202      	movs	r2, #2
 8005426:	2181      	movs	r1, #129	; 0x81
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f001 ffd8 	bl	80073de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005438:	2202      	movs	r2, #2
 800543a:	2101      	movs	r1, #1
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f001 ffce 	bl	80073de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2210      	movs	r2, #16
 800544e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005452:	e016      	b.n	8005482 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005454:	2340      	movs	r3, #64	; 0x40
 8005456:	2202      	movs	r2, #2
 8005458:	2181      	movs	r1, #129	; 0x81
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f001 ffbf 	bl	80073de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005466:	2340      	movs	r3, #64	; 0x40
 8005468:	2202      	movs	r2, #2
 800546a:	2101      	movs	r1, #1
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f001 ffb6 	bl	80073de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2210      	movs	r2, #16
 800547e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005482:	2308      	movs	r3, #8
 8005484:	2203      	movs	r2, #3
 8005486:	2182      	movs	r1, #130	; 0x82
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f001 ffa8 	bl	80073de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	7c1b      	ldrb	r3, [r3, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d109      	bne.n	80054cc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054c2:	2101      	movs	r1, #1
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f002 f879 	bl	80075bc <USBD_LL_PrepareReceive>
 80054ca:	e007      	b.n	80054dc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054d2:	2340      	movs	r3, #64	; 0x40
 80054d4:	2101      	movs	r1, #1
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f002 f870 	bl	80075bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b082      	sub	sp, #8
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	460b      	mov	r3, r1
 80054f0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80054f2:	2181      	movs	r1, #129	; 0x81
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f001 ff98 	bl	800742a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005500:	2101      	movs	r1, #1
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f001 ff91 	bl	800742a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005510:	2182      	movs	r1, #130	; 0x82
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f001 ff89 	bl	800742a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00e      	beq.n	8005550 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005542:	4618      	mov	r0, r3
 8005544:	f002 f87c 	bl	8007640 <USBD_static_free>
    pdev->pClassData = NULL;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800556c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005580:	2303      	movs	r3, #3
 8005582:	e0af      	b.n	80056e4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800558c:	2b00      	cmp	r3, #0
 800558e:	d03f      	beq.n	8005610 <USBD_CDC_Setup+0xb4>
 8005590:	2b20      	cmp	r3, #32
 8005592:	f040 809f 	bne.w	80056d4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	88db      	ldrh	r3, [r3, #6]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d02e      	beq.n	80055fc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	b25b      	sxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	da16      	bge.n	80055d6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	683a      	ldr	r2, [r7, #0]
 80055b2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80055b4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	88d2      	ldrh	r2, [r2, #6]
 80055ba:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	88db      	ldrh	r3, [r3, #6]
 80055c0:	2b07      	cmp	r3, #7
 80055c2:	bf28      	it	cs
 80055c4:	2307      	movcs	r3, #7
 80055c6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	89fa      	ldrh	r2, [r7, #14]
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f001 fae9 	bl	8006ba6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80055d4:	e085      	b.n	80056e2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	785a      	ldrb	r2, [r3, #1]
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	88db      	ldrh	r3, [r3, #6]
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80055ec:	6939      	ldr	r1, [r7, #16]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	88db      	ldrh	r3, [r3, #6]
 80055f2:	461a      	mov	r2, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f001 fb02 	bl	8006bfe <USBD_CtlPrepareRx>
      break;
 80055fa:	e072      	b.n	80056e2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	7850      	ldrb	r0, [r2, #1]
 8005608:	2200      	movs	r2, #0
 800560a:	6839      	ldr	r1, [r7, #0]
 800560c:	4798      	blx	r3
      break;
 800560e:	e068      	b.n	80056e2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	785b      	ldrb	r3, [r3, #1]
 8005614:	2b0b      	cmp	r3, #11
 8005616:	d852      	bhi.n	80056be <USBD_CDC_Setup+0x162>
 8005618:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <USBD_CDC_Setup+0xc4>)
 800561a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561e:	bf00      	nop
 8005620:	08005651 	.word	0x08005651
 8005624:	080056cd 	.word	0x080056cd
 8005628:	080056bf 	.word	0x080056bf
 800562c:	080056bf 	.word	0x080056bf
 8005630:	080056bf 	.word	0x080056bf
 8005634:	080056bf 	.word	0x080056bf
 8005638:	080056bf 	.word	0x080056bf
 800563c:	080056bf 	.word	0x080056bf
 8005640:	080056bf 	.word	0x080056bf
 8005644:	080056bf 	.word	0x080056bf
 8005648:	0800567b 	.word	0x0800567b
 800564c:	080056a5 	.word	0x080056a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b03      	cmp	r3, #3
 800565a:	d107      	bne.n	800566c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800565c:	f107 030a 	add.w	r3, r7, #10
 8005660:	2202      	movs	r2, #2
 8005662:	4619      	mov	r1, r3
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f001 fa9e 	bl	8006ba6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800566a:	e032      	b.n	80056d2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f001 fa28 	bl	8006ac4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005674:	2303      	movs	r3, #3
 8005676:	75fb      	strb	r3, [r7, #23]
          break;
 8005678:	e02b      	b.n	80056d2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b03      	cmp	r3, #3
 8005684:	d107      	bne.n	8005696 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005686:	f107 030d 	add.w	r3, r7, #13
 800568a:	2201      	movs	r2, #1
 800568c:	4619      	mov	r1, r3
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f001 fa89 	bl	8006ba6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005694:	e01d      	b.n	80056d2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f001 fa13 	bl	8006ac4 <USBD_CtlError>
            ret = USBD_FAIL;
 800569e:	2303      	movs	r3, #3
 80056a0:	75fb      	strb	r3, [r7, #23]
          break;
 80056a2:	e016      	b.n	80056d2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d00f      	beq.n	80056d0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80056b0:	6839      	ldr	r1, [r7, #0]
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f001 fa06 	bl	8006ac4 <USBD_CtlError>
            ret = USBD_FAIL;
 80056b8:	2303      	movs	r3, #3
 80056ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80056bc:	e008      	b.n	80056d0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80056be:	6839      	ldr	r1, [r7, #0]
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f001 f9ff 	bl	8006ac4 <USBD_CtlError>
          ret = USBD_FAIL;
 80056c6:	2303      	movs	r3, #3
 80056c8:	75fb      	strb	r3, [r7, #23]
          break;
 80056ca:	e002      	b.n	80056d2 <USBD_CDC_Setup+0x176>
          break;
 80056cc:	bf00      	nop
 80056ce:	e008      	b.n	80056e2 <USBD_CDC_Setup+0x186>
          break;
 80056d0:	bf00      	nop
      }
      break;
 80056d2:	e006      	b.n	80056e2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80056d4:	6839      	ldr	r1, [r7, #0]
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f001 f9f4 	bl	8006ac4 <USBD_CtlError>
      ret = USBD_FAIL;
 80056dc:	2303      	movs	r3, #3
 80056de:	75fb      	strb	r3, [r7, #23]
      break;
 80056e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80056e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3718      	adds	r7, #24
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80056fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800570a:	2303      	movs	r3, #3
 800570c:	e04f      	b.n	80057ae <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005714:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005716:	78fa      	ldrb	r2, [r7, #3]
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	440b      	add	r3, r1
 8005724:	3318      	adds	r3, #24
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d029      	beq.n	8005780 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800572c:	78fa      	ldrb	r2, [r7, #3]
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	4613      	mov	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	3318      	adds	r3, #24
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	78f9      	ldrb	r1, [r7, #3]
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	460b      	mov	r3, r1
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	1a5b      	subs	r3, r3, r1
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4403      	add	r3, r0
 800574c:	3344      	adds	r3, #68	; 0x44
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	fbb2 f1f3 	udiv	r1, r2, r3
 8005754:	fb03 f301 	mul.w	r3, r3, r1
 8005758:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800575a:	2b00      	cmp	r3, #0
 800575c:	d110      	bne.n	8005780 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800575e:	78fa      	ldrb	r2, [r7, #3]
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	3318      	adds	r3, #24
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005772:	78f9      	ldrb	r1, [r7, #3]
 8005774:	2300      	movs	r3, #0
 8005776:	2200      	movs	r2, #0
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f001 fefe 	bl	800757a <USBD_LL_Transmit>
 800577e:	e015      	b.n	80057ac <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2200      	movs	r2, #0
 8005784:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00b      	beq.n	80057ac <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80057a8:	78fa      	ldrb	r2, [r7, #3]
 80057aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	460b      	mov	r3, r1
 80057c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e015      	b.n	8005804 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80057d8:	78fb      	ldrb	r3, [r7, #3]
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f001 ff0e 	bl	80075fe <USBD_LL_GetRxDataSize>
 80057e2:	4602      	mov	r2, r0
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80057fe:	4611      	mov	r1, r2
 8005800:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800581a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005822:	2303      	movs	r3, #3
 8005824:	e01b      	b.n	800585e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d015      	beq.n	800585c <USBD_CDC_EP0_RxReady+0x50>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005836:	2bff      	cmp	r3, #255	; 0xff
 8005838:	d010      	beq.n	800585c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005848:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005850:	b292      	uxth	r2, r2
 8005852:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	22ff      	movs	r2, #255	; 0xff
 8005858:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2243      	movs	r2, #67	; 0x43
 8005874:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005876:	4b03      	ldr	r3, [pc, #12]	; (8005884 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005878:	4618      	mov	r0, r3
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	20000094 	.word	0x20000094

08005888 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2243      	movs	r2, #67	; 0x43
 8005894:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005896:	4b03      	ldr	r3, [pc, #12]	; (80058a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	20000050 	.word	0x20000050

080058a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2243      	movs	r2, #67	; 0x43
 80058b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80058b6:	4b03      	ldr	r3, [pc, #12]	; (80058c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	200000d8 	.word	0x200000d8

080058c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	220a      	movs	r2, #10
 80058d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80058d6:	4b03      	ldr	r3, [pc, #12]	; (80058e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	2000000c 	.word	0x2000000c

080058e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e004      	b.n	8005906 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005912:	b480      	push	{r7}
 8005914:	b087      	sub	sp, #28
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005924:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800592c:	2303      	movs	r3, #3
 800592e:	e008      	b.n	8005942 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800594e:	b480      	push	{r7}
 8005950:	b085      	sub	sp, #20
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800595e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005966:	2303      	movs	r3, #3
 8005968:	e004      	b.n	8005974 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800598e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800599a:	2303      	movs	r3, #3
 800599c:	e016      	b.n	80059cc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	7c1b      	ldrb	r3, [r3, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d109      	bne.n	80059ba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059b0:	2101      	movs	r1, #1
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f001 fe02 	bl	80075bc <USBD_LL_PrepareReceive>
 80059b8:	e007      	b.n	80059ca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059c0:	2340      	movs	r3, #64	; 0x40
 80059c2:	2101      	movs	r1, #1
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f001 fdf9 	bl	80075bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e01f      	b.n	8005a2c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	79fa      	ldrb	r2, [r7, #7]
 8005a1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f001 fc75 	bl	8007310 <USBD_LL_Init>
 8005a26:	4603      	mov	r3, r0
 8005a28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e016      	b.n	8005a7a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00b      	beq.n	8005a78 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a68:	f107 020e 	add.w	r2, r7, #14
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	4798      	blx	r3
 8005a70:	4602      	mov	r2, r0
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b082      	sub	sp, #8
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f001 fc8c 	bl	80073a8 <USBD_LL_Start>
 8005a90:	4603      	mov	r3, r0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005abc:	2303      	movs	r3, #3
 8005abe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d009      	beq.n	8005ade <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	78fa      	ldrb	r2, [r7, #3]
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	4798      	blx	r3
 8005ada:	4603      	mov	r3, r0
 8005adc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d007      	beq.n	8005b0e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	78fa      	ldrb	r2, [r7, #3]
 8005b08:	4611      	mov	r1, r2
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	4798      	blx	r3
  }

  return USBD_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 ff90 	bl	8006a50 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005b3e:	461a      	mov	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b4c:	f003 031f 	and.w	r3, r3, #31
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d01a      	beq.n	8005b8a <USBD_LL_SetupStage+0x72>
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d822      	bhi.n	8005b9e <USBD_LL_SetupStage+0x86>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <USBD_LL_SetupStage+0x4a>
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d00a      	beq.n	8005b76 <USBD_LL_SetupStage+0x5e>
 8005b60:	e01d      	b.n	8005b9e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b68:	4619      	mov	r1, r3
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fa62 	bl	8006034 <USBD_StdDevReq>
 8005b70:	4603      	mov	r3, r0
 8005b72:	73fb      	strb	r3, [r7, #15]
      break;
 8005b74:	e020      	b.n	8005bb8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fac6 	bl	8006110 <USBD_StdItfReq>
 8005b84:	4603      	mov	r3, r0
 8005b86:	73fb      	strb	r3, [r7, #15]
      break;
 8005b88:	e016      	b.n	8005bb8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fb05 	bl	80061a2 <USBD_StdEPReq>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b9c:	e00c      	b.n	8005bb8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ba4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	4619      	mov	r1, r3
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f001 fc5b 	bl	8007468 <USBD_LL_StallEP>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb6:	bf00      	nop
  }

  return ret;
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b086      	sub	sp, #24
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	460b      	mov	r3, r1
 8005bcc:	607a      	str	r2, [r7, #4]
 8005bce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005bd0:	7afb      	ldrb	r3, [r7, #11]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d138      	bne.n	8005c48 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005bdc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d14a      	bne.n	8005c7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d913      	bls.n	8005c1c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	1ad2      	subs	r2, r2, r3
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	bf28      	it	cs
 8005c0e:	4613      	movcs	r3, r2
 8005c10:	461a      	mov	r2, r3
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f001 f80f 	bl	8006c38 <USBD_CtlContinueRx>
 8005c1a:	e030      	b.n	8005c7e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d10b      	bne.n	8005c40 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d005      	beq.n	8005c40 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f001 f80a 	bl	8006c5a <USBD_CtlSendStatus>
 8005c46:	e01a      	b.n	8005c7e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d114      	bne.n	8005c7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00e      	beq.n	8005c7e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	7afa      	ldrb	r2, [r7, #11]
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	4798      	blx	r3
 8005c70:	4603      	mov	r3, r0
 8005c72:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
 8005c7c:	e000      	b.n	8005c80 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	460b      	mov	r3, r1
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005c96:	7afb      	ldrb	r3, [r7, #11]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d16b      	bne.n	8005d74 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3314      	adds	r3, #20
 8005ca0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d156      	bne.n	8005d5a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d914      	bls.n	8005ce2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	1ad2      	subs	r2, r2, r3
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 ff84 	bl	8006bdc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2100      	movs	r1, #0
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f001 fc6e 	bl	80075bc <USBD_LL_PrepareReceive>
 8005ce0:	e03b      	b.n	8005d5a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d11c      	bne.n	8005d28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d316      	bcc.n	8005d28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d20f      	bcs.n	8005d28 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 ff65 	bl	8006bdc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2100      	movs	r1, #0
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f001 fc4b 	bl	80075bc <USBD_LL_PrepareReceive>
 8005d26:	e018      	b.n	8005d5a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d10b      	bne.n	8005d4c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d005      	beq.n	8005d4c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d4c:	2180      	movs	r1, #128	; 0x80
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f001 fb8a 	bl	8007468 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 ff93 	bl	8006c80 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d122      	bne.n	8005daa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f7ff fe98 	bl	8005a9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005d72:	e01a      	b.n	8005daa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d114      	bne.n	8005daa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00e      	beq.n	8005daa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	7afa      	ldrb	r2, [r7, #11]
 8005d96:	4611      	mov	r1, r2
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	4798      	blx	r3
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005da0:	7dfb      	ldrb	r3, [r7, #23]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
 8005da8:	e000      	b.n	8005dac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e02f      	b.n	8005e48 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00f      	beq.n	8005e12 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6852      	ldr	r2, [r2, #4]
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e12:	2340      	movs	r3, #64	; 0x40
 8005e14:	2200      	movs	r2, #0
 8005e16:	2100      	movs	r1, #0
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f001 fae0 	bl	80073de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2240      	movs	r2, #64	; 0x40
 8005e2a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e2e:	2340      	movs	r3, #64	; 0x40
 8005e30:	2200      	movs	r2, #0
 8005e32:	2180      	movs	r1, #128	; 0x80
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f001 fad2 	bl	80073de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2240      	movs	r2, #64	; 0x40
 8005e44:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	78fa      	ldrb	r2, [r7, #3]
 8005e60:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2204      	movs	r2, #4
 8005e8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d106      	bne.n	8005ebe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e012      	b.n	8005f08 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b03      	cmp	r3, #3
 8005eec:	d10b      	bne.n	8005f06 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e014      	b.n	8005f54 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d10d      	bne.n	8005f52 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d007      	beq.n	8005f52 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	78fa      	ldrb	r2, [r7, #3]
 8005f4c:	4611      	mov	r1, r2
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	460b      	mov	r3, r1
 8005f66:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e014      	b.n	8005fa0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d10d      	bne.n	8005f9e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d007      	beq.n	8005f9e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	78fa      	ldrb	r2, [r7, #3]
 8005f98:	4611      	mov	r1, r2
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d009      	beq.n	8005fec <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6852      	ldr	r2, [r2, #4]
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	4798      	blx	r3
  }

  return USBD_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b087      	sub	sp, #28
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	3301      	adds	r3, #1
 800600c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006014:	8a3b      	ldrh	r3, [r7, #16]
 8006016:	021b      	lsls	r3, r3, #8
 8006018:	b21a      	sxth	r2, r3
 800601a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800601e:	4313      	orrs	r3, r2
 8006020:	b21b      	sxth	r3, r3
 8006022:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006024:	89fb      	ldrh	r3, [r7, #14]
}
 8006026:	4618      	mov	r0, r3
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
	...

08006034 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800604a:	2b40      	cmp	r3, #64	; 0x40
 800604c:	d005      	beq.n	800605a <USBD_StdDevReq+0x26>
 800604e:	2b40      	cmp	r3, #64	; 0x40
 8006050:	d853      	bhi.n	80060fa <USBD_StdDevReq+0xc6>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00b      	beq.n	800606e <USBD_StdDevReq+0x3a>
 8006056:	2b20      	cmp	r3, #32
 8006058:	d14f      	bne.n	80060fa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
 8006068:	4603      	mov	r3, r0
 800606a:	73fb      	strb	r3, [r7, #15]
      break;
 800606c:	e04a      	b.n	8006104 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	785b      	ldrb	r3, [r3, #1]
 8006072:	2b09      	cmp	r3, #9
 8006074:	d83b      	bhi.n	80060ee <USBD_StdDevReq+0xba>
 8006076:	a201      	add	r2, pc, #4	; (adr r2, 800607c <USBD_StdDevReq+0x48>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	080060d1 	.word	0x080060d1
 8006080:	080060e5 	.word	0x080060e5
 8006084:	080060ef 	.word	0x080060ef
 8006088:	080060db 	.word	0x080060db
 800608c:	080060ef 	.word	0x080060ef
 8006090:	080060af 	.word	0x080060af
 8006094:	080060a5 	.word	0x080060a5
 8006098:	080060ef 	.word	0x080060ef
 800609c:	080060c7 	.word	0x080060c7
 80060a0:	080060b9 	.word	0x080060b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80060a4:	6839      	ldr	r1, [r7, #0]
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f9de 	bl	8006468 <USBD_GetDescriptor>
          break;
 80060ac:	e024      	b.n	80060f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80060ae:	6839      	ldr	r1, [r7, #0]
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fb43 	bl	800673c <USBD_SetAddress>
          break;
 80060b6:	e01f      	b.n	80060f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fb82 	bl	80067c4 <USBD_SetConfig>
 80060c0:	4603      	mov	r3, r0
 80060c2:	73fb      	strb	r3, [r7, #15]
          break;
 80060c4:	e018      	b.n	80060f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fc21 	bl	8006910 <USBD_GetConfig>
          break;
 80060ce:	e013      	b.n	80060f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fc52 	bl	800697c <USBD_GetStatus>
          break;
 80060d8:	e00e      	b.n	80060f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fc81 	bl	80069e4 <USBD_SetFeature>
          break;
 80060e2:	e009      	b.n	80060f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fc90 	bl	8006a0c <USBD_ClrFeature>
          break;
 80060ec:	e004      	b.n	80060f8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fce7 	bl	8006ac4 <USBD_CtlError>
          break;
 80060f6:	bf00      	nop
      }
      break;
 80060f8:	e004      	b.n	8006104 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fce1 	bl	8006ac4 <USBD_CtlError>
      break;
 8006102:	bf00      	nop
  }

  return ret;
 8006104:	7bfb      	ldrb	r3, [r7, #15]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop

08006110 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006126:	2b40      	cmp	r3, #64	; 0x40
 8006128:	d005      	beq.n	8006136 <USBD_StdItfReq+0x26>
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d82f      	bhi.n	800618e <USBD_StdItfReq+0x7e>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <USBD_StdItfReq+0x26>
 8006132:	2b20      	cmp	r3, #32
 8006134:	d12b      	bne.n	800618e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800613c:	b2db      	uxtb	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	2b02      	cmp	r3, #2
 8006142:	d81d      	bhi.n	8006180 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	889b      	ldrh	r3, [r3, #4]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b01      	cmp	r3, #1
 800614c:	d813      	bhi.n	8006176 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	6839      	ldr	r1, [r7, #0]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	4798      	blx	r3
 800615c:	4603      	mov	r3, r0
 800615e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	88db      	ldrh	r3, [r3, #6]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d110      	bne.n	800618a <USBD_StdItfReq+0x7a>
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10d      	bne.n	800618a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fd73 	bl	8006c5a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006174:	e009      	b.n	800618a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006176:	6839      	ldr	r1, [r7, #0]
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fca3 	bl	8006ac4 <USBD_CtlError>
          break;
 800617e:	e004      	b.n	800618a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fc9e 	bl	8006ac4 <USBD_CtlError>
          break;
 8006188:	e000      	b.n	800618c <USBD_StdItfReq+0x7c>
          break;
 800618a:	bf00      	nop
      }
      break;
 800618c:	e004      	b.n	8006198 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fc97 	bl	8006ac4 <USBD_CtlError>
      break;
 8006196:	bf00      	nop
  }

  return ret;
 8006198:	7bfb      	ldrb	r3, [r7, #15]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	889b      	ldrh	r3, [r3, #4]
 80061b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061be:	2b40      	cmp	r3, #64	; 0x40
 80061c0:	d007      	beq.n	80061d2 <USBD_StdEPReq+0x30>
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	f200 8145 	bhi.w	8006452 <USBD_StdEPReq+0x2b0>
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00c      	beq.n	80061e6 <USBD_StdEPReq+0x44>
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	f040 8140 	bne.w	8006452 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	6839      	ldr	r1, [r7, #0]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	4798      	blx	r3
 80061e0:	4603      	mov	r3, r0
 80061e2:	73fb      	strb	r3, [r7, #15]
      break;
 80061e4:	e13a      	b.n	800645c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d007      	beq.n	80061fe <USBD_StdEPReq+0x5c>
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	f300 8129 	bgt.w	8006446 <USBD_StdEPReq+0x2a4>
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d07f      	beq.n	80062f8 <USBD_StdEPReq+0x156>
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d03c      	beq.n	8006276 <USBD_StdEPReq+0xd4>
 80061fc:	e123      	b.n	8006446 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d002      	beq.n	8006210 <USBD_StdEPReq+0x6e>
 800620a:	2b03      	cmp	r3, #3
 800620c:	d016      	beq.n	800623c <USBD_StdEPReq+0x9a>
 800620e:	e02c      	b.n	800626a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006210:	7bbb      	ldrb	r3, [r7, #14]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00d      	beq.n	8006232 <USBD_StdEPReq+0x90>
 8006216:	7bbb      	ldrb	r3, [r7, #14]
 8006218:	2b80      	cmp	r3, #128	; 0x80
 800621a:	d00a      	beq.n	8006232 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800621c:	7bbb      	ldrb	r3, [r7, #14]
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f001 f921 	bl	8007468 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006226:	2180      	movs	r1, #128	; 0x80
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 f91d 	bl	8007468 <USBD_LL_StallEP>
 800622e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006230:	e020      	b.n	8006274 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fc45 	bl	8006ac4 <USBD_CtlError>
              break;
 800623a:	e01b      	b.n	8006274 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	885b      	ldrh	r3, [r3, #2]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10e      	bne.n	8006262 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006244:	7bbb      	ldrb	r3, [r7, #14]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00b      	beq.n	8006262 <USBD_StdEPReq+0xc0>
 800624a:	7bbb      	ldrb	r3, [r7, #14]
 800624c:	2b80      	cmp	r3, #128	; 0x80
 800624e:	d008      	beq.n	8006262 <USBD_StdEPReq+0xc0>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	88db      	ldrh	r3, [r3, #6]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d104      	bne.n	8006262 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006258:	7bbb      	ldrb	r3, [r7, #14]
 800625a:	4619      	mov	r1, r3
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f001 f903 	bl	8007468 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fcf9 	bl	8006c5a <USBD_CtlSendStatus>

              break;
 8006268:	e004      	b.n	8006274 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800626a:	6839      	ldr	r1, [r7, #0]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fc29 	bl	8006ac4 <USBD_CtlError>
              break;
 8006272:	bf00      	nop
          }
          break;
 8006274:	e0ec      	b.n	8006450 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d002      	beq.n	8006288 <USBD_StdEPReq+0xe6>
 8006282:	2b03      	cmp	r3, #3
 8006284:	d016      	beq.n	80062b4 <USBD_StdEPReq+0x112>
 8006286:	e030      	b.n	80062ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006288:	7bbb      	ldrb	r3, [r7, #14]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00d      	beq.n	80062aa <USBD_StdEPReq+0x108>
 800628e:	7bbb      	ldrb	r3, [r7, #14]
 8006290:	2b80      	cmp	r3, #128	; 0x80
 8006292:	d00a      	beq.n	80062aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006294:	7bbb      	ldrb	r3, [r7, #14]
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f001 f8e5 	bl	8007468 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800629e:	2180      	movs	r1, #128	; 0x80
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f001 f8e1 	bl	8007468 <USBD_LL_StallEP>
 80062a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062a8:	e025      	b.n	80062f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fc09 	bl	8006ac4 <USBD_CtlError>
              break;
 80062b2:	e020      	b.n	80062f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	885b      	ldrh	r3, [r3, #2]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d11b      	bne.n	80062f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80062bc:	7bbb      	ldrb	r3, [r7, #14]
 80062be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d004      	beq.n	80062d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80062c6:	7bbb      	ldrb	r3, [r7, #14]
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 f8eb 	bl	80074a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fcc2 	bl	8006c5a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	6839      	ldr	r1, [r7, #0]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	4798      	blx	r3
 80062e4:	4603      	mov	r3, r0
 80062e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80062e8:	e004      	b.n	80062f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80062ea:	6839      	ldr	r1, [r7, #0]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fbe9 	bl	8006ac4 <USBD_CtlError>
              break;
 80062f2:	e000      	b.n	80062f6 <USBD_StdEPReq+0x154>
              break;
 80062f4:	bf00      	nop
          }
          break;
 80062f6:	e0ab      	b.n	8006450 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d002      	beq.n	800630a <USBD_StdEPReq+0x168>
 8006304:	2b03      	cmp	r3, #3
 8006306:	d032      	beq.n	800636e <USBD_StdEPReq+0x1cc>
 8006308:	e097      	b.n	800643a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800630a:	7bbb      	ldrb	r3, [r7, #14]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d007      	beq.n	8006320 <USBD_StdEPReq+0x17e>
 8006310:	7bbb      	ldrb	r3, [r7, #14]
 8006312:	2b80      	cmp	r3, #128	; 0x80
 8006314:	d004      	beq.n	8006320 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006316:	6839      	ldr	r1, [r7, #0]
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fbd3 	bl	8006ac4 <USBD_CtlError>
                break;
 800631e:	e091      	b.n	8006444 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006320:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006324:	2b00      	cmp	r3, #0
 8006326:	da0b      	bge.n	8006340 <USBD_StdEPReq+0x19e>
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	3310      	adds	r3, #16
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	4413      	add	r3, r2
 800633c:	3304      	adds	r3, #4
 800633e:	e00b      	b.n	8006358 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006340:	7bbb      	ldrb	r3, [r7, #14]
 8006342:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	4413      	add	r3, r2
 8006356:	3304      	adds	r3, #4
 8006358:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2202      	movs	r2, #2
 8006364:	4619      	mov	r1, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fc1d 	bl	8006ba6 <USBD_CtlSendData>
              break;
 800636c:	e06a      	b.n	8006444 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800636e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006372:	2b00      	cmp	r3, #0
 8006374:	da11      	bge.n	800639a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006376:	7bbb      	ldrb	r3, [r7, #14]
 8006378:	f003 020f 	and.w	r2, r3, #15
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	4613      	mov	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	440b      	add	r3, r1
 8006388:	3324      	adds	r3, #36	; 0x24
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d117      	bne.n	80063c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006390:	6839      	ldr	r1, [r7, #0]
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fb96 	bl	8006ac4 <USBD_CtlError>
                  break;
 8006398:	e054      	b.n	8006444 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800639a:	7bbb      	ldrb	r3, [r7, #14]
 800639c:	f003 020f 	and.w	r2, r3, #15
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d104      	bne.n	80063c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80063b6:	6839      	ldr	r1, [r7, #0]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fb83 	bl	8006ac4 <USBD_CtlError>
                  break;
 80063be:	e041      	b.n	8006444 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	da0b      	bge.n	80063e0 <USBD_StdEPReq+0x23e>
 80063c8:	7bbb      	ldrb	r3, [r7, #14]
 80063ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063ce:	4613      	mov	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	3310      	adds	r3, #16
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	4413      	add	r3, r2
 80063dc:	3304      	adds	r3, #4
 80063de:	e00b      	b.n	80063f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063e0:	7bbb      	ldrb	r3, [r7, #14]
 80063e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063e6:	4613      	mov	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	4413      	add	r3, r2
 80063f6:	3304      	adds	r3, #4
 80063f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80063fa:	7bbb      	ldrb	r3, [r7, #14]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <USBD_StdEPReq+0x264>
 8006400:	7bbb      	ldrb	r3, [r7, #14]
 8006402:	2b80      	cmp	r3, #128	; 0x80
 8006404:	d103      	bne.n	800640e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	e00e      	b.n	800642c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800640e:	7bbb      	ldrb	r3, [r7, #14]
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 f866 	bl	80074e4 <USBD_LL_IsStallEP>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2201      	movs	r2, #1
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	e002      	b.n	800642c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2202      	movs	r2, #2
 8006430:	4619      	mov	r1, r3
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fbb7 	bl	8006ba6 <USBD_CtlSendData>
              break;
 8006438:	e004      	b.n	8006444 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fb41 	bl	8006ac4 <USBD_CtlError>
              break;
 8006442:	bf00      	nop
          }
          break;
 8006444:	e004      	b.n	8006450 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fb3b 	bl	8006ac4 <USBD_CtlError>
          break;
 800644e:	bf00      	nop
      }
      break;
 8006450:	e004      	b.n	800645c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fb35 	bl	8006ac4 <USBD_CtlError>
      break;
 800645a:	bf00      	nop
  }

  return ret;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006476:	2300      	movs	r3, #0
 8006478:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	885b      	ldrh	r3, [r3, #2]
 8006482:	0a1b      	lsrs	r3, r3, #8
 8006484:	b29b      	uxth	r3, r3
 8006486:	3b01      	subs	r3, #1
 8006488:	2b06      	cmp	r3, #6
 800648a:	f200 8128 	bhi.w	80066de <USBD_GetDescriptor+0x276>
 800648e:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <USBD_GetDescriptor+0x2c>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064b1 	.word	0x080064b1
 8006498:	080064c9 	.word	0x080064c9
 800649c:	08006509 	.word	0x08006509
 80064a0:	080066df 	.word	0x080066df
 80064a4:	080066df 	.word	0x080066df
 80064a8:	0800667f 	.word	0x0800667f
 80064ac:	080066ab 	.word	0x080066ab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	7c12      	ldrb	r2, [r2, #16]
 80064bc:	f107 0108 	add.w	r1, r7, #8
 80064c0:	4610      	mov	r0, r2
 80064c2:	4798      	blx	r3
 80064c4:	60f8      	str	r0, [r7, #12]
      break;
 80064c6:	e112      	b.n	80066ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	7c1b      	ldrb	r3, [r3, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10d      	bne.n	80064ec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d8:	f107 0208 	add.w	r2, r7, #8
 80064dc:	4610      	mov	r0, r2
 80064de:	4798      	blx	r3
 80064e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	3301      	adds	r3, #1
 80064e6:	2202      	movs	r2, #2
 80064e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80064ea:	e100      	b.n	80066ee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	f107 0208 	add.w	r2, r7, #8
 80064f8:	4610      	mov	r0, r2
 80064fa:	4798      	blx	r3
 80064fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3301      	adds	r3, #1
 8006502:	2202      	movs	r2, #2
 8006504:	701a      	strb	r2, [r3, #0]
      break;
 8006506:	e0f2      	b.n	80066ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	885b      	ldrh	r3, [r3, #2]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b05      	cmp	r3, #5
 8006510:	f200 80ac 	bhi.w	800666c <USBD_GetDescriptor+0x204>
 8006514:	a201      	add	r2, pc, #4	; (adr r2, 800651c <USBD_GetDescriptor+0xb4>)
 8006516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651a:	bf00      	nop
 800651c:	08006535 	.word	0x08006535
 8006520:	08006569 	.word	0x08006569
 8006524:	0800659d 	.word	0x0800659d
 8006528:	080065d1 	.word	0x080065d1
 800652c:	08006605 	.word	0x08006605
 8006530:	08006639 	.word	0x08006639
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00b      	beq.n	8006558 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	7c12      	ldrb	r2, [r2, #16]
 800654c:	f107 0108 	add.w	r1, r7, #8
 8006550:	4610      	mov	r0, r2
 8006552:	4798      	blx	r3
 8006554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006556:	e091      	b.n	800667c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fab2 	bl	8006ac4 <USBD_CtlError>
            err++;
 8006560:	7afb      	ldrb	r3, [r7, #11]
 8006562:	3301      	adds	r3, #1
 8006564:	72fb      	strb	r3, [r7, #11]
          break;
 8006566:	e089      	b.n	800667c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	7c12      	ldrb	r2, [r2, #16]
 8006580:	f107 0108 	add.w	r1, r7, #8
 8006584:	4610      	mov	r0, r2
 8006586:	4798      	blx	r3
 8006588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800658a:	e077      	b.n	800667c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fa98 	bl	8006ac4 <USBD_CtlError>
            err++;
 8006594:	7afb      	ldrb	r3, [r7, #11]
 8006596:	3301      	adds	r3, #1
 8006598:	72fb      	strb	r3, [r7, #11]
          break;
 800659a:	e06f      	b.n	800667c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	7c12      	ldrb	r2, [r2, #16]
 80065b4:	f107 0108 	add.w	r1, r7, #8
 80065b8:	4610      	mov	r0, r2
 80065ba:	4798      	blx	r3
 80065bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065be:	e05d      	b.n	800667c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fa7e 	bl	8006ac4 <USBD_CtlError>
            err++;
 80065c8:	7afb      	ldrb	r3, [r7, #11]
 80065ca:	3301      	adds	r3, #1
 80065cc:	72fb      	strb	r3, [r7, #11]
          break;
 80065ce:	e055      	b.n	800667c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00b      	beq.n	80065f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	7c12      	ldrb	r2, [r2, #16]
 80065e8:	f107 0108 	add.w	r1, r7, #8
 80065ec:	4610      	mov	r0, r2
 80065ee:	4798      	blx	r3
 80065f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065f2:	e043      	b.n	800667c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fa64 	bl	8006ac4 <USBD_CtlError>
            err++;
 80065fc:	7afb      	ldrb	r3, [r7, #11]
 80065fe:	3301      	adds	r3, #1
 8006600:	72fb      	strb	r3, [r7, #11]
          break;
 8006602:	e03b      	b.n	800667c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00b      	beq.n	8006628 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	7c12      	ldrb	r2, [r2, #16]
 800661c:	f107 0108 	add.w	r1, r7, #8
 8006620:	4610      	mov	r0, r2
 8006622:	4798      	blx	r3
 8006624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006626:	e029      	b.n	800667c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fa4a 	bl	8006ac4 <USBD_CtlError>
            err++;
 8006630:	7afb      	ldrb	r3, [r7, #11]
 8006632:	3301      	adds	r3, #1
 8006634:	72fb      	strb	r3, [r7, #11]
          break;
 8006636:	e021      	b.n	800667c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00b      	beq.n	800665c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	7c12      	ldrb	r2, [r2, #16]
 8006650:	f107 0108 	add.w	r1, r7, #8
 8006654:	4610      	mov	r0, r2
 8006656:	4798      	blx	r3
 8006658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800665a:	e00f      	b.n	800667c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fa30 	bl	8006ac4 <USBD_CtlError>
            err++;
 8006664:	7afb      	ldrb	r3, [r7, #11]
 8006666:	3301      	adds	r3, #1
 8006668:	72fb      	strb	r3, [r7, #11]
          break;
 800666a:	e007      	b.n	800667c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800666c:	6839      	ldr	r1, [r7, #0]
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fa28 	bl	8006ac4 <USBD_CtlError>
          err++;
 8006674:	7afb      	ldrb	r3, [r7, #11]
 8006676:	3301      	adds	r3, #1
 8006678:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800667a:	bf00      	nop
      }
      break;
 800667c:	e037      	b.n	80066ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	7c1b      	ldrb	r3, [r3, #16]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d109      	bne.n	800669a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800668c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668e:	f107 0208 	add.w	r2, r7, #8
 8006692:	4610      	mov	r0, r2
 8006694:	4798      	blx	r3
 8006696:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006698:	e029      	b.n	80066ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fa11 	bl	8006ac4 <USBD_CtlError>
        err++;
 80066a2:	7afb      	ldrb	r3, [r7, #11]
 80066a4:	3301      	adds	r3, #1
 80066a6:	72fb      	strb	r3, [r7, #11]
      break;
 80066a8:	e021      	b.n	80066ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	7c1b      	ldrb	r3, [r3, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10d      	bne.n	80066ce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ba:	f107 0208 	add.w	r2, r7, #8
 80066be:	4610      	mov	r0, r2
 80066c0:	4798      	blx	r3
 80066c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	3301      	adds	r3, #1
 80066c8:	2207      	movs	r2, #7
 80066ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066cc:	e00f      	b.n	80066ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f9f7 	bl	8006ac4 <USBD_CtlError>
        err++;
 80066d6:	7afb      	ldrb	r3, [r7, #11]
 80066d8:	3301      	adds	r3, #1
 80066da:	72fb      	strb	r3, [r7, #11]
      break;
 80066dc:	e007      	b.n	80066ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f9ef 	bl	8006ac4 <USBD_CtlError>
      err++;
 80066e6:	7afb      	ldrb	r3, [r7, #11]
 80066e8:	3301      	adds	r3, #1
 80066ea:	72fb      	strb	r3, [r7, #11]
      break;
 80066ec:	bf00      	nop
  }

  if (err != 0U)
 80066ee:	7afb      	ldrb	r3, [r7, #11]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d11e      	bne.n	8006732 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	88db      	ldrh	r3, [r3, #6]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d016      	beq.n	800672a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80066fc:	893b      	ldrh	r3, [r7, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00e      	beq.n	8006720 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	88da      	ldrh	r2, [r3, #6]
 8006706:	893b      	ldrh	r3, [r7, #8]
 8006708:	4293      	cmp	r3, r2
 800670a:	bf28      	it	cs
 800670c:	4613      	movcs	r3, r2
 800670e:	b29b      	uxth	r3, r3
 8006710:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006712:	893b      	ldrh	r3, [r7, #8]
 8006714:	461a      	mov	r2, r3
 8006716:	68f9      	ldr	r1, [r7, #12]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fa44 	bl	8006ba6 <USBD_CtlSendData>
 800671e:	e009      	b.n	8006734 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f9ce 	bl	8006ac4 <USBD_CtlError>
 8006728:	e004      	b.n	8006734 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fa95 	bl	8006c5a <USBD_CtlSendStatus>
 8006730:	e000      	b.n	8006734 <USBD_GetDescriptor+0x2cc>
    return;
 8006732:	bf00      	nop
  }
}
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop

0800673c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	889b      	ldrh	r3, [r3, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d131      	bne.n	80067b2 <USBD_SetAddress+0x76>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	88db      	ldrh	r3, [r3, #6]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d12d      	bne.n	80067b2 <USBD_SetAddress+0x76>
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	885b      	ldrh	r3, [r3, #2]
 800675a:	2b7f      	cmp	r3, #127	; 0x7f
 800675c:	d829      	bhi.n	80067b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	885b      	ldrh	r3, [r3, #2]
 8006762:	b2db      	uxtb	r3, r3
 8006764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006768:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b03      	cmp	r3, #3
 8006774:	d104      	bne.n	8006780 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f9a3 	bl	8006ac4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800677e:	e01d      	b.n	80067bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	7bfa      	ldrb	r2, [r7, #15]
 8006784:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006788:	7bfb      	ldrb	r3, [r7, #15]
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fed5 	bl	800753c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fa61 	bl	8006c5a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d004      	beq.n	80067a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2202      	movs	r2, #2
 80067a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067a6:	e009      	b.n	80067bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067b0:	e004      	b.n	80067bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80067b2:	6839      	ldr	r1, [r7, #0]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f985 	bl	8006ac4 <USBD_CtlError>
  }
}
 80067ba:	bf00      	nop
 80067bc:	bf00      	nop
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	885b      	ldrh	r3, [r3, #2]
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	4b4c      	ldr	r3, [pc, #304]	; (800690c <USBD_SetConfig+0x148>)
 80067da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80067dc:	4b4b      	ldr	r3, [pc, #300]	; (800690c <USBD_SetConfig+0x148>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d905      	bls.n	80067f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f96c 	bl	8006ac4 <USBD_CtlError>
    return USBD_FAIL;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e088      	b.n	8006902 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d002      	beq.n	8006802 <USBD_SetConfig+0x3e>
 80067fc:	2b03      	cmp	r3, #3
 80067fe:	d025      	beq.n	800684c <USBD_SetConfig+0x88>
 8006800:	e071      	b.n	80068e6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006802:	4b42      	ldr	r3, [pc, #264]	; (800690c <USBD_SetConfig+0x148>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d01c      	beq.n	8006844 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800680a:	4b40      	ldr	r3, [pc, #256]	; (800690c <USBD_SetConfig+0x148>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006814:	4b3d      	ldr	r3, [pc, #244]	; (800690c <USBD_SetConfig+0x148>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff f948 	bl	8005ab0 <USBD_SetClassConfig>
 8006820:	4603      	mov	r3, r0
 8006822:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d004      	beq.n	8006834 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f949 	bl	8006ac4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006832:	e065      	b.n	8006900 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fa10 	bl	8006c5a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2203      	movs	r2, #3
 800683e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006842:	e05d      	b.n	8006900 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fa08 	bl	8006c5a <USBD_CtlSendStatus>
      break;
 800684a:	e059      	b.n	8006900 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800684c:	4b2f      	ldr	r3, [pc, #188]	; (800690c <USBD_SetConfig+0x148>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d112      	bne.n	800687a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800685c:	4b2b      	ldr	r3, [pc, #172]	; (800690c <USBD_SetConfig+0x148>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006866:	4b29      	ldr	r3, [pc, #164]	; (800690c <USBD_SetConfig+0x148>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff f93b 	bl	8005ae8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f9f1 	bl	8006c5a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006878:	e042      	b.n	8006900 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800687a:	4b24      	ldr	r3, [pc, #144]	; (800690c <USBD_SetConfig+0x148>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	429a      	cmp	r2, r3
 8006886:	d02a      	beq.n	80068de <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff f929 	bl	8005ae8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006896:	4b1d      	ldr	r3, [pc, #116]	; (800690c <USBD_SetConfig+0x148>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80068a0:	4b1a      	ldr	r3, [pc, #104]	; (800690c <USBD_SetConfig+0x148>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff f902 	bl	8005ab0 <USBD_SetClassConfig>
 80068ac:	4603      	mov	r3, r0
 80068ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00f      	beq.n	80068d6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f903 	bl	8006ac4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7ff f90e 	bl	8005ae8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80068d4:	e014      	b.n	8006900 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f9bf 	bl	8006c5a <USBD_CtlSendStatus>
      break;
 80068dc:	e010      	b.n	8006900 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f9bb 	bl	8006c5a <USBD_CtlSendStatus>
      break;
 80068e4:	e00c      	b.n	8006900 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f8eb 	bl	8006ac4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80068ee:	4b07      	ldr	r3, [pc, #28]	; (800690c <USBD_SetConfig+0x148>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7ff f8f7 	bl	8005ae8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80068fa:	2303      	movs	r3, #3
 80068fc:	73fb      	strb	r3, [r7, #15]
      break;
 80068fe:	bf00      	nop
  }

  return ret;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	2000019c 	.word	0x2000019c

08006910 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	88db      	ldrh	r3, [r3, #6]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d004      	beq.n	800692c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f8cd 	bl	8006ac4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800692a:	e023      	b.n	8006974 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	dc02      	bgt.n	800693e <USBD_GetConfig+0x2e>
 8006938:	2b00      	cmp	r3, #0
 800693a:	dc03      	bgt.n	8006944 <USBD_GetConfig+0x34>
 800693c:	e015      	b.n	800696a <USBD_GetConfig+0x5a>
 800693e:	2b03      	cmp	r3, #3
 8006940:	d00b      	beq.n	800695a <USBD_GetConfig+0x4a>
 8006942:	e012      	b.n	800696a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	3308      	adds	r3, #8
 800694e:	2201      	movs	r2, #1
 8006950:	4619      	mov	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f927 	bl	8006ba6 <USBD_CtlSendData>
        break;
 8006958:	e00c      	b.n	8006974 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3304      	adds	r3, #4
 800695e:	2201      	movs	r2, #1
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f91f 	bl	8006ba6 <USBD_CtlSendData>
        break;
 8006968:	e004      	b.n	8006974 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800696a:	6839      	ldr	r1, [r7, #0]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f8a9 	bl	8006ac4 <USBD_CtlError>
        break;
 8006972:	bf00      	nop
}
 8006974:	bf00      	nop
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800698c:	b2db      	uxtb	r3, r3
 800698e:	3b01      	subs	r3, #1
 8006990:	2b02      	cmp	r3, #2
 8006992:	d81e      	bhi.n	80069d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	88db      	ldrh	r3, [r3, #6]
 8006998:	2b02      	cmp	r3, #2
 800699a:	d004      	beq.n	80069a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f890 	bl	8006ac4 <USBD_CtlError>
        break;
 80069a4:	e01a      	b.n	80069dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d005      	beq.n	80069c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f043 0202 	orr.w	r2, r3, #2
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	330c      	adds	r3, #12
 80069c6:	2202      	movs	r2, #2
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f8eb 	bl	8006ba6 <USBD_CtlSendData>
      break;
 80069d0:	e004      	b.n	80069dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f875 	bl	8006ac4 <USBD_CtlError>
      break;
 80069da:	bf00      	nop
  }
}
 80069dc:	bf00      	nop
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	885b      	ldrh	r3, [r3, #2]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d106      	bne.n	8006a04 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f92b 	bl	8006c5a <USBD_CtlSendStatus>
  }
}
 8006a04:	bf00      	nop
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d80b      	bhi.n	8006a3c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	885b      	ldrh	r3, [r3, #2]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d10c      	bne.n	8006a46 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f910 	bl	8006c5a <USBD_CtlSendStatus>
      }
      break;
 8006a3a:	e004      	b.n	8006a46 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f840 	bl	8006ac4 <USBD_CtlError>
      break;
 8006a44:	e000      	b.n	8006a48 <USBD_ClrFeature+0x3c>
      break;
 8006a46:	bf00      	nop
  }
}
 8006a48:	bf00      	nop
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	781a      	ldrb	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	781a      	ldrb	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	3301      	adds	r3, #1
 8006a78:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f7ff fabb 	bl	8005ff6 <SWAPBYTE>
 8006a80:	4603      	mov	r3, r0
 8006a82:	461a      	mov	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3301      	adds	r3, #1
 8006a92:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f7ff faae 	bl	8005ff6 <SWAPBYTE>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f7ff faa1 	bl	8005ff6 <SWAPBYTE>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	80da      	strh	r2, [r3, #6]
}
 8006abc:	bf00      	nop
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ace:	2180      	movs	r1, #128	; 0x80
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fcc9 	bl	8007468 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fcc5 	bl	8007468 <USBD_LL_StallEP>
}
 8006ade:	bf00      	nop
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b086      	sub	sp, #24
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	60f8      	str	r0, [r7, #12]
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d036      	beq.n	8006b6a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006b00:	6938      	ldr	r0, [r7, #16]
 8006b02:	f000 f836 	bl	8006b72 <USBD_GetLen>
 8006b06:	4603      	mov	r3, r0
 8006b08:	3301      	adds	r3, #1
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	4413      	add	r3, r2
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	7812      	ldrb	r2, [r2, #0]
 8006b1e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
 8006b22:	3301      	adds	r3, #1
 8006b24:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006b26:	7dfb      	ldrb	r3, [r7, #23]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	2203      	movs	r2, #3
 8006b2e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
 8006b32:	3301      	adds	r3, #1
 8006b34:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006b36:	e013      	b.n	8006b60 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006b38:	7dfb      	ldrb	r3, [r7, #23]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	7812      	ldrb	r2, [r2, #0]
 8006b42:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	3301      	adds	r3, #1
 8006b48:	613b      	str	r3, [r7, #16]
    idx++;
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	4413      	add	r3, r2
 8006b56:	2200      	movs	r2, #0
 8006b58:	701a      	strb	r2, [r3, #0]
    idx++;
 8006b5a:	7dfb      	ldrb	r3, [r7, #23]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1e7      	bne.n	8006b38 <USBD_GetString+0x52>
 8006b68:	e000      	b.n	8006b6c <USBD_GetString+0x86>
    return;
 8006b6a:	bf00      	nop
  }
}
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b085      	sub	sp, #20
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006b82:	e005      	b.n	8006b90 <USBD_GetLen+0x1e>
  {
    len++;
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	3301      	adds	r3, #1
 8006b88:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1f5      	bne.n	8006b84 <USBD_GetLen+0x12>
  }

  return len;
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	60b9      	str	r1, [r7, #8]
 8006bb0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	2100      	movs	r1, #0
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 fcd4 	bl	800757a <USBD_LL_Transmit>

  return USBD_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	2100      	movs	r1, #0
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 fcc3 	bl	800757a <USBD_LL_Transmit>

  return USBD_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	60f8      	str	r0, [r7, #12]
 8006c06:	60b9      	str	r1, [r7, #8]
 8006c08:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2203      	movs	r2, #3
 8006c0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	2100      	movs	r1, #0
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 fcc7 	bl	80075bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	2100      	movs	r1, #0
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 fcb6 	bl	80075bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b082      	sub	sp, #8
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2204      	movs	r2, #4
 8006c66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2100      	movs	r1, #0
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fc82 	bl	800757a <USBD_LL_Transmit>

  return USBD_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2205      	movs	r2, #5
 8006c8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c90:	2300      	movs	r3, #0
 8006c92:	2200      	movs	r2, #0
 8006c94:	2100      	movs	r1, #0
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fc90 	bl	80075bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
	...

08006ca8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006cac:	2200      	movs	r2, #0
 8006cae:	4912      	ldr	r1, [pc, #72]	; (8006cf8 <MX_USB_DEVICE_Init+0x50>)
 8006cb0:	4812      	ldr	r0, [pc, #72]	; (8006cfc <MX_USB_DEVICE_Init+0x54>)
 8006cb2:	f7fe fe8f 	bl	80059d4 <USBD_Init>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006cbc:	f7f9 fe3c 	bl	8000938 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006cc0:	490f      	ldr	r1, [pc, #60]	; (8006d00 <MX_USB_DEVICE_Init+0x58>)
 8006cc2:	480e      	ldr	r0, [pc, #56]	; (8006cfc <MX_USB_DEVICE_Init+0x54>)
 8006cc4:	f7fe feb6 	bl	8005a34 <USBD_RegisterClass>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006cce:	f7f9 fe33 	bl	8000938 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006cd2:	490c      	ldr	r1, [pc, #48]	; (8006d04 <MX_USB_DEVICE_Init+0x5c>)
 8006cd4:	4809      	ldr	r0, [pc, #36]	; (8006cfc <MX_USB_DEVICE_Init+0x54>)
 8006cd6:	f7fe fe07 	bl	80058e8 <USBD_CDC_RegisterInterface>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006ce0:	f7f9 fe2a 	bl	8000938 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ce4:	4805      	ldr	r0, [pc, #20]	; (8006cfc <MX_USB_DEVICE_Init+0x54>)
 8006ce6:	f7fe fecc 	bl	8005a82 <USBD_Start>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006cf0:	f7f9 fe22 	bl	8000938 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006cf4:	bf00      	nop
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	20000130 	.word	0x20000130
 8006cfc:	20000418 	.word	0x20000418
 8006d00:	20000018 	.word	0x20000018
 8006d04:	2000011c 	.word	0x2000011c

08006d08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	4905      	ldr	r1, [pc, #20]	; (8006d24 <CDC_Init_FS+0x1c>)
 8006d10:	4805      	ldr	r0, [pc, #20]	; (8006d28 <CDC_Init_FS+0x20>)
 8006d12:	f7fe fdfe 	bl	8005912 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006d16:	4905      	ldr	r1, [pc, #20]	; (8006d2c <CDC_Init_FS+0x24>)
 8006d18:	4803      	ldr	r0, [pc, #12]	; (8006d28 <CDC_Init_FS+0x20>)
 8006d1a:	f7fe fe18 	bl	800594e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006d1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	20000ee8 	.word	0x20000ee8
 8006d28:	20000418 	.word	0x20000418
 8006d2c:	200006e8 	.word	0x200006e8

08006d30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006d30:	b480      	push	{r7}
 8006d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006d34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	4603      	mov	r3, r0
 8006d48:	6039      	str	r1, [r7, #0]
 8006d4a:	71fb      	strb	r3, [r7, #7]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006d50:	79fb      	ldrb	r3, [r7, #7]
 8006d52:	2b23      	cmp	r3, #35	; 0x23
 8006d54:	d84a      	bhi.n	8006dec <CDC_Control_FS+0xac>
 8006d56:	a201      	add	r2, pc, #4	; (adr r2, 8006d5c <CDC_Control_FS+0x1c>)
 8006d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5c:	08006ded 	.word	0x08006ded
 8006d60:	08006ded 	.word	0x08006ded
 8006d64:	08006ded 	.word	0x08006ded
 8006d68:	08006ded 	.word	0x08006ded
 8006d6c:	08006ded 	.word	0x08006ded
 8006d70:	08006ded 	.word	0x08006ded
 8006d74:	08006ded 	.word	0x08006ded
 8006d78:	08006ded 	.word	0x08006ded
 8006d7c:	08006ded 	.word	0x08006ded
 8006d80:	08006ded 	.word	0x08006ded
 8006d84:	08006ded 	.word	0x08006ded
 8006d88:	08006ded 	.word	0x08006ded
 8006d8c:	08006ded 	.word	0x08006ded
 8006d90:	08006ded 	.word	0x08006ded
 8006d94:	08006ded 	.word	0x08006ded
 8006d98:	08006ded 	.word	0x08006ded
 8006d9c:	08006ded 	.word	0x08006ded
 8006da0:	08006ded 	.word	0x08006ded
 8006da4:	08006ded 	.word	0x08006ded
 8006da8:	08006ded 	.word	0x08006ded
 8006dac:	08006ded 	.word	0x08006ded
 8006db0:	08006ded 	.word	0x08006ded
 8006db4:	08006ded 	.word	0x08006ded
 8006db8:	08006ded 	.word	0x08006ded
 8006dbc:	08006ded 	.word	0x08006ded
 8006dc0:	08006ded 	.word	0x08006ded
 8006dc4:	08006ded 	.word	0x08006ded
 8006dc8:	08006ded 	.word	0x08006ded
 8006dcc:	08006ded 	.word	0x08006ded
 8006dd0:	08006ded 	.word	0x08006ded
 8006dd4:	08006ded 	.word	0x08006ded
 8006dd8:	08006ded 	.word	0x08006ded
 8006ddc:	08006ded 	.word	0x08006ded
 8006de0:	08006ded 	.word	0x08006ded
 8006de4:	08006ded 	.word	0x08006ded
 8006de8:	08006ded 	.word	0x08006ded
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006dec:	bf00      	nop
  }

  return (USBD_OK);
 8006dee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	4805      	ldr	r0, [pc, #20]	; (8006e20 <CDC_Receive_FS+0x24>)
 8006e0a:	f7fe fda0 	bl	800594e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006e0e:	4804      	ldr	r0, [pc, #16]	; (8006e20 <CDC_Receive_FS+0x24>)
 8006e10:	f7fe fdb6 	bl	8005980 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006e14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	20000418 	.word	0x20000418

08006e24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006e36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	371c      	adds	r7, #28
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
	...

08006e48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	6039      	str	r1, [r7, #0]
 8006e52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2212      	movs	r2, #18
 8006e58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e5a:	4b03      	ldr	r3, [pc, #12]	; (8006e68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	2000014c 	.word	0x2000014c

08006e6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	4603      	mov	r3, r0
 8006e74:	6039      	str	r1, [r7, #0]
 8006e76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e7e:	4b03      	ldr	r3, [pc, #12]	; (8006e8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	20000160 	.word	0x20000160

08006e90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	4603      	mov	r3, r0
 8006e98:	6039      	str	r1, [r7, #0]
 8006e9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e9c:	79fb      	ldrb	r3, [r7, #7]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d105      	bne.n	8006eae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	4907      	ldr	r1, [pc, #28]	; (8006ec4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ea6:	4808      	ldr	r0, [pc, #32]	; (8006ec8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ea8:	f7ff fe1d 	bl	8006ae6 <USBD_GetString>
 8006eac:	e004      	b.n	8006eb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	4904      	ldr	r1, [pc, #16]	; (8006ec4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006eb2:	4805      	ldr	r0, [pc, #20]	; (8006ec8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006eb4:	f7ff fe17 	bl	8006ae6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006eb8:	4b02      	ldr	r3, [pc, #8]	; (8006ec4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	200016e8 	.word	0x200016e8
 8006ec8:	0800771c 	.word	0x0800771c

08006ecc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	6039      	str	r1, [r7, #0]
 8006ed6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	4904      	ldr	r1, [pc, #16]	; (8006eec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006edc:	4804      	ldr	r0, [pc, #16]	; (8006ef0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ede:	f7ff fe02 	bl	8006ae6 <USBD_GetString>
  return USBD_StrDesc;
 8006ee2:	4b02      	ldr	r3, [pc, #8]	; (8006eec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	200016e8 	.word	0x200016e8
 8006ef0:	08007734 	.word	0x08007734

08006ef4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	6039      	str	r1, [r7, #0]
 8006efe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	221a      	movs	r2, #26
 8006f04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f06:	f000 f843 	bl	8006f90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f0a:	4b02      	ldr	r3, [pc, #8]	; (8006f14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	20000164 	.word	0x20000164

08006f18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	6039      	str	r1, [r7, #0]
 8006f22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006f24:	79fb      	ldrb	r3, [r7, #7]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d105      	bne.n	8006f36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	4907      	ldr	r1, [pc, #28]	; (8006f4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f2e:	4808      	ldr	r0, [pc, #32]	; (8006f50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f30:	f7ff fdd9 	bl	8006ae6 <USBD_GetString>
 8006f34:	e004      	b.n	8006f40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f36:	683a      	ldr	r2, [r7, #0]
 8006f38:	4904      	ldr	r1, [pc, #16]	; (8006f4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f3a:	4805      	ldr	r0, [pc, #20]	; (8006f50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f3c:	f7ff fdd3 	bl	8006ae6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f40:	4b02      	ldr	r3, [pc, #8]	; (8006f4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	200016e8 	.word	0x200016e8
 8006f50:	08007748 	.word	0x08007748

08006f54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	6039      	str	r1, [r7, #0]
 8006f5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f60:	79fb      	ldrb	r3, [r7, #7]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d105      	bne.n	8006f72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	4907      	ldr	r1, [pc, #28]	; (8006f88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f6a:	4808      	ldr	r0, [pc, #32]	; (8006f8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f6c:	f7ff fdbb 	bl	8006ae6 <USBD_GetString>
 8006f70:	e004      	b.n	8006f7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	4904      	ldr	r1, [pc, #16]	; (8006f88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f76:	4805      	ldr	r0, [pc, #20]	; (8006f8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f78:	f7ff fdb5 	bl	8006ae6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f7c:	4b02      	ldr	r3, [pc, #8]	; (8006f88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	200016e8 	.word	0x200016e8
 8006f8c:	08007754 	.word	0x08007754

08006f90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f96:	4b0f      	ldr	r3, [pc, #60]	; (8006fd4 <Get_SerialNum+0x44>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f9c:	4b0e      	ldr	r3, [pc, #56]	; (8006fd8 <Get_SerialNum+0x48>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006fa2:	4b0e      	ldr	r3, [pc, #56]	; (8006fdc <Get_SerialNum+0x4c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4413      	add	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d009      	beq.n	8006fca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006fb6:	2208      	movs	r2, #8
 8006fb8:	4909      	ldr	r1, [pc, #36]	; (8006fe0 <Get_SerialNum+0x50>)
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 f814 	bl	8006fe8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006fc0:	2204      	movs	r2, #4
 8006fc2:	4908      	ldr	r1, [pc, #32]	; (8006fe4 <Get_SerialNum+0x54>)
 8006fc4:	68b8      	ldr	r0, [r7, #8]
 8006fc6:	f000 f80f 	bl	8006fe8 <IntToUnicode>
  }
}
 8006fca:	bf00      	nop
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	1fff7a10 	.word	0x1fff7a10
 8006fd8:	1fff7a14 	.word	0x1fff7a14
 8006fdc:	1fff7a18 	.word	0x1fff7a18
 8006fe0:	20000166 	.word	0x20000166
 8006fe4:	20000176 	.word	0x20000176

08006fe8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	75fb      	strb	r3, [r7, #23]
 8006ffe:	e027      	b.n	8007050 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	0f1b      	lsrs	r3, r3, #28
 8007004:	2b09      	cmp	r3, #9
 8007006:	d80b      	bhi.n	8007020 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	0f1b      	lsrs	r3, r3, #28
 800700c:	b2da      	uxtb	r2, r3
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	4619      	mov	r1, r3
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	440b      	add	r3, r1
 8007018:	3230      	adds	r2, #48	; 0x30
 800701a:	b2d2      	uxtb	r2, r2
 800701c:	701a      	strb	r2, [r3, #0]
 800701e:	e00a      	b.n	8007036 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	0f1b      	lsrs	r3, r3, #28
 8007024:	b2da      	uxtb	r2, r3
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	4619      	mov	r1, r3
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	440b      	add	r3, r1
 8007030:	3237      	adds	r2, #55	; 0x37
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	011b      	lsls	r3, r3, #4
 800703a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800703c:	7dfb      	ldrb	r3, [r7, #23]
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	3301      	adds	r3, #1
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	4413      	add	r3, r2
 8007046:	2200      	movs	r2, #0
 8007048:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	3301      	adds	r3, #1
 800704e:	75fb      	strb	r3, [r7, #23]
 8007050:	7dfa      	ldrb	r2, [r7, #23]
 8007052:	79fb      	ldrb	r3, [r7, #7]
 8007054:	429a      	cmp	r2, r3
 8007056:	d3d3      	bcc.n	8007000 <IntToUnicode+0x18>
  }
}
 8007058:	bf00      	nop
 800705a:	bf00      	nop
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
	...

08007068 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b08a      	sub	sp, #40	; 0x28
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007070:	f107 0314 	add.w	r3, r7, #20
 8007074:	2200      	movs	r2, #0
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	605a      	str	r2, [r3, #4]
 800707a:	609a      	str	r2, [r3, #8]
 800707c:	60da      	str	r2, [r3, #12]
 800707e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007088:	d147      	bne.n	800711a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800708a:	2300      	movs	r3, #0
 800708c:	613b      	str	r3, [r7, #16]
 800708e:	4b25      	ldr	r3, [pc, #148]	; (8007124 <HAL_PCD_MspInit+0xbc>)
 8007090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007092:	4a24      	ldr	r2, [pc, #144]	; (8007124 <HAL_PCD_MspInit+0xbc>)
 8007094:	f043 0301 	orr.w	r3, r3, #1
 8007098:	6313      	str	r3, [r2, #48]	; 0x30
 800709a:	4b22      	ldr	r3, [pc, #136]	; (8007124 <HAL_PCD_MspInit+0xbc>)
 800709c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	613b      	str	r3, [r7, #16]
 80070a4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80070a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80070ac:	2300      	movs	r3, #0
 80070ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b0:	2300      	movs	r3, #0
 80070b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80070b4:	f107 0314 	add.w	r3, r7, #20
 80070b8:	4619      	mov	r1, r3
 80070ba:	481b      	ldr	r0, [pc, #108]	; (8007128 <HAL_PCD_MspInit+0xc0>)
 80070bc:	f7f9 feec 	bl	8000e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80070c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80070c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070c6:	2302      	movs	r3, #2
 80070c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070ce:	2300      	movs	r3, #0
 80070d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80070d2:	230a      	movs	r3, #10
 80070d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070d6:	f107 0314 	add.w	r3, r7, #20
 80070da:	4619      	mov	r1, r3
 80070dc:	4812      	ldr	r0, [pc, #72]	; (8007128 <HAL_PCD_MspInit+0xc0>)
 80070de:	f7f9 fedb 	bl	8000e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80070e2:	4b10      	ldr	r3, [pc, #64]	; (8007124 <HAL_PCD_MspInit+0xbc>)
 80070e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e6:	4a0f      	ldr	r2, [pc, #60]	; (8007124 <HAL_PCD_MspInit+0xbc>)
 80070e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ec:	6353      	str	r3, [r2, #52]	; 0x34
 80070ee:	2300      	movs	r3, #0
 80070f0:	60fb      	str	r3, [r7, #12]
 80070f2:	4b0c      	ldr	r3, [pc, #48]	; (8007124 <HAL_PCD_MspInit+0xbc>)
 80070f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f6:	4a0b      	ldr	r2, [pc, #44]	; (8007124 <HAL_PCD_MspInit+0xbc>)
 80070f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070fc:	6453      	str	r3, [r2, #68]	; 0x44
 80070fe:	4b09      	ldr	r3, [pc, #36]	; (8007124 <HAL_PCD_MspInit+0xbc>)
 8007100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800710a:	2200      	movs	r2, #0
 800710c:	2100      	movs	r1, #0
 800710e:	2043      	movs	r0, #67	; 0x43
 8007110:	f7f9 fe8b 	bl	8000e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007114:	2043      	movs	r0, #67	; 0x43
 8007116:	f7f9 fea4 	bl	8000e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800711a:	bf00      	nop
 800711c:	3728      	adds	r7, #40	; 0x28
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	40023800 	.word	0x40023800
 8007128:	40020000 	.word	0x40020000

0800712c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007140:	4619      	mov	r1, r3
 8007142:	4610      	mov	r0, r2
 8007144:	f7fe fce8 	bl	8005b18 <USBD_LL_SetupStage>
}
 8007148:	bf00      	nop
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007162:	78fa      	ldrb	r2, [r7, #3]
 8007164:	6879      	ldr	r1, [r7, #4]
 8007166:	4613      	mov	r3, r2
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	1a9b      	subs	r3, r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	440b      	add	r3, r1
 8007170:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	78fb      	ldrb	r3, [r7, #3]
 8007178:	4619      	mov	r1, r3
 800717a:	f7fe fd22 	bl	8005bc2 <USBD_LL_DataOutStage>
}
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b082      	sub	sp, #8
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	460b      	mov	r3, r1
 8007190:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007198:	78fa      	ldrb	r2, [r7, #3]
 800719a:	6879      	ldr	r1, [r7, #4]
 800719c:	4613      	mov	r3, r2
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	1a9b      	subs	r3, r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	440b      	add	r3, r1
 80071a6:	3348      	adds	r3, #72	; 0x48
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	4619      	mov	r1, r3
 80071ae:	f7fe fd6b 	bl	8005c88 <USBD_LL_DataInStage>
}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fe fe7f 	bl	8005ecc <USBD_LL_SOF>
}
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80071de:	2301      	movs	r3, #1
 80071e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d102      	bne.n	80071f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]
 80071ee:	e008      	b.n	8007202 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d102      	bne.n	80071fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80071f8:	2301      	movs	r3, #1
 80071fa:	73fb      	strb	r3, [r7, #15]
 80071fc:	e001      	b.n	8007202 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80071fe:	f7f9 fb9b 	bl	8000938 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007208:	7bfa      	ldrb	r2, [r7, #15]
 800720a:	4611      	mov	r1, r2
 800720c:	4618      	mov	r0, r3
 800720e:	f7fe fe1f 	bl	8005e50 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007218:	4618      	mov	r0, r3
 800721a:	f7fe fdcb 	bl	8005db4 <USBD_LL_Reset>
}
 800721e:	bf00      	nop
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe fe1a 	bl	8005e70 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	6812      	ldr	r2, [r2, #0]
 800724a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800724e:	f043 0301 	orr.w	r3, r3, #1
 8007252:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800725c:	4b04      	ldr	r3, [pc, #16]	; (8007270 <HAL_PCD_SuspendCallback+0x48>)
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	4a03      	ldr	r2, [pc, #12]	; (8007270 <HAL_PCD_SuspendCallback+0x48>)
 8007262:	f043 0306 	orr.w	r3, r3, #6
 8007266:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007268:	bf00      	nop
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	e000ed00 	.word	0xe000ed00

08007274 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007282:	4618      	mov	r0, r3
 8007284:	f7fe fe0a 	bl	8005e9c <USBD_LL_Resume>
}
 8007288:	bf00      	nop
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072a2:	78fa      	ldrb	r2, [r7, #3]
 80072a4:	4611      	mov	r1, r2
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fe fe58 	bl	8005f5c <USBD_LL_IsoOUTIncomplete>
}
 80072ac:	bf00      	nop
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072c6:	78fa      	ldrb	r2, [r7, #3]
 80072c8:	4611      	mov	r1, r2
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fe fe20 	bl	8005f10 <USBD_LL_IsoINIncomplete>
}
 80072d0:	bf00      	nop
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fe fe5e 	bl	8005fa8 <USBD_LL_DevConnected>
}
 80072ec:	bf00      	nop
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007302:	4618      	mov	r0, r3
 8007304:	f7fe fe5b 	bl	8005fbe <USBD_LL_DevDisconnected>
}
 8007308:	bf00      	nop
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d13c      	bne.n	800739a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007320:	4a20      	ldr	r2, [pc, #128]	; (80073a4 <USBD_LL_Init+0x94>)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a1e      	ldr	r2, [pc, #120]	; (80073a4 <USBD_LL_Init+0x94>)
 800732c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007330:	4b1c      	ldr	r3, [pc, #112]	; (80073a4 <USBD_LL_Init+0x94>)
 8007332:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007336:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007338:	4b1a      	ldr	r3, [pc, #104]	; (80073a4 <USBD_LL_Init+0x94>)
 800733a:	2204      	movs	r2, #4
 800733c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800733e:	4b19      	ldr	r3, [pc, #100]	; (80073a4 <USBD_LL_Init+0x94>)
 8007340:	2202      	movs	r2, #2
 8007342:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007344:	4b17      	ldr	r3, [pc, #92]	; (80073a4 <USBD_LL_Init+0x94>)
 8007346:	2200      	movs	r2, #0
 8007348:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800734a:	4b16      	ldr	r3, [pc, #88]	; (80073a4 <USBD_LL_Init+0x94>)
 800734c:	2202      	movs	r2, #2
 800734e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007350:	4b14      	ldr	r3, [pc, #80]	; (80073a4 <USBD_LL_Init+0x94>)
 8007352:	2200      	movs	r2, #0
 8007354:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007356:	4b13      	ldr	r3, [pc, #76]	; (80073a4 <USBD_LL_Init+0x94>)
 8007358:	2200      	movs	r2, #0
 800735a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800735c:	4b11      	ldr	r3, [pc, #68]	; (80073a4 <USBD_LL_Init+0x94>)
 800735e:	2200      	movs	r2, #0
 8007360:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007362:	4b10      	ldr	r3, [pc, #64]	; (80073a4 <USBD_LL_Init+0x94>)
 8007364:	2200      	movs	r2, #0
 8007366:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007368:	4b0e      	ldr	r3, [pc, #56]	; (80073a4 <USBD_LL_Init+0x94>)
 800736a:	2200      	movs	r2, #0
 800736c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800736e:	480d      	ldr	r0, [pc, #52]	; (80073a4 <USBD_LL_Init+0x94>)
 8007370:	f7fa fedd 	bl	800212e <HAL_PCD_Init>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800737a:	f7f9 fadd 	bl	8000938 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800737e:	2180      	movs	r1, #128	; 0x80
 8007380:	4808      	ldr	r0, [pc, #32]	; (80073a4 <USBD_LL_Init+0x94>)
 8007382:	f7fc f83a 	bl	80033fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007386:	2240      	movs	r2, #64	; 0x40
 8007388:	2100      	movs	r1, #0
 800738a:	4806      	ldr	r0, [pc, #24]	; (80073a4 <USBD_LL_Init+0x94>)
 800738c:	f7fb ffee 	bl	800336c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007390:	2280      	movs	r2, #128	; 0x80
 8007392:	2101      	movs	r1, #1
 8007394:	4803      	ldr	r0, [pc, #12]	; (80073a4 <USBD_LL_Init+0x94>)
 8007396:	f7fb ffe9 	bl	800336c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	200018e8 	.word	0x200018e8

080073a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fa ffd2 	bl	8002368 <HAL_PCD_Start>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 f942 	bl	8007654 <USBD_Get_USB_Status>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	4608      	mov	r0, r1
 80073e8:	4611      	mov	r1, r2
 80073ea:	461a      	mov	r2, r3
 80073ec:	4603      	mov	r3, r0
 80073ee:	70fb      	strb	r3, [r7, #3]
 80073f0:	460b      	mov	r3, r1
 80073f2:	70bb      	strb	r3, [r7, #2]
 80073f4:	4613      	mov	r3, r2
 80073f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073fc:	2300      	movs	r3, #0
 80073fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007406:	78bb      	ldrb	r3, [r7, #2]
 8007408:	883a      	ldrh	r2, [r7, #0]
 800740a:	78f9      	ldrb	r1, [r7, #3]
 800740c:	f7fb fbb6 	bl	8002b7c <HAL_PCD_EP_Open>
 8007410:	4603      	mov	r3, r0
 8007412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	4618      	mov	r0, r3
 8007418:	f000 f91c 	bl	8007654 <USBD_Get_USB_Status>
 800741c:	4603      	mov	r3, r0
 800741e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007420:	7bbb      	ldrb	r3, [r7, #14]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	460b      	mov	r3, r1
 8007434:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007444:	78fa      	ldrb	r2, [r7, #3]
 8007446:	4611      	mov	r1, r2
 8007448:	4618      	mov	r0, r3
 800744a:	f7fb fbff 	bl	8002c4c <HAL_PCD_EP_Close>
 800744e:	4603      	mov	r3, r0
 8007450:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007452:	7bfb      	ldrb	r3, [r7, #15]
 8007454:	4618      	mov	r0, r3
 8007456:	f000 f8fd 	bl	8007654 <USBD_Get_USB_Status>
 800745a:	4603      	mov	r3, r0
 800745c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800745e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007482:	78fa      	ldrb	r2, [r7, #3]
 8007484:	4611      	mov	r1, r2
 8007486:	4618      	mov	r0, r3
 8007488:	f7fb fcd7 	bl	8002e3a <HAL_PCD_EP_SetStall>
 800748c:	4603      	mov	r3, r0
 800748e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007490:	7bfb      	ldrb	r3, [r7, #15]
 8007492:	4618      	mov	r0, r3
 8007494:	f000 f8de 	bl	8007654 <USBD_Get_USB_Status>
 8007498:	4603      	mov	r3, r0
 800749a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800749c:	7bbb      	ldrb	r3, [r7, #14]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	460b      	mov	r3, r1
 80074b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074c0:	78fa      	ldrb	r2, [r7, #3]
 80074c2:	4611      	mov	r1, r2
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fb fd1c 	bl	8002f02 <HAL_PCD_EP_ClrStall>
 80074ca:	4603      	mov	r3, r0
 80074cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 f8bf 	bl	8007654 <USBD_Get_USB_Status>
 80074d6:	4603      	mov	r3, r0
 80074d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074da:	7bbb      	ldrb	r3, [r7, #14]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80074f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	da0b      	bge.n	8007518 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007506:	68f9      	ldr	r1, [r7, #12]
 8007508:	4613      	mov	r3, r2
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	1a9b      	subs	r3, r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	440b      	add	r3, r1
 8007512:	333e      	adds	r3, #62	; 0x3e
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	e00b      	b.n	8007530 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800751e:	68f9      	ldr	r1, [r7, #12]
 8007520:	4613      	mov	r3, r2
 8007522:	00db      	lsls	r3, r3, #3
 8007524:	1a9b      	subs	r3, r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	440b      	add	r3, r1
 800752a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800752e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	460b      	mov	r3, r1
 8007546:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007556:	78fa      	ldrb	r2, [r7, #3]
 8007558:	4611      	mov	r1, r2
 800755a:	4618      	mov	r0, r3
 800755c:	f7fb fae9 	bl	8002b32 <HAL_PCD_SetAddress>
 8007560:	4603      	mov	r3, r0
 8007562:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 f874 	bl	8007654 <USBD_Get_USB_Status>
 800756c:	4603      	mov	r3, r0
 800756e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007570:	7bbb      	ldrb	r3, [r7, #14]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b086      	sub	sp, #24
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	607a      	str	r2, [r7, #4]
 8007584:	603b      	str	r3, [r7, #0]
 8007586:	460b      	mov	r3, r1
 8007588:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007598:	7af9      	ldrb	r1, [r7, #11]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	f7fb fc02 	bl	8002da6 <HAL_PCD_EP_Transmit>
 80075a2:	4603      	mov	r3, r0
 80075a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075a6:	7dfb      	ldrb	r3, [r7, #23]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 f853 	bl	8007654 <USBD_Get_USB_Status>
 80075ae:	4603      	mov	r3, r0
 80075b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	607a      	str	r2, [r7, #4]
 80075c6:	603b      	str	r3, [r7, #0]
 80075c8:	460b      	mov	r3, r1
 80075ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80075da:	7af9      	ldrb	r1, [r7, #11]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	f7fb fb7e 	bl	8002ce0 <HAL_PCD_EP_Receive>
 80075e4:	4603      	mov	r3, r0
 80075e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075e8:	7dfb      	ldrb	r3, [r7, #23]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 f832 	bl	8007654 <USBD_Get_USB_Status>
 80075f0:	4603      	mov	r3, r0
 80075f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b082      	sub	sp, #8
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	460b      	mov	r3, r1
 8007608:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007610:	78fa      	ldrb	r2, [r7, #3]
 8007612:	4611      	mov	r1, r2
 8007614:	4618      	mov	r0, r3
 8007616:	f7fb fbae 	bl	8002d76 <HAL_PCD_EP_GetRxCount>
 800761a:	4603      	mov	r3, r0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800762c:	4b03      	ldr	r3, [pc, #12]	; (800763c <USBD_static_malloc+0x18>)
}
 800762e:	4618      	mov	r0, r3
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	200001a0 	.word	0x200001a0

08007640 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]

}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	4603      	mov	r3, r0
 800765c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007662:	79fb      	ldrb	r3, [r7, #7]
 8007664:	2b03      	cmp	r3, #3
 8007666:	d817      	bhi.n	8007698 <USBD_Get_USB_Status+0x44>
 8007668:	a201      	add	r2, pc, #4	; (adr r2, 8007670 <USBD_Get_USB_Status+0x1c>)
 800766a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766e:	bf00      	nop
 8007670:	08007681 	.word	0x08007681
 8007674:	08007687 	.word	0x08007687
 8007678:	0800768d 	.word	0x0800768d
 800767c:	08007693 	.word	0x08007693
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	73fb      	strb	r3, [r7, #15]
    break;
 8007684:	e00b      	b.n	800769e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007686:	2303      	movs	r3, #3
 8007688:	73fb      	strb	r3, [r7, #15]
    break;
 800768a:	e008      	b.n	800769e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800768c:	2301      	movs	r3, #1
 800768e:	73fb      	strb	r3, [r7, #15]
    break;
 8007690:	e005      	b.n	800769e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007692:	2303      	movs	r3, #3
 8007694:	73fb      	strb	r3, [r7, #15]
    break;
 8007696:	e002      	b.n	800769e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007698:	2303      	movs	r3, #3
 800769a:	73fb      	strb	r3, [r7, #15]
    break;
 800769c:	bf00      	nop
  }
  return usb_status;
 800769e:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <__libc_init_array>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	4d0d      	ldr	r5, [pc, #52]	; (80076e4 <__libc_init_array+0x38>)
 80076b0:	4c0d      	ldr	r4, [pc, #52]	; (80076e8 <__libc_init_array+0x3c>)
 80076b2:	1b64      	subs	r4, r4, r5
 80076b4:	10a4      	asrs	r4, r4, #2
 80076b6:	2600      	movs	r6, #0
 80076b8:	42a6      	cmp	r6, r4
 80076ba:	d109      	bne.n	80076d0 <__libc_init_array+0x24>
 80076bc:	4d0b      	ldr	r5, [pc, #44]	; (80076ec <__libc_init_array+0x40>)
 80076be:	4c0c      	ldr	r4, [pc, #48]	; (80076f0 <__libc_init_array+0x44>)
 80076c0:	f000 f820 	bl	8007704 <_init>
 80076c4:	1b64      	subs	r4, r4, r5
 80076c6:	10a4      	asrs	r4, r4, #2
 80076c8:	2600      	movs	r6, #0
 80076ca:	42a6      	cmp	r6, r4
 80076cc:	d105      	bne.n	80076da <__libc_init_array+0x2e>
 80076ce:	bd70      	pop	{r4, r5, r6, pc}
 80076d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d4:	4798      	blx	r3
 80076d6:	3601      	adds	r6, #1
 80076d8:	e7ee      	b.n	80076b8 <__libc_init_array+0xc>
 80076da:	f855 3b04 	ldr.w	r3, [r5], #4
 80076de:	4798      	blx	r3
 80076e0:	3601      	adds	r6, #1
 80076e2:	e7f2      	b.n	80076ca <__libc_init_array+0x1e>
 80076e4:	08007784 	.word	0x08007784
 80076e8:	08007784 	.word	0x08007784
 80076ec:	08007784 	.word	0x08007784
 80076f0:	08007788 	.word	0x08007788

080076f4 <memset>:
 80076f4:	4402      	add	r2, r0
 80076f6:	4603      	mov	r3, r0
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d100      	bne.n	80076fe <memset+0xa>
 80076fc:	4770      	bx	lr
 80076fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007702:	e7f9      	b.n	80076f8 <memset+0x4>

08007704 <_init>:
 8007704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007706:	bf00      	nop
 8007708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800770a:	bc08      	pop	{r3}
 800770c:	469e      	mov	lr, r3
 800770e:	4770      	bx	lr

08007710 <_fini>:
 8007710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007712:	bf00      	nop
 8007714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007716:	bc08      	pop	{r3}
 8007718:	469e      	mov	lr, r3
 800771a:	4770      	bx	lr
