
Firmware_MAXM86161.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007834  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080079bc  080079bc  000179bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a1c  08007a1c  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08007a1c  08007a1c  00017a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a24  08007a24  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a24  08007a24  00017a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a28  08007a28  00017a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00001b70  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001cf0  20001cf0  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016e48  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032a3  00000000  00000000  00036ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  0003a2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ce0  00000000  00000000  0003b0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023911  00000000  00000000  0003bd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f72  00000000  00000000  0005f6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c73e1  00000000  00000000  00072613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001399f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003960  00000000  00000000  00139a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080079a4 	.word	0x080079a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	080079a4 	.word	0x080079a4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MAXM86161_I2C_Write>:
MAXM86161_Init_TypeDef ppg_config;

/**
 * Write MAXM86161 register(s)
 */
bool MAXM86161_I2C_Write(uint8_t regName, uint8_t* regValue, uint8_t numBytes) {
 80004c0:	b5b0      	push	{r4, r5, r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
 80004cc:	4613      	mov	r3, r2
 80004ce:	71bb      	strb	r3, [r7, #6]
 80004d0:	466b      	mov	r3, sp
 80004d2:	461d      	mov	r5, r3
	uint8_t tx_buffer[numBytes + 1];
 80004d4:	79bb      	ldrb	r3, [r7, #6]
 80004d6:	1c5c      	adds	r4, r3, #1
 80004d8:	1e63      	subs	r3, r4, #1
 80004da:	613b      	str	r3, [r7, #16]
 80004dc:	4623      	mov	r3, r4
 80004de:	4618      	mov	r0, r3
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	f04f 0200 	mov.w	r2, #0
 80004e8:	f04f 0300 	mov.w	r3, #0
 80004ec:	00cb      	lsls	r3, r1, #3
 80004ee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80004f2:	00c2      	lsls	r2, r0, #3
 80004f4:	4623      	mov	r3, r4
 80004f6:	4618      	mov	r0, r3
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	f04f 0200 	mov.w	r2, #0
 8000500:	f04f 0300 	mov.w	r3, #0
 8000504:	00cb      	lsls	r3, r1, #3
 8000506:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800050a:	00c2      	lsls	r2, r0, #3
 800050c:	4623      	mov	r3, r4
 800050e:	3307      	adds	r3, #7
 8000510:	08db      	lsrs	r3, r3, #3
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	ebad 0d03 	sub.w	sp, sp, r3
 8000518:	ab02      	add	r3, sp, #8
 800051a:	3300      	adds	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
	uint8_t i;
	tx_buffer[0] = regName;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	79fa      	ldrb	r2, [r7, #7]
 8000522:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < numBytes; i++)
 8000524:	2300      	movs	r3, #0
 8000526:	75fb      	strb	r3, [r7, #23]
 8000528:	e00a      	b.n	8000540 <MAXM86161_I2C_Write+0x80>
		tx_buffer[i + 1] = regValue[i];
 800052a:	7dfb      	ldrb	r3, [r7, #23]
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	441a      	add	r2, r3
 8000530:	7dfb      	ldrb	r3, [r7, #23]
 8000532:	3301      	adds	r3, #1
 8000534:	7811      	ldrb	r1, [r2, #0]
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < numBytes; i++)
 800053a:	7dfb      	ldrb	r3, [r7, #23]
 800053c:	3301      	adds	r3, #1
 800053e:	75fb      	strb	r3, [r7, #23]
 8000540:	7dfa      	ldrb	r2, [r7, #23]
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	429a      	cmp	r2, r3
 8000546:	d3f0      	bcc.n	800052a <MAXM86161_I2C_Write+0x6a>

	return HAL_I2C_Master_Transmit(&hi2c_ppg_max, MAXM86161_I2C_ADDRESS, tx_buffer,
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	79bb      	ldrb	r3, [r7, #6]
 800054c:	b29b      	uxth	r3, r3
 800054e:	3301      	adds	r3, #1
 8000550:	b29b      	uxth	r3, r3
 8000552:	2164      	movs	r1, #100	; 0x64
 8000554:	9100      	str	r1, [sp, #0]
 8000556:	21c4      	movs	r1, #196	; 0xc4
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <MAXM86161_I2C_Write+0xb4>)
 800055a:	f001 f8e7 	bl	800172c <HAL_I2C_Master_Transmit>
 800055e:	4603      	mov	r3, r0
			numBytes + 1, 100) == HAL_OK;
 8000560:	2b00      	cmp	r3, #0
 8000562:	bf0c      	ite	eq
 8000564:	2301      	moveq	r3, #1
 8000566:	2300      	movne	r3, #0
 8000568:	b2db      	uxtb	r3, r3
 800056a:	46ad      	mov	sp, r5
}
 800056c:	4618      	mov	r0, r3
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bdb0      	pop	{r4, r5, r7, pc}
 8000574:	200003c0 	.word	0x200003c0

08000578 <MAXM86161_I2C_Read>:

/**
 * Read MAXM86161 register(s)
 */
bool MAXM86161_I2C_Read(uint8_t regName, uint8_t* readByte, uint8_t numBytes) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af02      	add	r7, sp, #8
 800057e:	4603      	mov	r3, r0
 8000580:	6039      	str	r1, [r7, #0]
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	4613      	mov	r3, r2
 8000586:	71bb      	strb	r3, [r7, #6]
	bool res = true;
 8000588:	2301      	movs	r3, #1
 800058a:	73fb      	strb	r3, [r7, #15]
	res &= (HAL_I2C_Master_Transmit(&hi2c_ppg_max, MAXM86161_I2C_ADDRESS, &regName,
 800058c:	1dfa      	adds	r2, r7, #7
 800058e:	2364      	movs	r3, #100	; 0x64
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2301      	movs	r3, #1
 8000594:	21c4      	movs	r1, #196	; 0xc4
 8000596:	4816      	ldr	r0, [pc, #88]	; (80005f0 <MAXM86161_I2C_Read+0x78>)
 8000598:	f001 f8c8 	bl	800172c <HAL_I2C_Master_Transmit>
 800059c:	4603      	mov	r3, r0
			1, 100) == HAL_OK);
 800059e:	2b00      	cmp	r3, #0
 80005a0:	bf0c      	ite	eq
 80005a2:	2301      	moveq	r3, #1
 80005a4:	2300      	movne	r3, #0
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	461a      	mov	r2, r3
	res &= (HAL_I2C_Master_Transmit(&hi2c_ppg_max, MAXM86161_I2C_ADDRESS, &regName,
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	4013      	ands	r3, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	bf14      	ite	ne
 80005b2:	2301      	movne	r3, #1
 80005b4:	2300      	moveq	r3, #0
 80005b6:	73fb      	strb	r3, [r7, #15]
	res &= HAL_I2C_Master_Receive(&hi2c_ppg_max, MAXM86161_I2C_ADDRESS, readByte,
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	2264      	movs	r2, #100	; 0x64
 80005be:	9200      	str	r2, [sp, #0]
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	21c4      	movs	r1, #196	; 0xc4
 80005c4:	480a      	ldr	r0, [pc, #40]	; (80005f0 <MAXM86161_I2C_Read+0x78>)
 80005c6:	f001 f9af 	bl	8001928 <HAL_I2C_Master_Receive>
 80005ca:	4603      	mov	r3, r0
			numBytes, 100) == HAL_OK;
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	bf0c      	ite	eq
 80005d0:	2301      	moveq	r3, #1
 80005d2:	2300      	movne	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	461a      	mov	r2, r3
	res &= HAL_I2C_Master_Receive(&hi2c_ppg_max, MAXM86161_I2C_ADDRESS, readByte,
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	4013      	ands	r3, r2
 80005dc:	2b00      	cmp	r3, #0
 80005de:	bf14      	ite	ne
 80005e0:	2301      	movne	r3, #1
 80005e2:	2300      	moveq	r3, #0
 80005e4:	73fb      	strb	r3, [r7, #15]
	return res;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200003c0 	.word	0x200003c0

080005f4 <MAXM86161_Read_Part_ID>:

/**
 * Read sensor part ID
 */
uint8_t MAXM86161_Read_Part_ID(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
	uint8_t part_id;
	MAXM86161_I2C_Read(MAXM86161_REG_PART_ID, &part_id, 1);
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	2201      	movs	r2, #1
 80005fe:	4619      	mov	r1, r3
 8000600:	20ff      	movs	r0, #255	; 0xff
 8000602:	f7ff ffb9 	bl	8000578 <MAXM86161_I2C_Read>
	return part_id;
 8000606:	79fb      	ldrb	r3, [r7, #7]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <MAXM86161_Config>:
}

/**
 * Configuration of MAXM86161 operation
 */
bool MAXM86161_Config(MAXM86161_Init_TypeDef initStruct){
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b087      	sub	sp, #28
 8000614:	af00      	add	r7, sp, #0
 8000616:	463c      	mov	r4, r7
 8000618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	bool result = true;
 800061c:	2301      	movs	r3, #1
 800061e:	75fb      	strb	r3, [r7, #23]
	uint8_t temp;

	temp = 0x01; //Soft Reset
 8000620:	2301      	movs	r3, #1
 8000622:	75bb      	strb	r3, [r7, #22]
	result &= MAXM86161_I2C_Write(MAXM86161_SYSTEM_CONTROL, &temp, 1);
 8000624:	f107 0316 	add.w	r3, r7, #22
 8000628:	2201      	movs	r2, #1
 800062a:	4619      	mov	r1, r3
 800062c:	200d      	movs	r0, #13
 800062e:	f7ff ff47 	bl	80004c0 <MAXM86161_I2C_Write>
 8000632:	4603      	mov	r3, r0
 8000634:	461a      	mov	r2, r3
 8000636:	7dfb      	ldrb	r3, [r7, #23]
 8000638:	4013      	ands	r3, r2
 800063a:	2b00      	cmp	r3, #0
 800063c:	bf14      	ite	ne
 800063e:	2301      	movne	r3, #1
 8000640:	2300      	moveq	r3, #0
 8000642:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(1);
 8000644:	2001      	movs	r0, #1
 8000646:	f000 fc41 	bl	8000ecc <HAL_Delay>
	result &= MAXM86161_I2C_Write(MAXM86161_SYSTEM_CONTROL, &initStruct.shutdown, 1);
 800064a:	463b      	mov	r3, r7
 800064c:	2201      	movs	r2, #1
 800064e:	4619      	mov	r1, r3
 8000650:	200d      	movs	r0, #13
 8000652:	f7ff ff35 	bl	80004c0 <MAXM86161_I2C_Write>
 8000656:	4603      	mov	r3, r0
 8000658:	461a      	mov	r2, r3
 800065a:	7dfb      	ldrb	r3, [r7, #23]
 800065c:	4013      	ands	r3, r2
 800065e:	2b00      	cmp	r3, #0
 8000660:	bf14      	ite	ne
 8000662:	2301      	movne	r3, #1
 8000664:	2300      	moveq	r3, #0
 8000666:	75fb      	strb	r3, [r7, #23]

	temp = initStruct.integration_time | initStruct.full_scale;
 8000668:	793a      	ldrb	r2, [r7, #4]
 800066a:	78fb      	ldrb	r3, [r7, #3]
 800066c:	4313      	orrs	r3, r2
 800066e:	b2db      	uxtb	r3, r3
 8000670:	75bb      	strb	r3, [r7, #22]
	result &= MAXM86161_I2C_Write(MAXM86161_PPG_CONFIGURATION_1, &temp, 1);
 8000672:	f107 0316 	add.w	r3, r7, #22
 8000676:	2201      	movs	r2, #1
 8000678:	4619      	mov	r1, r3
 800067a:	2011      	movs	r0, #17
 800067c:	f7ff ff20 	bl	80004c0 <MAXM86161_I2C_Write>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	7dfb      	ldrb	r3, [r7, #23]
 8000686:	4013      	ands	r3, r2
 8000688:	2b00      	cmp	r3, #0
 800068a:	bf14      	ite	ne
 800068c:	2301      	movne	r3, #1
 800068e:	2300      	moveq	r3, #0
 8000690:	75fb      	strb	r3, [r7, #23]

	temp = initStruct.sample_avg | initStruct.frequency;
 8000692:	7a3a      	ldrb	r2, [r7, #8]
 8000694:	787b      	ldrb	r3, [r7, #1]
 8000696:	4313      	orrs	r3, r2
 8000698:	b2db      	uxtb	r3, r3
 800069a:	75bb      	strb	r3, [r7, #22]
	result &= MAXM86161_I2C_Write(MAXM86161_PPG_CONFIGURATION_2, &temp, 1);
 800069c:	f107 0316 	add.w	r3, r7, #22
 80006a0:	2201      	movs	r2, #1
 80006a2:	4619      	mov	r1, r3
 80006a4:	2012      	movs	r0, #18
 80006a6:	f7ff ff0b 	bl	80004c0 <MAXM86161_I2C_Write>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	7dfb      	ldrb	r3, [r7, #23]
 80006b0:	4013      	ands	r3, r2
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	bf14      	ite	ne
 80006b6:	2301      	movne	r3, #1
 80006b8:	2300      	moveq	r3, #0
 80006ba:	75fb      	strb	r3, [r7, #23]

	temp = initStruct.led1_range | initStruct.led2_range | initStruct.led3_range;
 80006bc:	797a      	ldrb	r2, [r7, #5]
 80006be:	79bb      	ldrb	r3, [r7, #6]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	75bb      	strb	r3, [r7, #22]
	result &= MAXM86161_I2C_Write(MAXM86161_LED_RANGE_1, &temp, 1);
 80006cc:	f107 0316 	add.w	r3, r7, #22
 80006d0:	2201      	movs	r2, #1
 80006d2:	4619      	mov	r1, r3
 80006d4:	202a      	movs	r0, #42	; 0x2a
 80006d6:	f7ff fef3 	bl	80004c0 <MAXM86161_I2C_Write>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	7dfb      	ldrb	r3, [r7, #23]
 80006e0:	4013      	ands	r3, r2
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	bf14      	ite	ne
 80006e6:	2301      	movne	r3, #1
 80006e8:	2300      	moveq	r3, #0
 80006ea:	75fb      	strb	r3, [r7, #23]

	result &= MAXM86161_I2C_Write(MAXM86161_LED1_PA, &initStruct.pa[0], 1);
 80006ec:	463b      	mov	r3, r7
 80006ee:	330b      	adds	r3, #11
 80006f0:	2201      	movs	r2, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	2023      	movs	r0, #35	; 0x23
 80006f6:	f7ff fee3 	bl	80004c0 <MAXM86161_I2C_Write>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	7dfb      	ldrb	r3, [r7, #23]
 8000700:	4013      	ands	r3, r2
 8000702:	2b00      	cmp	r3, #0
 8000704:	bf14      	ite	ne
 8000706:	2301      	movne	r3, #1
 8000708:	2300      	moveq	r3, #0
 800070a:	75fb      	strb	r3, [r7, #23]
	result &= MAXM86161_I2C_Write(MAXM86161_LED2_PA, &initStruct.pa[1], 1);
 800070c:	463b      	mov	r3, r7
 800070e:	330c      	adds	r3, #12
 8000710:	2201      	movs	r2, #1
 8000712:	4619      	mov	r1, r3
 8000714:	2024      	movs	r0, #36	; 0x24
 8000716:	f7ff fed3 	bl	80004c0 <MAXM86161_I2C_Write>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	4013      	ands	r3, r2
 8000722:	2b00      	cmp	r3, #0
 8000724:	bf14      	ite	ne
 8000726:	2301      	movne	r3, #1
 8000728:	2300      	moveq	r3, #0
 800072a:	75fb      	strb	r3, [r7, #23]
	result &= MAXM86161_I2C_Write(MAXM86161_LED3_PA, &initStruct.pa[2], 1);
 800072c:	463b      	mov	r3, r7
 800072e:	330d      	adds	r3, #13
 8000730:	2201      	movs	r2, #1
 8000732:	4619      	mov	r1, r3
 8000734:	2025      	movs	r0, #37	; 0x25
 8000736:	f7ff fec3 	bl	80004c0 <MAXM86161_I2C_Write>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	4013      	ands	r3, r2
 8000742:	2b00      	cmp	r3, #0
 8000744:	bf14      	ite	ne
 8000746:	2301      	movne	r3, #1
 8000748:	2300      	moveq	r3, #0
 800074a:	75fb      	strb	r3, [r7, #23]

	temp = 0x21;
 800074c:	2321      	movs	r3, #33	; 0x21
 800074e:	75bb      	strb	r3, [r7, #22]
	result &= MAXM86161_I2C_Write(MAXM86161_LED_SEQUENCE_REGISTER_1, &temp, 1);
 8000750:	f107 0316 	add.w	r3, r7, #22
 8000754:	2201      	movs	r2, #1
 8000756:	4619      	mov	r1, r3
 8000758:	2020      	movs	r0, #32
 800075a:	f7ff feb1 	bl	80004c0 <MAXM86161_I2C_Write>
 800075e:	4603      	mov	r3, r0
 8000760:	461a      	mov	r2, r3
 8000762:	7dfb      	ldrb	r3, [r7, #23]
 8000764:	4013      	ands	r3, r2
 8000766:	2b00      	cmp	r3, #0
 8000768:	bf14      	ite	ne
 800076a:	2301      	movne	r3, #1
 800076c:	2300      	moveq	r3, #0
 800076e:	75fb      	strb	r3, [r7, #23]
	temp = 0x03;
 8000770:	2303      	movs	r3, #3
 8000772:	75bb      	strb	r3, [r7, #22]
	result &= MAXM86161_I2C_Write(MAXM86161_LED_SEQUENCE_REGISTER_2, &temp, 1);
 8000774:	f107 0316 	add.w	r3, r7, #22
 8000778:	2201      	movs	r2, #1
 800077a:	4619      	mov	r1, r3
 800077c:	2021      	movs	r0, #33	; 0x21
 800077e:	f7ff fe9f 	bl	80004c0 <MAXM86161_I2C_Write>
 8000782:	4603      	mov	r3, r0
 8000784:	461a      	mov	r2, r3
 8000786:	7dfb      	ldrb	r3, [r7, #23]
 8000788:	4013      	ands	r3, r2
 800078a:	2b00      	cmp	r3, #0
 800078c:	bf14      	ite	ne
 800078e:	2301      	movne	r3, #1
 8000790:	2300      	moveq	r3, #0
 8000792:	75fb      	strb	r3, [r7, #23]


	return result;
 8000794:	7dfb      	ldrb	r3, [r7, #23]
}
 8000796:	4618      	mov	r0, r3
 8000798:	371c      	adds	r7, #28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd90      	pop	{r4, r7, pc}

0800079e <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007a4:	f000 fb20 	bl	8000de8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007a8:	f000 f83c 	bl	8000824 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007ac:	f000 f8d4 	bl	8000958 <MX_GPIO_Init>
	MX_I2C3_Init();
 80007b0:	f000 f8a4 	bl	80008fc <MX_I2C3_Init>
	MX_USB_DEVICE_Init();
 80007b4:	f006 fbc8 	bl	8006f48 <MX_USB_DEVICE_Init>

	/* USER CODE BEGIN 2 */
	HAL_Delay(500);
 80007b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007bc:	f000 fb86 	bl	8000ecc <HAL_Delay>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	uint8_t part_id;
	bool result = true;
 80007c0:	2301      	movs	r3, #1
 80007c2:	75fb      	strb	r3, [r7, #23]

	part_id = MAXM86161_Read_Part_ID();
 80007c4:	f7ff ff16 	bl	80005f4 <MAXM86161_Read_Part_ID>
 80007c8:	4603      	mov	r3, r0
 80007ca:	75bb      	strb	r3, [r7, #22]

	MAXM86161_Init_TypeDef ppg;
	ppg.shutdown = MAXM86161_SHDNMODE_ON;
 80007cc:	2300      	movs	r3, #0
 80007ce:	723b      	strb	r3, [r7, #8]
	ppg.integration_time = MAXM86161_IT_4;
 80007d0:	230c      	movs	r3, #12
 80007d2:	733b      	strb	r3, [r7, #12]
	ppg.full_scale = MAXM86161_FS_16384;
 80007d4:	2308      	movs	r3, #8
 80007d6:	72fb      	strb	r3, [r7, #11]
	ppg.sample_avg = MAXM86161_NO_AVG;
 80007d8:	2300      	movs	r3, #0
 80007da:	743b      	strb	r3, [r7, #16]
	ppg.frequency = MAXM86161_SR_100HZ;
 80007dc:	2318      	movs	r3, #24
 80007de:	727b      	strb	r3, [r7, #9]

	ppg.led1_range = MAXM86161_LED1_RGE_1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	737b      	strb	r3, [r7, #13]
	ppg.led2_range = MAXM86161_LED2_RGE_1;
 80007e4:	2304      	movs	r3, #4
 80007e6:	73bb      	strb	r3, [r7, #14]
	ppg.led3_range = MAXM86161_LED3_RGE_1;
 80007e8:	2310      	movs	r3, #16
 80007ea:	73fb      	strb	r3, [r7, #15]

	ppg.pa[0] = 0x50; //GREEN
 80007ec:	2350      	movs	r3, #80	; 0x50
 80007ee:	74fb      	strb	r3, [r7, #19]
	ppg.pa[1] = 0x50;//IR
 80007f0:	2350      	movs	r3, #80	; 0x50
 80007f2:	753b      	strb	r3, [r7, #20]
	ppg.pa[2] = 0x50;//RED
 80007f4:	2350      	movs	r3, #80	; 0x50
 80007f6:	757b      	strb	r3, [r7, #21]

	result &= MAXM86161_Config(ppg);
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007fe:	f7ff ff07 	bl	8000610 <MAXM86161_Config>
 8000802:	4603      	mov	r3, r0
 8000804:	461a      	mov	r2, r3
 8000806:	7dfb      	ldrb	r3, [r7, #23]
 8000808:	4013      	ands	r3, r2
 800080a:	2b00      	cmp	r3, #0
 800080c:	bf14      	ite	ne
 800080e:	2301      	movne	r3, #1
 8000810:	2300      	moveq	r3, #0
 8000812:	75fb      	strb	r3, [r7, #23]

	uint8_t lettura;
	MAXM86161_I2C_Read(MAXM86161_LED_RANGE_1, &lettura, 1);
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	2201      	movs	r2, #1
 8000818:	4619      	mov	r1, r3
 800081a:	202a      	movs	r0, #42	; 0x2a
 800081c:	f7ff feac 	bl	8000578 <MAXM86161_I2C_Read>

	while (1) {
 8000820:	e7fe      	b.n	8000820 <main+0x82>
	...

08000824 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	; 0x50
 8000828:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	2230      	movs	r2, #48	; 0x30
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f007 f8ae 	bl	8007994 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <SystemClock_Config+0xd0>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <SystemClock_Config+0xd0>)
 8000852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000856:	6413      	str	r3, [r2, #64]	; 0x40
 8000858:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <SystemClock_Config+0xd0>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <SystemClock_Config+0xd4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a22      	ldr	r2, [pc, #136]	; (80008f8 <SystemClock_Config+0xd4>)
 800086e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <SystemClock_Config+0xd4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000880:	2303      	movs	r3, #3
 8000882:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000884:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088a:	2301      	movs	r3, #1
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800088e:	2310      	movs	r3, #16
 8000890:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000892:	2302      	movs	r3, #2
 8000894:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000896:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800089a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800089c:	2308      	movs	r3, #8
 800089e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80008a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008a4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008a6:	2304      	movs	r3, #4
 80008a8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80008aa:	2307      	movs	r3, #7
 80008ac:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008ae:	f107 0320 	add.w	r3, r7, #32
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 ff0e 	bl	80036d4 <HAL_RCC_OscConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x9e>
		Error_Handler();
 80008be:	f000 f98b 	bl	8000bd8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008c2:	230f      	movs	r3, #15
 80008c4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 f971 	bl	8003bc4 <HAL_RCC_ClockConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0xc8>
		Error_Handler();
 80008e8:	f000 f976 	bl	8000bd8 <Error_Handler>
	}
}
 80008ec:	bf00      	nop
 80008ee:	3750      	adds	r7, #80	; 0x50
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40007000 	.word	0x40007000

080008fc <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_I2C3_Init+0x50>)
 8000902:	4a13      	ldr	r2, [pc, #76]	; (8000950 <MX_I2C3_Init+0x54>)
 8000904:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_I2C3_Init+0x50>)
 8000908:	4a12      	ldr	r2, [pc, #72]	; (8000954 <MX_I2C3_Init+0x58>)
 800090a:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_I2C3_Init+0x50>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_I2C3_Init+0x50>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_I2C3_Init+0x50>)
 800091a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800091e:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <MX_I2C3_Init+0x50>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_I2C3_Init+0x50>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <MX_I2C3_Init+0x50>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_I2C3_Init+0x50>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <MX_I2C3_Init+0x50>)
 800093a:	f000 fdb3 	bl	80014a4 <HAL_I2C_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_I2C3_Init+0x4c>
		Error_Handler();
 8000944:	f000 f948 	bl	8000bd8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200003c0 	.word	0x200003c0
 8000950:	40005c00 	.word	0x40005c00
 8000954:	000186a0 	.word	0x000186a0

08000958 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	; 0x30
 800095c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	4b93      	ldr	r3, [pc, #588]	; (8000bc0 <MX_GPIO_Init+0x268>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a92      	ldr	r2, [pc, #584]	; (8000bc0 <MX_GPIO_Init+0x268>)
 8000978:	f043 0310 	orr.w	r3, r3, #16
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b90      	ldr	r3, [pc, #576]	; (8000bc0 <MX_GPIO_Init+0x268>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0310 	and.w	r3, r3, #16
 8000986:	61bb      	str	r3, [r7, #24]
 8000988:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
 800098e:	4b8c      	ldr	r3, [pc, #560]	; (8000bc0 <MX_GPIO_Init+0x268>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a8b      	ldr	r2, [pc, #556]	; (8000bc0 <MX_GPIO_Init+0x268>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b89      	ldr	r3, [pc, #548]	; (8000bc0 <MX_GPIO_Init+0x268>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b85      	ldr	r3, [pc, #532]	; (8000bc0 <MX_GPIO_Init+0x268>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a84      	ldr	r2, [pc, #528]	; (8000bc0 <MX_GPIO_Init+0x268>)
 80009b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b82      	ldr	r3, [pc, #520]	; (8000bc0 <MX_GPIO_Init+0x268>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b7e      	ldr	r3, [pc, #504]	; (8000bc0 <MX_GPIO_Init+0x268>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a7d      	ldr	r2, [pc, #500]	; (8000bc0 <MX_GPIO_Init+0x268>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b7b      	ldr	r3, [pc, #492]	; (8000bc0 <MX_GPIO_Init+0x268>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	4b77      	ldr	r3, [pc, #476]	; (8000bc0 <MX_GPIO_Init+0x268>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a76      	ldr	r2, [pc, #472]	; (8000bc0 <MX_GPIO_Init+0x268>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b74      	ldr	r3, [pc, #464]	; (8000bc0 <MX_GPIO_Init+0x268>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b70      	ldr	r3, [pc, #448]	; (8000bc0 <MX_GPIO_Init+0x268>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a6f      	ldr	r2, [pc, #444]	; (8000bc0 <MX_GPIO_Init+0x268>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b6d      	ldr	r3, [pc, #436]	; (8000bc0 <MX_GPIO_Init+0x268>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2108      	movs	r1, #8
 8000a1a:	486a      	ldr	r0, [pc, #424]	; (8000bc4 <MX_GPIO_Init+0x26c>)
 8000a1c:	f000 fd28 	bl	8001470 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000a20:	2201      	movs	r2, #1
 8000a22:	2101      	movs	r1, #1
 8000a24:	4868      	ldr	r0, [pc, #416]	; (8000bc8 <MX_GPIO_Init+0x270>)
 8000a26:	f000 fd23 	bl	8001470 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a30:	4866      	ldr	r0, [pc, #408]	; (8000bcc <MX_GPIO_Init+0x274>)
 8000a32:	f000 fd1d 	bl	8001470 <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a36:	2308      	movs	r3, #8
 8000a38:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	485d      	ldr	r0, [pc, #372]	; (8000bc4 <MX_GPIO_Init+0x26c>)
 8000a4e:	f000 fb73 	bl	8001138 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a52:	2301      	movs	r3, #1
 8000a54:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4857      	ldr	r0, [pc, #348]	; (8000bc8 <MX_GPIO_Init+0x270>)
 8000a6a:	f000 fb65 	bl	8001138 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a6e:	2308      	movs	r3, #8
 8000a70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a7e:	2305      	movs	r3, #5
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	484f      	ldr	r0, [pc, #316]	; (8000bc8 <MX_GPIO_Init+0x270>)
 8000a8a:	f000 fb55 	bl	8001138 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a96:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	484b      	ldr	r0, [pc, #300]	; (8000bd0 <MX_GPIO_Init+0x278>)
 8000aa4:	f000 fb48 	bl	8001138 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000aa8:	2310      	movs	r3, #16
 8000aaa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab8:	2306      	movs	r3, #6
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4843      	ldr	r0, [pc, #268]	; (8000bd0 <MX_GPIO_Init+0x278>)
 8000ac4:	f000 fb38 	bl	8001138 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 8000ac8:	23e0      	movs	r3, #224	; 0xe0
 8000aca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ad8:	2305      	movs	r3, #5
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	483b      	ldr	r0, [pc, #236]	; (8000bd0 <MX_GPIO_Init+0x278>)
 8000ae4:	f000 fb28 	bl	8001138 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	4836      	ldr	r0, [pc, #216]	; (8000bd4 <MX_GPIO_Init+0x27c>)
 8000afc:	f000 fb1c 	bl	8001138 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b04:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b12:	2305      	movs	r3, #5
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	482d      	ldr	r0, [pc, #180]	; (8000bd4 <MX_GPIO_Init+0x27c>)
 8000b1e:	f000 fb0b 	bl	8001138 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000b22:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b26:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4824      	ldr	r0, [pc, #144]	; (8000bcc <MX_GPIO_Init+0x274>)
 8000b3c:	f000 fafc 	bl	8001138 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 8000b40:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b52:	2306      	movs	r3, #6
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	481a      	ldr	r0, [pc, #104]	; (8000bc8 <MX_GPIO_Init+0x270>)
 8000b5e:	f000 faeb 	bl	8001138 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b62:	2320      	movs	r3, #32
 8000b64:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4815      	ldr	r0, [pc, #84]	; (8000bcc <MX_GPIO_Init+0x274>)
 8000b76:	f000 fadf 	bl	8001138 <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin | Audio_SDA_Pin;
 8000b7a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b7e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b80:	2312      	movs	r3, #18
 8000b82:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <MX_GPIO_Init+0x27c>)
 8000b98:	f000 face 	bl	8001138 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ba0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ba4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_GPIO_Init+0x26c>)
 8000bb2:	f000 fac1 	bl	8001138 <HAL_GPIO_Init>

}
 8000bb6:	bf00      	nop
 8000bb8:	3730      	adds	r7, #48	; 0x30
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40020800 	.word	0x40020800
 8000bcc:	40020c00 	.word	0x40020c00
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40020400 	.word	0x40020400

08000bd8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000be0:	e7fe      	b.n	8000be0 <Error_Handler+0x8>
	...

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c22:	2007      	movs	r0, #7
 8000c24:	f000 fa46 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800

08000c34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a29      	ldr	r2, [pc, #164]	; (8000cf8 <HAL_I2C_MspInit+0xc4>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d14b      	bne.n	8000cee <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <HAL_I2C_MspInit+0xc8>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a27      	ldr	r2, [pc, #156]	; (8000cfc <HAL_I2C_MspInit+0xc8>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <HAL_I2C_MspInit+0xc8>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <HAL_I2C_MspInit+0xc8>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a20      	ldr	r2, [pc, #128]	; (8000cfc <HAL_I2C_MspInit+0xc8>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <HAL_I2C_MspInit+0xc8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c94:	2312      	movs	r3, #18
 8000c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4815      	ldr	r0, [pc, #84]	; (8000d00 <HAL_I2C_MspInit+0xcc>)
 8000cac:	f000 fa44 	bl	8001138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb6:	2312      	movs	r3, #18
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <HAL_I2C_MspInit+0xd0>)
 8000cce:	f000 fa33 	bl	8001138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_I2C_MspInit+0xc8>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <HAL_I2C_MspInit+0xc8>)
 8000cdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_I2C_MspInit+0xc8>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	; 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40005c00 	.word	0x40005c00
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020800 	.word	0x40020800
 8000d04:	40020000 	.word	0x40020000

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f000 f89a 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <OTG_FS_IRQHandler+0x10>)
 8000d62:	f001 fc84 	bl	800266e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200018e8 	.word	0x200018e8

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9a:	490e      	ldr	r1, [pc, #56]	; (8000dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db0:	4c0b      	ldr	r4, [pc, #44]	; (8000de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dbe:	f7ff ffd7 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f006 fdc3 	bl	800794c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fcea 	bl	800079e <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000dd8:	08007a2c 	.word	0x08007a2c
  ldr r2, =_sbss
 8000ddc:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000de0:	20001cf0 	.word	0x20001cf0

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f94f 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	2000      	movs	r0, #0
 8000e18:	f000 f808 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fee2 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x54>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x58>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f967 	bl	800111e <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f92f 	bl	80010ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_InitTick+0x5c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000414 	.word	0x20000414

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000414 	.word	0x20000414

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db0b      	blt.n	8000fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 021f 	and.w	r2, r3, #31
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <__NVIC_EnableIRQ+0x38>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	2001      	movs	r0, #1
 8000f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	; (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff8e 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff29 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff3e 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff8e 	bl	8001008 <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5d 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff31 	bl	8000f78 <__NVIC_EnableIRQ>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffa2 	bl	8001070 <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	e16b      	b.n	800142c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001154:	2201      	movs	r2, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	429a      	cmp	r2, r3
 800116e:	f040 815a 	bne.w	8001426 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b01      	cmp	r3, #1
 800117c:	d005      	beq.n	800118a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001186:	2b02      	cmp	r3, #2
 8001188:	d130      	bne.n	80011ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	2203      	movs	r2, #3
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c0:	2201      	movs	r2, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f003 0201 	and.w	r2, r3, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d017      	beq.n	8001228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d123      	bne.n	800127c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	69b9      	ldr	r1, [r7, #24]
 8001278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80b4 	beq.w	8001426 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b60      	ldr	r3, [pc, #384]	; (8001444 <HAL_GPIO_Init+0x30c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a5f      	ldr	r2, [pc, #380]	; (8001444 <HAL_GPIO_Init+0x30c>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b5d      	ldr	r3, [pc, #372]	; (8001444 <HAL_GPIO_Init+0x30c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012da:	4a5b      	ldr	r2, [pc, #364]	; (8001448 <HAL_GPIO_Init+0x310>)
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3302      	adds	r3, #2
 80012e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a52      	ldr	r2, [pc, #328]	; (800144c <HAL_GPIO_Init+0x314>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d02b      	beq.n	800135e <HAL_GPIO_Init+0x226>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a51      	ldr	r2, [pc, #324]	; (8001450 <HAL_GPIO_Init+0x318>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d025      	beq.n	800135a <HAL_GPIO_Init+0x222>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a50      	ldr	r2, [pc, #320]	; (8001454 <HAL_GPIO_Init+0x31c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d01f      	beq.n	8001356 <HAL_GPIO_Init+0x21e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4f      	ldr	r2, [pc, #316]	; (8001458 <HAL_GPIO_Init+0x320>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d019      	beq.n	8001352 <HAL_GPIO_Init+0x21a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4e      	ldr	r2, [pc, #312]	; (800145c <HAL_GPIO_Init+0x324>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0x216>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4d      	ldr	r2, [pc, #308]	; (8001460 <HAL_GPIO_Init+0x328>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00d      	beq.n	800134a <HAL_GPIO_Init+0x212>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <HAL_GPIO_Init+0x32c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0x20e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4b      	ldr	r2, [pc, #300]	; (8001468 <HAL_GPIO_Init+0x330>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_GPIO_Init+0x20a>
 800133e:	2307      	movs	r3, #7
 8001340:	e00e      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001342:	2308      	movs	r3, #8
 8001344:	e00c      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001346:	2306      	movs	r3, #6
 8001348:	e00a      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800134a:	2305      	movs	r3, #5
 800134c:	e008      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800134e:	2304      	movs	r3, #4
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001352:	2303      	movs	r3, #3
 8001354:	e004      	b.n	8001360 <HAL_GPIO_Init+0x228>
 8001356:	2302      	movs	r3, #2
 8001358:	e002      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_GPIO_Init+0x228>
 800135e:	2300      	movs	r3, #0
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	f002 0203 	and.w	r2, r2, #3
 8001366:	0092      	lsls	r2, r2, #2
 8001368:	4093      	lsls	r3, r2
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001370:	4935      	ldr	r1, [pc, #212]	; (8001448 <HAL_GPIO_Init+0x310>)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800137e:	4b3b      	ldr	r3, [pc, #236]	; (800146c <HAL_GPIO_Init+0x334>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013a2:	4a32      	ldr	r2, [pc, #200]	; (800146c <HAL_GPIO_Init+0x334>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013a8:	4b30      	ldr	r3, [pc, #192]	; (800146c <HAL_GPIO_Init+0x334>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013cc:	4a27      	ldr	r2, [pc, #156]	; (800146c <HAL_GPIO_Init+0x334>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <HAL_GPIO_Init+0x334>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013f6:	4a1d      	ldr	r2, [pc, #116]	; (800146c <HAL_GPIO_Init+0x334>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_GPIO_Init+0x334>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001420:	4a12      	ldr	r2, [pc, #72]	; (800146c <HAL_GPIO_Init+0x334>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3301      	adds	r3, #1
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	2b0f      	cmp	r3, #15
 8001430:	f67f ae90 	bls.w	8001154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40013800 	.word	0x40013800
 800144c:	40020000 	.word	0x40020000
 8001450:	40020400 	.word	0x40020400
 8001454:	40020800 	.word	0x40020800
 8001458:	40020c00 	.word	0x40020c00
 800145c:	40021000 	.word	0x40021000
 8001460:	40021400 	.word	0x40021400
 8001464:	40021800 	.word	0x40021800
 8001468:	40021c00 	.word	0x40021c00
 800146c:	40013c00 	.word	0x40013c00

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800148c:	e003      	b.n	8001496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	041a      	lsls	r2, r3, #16
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	619a      	str	r2, [r3, #24]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e12b      	b.n	800170e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d106      	bne.n	80014d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fbb2 	bl	8000c34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2224      	movs	r2, #36	; 0x24
 80014d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001506:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001508:	f002 fd30 	bl	8003f6c <HAL_RCC_GetPCLK1Freq>
 800150c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	4a81      	ldr	r2, [pc, #516]	; (8001718 <HAL_I2C_Init+0x274>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d807      	bhi.n	8001528 <HAL_I2C_Init+0x84>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4a80      	ldr	r2, [pc, #512]	; (800171c <HAL_I2C_Init+0x278>)
 800151c:	4293      	cmp	r3, r2
 800151e:	bf94      	ite	ls
 8001520:	2301      	movls	r3, #1
 8001522:	2300      	movhi	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	e006      	b.n	8001536 <HAL_I2C_Init+0x92>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4a7d      	ldr	r2, [pc, #500]	; (8001720 <HAL_I2C_Init+0x27c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	bf94      	ite	ls
 8001530:	2301      	movls	r3, #1
 8001532:	2300      	movhi	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e0e7      	b.n	800170e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4a78      	ldr	r2, [pc, #480]	; (8001724 <HAL_I2C_Init+0x280>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	0c9b      	lsrs	r3, r3, #18
 8001548:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	430a      	orrs	r2, r1
 800155c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4a6a      	ldr	r2, [pc, #424]	; (8001718 <HAL_I2C_Init+0x274>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d802      	bhi.n	8001578 <HAL_I2C_Init+0xd4>
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3301      	adds	r3, #1
 8001576:	e009      	b.n	800158c <HAL_I2C_Init+0xe8>
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800157e:	fb02 f303 	mul.w	r3, r2, r3
 8001582:	4a69      	ldr	r2, [pc, #420]	; (8001728 <HAL_I2C_Init+0x284>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	099b      	lsrs	r3, r3, #6
 800158a:	3301      	adds	r3, #1
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	430b      	orrs	r3, r1
 8001592:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800159e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	495c      	ldr	r1, [pc, #368]	; (8001718 <HAL_I2C_Init+0x274>)
 80015a8:	428b      	cmp	r3, r1
 80015aa:	d819      	bhi.n	80015e0 <HAL_I2C_Init+0x13c>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	1e59      	subs	r1, r3, #1
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ba:	1c59      	adds	r1, r3, #1
 80015bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015c0:	400b      	ands	r3, r1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00a      	beq.n	80015dc <HAL_I2C_Init+0x138>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1e59      	subs	r1, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015d4:	3301      	adds	r3, #1
 80015d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015da:	e051      	b.n	8001680 <HAL_I2C_Init+0x1dc>
 80015dc:	2304      	movs	r3, #4
 80015de:	e04f      	b.n	8001680 <HAL_I2C_Init+0x1dc>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d111      	bne.n	800160c <HAL_I2C_Init+0x168>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1e58      	subs	r0, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6859      	ldr	r1, [r3, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	440b      	add	r3, r1
 80015f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015fa:	3301      	adds	r3, #1
 80015fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001600:	2b00      	cmp	r3, #0
 8001602:	bf0c      	ite	eq
 8001604:	2301      	moveq	r3, #1
 8001606:	2300      	movne	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	e012      	b.n	8001632 <HAL_I2C_Init+0x18e>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6859      	ldr	r1, [r3, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	0099      	lsls	r1, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001622:	3301      	adds	r3, #1
 8001624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf0c      	ite	eq
 800162c:	2301      	moveq	r3, #1
 800162e:	2300      	movne	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_I2C_Init+0x196>
 8001636:	2301      	movs	r3, #1
 8001638:	e022      	b.n	8001680 <HAL_I2C_Init+0x1dc>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10e      	bne.n	8001660 <HAL_I2C_Init+0x1bc>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1e58      	subs	r0, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6859      	ldr	r1, [r3, #4]
 800164a:	460b      	mov	r3, r1
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	440b      	add	r3, r1
 8001650:	fbb0 f3f3 	udiv	r3, r0, r3
 8001654:	3301      	adds	r3, #1
 8001656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800165e:	e00f      	b.n	8001680 <HAL_I2C_Init+0x1dc>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1e58      	subs	r0, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	0099      	lsls	r1, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	fbb0 f3f3 	udiv	r3, r0, r3
 8001676:	3301      	adds	r3, #1
 8001678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800167c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	6809      	ldr	r1, [r1, #0]
 8001684:	4313      	orrs	r3, r2
 8001686:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69da      	ldr	r2, [r3, #28]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6911      	ldr	r1, [r2, #16]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68d2      	ldr	r2, [r2, #12]
 80016ba:	4311      	orrs	r1, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	430b      	orrs	r3, r1
 80016c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0201 	orr.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2220      	movs	r2, #32
 80016fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	000186a0 	.word	0x000186a0
 800171c:	001e847f 	.word	0x001e847f
 8001720:	003d08ff 	.word	0x003d08ff
 8001724:	431bde83 	.word	0x431bde83
 8001728:	10624dd3 	.word	0x10624dd3

0800172c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af02      	add	r7, sp, #8
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	461a      	mov	r2, r3
 8001738:	460b      	mov	r3, r1
 800173a:	817b      	strh	r3, [r7, #10]
 800173c:	4613      	mov	r3, r2
 800173e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff fbb8 	bl	8000eb4 <HAL_GetTick>
 8001744:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b20      	cmp	r3, #32
 8001750:	f040 80e0 	bne.w	8001914 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2319      	movs	r3, #25
 800175a:	2201      	movs	r2, #1
 800175c:	4970      	ldr	r1, [pc, #448]	; (8001920 <HAL_I2C_Master_Transmit+0x1f4>)
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 fc58 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800176a:	2302      	movs	r3, #2
 800176c:	e0d3      	b.n	8001916 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_I2C_Master_Transmit+0x50>
 8001778:	2302      	movs	r3, #2
 800177a:	e0cc      	b.n	8001916 <HAL_I2C_Master_Transmit+0x1ea>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b01      	cmp	r3, #1
 8001790:	d007      	beq.n	80017a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 0201 	orr.w	r2, r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2221      	movs	r2, #33	; 0x21
 80017b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2210      	movs	r2, #16
 80017be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	893a      	ldrh	r2, [r7, #8]
 80017d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4a50      	ldr	r2, [pc, #320]	; (8001924 <HAL_I2C_Master_Transmit+0x1f8>)
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017e4:	8979      	ldrh	r1, [r7, #10]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	6a3a      	ldr	r2, [r7, #32]
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 fac2 	bl	8001d74 <I2C_MasterRequestWrite>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e08d      	b.n	8001916 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001810:	e066      	b.n	80018e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	6a39      	ldr	r1, [r7, #32]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 fcd2 	bl	80021c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00d      	beq.n	800183e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	2b04      	cmp	r3, #4
 8001828:	d107      	bne.n	800183a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001838:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e06b      	b.n	8001916 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	781a      	ldrb	r2, [r3, #0]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001858:	b29b      	uxth	r3, r3
 800185a:	3b01      	subs	r3, #1
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001866:	3b01      	subs	r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b04      	cmp	r3, #4
 800187a:	d11b      	bne.n	80018b4 <HAL_I2C_Master_Transmit+0x188>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001880:	2b00      	cmp	r3, #0
 8001882:	d017      	beq.n	80018b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	781a      	ldrb	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189e:	b29b      	uxth	r3, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	6a39      	ldr	r1, [r7, #32]
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 fcc2 	bl	8002242 <I2C_WaitOnBTFFlagUntilTimeout>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00d      	beq.n	80018e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d107      	bne.n	80018dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e01a      	b.n	8001916 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d194      	bne.n	8001812 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2220      	movs	r2, #32
 80018fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	e000      	b.n	8001916 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001914:	2302      	movs	r3, #2
  }
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	00100002 	.word	0x00100002
 8001924:	ffff0000 	.word	0xffff0000

08001928 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08c      	sub	sp, #48	; 0x30
 800192c:	af02      	add	r7, sp, #8
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	461a      	mov	r2, r3
 8001934:	460b      	mov	r3, r1
 8001936:	817b      	strh	r3, [r7, #10]
 8001938:	4613      	mov	r3, r2
 800193a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800193c:	f7ff faba 	bl	8000eb4 <HAL_GetTick>
 8001940:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b20      	cmp	r3, #32
 800194c:	f040 820b 	bne.w	8001d66 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2319      	movs	r3, #25
 8001956:	2201      	movs	r2, #1
 8001958:	497c      	ldr	r1, [pc, #496]	; (8001b4c <HAL_I2C_Master_Receive+0x224>)
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 fb5a 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001966:	2302      	movs	r3, #2
 8001968:	e1fe      	b.n	8001d68 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_I2C_Master_Receive+0x50>
 8001974:	2302      	movs	r3, #2
 8001976:	e1f7      	b.n	8001d68 <HAL_I2C_Master_Receive+0x440>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b01      	cmp	r3, #1
 800198c:	d007      	beq.n	800199e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f042 0201 	orr.w	r2, r2, #1
 800199c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2222      	movs	r2, #34	; 0x22
 80019b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2210      	movs	r2, #16
 80019ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	893a      	ldrh	r2, [r7, #8]
 80019ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4a5c      	ldr	r2, [pc, #368]	; (8001b50 <HAL_I2C_Master_Receive+0x228>)
 80019de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019e0:	8979      	ldrh	r1, [r7, #10]
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 fa46 	bl	8001e78 <I2C_MasterRequestRead>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e1b8      	b.n	8001d68 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d113      	bne.n	8001a26 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	623b      	str	r3, [r7, #32]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	623b      	str	r3, [r7, #32]
 8001a12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e18c      	b.n	8001d40 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d11b      	bne.n	8001a66 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e16c      	b.n	8001d40 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d11b      	bne.n	8001aa6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	e14c      	b.n	8001d40 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ab4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001acc:	e138      	b.n	8001d40 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	f200 80f1 	bhi.w	8001cba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d123      	bne.n	8001b28 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 fbed 	bl	80022c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e139      	b.n	8001d68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b10:	3b01      	subs	r3, #1
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b26:	e10b      	b.n	8001d40 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d14e      	bne.n	8001bce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b36:	2200      	movs	r2, #0
 8001b38:	4906      	ldr	r1, [pc, #24]	; (8001b54 <HAL_I2C_Master_Receive+0x22c>)
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 fa6a 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d008      	beq.n	8001b58 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e10e      	b.n	8001d68 <HAL_I2C_Master_Receive+0x440>
 8001b4a:	bf00      	nop
 8001b4c:	00100002 	.word	0x00100002
 8001b50:	ffff0000 	.word	0xffff0000
 8001b54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b84:	3b01      	subs	r3, #1
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bcc:	e0b8      	b.n	8001d40 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4966      	ldr	r1, [pc, #408]	; (8001d70 <HAL_I2C_Master_Receive+0x448>)
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 fa1b 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0bf      	b.n	8001d68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c30:	2200      	movs	r2, #0
 8001c32:	494f      	ldr	r1, [pc, #316]	; (8001d70 <HAL_I2C_Master_Receive+0x448>)
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 f9ed 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e091      	b.n	8001d68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	691a      	ldr	r2, [r3, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cb8:	e042      	b.n	8001d40 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 fb00 	bl	80022c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e04c      	b.n	8001d68 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d118      	bne.n	8001d40 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f47f aec2 	bne.w	8001ace <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001d66:	2302      	movs	r3, #2
  }
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3728      	adds	r7, #40	; 0x28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	00010004 	.word	0x00010004

08001d74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	460b      	mov	r3, r1
 8001d82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d006      	beq.n	8001d9e <I2C_MasterRequestWrite+0x2a>
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d003      	beq.n	8001d9e <I2C_MasterRequestWrite+0x2a>
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d9c:	d108      	bne.n	8001db0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	e00b      	b.n	8001dc8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	2b12      	cmp	r3, #18
 8001db6:	d107      	bne.n	8001dc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f91d 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00d      	beq.n	8001dfc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dee:	d103      	bne.n	8001df8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e035      	b.n	8001e68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e04:	d108      	bne.n	8001e18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e06:	897b      	ldrh	r3, [r7, #10]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e14:	611a      	str	r2, [r3, #16]
 8001e16:	e01b      	b.n	8001e50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e18:	897b      	ldrh	r3, [r7, #10]
 8001e1a:	11db      	asrs	r3, r3, #7
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f003 0306 	and.w	r3, r3, #6
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f063 030f 	orn	r3, r3, #15
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	490e      	ldr	r1, [pc, #56]	; (8001e70 <I2C_MasterRequestWrite+0xfc>)
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f943 	bl	80020c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e010      	b.n	8001e68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e46:	897b      	ldrh	r3, [r7, #10]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4907      	ldr	r1, [pc, #28]	; (8001e74 <I2C_MasterRequestWrite+0x100>)
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f933 	bl	80020c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	00010008 	.word	0x00010008
 8001e74:	00010002 	.word	0x00010002

08001e78 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	460b      	mov	r3, r1
 8001e86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e9c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d006      	beq.n	8001eb2 <I2C_MasterRequestRead+0x3a>
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d003      	beq.n	8001eb2 <I2C_MasterRequestRead+0x3a>
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001eb0:	d108      	bne.n	8001ec4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	e00b      	b.n	8001edc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	2b11      	cmp	r3, #17
 8001eca:	d107      	bne.n	8001edc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 f893 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00d      	beq.n	8001f10 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f02:	d103      	bne.n	8001f0c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e079      	b.n	8002004 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f18:	d108      	bne.n	8001f2c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f1a:	897b      	ldrh	r3, [r7, #10]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	611a      	str	r2, [r3, #16]
 8001f2a:	e05f      	b.n	8001fec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f2c:	897b      	ldrh	r3, [r7, #10]
 8001f2e:	11db      	asrs	r3, r3, #7
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	f003 0306 	and.w	r3, r3, #6
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f063 030f 	orn	r3, r3, #15
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	4930      	ldr	r1, [pc, #192]	; (800200c <I2C_MasterRequestRead+0x194>)
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 f8b9 	bl	80020c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e054      	b.n	8002004 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f5a:	897b      	ldrh	r3, [r7, #10]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4929      	ldr	r1, [pc, #164]	; (8002010 <I2C_MasterRequestRead+0x198>)
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 f8a9 	bl	80020c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e044      	b.n	8002004 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 f831 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00d      	beq.n	8001fd4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc6:	d103      	bne.n	8001fd0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e017      	b.n	8002004 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001fd4:	897b      	ldrh	r3, [r7, #10]
 8001fd6:	11db      	asrs	r3, r3, #7
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f003 0306 	and.w	r3, r3, #6
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	f063 030e 	orn	r3, r3, #14
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4907      	ldr	r1, [pc, #28]	; (8002010 <I2C_MasterRequestRead+0x198>)
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f865 	bl	80020c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	00010008 	.word	0x00010008
 8002010:	00010002 	.word	0x00010002

08002014 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	4613      	mov	r3, r2
 8002022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002024:	e025      	b.n	8002072 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d021      	beq.n	8002072 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202e:	f7fe ff41 	bl	8000eb4 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d302      	bcc.n	8002044 <I2C_WaitOnFlagUntilTimeout+0x30>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d116      	bne.n	8002072 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2220      	movs	r2, #32
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f043 0220 	orr.w	r2, r3, #32
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e023      	b.n	80020ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	0c1b      	lsrs	r3, r3, #16
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d10d      	bne.n	8002098 <I2C_WaitOnFlagUntilTimeout+0x84>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4013      	ands	r3, r2
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf0c      	ite	eq
 800208e:	2301      	moveq	r3, #1
 8002090:	2300      	movne	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	e00c      	b.n	80020b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4013      	ands	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf0c      	ite	eq
 80020aa:	2301      	moveq	r3, #1
 80020ac:	2300      	movne	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d0b6      	beq.n	8002026 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020d0:	e051      	b.n	8002176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e0:	d123      	bne.n	800212a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2220      	movs	r2, #32
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f043 0204 	orr.w	r2, r3, #4
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e046      	b.n	80021b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002130:	d021      	beq.n	8002176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002132:	f7fe febf 	bl	8000eb4 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	429a      	cmp	r2, r3
 8002140:	d302      	bcc.n	8002148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d116      	bne.n	8002176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f043 0220 	orr.w	r2, r3, #32
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e020      	b.n	80021b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	0c1b      	lsrs	r3, r3, #16
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b01      	cmp	r3, #1
 800217e:	d10c      	bne.n	800219a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	43da      	mvns	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4013      	ands	r3, r2
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf14      	ite	ne
 8002192:	2301      	movne	r3, #1
 8002194:	2300      	moveq	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	e00b      	b.n	80021b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	43da      	mvns	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4013      	ands	r3, r2
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf14      	ite	ne
 80021ac:	2301      	movne	r3, #1
 80021ae:	2300      	moveq	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d18d      	bne.n	80020d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021cc:	e02d      	b.n	800222a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f8ce 	bl	8002370 <I2C_IsAcknowledgeFailed>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e02d      	b.n	800223a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d021      	beq.n	800222a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e6:	f7fe fe65 	bl	8000eb4 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d302      	bcc.n	80021fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d116      	bne.n	800222a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2220      	movs	r2, #32
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f043 0220 	orr.w	r2, r3, #32
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e007      	b.n	800223a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002234:	2b80      	cmp	r3, #128	; 0x80
 8002236:	d1ca      	bne.n	80021ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800224e:	e02d      	b.n	80022ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f88d 	bl	8002370 <I2C_IsAcknowledgeFailed>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e02d      	b.n	80022bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002266:	d021      	beq.n	80022ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002268:	f7fe fe24 	bl	8000eb4 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	429a      	cmp	r2, r3
 8002276:	d302      	bcc.n	800227e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d116      	bne.n	80022ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f043 0220 	orr.w	r2, r3, #32
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e007      	b.n	80022bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d1ca      	bne.n	8002250 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022d0:	e042      	b.n	8002358 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b10      	cmp	r3, #16
 80022de:	d119      	bne.n	8002314 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0210 	mvn.w	r2, #16
 80022e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e029      	b.n	8002368 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002314:	f7fe fdce 	bl	8000eb4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	429a      	cmp	r2, r3
 8002322:	d302      	bcc.n	800232a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d116      	bne.n	8002358 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f043 0220 	orr.w	r2, r3, #32
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e007      	b.n	8002368 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002362:	2b40      	cmp	r3, #64	; 0x40
 8002364:	d1b5      	bne.n	80022d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002386:	d11b      	bne.n	80023c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002390:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	f043 0204 	orr.w	r2, r3, #4
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023d0:	b08f      	sub	sp, #60	; 0x3c
 80023d2:	af0a      	add	r7, sp, #40	; 0x28
 80023d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e10f      	b.n	8002600 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f004 ff84 	bl	8007308 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2203      	movs	r2, #3
 8002404:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f001 fecd 	bl	80041be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	687e      	ldr	r6, [r7, #4]
 800242c:	466d      	mov	r5, sp
 800242e:	f106 0410 	add.w	r4, r6, #16
 8002432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800243a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800243e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002442:	1d33      	adds	r3, r6, #4
 8002444:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002446:	6838      	ldr	r0, [r7, #0]
 8002448:	f001 fda4 	bl	8003f94 <USB_CoreInit>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2202      	movs	r2, #2
 8002456:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0d0      	b.n	8002600 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f001 febb 	bl	80041e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246a:	2300      	movs	r3, #0
 800246c:	73fb      	strb	r3, [r7, #15]
 800246e:	e04a      	b.n	8002506 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002470:	7bfa      	ldrb	r2, [r7, #15]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	333d      	adds	r3, #61	; 0x3d
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	333c      	adds	r3, #60	; 0x3c
 8002494:	7bfa      	ldrb	r2, [r7, #15]
 8002496:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	b298      	uxth	r0, r3
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	3342      	adds	r3, #66	; 0x42
 80024ac:	4602      	mov	r2, r0
 80024ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	333f      	adds	r3, #63	; 0x3f
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	3344      	adds	r3, #68	; 0x44
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	3348      	adds	r3, #72	; 0x48
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	3350      	adds	r3, #80	; 0x50
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	3301      	adds	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	429a      	cmp	r2, r3
 800250e:	d3af      	bcc.n	8002470 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	e044      	b.n	80025a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002542:	7bfa      	ldrb	r2, [r7, #15]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	3301      	adds	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d3b5      	bcc.n	8002516 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	687e      	ldr	r6, [r7, #4]
 80025b2:	466d      	mov	r5, sp
 80025b4:	f106 0410 	add.w	r4, r6, #16
 80025b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80025c8:	1d33      	adds	r3, r6, #4
 80025ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025cc:	6838      	ldr	r0, [r7, #0]
 80025ce:	f001 fe53 	bl	8004278 <USB_DevInit>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e00d      	b.n	8002600 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f002 fecf 	bl	800539c <USB_DevDisconnect>

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002608 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_PCD_Start+0x1c>
 8002620:	2302      	movs	r3, #2
 8002622:	e020      	b.n	8002666 <HAL_PCD_Start+0x5e>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	2b01      	cmp	r3, #1
 8002632:	d109      	bne.n	8002648 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002638:	2b01      	cmp	r3, #1
 800263a:	d005      	beq.n	8002648 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002640:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f001 fda5 	bl	800419c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f002 fe7f 	bl	800535a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800266e:	b590      	push	{r4, r7, lr}
 8002670:	b08d      	sub	sp, #52	; 0x34
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f002 ff3d 	bl	8005504 <USB_GetMode>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	f040 839d 	bne.w	8002dcc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f002 fea1 	bl	80053de <USB_ReadInterrupts>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8393 	beq.w	8002dca <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f002 fe98 	bl	80053de <USB_ReadInterrupts>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d107      	bne.n	80026c8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f002 0202 	and.w	r2, r2, #2
 80026c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f002 fe86 	bl	80053de <USB_ReadInterrupts>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	2b10      	cmp	r3, #16
 80026da:	d161      	bne.n	80027a0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0210 	bic.w	r2, r2, #16
 80026ea:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	f003 020f 	and.w	r2, r3, #15
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	4413      	add	r3, r2
 8002708:	3304      	adds	r3, #4
 800270a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	0c5b      	lsrs	r3, r3, #17
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	2b02      	cmp	r3, #2
 8002716:	d124      	bne.n	8002762 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d035      	beq.n	8002790 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800272e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002732:	b29b      	uxth	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	6a38      	ldr	r0, [r7, #32]
 8002738:	f002 fcbd 	bl	80050b6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002748:	441a      	add	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	699a      	ldr	r2, [r3, #24]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800275a:	441a      	add	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	619a      	str	r2, [r3, #24]
 8002760:	e016      	b.n	8002790 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	0c5b      	lsrs	r3, r3, #17
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	2b06      	cmp	r3, #6
 800276c:	d110      	bne.n	8002790 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002774:	2208      	movs	r2, #8
 8002776:	4619      	mov	r1, r3
 8002778:	6a38      	ldr	r0, [r7, #32]
 800277a:	f002 fc9c 	bl	80050b6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800278a:	441a      	add	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0210 	orr.w	r2, r2, #16
 800279e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f002 fe1a 	bl	80053de <USB_ReadInterrupts>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027b4:	d16e      	bne.n	8002894 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f002 fe20 	bl	8005404 <USB_ReadDevAllOutEpInterrupt>
 80027c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80027c6:	e062      	b.n	800288e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d057      	beq.n	8002882 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f002 fe45 	bl	800546c <USB_ReadDevOutEPInterrupt>
 80027e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00c      	beq.n	8002808 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027fa:	461a      	mov	r2, r3
 80027fc:	2301      	movs	r3, #1
 80027fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fdb0 	bl	8003368 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00c      	beq.n	800282c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	4413      	add	r3, r2
 800281a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800281e:	461a      	mov	r2, r3
 8002820:	2308      	movs	r3, #8
 8002822:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 feaa 	bl	8003580 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	4413      	add	r3, r2
 800283e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002842:	461a      	mov	r2, r3
 8002844:	2310      	movs	r3, #16
 8002846:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b00      	cmp	r3, #0
 8002850:	d008      	beq.n	8002864 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	4413      	add	r3, r2
 800285a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800285e:	461a      	mov	r2, r3
 8002860:	2320      	movs	r3, #32
 8002862:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	4413      	add	r3, r2
 8002876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800287a:	461a      	mov	r2, r3
 800287c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002880:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	3301      	adds	r3, #1
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	085b      	lsrs	r3, r3, #1
 800288c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002890:	2b00      	cmp	r3, #0
 8002892:	d199      	bne.n	80027c8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f002 fda0 	bl	80053de <USB_ReadInterrupts>
 800289e:	4603      	mov	r3, r0
 80028a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028a8:	f040 80c0 	bne.w	8002a2c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f002 fdc1 	bl	8005438 <USB_ReadDevAllInEpInterrupt>
 80028b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80028bc:	e0b2      	b.n	8002a24 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80a7 	beq.w	8002a18 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f002 fde7 	bl	80054a8 <USB_ReadDevInEPInterrupt>
 80028da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d057      	beq.n	8002996 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	2201      	movs	r2, #1
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	43db      	mvns	r3, r3
 8002900:	69f9      	ldr	r1, [r7, #28]
 8002902:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002906:	4013      	ands	r3, r2
 8002908:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	4413      	add	r3, r2
 8002912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002916:	461a      	mov	r2, r3
 8002918:	2301      	movs	r3, #1
 800291a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d132      	bne.n	800298a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	3348      	adds	r3, #72	; 0x48
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293a:	4613      	mov	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	1a9b      	subs	r3, r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4403      	add	r3, r0
 8002944:	3344      	adds	r3, #68	; 0x44
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4419      	add	r1, r3
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4403      	add	r3, r0
 8002958:	3348      	adds	r3, #72	; 0x48
 800295a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	2b00      	cmp	r3, #0
 8002960:	d113      	bne.n	800298a <HAL_PCD_IRQHandler+0x31c>
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002966:	4613      	mov	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	3350      	adds	r3, #80	; 0x50
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d108      	bne.n	800298a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002982:	461a      	mov	r2, r3
 8002984:	2101      	movs	r1, #1
 8002986:	f002 fdef 	bl	8005568 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	b2db      	uxtb	r3, r3
 800298e:	4619      	mov	r1, r3
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f004 fd48 	bl	8007426 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ac:	461a      	mov	r2, r3
 80029ae:	2308      	movs	r3, #8
 80029b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029c8:	461a      	mov	r2, r3
 80029ca:	2310      	movs	r3, #16
 80029cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e4:	461a      	mov	r2, r3
 80029e6:	2340      	movs	r3, #64	; 0x40
 80029e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a00:	461a      	mov	r2, r3
 8002a02:	2302      	movs	r3, #2
 8002a04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fc1b 	bl	800324e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f47f af49 	bne.w	80028be <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f002 fcd4 	bl	80053de <USB_ReadInterrupts>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a40:	d122      	bne.n	8002a88 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a50:	f023 0301 	bic.w	r3, r3, #1
 8002a54:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d108      	bne.n	8002a72 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a68:	2100      	movs	r1, #0
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fe26 	bl	80036bc <HAL_PCDEx_LPM_Callback>
 8002a70:	e002      	b.n	8002a78 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f004 fd4e 	bl	8007514 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f002 fca6 	bl	80053de <USB_ReadInterrupts>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a9c:	d112      	bne.n	8002ac4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d102      	bne.n	8002ab4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f004 fd0a 	bl	80074c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ac2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f002 fc88 	bl	80053de <USB_ReadInterrupts>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad8:	f040 80c7 	bne.w	8002c6a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2110      	movs	r1, #16
 8002af6:	4618      	mov	r0, r3
 8002af8:	f001 fd22 	bl	8004540 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afc:	2300      	movs	r3, #0
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b00:	e056      	b.n	8002bb0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b14:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b26:	0151      	lsls	r1, r2, #5
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	440a      	add	r2, r1
 8002b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b34:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b46:	0151      	lsls	r1, r2, #5
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	440a      	add	r2, r1
 8002b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b62:	461a      	mov	r2, r3
 8002b64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b68:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7a:	0151      	lsls	r1, r2, #5
 8002b7c:	69fa      	ldr	r2, [r7, #28]
 8002b7e:	440a      	add	r2, r1
 8002b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9a:	0151      	lsls	r1, r2, #5
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	440a      	add	r2, r1
 8002ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ba4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ba8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	3301      	adds	r3, #1
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d3a3      	bcc.n	8002b02 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	69fa      	ldr	r2, [r7, #28]
 8002bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bc8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002bcc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d016      	beq.n	8002c04 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002be6:	f043 030b 	orr.w	r3, r3, #11
 8002bea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bfc:	f043 030b 	orr.w	r3, r3, #11
 8002c00:	6453      	str	r3, [r2, #68]	; 0x44
 8002c02:	e015      	b.n	8002c30 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c16:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c1a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c2a:	f043 030b 	orr.w	r3, r3, #11
 8002c2e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c3e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c42:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c54:	461a      	mov	r2, r3
 8002c56:	f002 fc87 	bl	8005568 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f002 fbb5 	bl	80053de <USB_ReadInterrupts>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c7e:	d124      	bne.n	8002cca <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f002 fc4b 	bl	8005520 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 fcb3 	bl	80045fa <USB_GetDevSpeed>
 8002c94:	4603      	mov	r3, r0
 8002c96:	461a      	mov	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681c      	ldr	r4, [r3, #0]
 8002ca0:	f001 f958 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8002ca4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f001 f9d2 	bl	8004058 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f004 fbde 	bl	8007476 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695a      	ldr	r2, [r3, #20]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002cc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f002 fb85 	bl	80053de <USB_ReadInterrupts>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d10a      	bne.n	8002cf4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f004 fbbb 	bl	800745a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f002 0208 	and.w	r2, r2, #8
 8002cf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f002 fb70 	bl	80053de <USB_ReadInterrupts>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d08:	d10f      	bne.n	8002d2a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	4619      	mov	r1, r3
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f004 fc1d 	bl	8007554 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695a      	ldr	r2, [r3, #20]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f002 fb55 	bl	80053de <USB_ReadInterrupts>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d3e:	d10f      	bne.n	8002d60 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	4619      	mov	r1, r3
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f004 fbf0 	bl	8007530 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f002 fb3a 	bl	80053de <USB_ReadInterrupts>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d74:	d10a      	bne.n	8002d8c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f004 fbfe 	bl	8007578 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f002 fb24 	bl	80053de <USB_ReadInterrupts>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d115      	bne.n	8002dcc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f004 fbee 	bl	8007594 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6859      	ldr	r1, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	605a      	str	r2, [r3, #4]
 8002dc8:	e000      	b.n	8002dcc <HAL_PCD_IRQHandler+0x75e>
      return;
 8002dca:	bf00      	nop
    }
  }
}
 8002dcc:	3734      	adds	r7, #52	; 0x34
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd90      	pop	{r4, r7, pc}

08002dd2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_PCD_SetAddress+0x1a>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e013      	b.n	8002e14 <HAL_PCD_SetAddress+0x42>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f002 fa82 	bl	800530e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	4608      	mov	r0, r1
 8002e26:	4611      	mov	r1, r2
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	70fb      	strb	r3, [r7, #3]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	803b      	strh	r3, [r7, #0]
 8002e32:	4613      	mov	r3, r2
 8002e34:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	da0f      	bge.n	8002e62 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	f003 020f 	and.w	r2, r3, #15
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	3338      	adds	r3, #56	; 0x38
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	3304      	adds	r3, #4
 8002e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	705a      	strb	r2, [r3, #1]
 8002e60:	e00f      	b.n	8002e82 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e62:	78fb      	ldrb	r3, [r7, #3]
 8002e64:	f003 020f 	and.w	r2, r3, #15
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	4413      	add	r3, r2
 8002e78:	3304      	adds	r3, #4
 8002e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e8e:	883a      	ldrh	r2, [r7, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	78ba      	ldrb	r2, [r7, #2]
 8002e98:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	785b      	ldrb	r3, [r3, #1]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d004      	beq.n	8002eac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002eac:	78bb      	ldrb	r3, [r7, #2]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d102      	bne.n	8002eb8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_PCD_EP_Open+0xaa>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e00e      	b.n	8002ee4 <HAL_PCD_EP_Open+0xc8>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68f9      	ldr	r1, [r7, #12]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f001 fbb5 	bl	8004644 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002ee2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	da0f      	bge.n	8002f20 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	f003 020f 	and.w	r2, r3, #15
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	3338      	adds	r3, #56	; 0x38
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4413      	add	r3, r2
 8002f14:	3304      	adds	r3, #4
 8002f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	705a      	strb	r2, [r3, #1]
 8002f1e:	e00f      	b.n	8002f40 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	f003 020f 	and.w	r2, r3, #15
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	3304      	adds	r3, #4
 8002f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_PCD_EP_Close+0x6e>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e00e      	b.n	8002f78 <HAL_PCD_EP_Close+0x8c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68f9      	ldr	r1, [r7, #12]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f001 fbf3 	bl	8004754 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f90:	7afb      	ldrb	r3, [r7, #11]
 8002f92:	f003 020f 	and.w	r2, r3, #15
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fc2:	7afb      	ldrb	r3, [r7, #11]
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d102      	bne.n	8002fdc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fdc:	7afb      	ldrb	r3, [r7, #11]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	6979      	ldr	r1, [r7, #20]
 8002ff4:	f001 fece 	bl	8004d94 <USB_EP0StartXfer>
 8002ff8:	e008      	b.n	800300c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	6979      	ldr	r1, [r7, #20]
 8003008:	f001 fc80 	bl	800490c <USB_EPStartXfer>
  }

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	460b      	mov	r3, r1
 8003020:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003022:	78fb      	ldrb	r3, [r7, #3]
 8003024:	f003 020f 	and.w	r2, r3, #15
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003038:	681b      	ldr	r3, [r3, #0]
}
 800303a:	4618      	mov	r0, r3
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b086      	sub	sp, #24
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
 8003052:	460b      	mov	r3, r1
 8003054:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003056:	7afb      	ldrb	r3, [r7, #11]
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	3338      	adds	r3, #56	; 0x38
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4413      	add	r3, r2
 800306a:	3304      	adds	r3, #4
 800306c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2200      	movs	r2, #0
 800307e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	2201      	movs	r2, #1
 8003084:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003086:	7afb      	ldrb	r3, [r7, #11]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	b2da      	uxtb	r2, r3
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d102      	bne.n	80030a0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030a0:	7afb      	ldrb	r3, [r7, #11]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	6979      	ldr	r1, [r7, #20]
 80030b8:	f001 fe6c 	bl	8004d94 <USB_EP0StartXfer>
 80030bc:	e008      	b.n	80030d0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	6979      	ldr	r1, [r7, #20]
 80030cc:	f001 fc1e 	bl	800490c <USB_EPStartXfer>
  }

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	460b      	mov	r3, r1
 80030e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	f003 020f 	and.w	r2, r3, #15
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d901      	bls.n	80030f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e050      	b.n	800319a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	da0f      	bge.n	8003120 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	f003 020f 	and.w	r2, r3, #15
 8003106:	4613      	mov	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	3338      	adds	r3, #56	; 0x38
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	4413      	add	r3, r2
 8003114:	3304      	adds	r3, #4
 8003116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2201      	movs	r2, #1
 800311c:	705a      	strb	r2, [r3, #1]
 800311e:	e00d      	b.n	800313c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	3304      	adds	r3, #4
 8003134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	b2da      	uxtb	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_PCD_EP_SetStall+0x82>
 8003158:	2302      	movs	r3, #2
 800315a:	e01e      	b.n	800319a <HAL_PCD_EP_SetStall+0xc0>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68f9      	ldr	r1, [r7, #12]
 800316a:	4618      	mov	r0, r3
 800316c:	f001 fffb 	bl	8005166 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10a      	bne.n	8003190 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	b2d9      	uxtb	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800318a:	461a      	mov	r2, r3
 800318c:	f002 f9ec 	bl	8005568 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	460b      	mov	r3, r1
 80031ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	f003 020f 	and.w	r2, r3, #15
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d901      	bls.n	80031c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e042      	b.n	8003246 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	da0f      	bge.n	80031e8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	f003 020f 	and.w	r2, r3, #15
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	3338      	adds	r3, #56	; 0x38
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	4413      	add	r3, r2
 80031dc:	3304      	adds	r3, #4
 80031de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	705a      	strb	r2, [r3, #1]
 80031e6:	e00f      	b.n	8003208 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	f003 020f 	and.w	r2, r3, #15
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	3304      	adds	r3, #4
 8003200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	b2da      	uxtb	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_PCD_EP_ClrStall+0x86>
 8003224:	2302      	movs	r3, #2
 8003226:	e00e      	b.n	8003246 <HAL_PCD_EP_ClrStall+0xa4>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68f9      	ldr	r1, [r7, #12]
 8003236:	4618      	mov	r0, r3
 8003238:	f002 f803 	bl	8005242 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b08a      	sub	sp, #40	; 0x28
 8003252:	af02      	add	r7, sp, #8
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	3338      	adds	r3, #56	; 0x38
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	3304      	adds	r3, #4
 8003274:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	429a      	cmp	r2, r3
 8003280:	d901      	bls.n	8003286 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e06c      	b.n	8003360 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	429a      	cmp	r2, r3
 800329a:	d902      	bls.n	80032a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3303      	adds	r3, #3
 80032a6:	089b      	lsrs	r3, r3, #2
 80032a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032aa:	e02b      	b.n	8003304 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d902      	bls.n	80032c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	3303      	adds	r3, #3
 80032cc:	089b      	lsrs	r3, r3, #2
 80032ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	68d9      	ldr	r1, [r3, #12]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	4603      	mov	r3, r0
 80032e6:	6978      	ldr	r0, [r7, #20]
 80032e8:	f001 fea7 	bl	800503a <USB_WritePacket>

    ep->xfer_buff  += len;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	441a      	add	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	699a      	ldr	r2, [r3, #24]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	441a      	add	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	b29b      	uxth	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	429a      	cmp	r2, r3
 8003318:	d809      	bhi.n	800332e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003322:	429a      	cmp	r2, r3
 8003324:	d203      	bcs.n	800332e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1be      	bne.n	80032ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	429a      	cmp	r2, r3
 8003338:	d811      	bhi.n	800335e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	2201      	movs	r2, #1
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	43db      	mvns	r3, r3
 8003354:	6939      	ldr	r1, [r7, #16]
 8003356:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800335a:	4013      	ands	r3, r2
 800335c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3720      	adds	r7, #32
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	333c      	adds	r3, #60	; 0x3c
 8003380:	3304      	adds	r3, #4
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b01      	cmp	r3, #1
 800339c:	f040 80a0 	bne.w	80034e0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d015      	beq.n	80033d6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4a72      	ldr	r2, [pc, #456]	; (8003578 <PCD_EP_OutXfrComplete_int+0x210>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	f240 80dd 	bls.w	800356e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 80d7 	beq.w	800356e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033cc:	461a      	mov	r2, r3
 80033ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033d2:	6093      	str	r3, [r2, #8]
 80033d4:	e0cb      	b.n	800356e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d009      	beq.n	80033f4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ec:	461a      	mov	r2, r3
 80033ee:	2320      	movs	r3, #32
 80033f0:	6093      	str	r3, [r2, #8]
 80033f2:	e0bc      	b.n	800356e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f040 80b7 	bne.w	800356e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4a5d      	ldr	r2, [pc, #372]	; (8003578 <PCD_EP_OutXfrComplete_int+0x210>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d90f      	bls.n	8003428 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4413      	add	r3, r2
 800341a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341e:	461a      	mov	r2, r3
 8003420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003424:	6093      	str	r3, [r2, #8]
 8003426:	e0a2      	b.n	800356e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800343a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	0159      	lsls	r1, r3, #5
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	440b      	add	r3, r1
 8003444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800344e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4403      	add	r3, r0
 800345e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003462:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003476:	6819      	ldr	r1, [r3, #0]
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	4613      	mov	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4403      	add	r3, r0
 8003486:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4419      	add	r1, r3
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4403      	add	r3, r0
 800349c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034a0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d114      	bne.n	80034d2 <PCD_EP_OutXfrComplete_int+0x16a>
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d108      	bne.n	80034d2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034ca:	461a      	mov	r2, r3
 80034cc:	2101      	movs	r1, #1
 80034ce:	f002 f84b 	bl	8005568 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	4619      	mov	r1, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f003 ff89 	bl	80073f0 <HAL_PCD_DataOutStageCallback>
 80034de:	e046      	b.n	800356e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a26      	ldr	r2, [pc, #152]	; (800357c <PCD_EP_OutXfrComplete_int+0x214>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d124      	bne.n	8003532 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fe:	461a      	mov	r2, r3
 8003500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003504:	6093      	str	r3, [r2, #8]
 8003506:	e032      	b.n	800356e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4413      	add	r3, r2
 800351a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351e:	461a      	mov	r2, r3
 8003520:	2320      	movs	r3, #32
 8003522:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f003 ff60 	bl	80073f0 <HAL_PCD_DataOutStageCallback>
 8003530:	e01d      	b.n	800356e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d114      	bne.n	8003562 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d108      	bne.n	8003562 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800355a:	461a      	mov	r2, r3
 800355c:	2100      	movs	r1, #0
 800355e:	f002 f803 	bl	8005568 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	4619      	mov	r1, r3
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f003 ff41 	bl	80073f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	4f54300a 	.word	0x4f54300a
 800357c:	4f54310a 	.word	0x4f54310a

08003580 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	333c      	adds	r3, #60	; 0x3c
 8003598:	3304      	adds	r3, #4
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4413      	add	r3, r2
 80035a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4a15      	ldr	r2, [pc, #84]	; (8003608 <PCD_EP_OutSetupPacket_int+0x88>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d90e      	bls.n	80035d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035cc:	461a      	mov	r2, r3
 80035ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f003 fef9 	bl	80073cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <PCD_EP_OutSetupPacket_int+0x88>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d90c      	bls.n	80035fc <PCD_EP_OutSetupPacket_int+0x7c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d108      	bne.n	80035fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035f4:	461a      	mov	r2, r3
 80035f6:	2101      	movs	r1, #1
 80035f8:	f001 ffb6 	bl	8005568 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	4f54300a 	.word	0x4f54300a

0800360c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	70fb      	strb	r3, [r7, #3]
 8003618:	4613      	mov	r3, r2
 800361a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d107      	bne.n	800363a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800362a:	883b      	ldrh	r3, [r7, #0]
 800362c:	0419      	lsls	r1, r3, #16
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	430a      	orrs	r2, r1
 8003636:	629a      	str	r2, [r3, #40]	; 0x28
 8003638:	e028      	b.n	800368c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	4413      	add	r3, r2
 8003646:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003648:	2300      	movs	r3, #0
 800364a:	73fb      	strb	r3, [r7, #15]
 800364c:	e00d      	b.n	800366a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	3340      	adds	r3, #64	; 0x40
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	0c1b      	lsrs	r3, r3, #16
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	4413      	add	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	3301      	adds	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
 800366a:	7bfa      	ldrb	r2, [r7, #15]
 800366c:	78fb      	ldrb	r3, [r7, #3]
 800366e:	3b01      	subs	r3, #1
 8003670:	429a      	cmp	r2, r3
 8003672:	d3ec      	bcc.n	800364e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003674:	883b      	ldrh	r3, [r7, #0]
 8003676:	0418      	lsls	r0, r3, #16
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6819      	ldr	r1, [r3, #0]
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	3b01      	subs	r3, #1
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	4302      	orrs	r2, r0
 8003684:	3340      	adds	r3, #64	; 0x40
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	460b      	mov	r3, r1
 80036a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	887a      	ldrh	r2, [r7, #2]
 80036ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e264      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d075      	beq.n	80037de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036f2:	4ba3      	ldr	r3, [pc, #652]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d00c      	beq.n	8003718 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fe:	4ba0      	ldr	r3, [pc, #640]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003706:	2b08      	cmp	r3, #8
 8003708:	d112      	bne.n	8003730 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800370a:	4b9d      	ldr	r3, [pc, #628]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003716:	d10b      	bne.n	8003730 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003718:	4b99      	ldr	r3, [pc, #612]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d05b      	beq.n	80037dc <HAL_RCC_OscConfig+0x108>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d157      	bne.n	80037dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e23f      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003738:	d106      	bne.n	8003748 <HAL_RCC_OscConfig+0x74>
 800373a:	4b91      	ldr	r3, [pc, #580]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a90      	ldr	r2, [pc, #576]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e01d      	b.n	8003784 <HAL_RCC_OscConfig+0xb0>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003750:	d10c      	bne.n	800376c <HAL_RCC_OscConfig+0x98>
 8003752:	4b8b      	ldr	r3, [pc, #556]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a8a      	ldr	r2, [pc, #552]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	4b88      	ldr	r3, [pc, #544]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a87      	ldr	r2, [pc, #540]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	e00b      	b.n	8003784 <HAL_RCC_OscConfig+0xb0>
 800376c:	4b84      	ldr	r3, [pc, #528]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a83      	ldr	r2, [pc, #524]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	4b81      	ldr	r3, [pc, #516]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a80      	ldr	r2, [pc, #512]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 800377e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d013      	beq.n	80037b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fd fb92 	bl	8000eb4 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003794:	f7fd fb8e 	bl	8000eb4 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b64      	cmp	r3, #100	; 0x64
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e204      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a6:	4b76      	ldr	r3, [pc, #472]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0xc0>
 80037b2:	e014      	b.n	80037de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7fd fb7e 	bl	8000eb4 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037bc:	f7fd fb7a 	bl	8000eb4 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b64      	cmp	r3, #100	; 0x64
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e1f0      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ce:	4b6c      	ldr	r3, [pc, #432]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0xe8>
 80037da:	e000      	b.n	80037de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d063      	beq.n	80038b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ea:	4b65      	ldr	r3, [pc, #404]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00b      	beq.n	800380e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037f6:	4b62      	ldr	r3, [pc, #392]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d11c      	bne.n	800383c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003802:	4b5f      	ldr	r3, [pc, #380]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d116      	bne.n	800383c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380e:	4b5c      	ldr	r3, [pc, #368]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <HAL_RCC_OscConfig+0x152>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d001      	beq.n	8003826 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e1c4      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003826:	4b56      	ldr	r3, [pc, #344]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4952      	ldr	r1, [pc, #328]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383a:	e03a      	b.n	80038b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d020      	beq.n	8003886 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003844:	4b4f      	ldr	r3, [pc, #316]	; (8003984 <HAL_RCC_OscConfig+0x2b0>)
 8003846:	2201      	movs	r2, #1
 8003848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384a:	f7fd fb33 	bl	8000eb4 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003852:	f7fd fb2f 	bl	8000eb4 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e1a5      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003864:	4b46      	ldr	r3, [pc, #280]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0f0      	beq.n	8003852 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003870:	4b43      	ldr	r3, [pc, #268]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4940      	ldr	r1, [pc, #256]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	4313      	orrs	r3, r2
 8003882:	600b      	str	r3, [r1, #0]
 8003884:	e015      	b.n	80038b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003886:	4b3f      	ldr	r3, [pc, #252]	; (8003984 <HAL_RCC_OscConfig+0x2b0>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fd fb12 	bl	8000eb4 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003894:	f7fd fb0e 	bl	8000eb4 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e184      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a6:	4b36      	ldr	r3, [pc, #216]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d030      	beq.n	8003920 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d016      	beq.n	80038f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038c6:	4b30      	ldr	r3, [pc, #192]	; (8003988 <HAL_RCC_OscConfig+0x2b4>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038cc:	f7fd faf2 	bl	8000eb4 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d4:	f7fd faee 	bl	8000eb4 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e164      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e6:	4b26      	ldr	r3, [pc, #152]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x200>
 80038f2:	e015      	b.n	8003920 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f4:	4b24      	ldr	r3, [pc, #144]	; (8003988 <HAL_RCC_OscConfig+0x2b4>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fa:	f7fd fadb 	bl	8000eb4 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003902:	f7fd fad7 	bl	8000eb4 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e14d      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003914:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f0      	bne.n	8003902 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80a0 	beq.w	8003a6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800392e:	2300      	movs	r3, #0
 8003930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003932:	4b13      	ldr	r3, [pc, #76]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10f      	bne.n	800395e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	4a0e      	ldr	r2, [pc, #56]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800394c:	6413      	str	r3, [r2, #64]	; 0x40
 800394e:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003956:	60bb      	str	r3, [r7, #8]
 8003958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800395a:	2301      	movs	r3, #1
 800395c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395e:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_OscConfig+0x2b8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003966:	2b00      	cmp	r3, #0
 8003968:	d121      	bne.n	80039ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800396a:	4b08      	ldr	r3, [pc, #32]	; (800398c <HAL_RCC_OscConfig+0x2b8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a07      	ldr	r2, [pc, #28]	; (800398c <HAL_RCC_OscConfig+0x2b8>)
 8003970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003976:	f7fd fa9d 	bl	8000eb4 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397c:	e011      	b.n	80039a2 <HAL_RCC_OscConfig+0x2ce>
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800
 8003984:	42470000 	.word	0x42470000
 8003988:	42470e80 	.word	0x42470e80
 800398c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003990:	f7fd fa90 	bl	8000eb4 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e106      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	4b85      	ldr	r3, [pc, #532]	; (8003bb8 <HAL_RCC_OscConfig+0x4e4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d106      	bne.n	80039c4 <HAL_RCC_OscConfig+0x2f0>
 80039b6:	4b81      	ldr	r3, [pc, #516]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	4a80      	ldr	r2, [pc, #512]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	6713      	str	r3, [r2, #112]	; 0x70
 80039c2:	e01c      	b.n	80039fe <HAL_RCC_OscConfig+0x32a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b05      	cmp	r3, #5
 80039ca:	d10c      	bne.n	80039e6 <HAL_RCC_OscConfig+0x312>
 80039cc:	4b7b      	ldr	r3, [pc, #492]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	4a7a      	ldr	r2, [pc, #488]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039d2:	f043 0304 	orr.w	r3, r3, #4
 80039d6:	6713      	str	r3, [r2, #112]	; 0x70
 80039d8:	4b78      	ldr	r3, [pc, #480]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	4a77      	ldr	r2, [pc, #476]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6713      	str	r3, [r2, #112]	; 0x70
 80039e4:	e00b      	b.n	80039fe <HAL_RCC_OscConfig+0x32a>
 80039e6:	4b75      	ldr	r3, [pc, #468]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	4a74      	ldr	r2, [pc, #464]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	6713      	str	r3, [r2, #112]	; 0x70
 80039f2:	4b72      	ldr	r3, [pc, #456]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f6:	4a71      	ldr	r2, [pc, #452]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039f8:	f023 0304 	bic.w	r3, r3, #4
 80039fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d015      	beq.n	8003a32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a06:	f7fd fa55 	bl	8000eb4 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7fd fa51 	bl	8000eb4 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e0c5      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a24:	4b65      	ldr	r3, [pc, #404]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0ee      	beq.n	8003a0e <HAL_RCC_OscConfig+0x33a>
 8003a30:	e014      	b.n	8003a5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a32:	f7fd fa3f 	bl	8000eb4 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a3a:	f7fd fa3b 	bl	8000eb4 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e0af      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a50:	4b5a      	ldr	r3, [pc, #360]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ee      	bne.n	8003a3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d105      	bne.n	8003a6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a62:	4b56      	ldr	r3, [pc, #344]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	4a55      	ldr	r2, [pc, #340]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 809b 	beq.w	8003bae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a78:	4b50      	ldr	r3, [pc, #320]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 030c 	and.w	r3, r3, #12
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d05c      	beq.n	8003b3e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d141      	bne.n	8003b10 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8c:	4b4c      	ldr	r3, [pc, #304]	; (8003bc0 <HAL_RCC_OscConfig+0x4ec>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a92:	f7fd fa0f 	bl	8000eb4 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a9a:	f7fd fa0b 	bl	8000eb4 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e081      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aac:	4b43      	ldr	r3, [pc, #268]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f0      	bne.n	8003a9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	019b      	lsls	r3, r3, #6
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	085b      	lsrs	r3, r3, #1
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	041b      	lsls	r3, r3, #16
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	061b      	lsls	r3, r3, #24
 8003adc:	4937      	ldr	r1, [pc, #220]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ae2:	4b37      	ldr	r3, [pc, #220]	; (8003bc0 <HAL_RCC_OscConfig+0x4ec>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae8:	f7fd f9e4 	bl	8000eb4 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af0:	f7fd f9e0 	bl	8000eb4 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e056      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b02:	4b2e      	ldr	r3, [pc, #184]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0x41c>
 8003b0e:	e04e      	b.n	8003bae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b10:	4b2b      	ldr	r3, [pc, #172]	; (8003bc0 <HAL_RCC_OscConfig+0x4ec>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b16:	f7fd f9cd 	bl	8000eb4 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b1e:	f7fd f9c9 	bl	8000eb4 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e03f      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b30:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1f0      	bne.n	8003b1e <HAL_RCC_OscConfig+0x44a>
 8003b3c:	e037      	b.n	8003bae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e032      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b4a:	4b1c      	ldr	r3, [pc, #112]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d028      	beq.n	8003baa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d121      	bne.n	8003baa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d11a      	bne.n	8003baa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b80:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d111      	bne.n	8003baa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	3b01      	subs	r3, #1
 8003b94:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d107      	bne.n	8003baa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d001      	beq.n	8003bae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40007000 	.word	0x40007000
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	42470060 	.word	0x42470060

08003bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0cc      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd8:	4b68      	ldr	r3, [pc, #416]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d90c      	bls.n	8003c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be6:	4b65      	ldr	r3, [pc, #404]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bee:	4b63      	ldr	r3, [pc, #396]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0b8      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d020      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c18:	4b59      	ldr	r3, [pc, #356]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4a58      	ldr	r2, [pc, #352]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c30:	4b53      	ldr	r3, [pc, #332]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4a52      	ldr	r2, [pc, #328]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3c:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	494d      	ldr	r1, [pc, #308]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d044      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d107      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d119      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e07f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d003      	beq.n	8003c82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d107      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c82:	4b3f      	ldr	r3, [pc, #252]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e06f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c92:	4b3b      	ldr	r3, [pc, #236]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e067      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ca2:	4b37      	ldr	r3, [pc, #220]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f023 0203 	bic.w	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	4934      	ldr	r1, [pc, #208]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cb4:	f7fd f8fe 	bl	8000eb4 <HAL_GetTick>
 8003cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cba:	e00a      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cbc:	f7fd f8fa 	bl	8000eb4 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e04f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 020c 	and.w	r2, r3, #12
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d1eb      	bne.n	8003cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce4:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d20c      	bcs.n	8003d0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf2:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e032      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d18:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4916      	ldr	r1, [pc, #88]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d36:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	490e      	ldr	r1, [pc, #56]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d4a:	f000 f821 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	490a      	ldr	r1, [pc, #40]	; (8003d84 <HAL_RCC_ClockConfig+0x1c0>)
 8003d5c:	5ccb      	ldrb	r3, [r1, r3]
 8003d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d62:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd f85e 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40023c00 	.word	0x40023c00
 8003d80:	40023800 	.word	0x40023800
 8003d84:	08007a04 	.word	0x08007a04
 8003d88:	20000000 	.word	0x20000000
 8003d8c:	20000004 	.word	0x20000004

08003d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	607b      	str	r3, [r7, #4]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	2300      	movs	r3, #0
 8003da2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003da8:	4b67      	ldr	r3, [pc, #412]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d00d      	beq.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	f200 80bd 	bhi.w	8003f34 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d003      	beq.n	8003dca <HAL_RCC_GetSysClockFreq+0x3a>
 8003dc2:	e0b7      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dc4:	4b61      	ldr	r3, [pc, #388]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003dc6:	60bb      	str	r3, [r7, #8]
       break;
 8003dc8:	e0b7      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dca:	4b61      	ldr	r3, [pc, #388]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003dcc:	60bb      	str	r3, [r7, #8]
      break;
 8003dce:	e0b4      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dd0:	4b5d      	ldr	r3, [pc, #372]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dd8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dda:	4b5b      	ldr	r3, [pc, #364]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d04d      	beq.n	8003e82 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de6:	4b58      	ldr	r3, [pc, #352]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	099b      	lsrs	r3, r3, #6
 8003dec:	461a      	mov	r2, r3
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003df6:	f04f 0100 	mov.w	r1, #0
 8003dfa:	ea02 0800 	and.w	r8, r2, r0
 8003dfe:	ea03 0901 	and.w	r9, r3, r1
 8003e02:	4640      	mov	r0, r8
 8003e04:	4649      	mov	r1, r9
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	014b      	lsls	r3, r1, #5
 8003e10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e14:	0142      	lsls	r2, r0, #5
 8003e16:	4610      	mov	r0, r2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	ebb0 0008 	subs.w	r0, r0, r8
 8003e1e:	eb61 0109 	sbc.w	r1, r1, r9
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	018b      	lsls	r3, r1, #6
 8003e2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e30:	0182      	lsls	r2, r0, #6
 8003e32:	1a12      	subs	r2, r2, r0
 8003e34:	eb63 0301 	sbc.w	r3, r3, r1
 8003e38:	f04f 0000 	mov.w	r0, #0
 8003e3c:	f04f 0100 	mov.w	r1, #0
 8003e40:	00d9      	lsls	r1, r3, #3
 8003e42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e46:	00d0      	lsls	r0, r2, #3
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	eb12 0208 	adds.w	r2, r2, r8
 8003e50:	eb43 0309 	adc.w	r3, r3, r9
 8003e54:	f04f 0000 	mov.w	r0, #0
 8003e58:	f04f 0100 	mov.w	r1, #0
 8003e5c:	0259      	lsls	r1, r3, #9
 8003e5e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003e62:	0250      	lsls	r0, r2, #9
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	f7fc f9a8 	bl	80001c8 <__aeabi_uldivmod>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	e04a      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e82:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	099b      	lsrs	r3, r3, #6
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e92:	f04f 0100 	mov.w	r1, #0
 8003e96:	ea02 0400 	and.w	r4, r2, r0
 8003e9a:	ea03 0501 	and.w	r5, r3, r1
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	014b      	lsls	r3, r1, #5
 8003eac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003eb0:	0142      	lsls	r2, r0, #5
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	1b00      	subs	r0, r0, r4
 8003eb8:	eb61 0105 	sbc.w	r1, r1, r5
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	018b      	lsls	r3, r1, #6
 8003ec6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003eca:	0182      	lsls	r2, r0, #6
 8003ecc:	1a12      	subs	r2, r2, r0
 8003ece:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed2:	f04f 0000 	mov.w	r0, #0
 8003ed6:	f04f 0100 	mov.w	r1, #0
 8003eda:	00d9      	lsls	r1, r3, #3
 8003edc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ee0:	00d0      	lsls	r0, r2, #3
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	1912      	adds	r2, r2, r4
 8003ee8:	eb45 0303 	adc.w	r3, r5, r3
 8003eec:	f04f 0000 	mov.w	r0, #0
 8003ef0:	f04f 0100 	mov.w	r1, #0
 8003ef4:	0299      	lsls	r1, r3, #10
 8003ef6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003efa:	0290      	lsls	r0, r2, #10
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	461a      	mov	r2, r3
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	f7fc f95c 	bl	80001c8 <__aeabi_uldivmod>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4613      	mov	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	3301      	adds	r3, #1
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f30:	60bb      	str	r3, [r7, #8]
      break;
 8003f32:	e002      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f36:	60bb      	str	r3, [r7, #8]
      break;
 8003f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	00f42400 	.word	0x00f42400
 8003f50:	007a1200 	.word	0x007a1200

08003f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	20000000 	.word	0x20000000

08003f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f70:	f7ff fff0 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8003f74:	4602      	mov	r2, r0
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	0a9b      	lsrs	r3, r3, #10
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	4903      	ldr	r1, [pc, #12]	; (8003f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f82:	5ccb      	ldrb	r3, [r1, r3]
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	08007a14 	.word	0x08007a14

08003f94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f94:	b084      	sub	sp, #16
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	f107 001c 	add.w	r0, r7, #28
 8003fa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d122      	bne.n	8003ff2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d105      	bne.n	8003fe6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f001 fb1c 	bl	8005624 <USB_CoreReset>
 8003fec:	4603      	mov	r3, r0
 8003fee:	73fb      	strb	r3, [r7, #15]
 8003ff0:	e01a      	b.n	8004028 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f001 fb10 	bl	8005624 <USB_CoreReset>
 8004004:	4603      	mov	r3, r0
 8004006:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	639a      	str	r2, [r3, #56]	; 0x38
 800401a:	e005      	b.n	8004028 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	2b01      	cmp	r3, #1
 800402c:	d10b      	bne.n	8004046 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f043 0206 	orr.w	r2, r3, #6
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f043 0220 	orr.w	r2, r3, #32
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004046:	7bfb      	ldrb	r3, [r7, #15]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004052:	b004      	add	sp, #16
 8004054:	4770      	bx	lr
	...

08004058 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	4613      	mov	r3, r2
 8004064:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d165      	bne.n	8004138 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4a41      	ldr	r2, [pc, #260]	; (8004174 <USB_SetTurnaroundTime+0x11c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d906      	bls.n	8004082 <USB_SetTurnaroundTime+0x2a>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4a40      	ldr	r2, [pc, #256]	; (8004178 <USB_SetTurnaroundTime+0x120>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d202      	bcs.n	8004082 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800407c:	230f      	movs	r3, #15
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	e062      	b.n	8004148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	4a3c      	ldr	r2, [pc, #240]	; (8004178 <USB_SetTurnaroundTime+0x120>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d306      	bcc.n	8004098 <USB_SetTurnaroundTime+0x40>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4a3b      	ldr	r2, [pc, #236]	; (800417c <USB_SetTurnaroundTime+0x124>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d202      	bcs.n	8004098 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004092:	230e      	movs	r3, #14
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	e057      	b.n	8004148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4a38      	ldr	r2, [pc, #224]	; (800417c <USB_SetTurnaroundTime+0x124>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d306      	bcc.n	80040ae <USB_SetTurnaroundTime+0x56>
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4a37      	ldr	r2, [pc, #220]	; (8004180 <USB_SetTurnaroundTime+0x128>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d202      	bcs.n	80040ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80040a8:	230d      	movs	r3, #13
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	e04c      	b.n	8004148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4a33      	ldr	r2, [pc, #204]	; (8004180 <USB_SetTurnaroundTime+0x128>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d306      	bcc.n	80040c4 <USB_SetTurnaroundTime+0x6c>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4a32      	ldr	r2, [pc, #200]	; (8004184 <USB_SetTurnaroundTime+0x12c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d802      	bhi.n	80040c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80040be:	230c      	movs	r3, #12
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	e041      	b.n	8004148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4a2f      	ldr	r2, [pc, #188]	; (8004184 <USB_SetTurnaroundTime+0x12c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d906      	bls.n	80040da <USB_SetTurnaroundTime+0x82>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	4a2e      	ldr	r2, [pc, #184]	; (8004188 <USB_SetTurnaroundTime+0x130>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d802      	bhi.n	80040da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80040d4:	230b      	movs	r3, #11
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	e036      	b.n	8004148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4a2a      	ldr	r2, [pc, #168]	; (8004188 <USB_SetTurnaroundTime+0x130>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d906      	bls.n	80040f0 <USB_SetTurnaroundTime+0x98>
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	4a29      	ldr	r2, [pc, #164]	; (800418c <USB_SetTurnaroundTime+0x134>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d802      	bhi.n	80040f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80040ea:	230a      	movs	r3, #10
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	e02b      	b.n	8004148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4a26      	ldr	r2, [pc, #152]	; (800418c <USB_SetTurnaroundTime+0x134>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d906      	bls.n	8004106 <USB_SetTurnaroundTime+0xae>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4a25      	ldr	r2, [pc, #148]	; (8004190 <USB_SetTurnaroundTime+0x138>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d202      	bcs.n	8004106 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004100:	2309      	movs	r3, #9
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	e020      	b.n	8004148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	4a21      	ldr	r2, [pc, #132]	; (8004190 <USB_SetTurnaroundTime+0x138>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d306      	bcc.n	800411c <USB_SetTurnaroundTime+0xc4>
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	4a20      	ldr	r2, [pc, #128]	; (8004194 <USB_SetTurnaroundTime+0x13c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d802      	bhi.n	800411c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004116:	2308      	movs	r3, #8
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	e015      	b.n	8004148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <USB_SetTurnaroundTime+0x13c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d906      	bls.n	8004132 <USB_SetTurnaroundTime+0xda>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4a1c      	ldr	r2, [pc, #112]	; (8004198 <USB_SetTurnaroundTime+0x140>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d202      	bcs.n	8004132 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800412c:	2307      	movs	r3, #7
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	e00a      	b.n	8004148 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004132:	2306      	movs	r3, #6
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	e007      	b.n	8004148 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800413e:	2309      	movs	r3, #9
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	e001      	b.n	8004148 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004144:	2309      	movs	r3, #9
 8004146:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	029b      	lsls	r3, r3, #10
 800415c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004160:	431a      	orrs	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	00d8acbf 	.word	0x00d8acbf
 8004178:	00e4e1c0 	.word	0x00e4e1c0
 800417c:	00f42400 	.word	0x00f42400
 8004180:	01067380 	.word	0x01067380
 8004184:	011a499f 	.word	0x011a499f
 8004188:	01312cff 	.word	0x01312cff
 800418c:	014ca43f 	.word	0x014ca43f
 8004190:	016e3600 	.word	0x016e3600
 8004194:	01a6ab1f 	.word	0x01a6ab1f
 8004198:	01e84800 	.word	0x01e84800

0800419c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f043 0201 	orr.w	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f023 0201 	bic.w	r2, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d115      	bne.n	800422e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800420e:	2001      	movs	r0, #1
 8004210:	f7fc fe5c 	bl	8000ecc <HAL_Delay>
      ms++;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3301      	adds	r3, #1
 8004218:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f001 f972 	bl	8005504 <USB_GetMode>
 8004220:	4603      	mov	r3, r0
 8004222:	2b01      	cmp	r3, #1
 8004224:	d01e      	beq.n	8004264 <USB_SetCurrentMode+0x84>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b31      	cmp	r3, #49	; 0x31
 800422a:	d9f0      	bls.n	800420e <USB_SetCurrentMode+0x2e>
 800422c:	e01a      	b.n	8004264 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d115      	bne.n	8004260 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004240:	2001      	movs	r0, #1
 8004242:	f7fc fe43 	bl	8000ecc <HAL_Delay>
      ms++;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3301      	adds	r3, #1
 800424a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f001 f959 	bl	8005504 <USB_GetMode>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <USB_SetCurrentMode+0x84>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b31      	cmp	r3, #49	; 0x31
 800425c:	d9f0      	bls.n	8004240 <USB_SetCurrentMode+0x60>
 800425e:	e001      	b.n	8004264 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e005      	b.n	8004270 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b32      	cmp	r3, #50	; 0x32
 8004268:	d101      	bne.n	800426e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004278:	b084      	sub	sp, #16
 800427a:	b580      	push	{r7, lr}
 800427c:	b086      	sub	sp, #24
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	e009      	b.n	80042ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	3340      	adds	r3, #64	; 0x40
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	2200      	movs	r2, #0
 80042a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	3301      	adds	r3, #1
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2b0e      	cmp	r3, #14
 80042b0:	d9f2      	bls.n	8004298 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80042b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d11c      	bne.n	80042f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042c6:	f043 0302 	orr.w	r3, r3, #2
 80042ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	639a      	str	r2, [r3, #56]	; 0x38
 80042f0:	e00b      	b.n	800430a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004310:	461a      	mov	r2, r3
 8004312:	2300      	movs	r3, #0
 8004314:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431c:	4619      	mov	r1, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004324:	461a      	mov	r2, r3
 8004326:	680b      	ldr	r3, [r1, #0]
 8004328:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	2b01      	cmp	r3, #1
 800432e:	d10c      	bne.n	800434a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004332:	2b00      	cmp	r3, #0
 8004334:	d104      	bne.n	8004340 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004336:	2100      	movs	r1, #0
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f945 	bl	80045c8 <USB_SetDevSpeed>
 800433e:	e008      	b.n	8004352 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004340:	2101      	movs	r1, #1
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f940 	bl	80045c8 <USB_SetDevSpeed>
 8004348:	e003      	b.n	8004352 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800434a:	2103      	movs	r1, #3
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f93b 	bl	80045c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004352:	2110      	movs	r1, #16
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f8f3 	bl	8004540 <USB_FlushTxFifo>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f90f 	bl	8004588 <USB_FlushRxFifo>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437a:	461a      	mov	r2, r3
 800437c:	2300      	movs	r3, #0
 800437e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004386:	461a      	mov	r2, r3
 8004388:	2300      	movs	r3, #0
 800438a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004392:	461a      	mov	r2, r3
 8004394:	2300      	movs	r3, #0
 8004396:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004398:	2300      	movs	r3, #0
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	e043      	b.n	8004426 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043b4:	d118      	bne.n	80043e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c8:	461a      	mov	r2, r3
 80043ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	e013      	b.n	80043fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043de:	461a      	mov	r2, r3
 80043e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	e008      	b.n	80043fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f4:	461a      	mov	r2, r3
 80043f6:	2300      	movs	r3, #0
 80043f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004406:	461a      	mov	r2, r3
 8004408:	2300      	movs	r3, #0
 800440a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004418:	461a      	mov	r2, r3
 800441a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800441e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	3301      	adds	r3, #1
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	429a      	cmp	r2, r3
 800442c:	d3b7      	bcc.n	800439e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800442e:	2300      	movs	r3, #0
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	e043      	b.n	80044bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800444a:	d118      	bne.n	800447e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445e:	461a      	mov	r2, r3
 8004460:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	e013      	b.n	8004490 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004474:	461a      	mov	r2, r3
 8004476:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	e008      	b.n	8004490 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	461a      	mov	r2, r3
 800448c:	2300      	movs	r3, #0
 800448e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449c:	461a      	mov	r2, r3
 800449e:	2300      	movs	r3, #0
 80044a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ae:	461a      	mov	r2, r3
 80044b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	3301      	adds	r3, #1
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d3b7      	bcc.n	8004434 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80044e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d105      	bne.n	80044f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f043 0210 	orr.w	r2, r3, #16
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	4b0f      	ldr	r3, [pc, #60]	; (800453c <USB_DevInit+0x2c4>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	f043 0208 	orr.w	r2, r3, #8
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004518:	2b01      	cmp	r3, #1
 800451a:	d107      	bne.n	800452c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004524:	f043 0304 	orr.w	r3, r3, #4
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800452c:	7dfb      	ldrb	r3, [r7, #23]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004538:	b004      	add	sp, #16
 800453a:	4770      	bx	lr
 800453c:	803c3800 	.word	0x803c3800

08004540 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	019b      	lsls	r3, r3, #6
 8004552:	f043 0220 	orr.w	r2, r3, #32
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3301      	adds	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	4a08      	ldr	r2, [pc, #32]	; (8004584 <USB_FlushTxFifo+0x44>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e006      	b.n	8004578 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b20      	cmp	r3, #32
 8004574:	d0f1      	beq.n	800455a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	00030d40 	.word	0x00030d40

08004588 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2210      	movs	r2, #16
 8004598:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3301      	adds	r3, #1
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	4a08      	ldr	r2, [pc, #32]	; (80045c4 <USB_FlushRxFifo+0x3c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e006      	b.n	80045b8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	2b10      	cmp	r3, #16
 80045b4:	d0f1      	beq.n	800459a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	00030d40 	.word	0x00030d40

080045c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	68f9      	ldr	r1, [r7, #12]
 80045e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045e8:	4313      	orrs	r3, r2
 80045ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b087      	sub	sp, #28
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 0306 	and.w	r3, r3, #6
 8004612:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d102      	bne.n	8004620 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800461a:	2300      	movs	r3, #0
 800461c:	75fb      	strb	r3, [r7, #23]
 800461e:	e00a      	b.n	8004636 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d002      	beq.n	800462c <USB_GetDevSpeed+0x32>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b06      	cmp	r3, #6
 800462a:	d102      	bne.n	8004632 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800462c:	2302      	movs	r3, #2
 800462e:	75fb      	strb	r3, [r7, #23]
 8004630:	e001      	b.n	8004636 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004632:	230f      	movs	r3, #15
 8004634:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004636:	7dfb      	ldrb	r3, [r7, #23]
}
 8004638:	4618      	mov	r0, r3
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	785b      	ldrb	r3, [r3, #1]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d13a      	bne.n	80046d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	2101      	movs	r1, #1
 8004672:	fa01 f303 	lsl.w	r3, r1, r3
 8004676:	b29b      	uxth	r3, r3
 8004678:	68f9      	ldr	r1, [r7, #12]
 800467a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800467e:	4313      	orrs	r3, r2
 8004680:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d155      	bne.n	8004744 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	78db      	ldrb	r3, [r3, #3]
 80046b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	059b      	lsls	r3, r3, #22
 80046ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046bc:	4313      	orrs	r3, r2
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	0151      	lsls	r1, r2, #5
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	440a      	add	r2, r1
 80046c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	e036      	b.n	8004744 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046dc:	69da      	ldr	r2, [r3, #28]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	2101      	movs	r1, #1
 80046e8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ec:	041b      	lsls	r3, r3, #16
 80046ee:	68f9      	ldr	r1, [r7, #12]
 80046f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046f4:	4313      	orrs	r3, r2
 80046f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d11a      	bne.n	8004744 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	78db      	ldrb	r3, [r3, #3]
 8004728:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800472a:	430b      	orrs	r3, r1
 800472c:	4313      	orrs	r3, r2
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	0151      	lsls	r1, r2, #5
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	440a      	add	r2, r1
 8004736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800473a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004742:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
	...

08004754 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	785b      	ldrb	r3, [r3, #1]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d161      	bne.n	8004834 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004786:	d11f      	bne.n	80047c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	0151      	lsls	r1, r2, #5
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	440a      	add	r2, r1
 800479e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	0151      	lsls	r1, r2, #5
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	440a      	add	r2, r1
 80047be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	2101      	movs	r1, #1
 80047da:	fa01 f303 	lsl.w	r3, r1, r3
 80047de:	b29b      	uxth	r3, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	68f9      	ldr	r1, [r7, #12]
 80047e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047e8:	4013      	ands	r3, r2
 80047ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f2:	69da      	ldr	r2, [r3, #28]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	f003 030f 	and.w	r3, r3, #15
 80047fc:	2101      	movs	r1, #1
 80047fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004802:	b29b      	uxth	r3, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	68f9      	ldr	r1, [r7, #12]
 8004808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800480c:	4013      	ands	r3, r2
 800480e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	0159      	lsls	r1, r3, #5
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	440b      	add	r3, r1
 8004826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482a:	4619      	mov	r1, r3
 800482c:	4b35      	ldr	r3, [pc, #212]	; (8004904 <USB_DeactivateEndpoint+0x1b0>)
 800482e:	4013      	ands	r3, r2
 8004830:	600b      	str	r3, [r1, #0]
 8004832:	e060      	b.n	80048f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800484a:	d11f      	bne.n	800488c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	0151      	lsls	r1, r2, #5
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	440a      	add	r2, r1
 8004862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004866:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800486a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	0151      	lsls	r1, r2, #5
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	440a      	add	r2, r1
 8004882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004886:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800488a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	f003 030f 	and.w	r3, r3, #15
 800489c:	2101      	movs	r1, #1
 800489e:	fa01 f303 	lsl.w	r3, r1, r3
 80048a2:	041b      	lsls	r3, r3, #16
 80048a4:	43db      	mvns	r3, r3
 80048a6:	68f9      	ldr	r1, [r7, #12]
 80048a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048ac:	4013      	ands	r3, r2
 80048ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	2101      	movs	r1, #1
 80048c2:	fa01 f303 	lsl.w	r3, r1, r3
 80048c6:	041b      	lsls	r3, r3, #16
 80048c8:	43db      	mvns	r3, r3
 80048ca:	68f9      	ldr	r1, [r7, #12]
 80048cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048d0:	4013      	ands	r3, r2
 80048d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	0159      	lsls	r1, r3, #5
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	440b      	add	r3, r1
 80048ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ee:	4619      	mov	r1, r3
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <USB_DeactivateEndpoint+0x1b4>)
 80048f2:	4013      	ands	r3, r2
 80048f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	ec337800 	.word	0xec337800
 8004908:	eff37800 	.word	0xeff37800

0800490c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08a      	sub	sp, #40	; 0x28
 8004910:	af02      	add	r7, sp, #8
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	4613      	mov	r3, r2
 8004918:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	785b      	ldrb	r3, [r3, #1]
 8004928:	2b01      	cmp	r3, #1
 800492a:	f040 815c 	bne.w	8004be6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d132      	bne.n	800499c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	0151      	lsls	r1, r2, #5
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	440a      	add	r2, r1
 800494c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004950:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004954:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004958:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	0151      	lsls	r1, r2, #5
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	440a      	add	r2, r1
 8004970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004974:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004978:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	0151      	lsls	r1, r2, #5
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	440a      	add	r2, r1
 8004990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004994:	0cdb      	lsrs	r3, r3, #19
 8004996:	04db      	lsls	r3, r3, #19
 8004998:	6113      	str	r3, [r2, #16]
 800499a:	e074      	b.n	8004a86 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	0151      	lsls	r1, r2, #5
 80049ae:	69fa      	ldr	r2, [r7, #28]
 80049b0:	440a      	add	r2, r1
 80049b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b6:	0cdb      	lsrs	r3, r3, #19
 80049b8:	04db      	lsls	r3, r3, #19
 80049ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	6959      	ldr	r1, [r3, #20]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	440b      	add	r3, r1
 80049f8:	1e59      	subs	r1, r3, #1
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a02:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a04:	4b9d      	ldr	r3, [pc, #628]	; (8004c7c <USB_EPStartXfer+0x370>)
 8004a06:	400b      	ands	r3, r1
 8004a08:	69b9      	ldr	r1, [r7, #24]
 8004a0a:	0148      	lsls	r0, r1, #5
 8004a0c:	69f9      	ldr	r1, [r7, #28]
 8004a0e:	4401      	add	r1, r0
 8004a10:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a14:	4313      	orrs	r3, r2
 8004a16:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a2e:	69b9      	ldr	r1, [r7, #24]
 8004a30:	0148      	lsls	r0, r1, #5
 8004a32:	69f9      	ldr	r1, [r7, #28]
 8004a34:	4401      	add	r1, r0
 8004a36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	78db      	ldrb	r3, [r3, #3]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d11f      	bne.n	8004a86 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	0151      	lsls	r1, r2, #5
 8004a58:	69fa      	ldr	r2, [r7, #28]
 8004a5a:	440a      	add	r2, r1
 8004a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a60:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a64:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	0151      	lsls	r1, r2, #5
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	440a      	add	r2, r1
 8004a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a84:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d14b      	bne.n	8004b24 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d009      	beq.n	8004aa8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	78db      	ldrb	r3, [r3, #3]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d128      	bne.n	8004b02 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d110      	bne.n	8004ae2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	0151      	lsls	r1, r2, #5
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	440a      	add	r2, r1
 8004ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ada:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	e00f      	b.n	8004b02 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	0151      	lsls	r1, r2, #5
 8004af4:	69fa      	ldr	r2, [r7, #28]
 8004af6:	440a      	add	r2, r1
 8004af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b00:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	0151      	lsls	r1, r2, #5
 8004b14:	69fa      	ldr	r2, [r7, #28]
 8004b16:	440a      	add	r2, r1
 8004b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	e12f      	b.n	8004d84 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	0151      	lsls	r1, r2, #5
 8004b36:	69fa      	ldr	r2, [r7, #28]
 8004b38:	440a      	add	r2, r1
 8004b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b42:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	78db      	ldrb	r3, [r3, #3]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d015      	beq.n	8004b78 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8117 	beq.w	8004d84 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	2101      	movs	r1, #1
 8004b68:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6c:	69f9      	ldr	r1, [r7, #28]
 8004b6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b72:	4313      	orrs	r3, r2
 8004b74:	634b      	str	r3, [r1, #52]	; 0x34
 8004b76:	e105      	b.n	8004d84 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d110      	bne.n	8004baa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	0151      	lsls	r1, r2, #5
 8004b9a:	69fa      	ldr	r2, [r7, #28]
 8004b9c:	440a      	add	r2, r1
 8004b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	e00f      	b.n	8004bca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	0151      	lsls	r1, r2, #5
 8004bbc:	69fa      	ldr	r2, [r7, #28]
 8004bbe:	440a      	add	r2, r1
 8004bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	68d9      	ldr	r1, [r3, #12]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	781a      	ldrb	r2, [r3, #0]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	b298      	uxth	r0, r3
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	4603      	mov	r3, r0
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 fa2b 	bl	800503a <USB_WritePacket>
 8004be4:	e0ce      	b.n	8004d84 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	0151      	lsls	r1, r2, #5
 8004bf8:	69fa      	ldr	r2, [r7, #28]
 8004bfa:	440a      	add	r2, r1
 8004bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c00:	0cdb      	lsrs	r3, r3, #19
 8004c02:	04db      	lsls	r3, r3, #19
 8004c04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d126      	bne.n	8004c80 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c48:	69b9      	ldr	r1, [r7, #24]
 8004c4a:	0148      	lsls	r0, r1, #5
 8004c4c:	69f9      	ldr	r1, [r7, #28]
 8004c4e:	4401      	add	r1, r0
 8004c50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c54:	4313      	orrs	r3, r2
 8004c56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	0151      	lsls	r1, r2, #5
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	440a      	add	r2, r1
 8004c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c76:	6113      	str	r3, [r2, #16]
 8004c78:	e036      	b.n	8004ce8 <USB_EPStartXfer+0x3dc>
 8004c7a:	bf00      	nop
 8004c7c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	695a      	ldr	r2, [r3, #20]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	4413      	add	r3, r2
 8004c8a:	1e5a      	subs	r2, r3, #1
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	8afb      	ldrh	r3, [r7, #22]
 8004ca6:	04d9      	lsls	r1, r3, #19
 8004ca8:	4b39      	ldr	r3, [pc, #228]	; (8004d90 <USB_EPStartXfer+0x484>)
 8004caa:	400b      	ands	r3, r1
 8004cac:	69b9      	ldr	r1, [r7, #24]
 8004cae:	0148      	lsls	r0, r1, #5
 8004cb0:	69f9      	ldr	r1, [r7, #28]
 8004cb2:	4401      	add	r1, r0
 8004cb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	8af9      	ldrh	r1, [r7, #22]
 8004cd0:	fb01 f303 	mul.w	r3, r1, r3
 8004cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd8:	69b9      	ldr	r1, [r7, #24]
 8004cda:	0148      	lsls	r0, r1, #5
 8004cdc:	69f9      	ldr	r1, [r7, #28]
 8004cde:	4401      	add	r1, r0
 8004ce0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d10d      	bne.n	8004d0a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	68d9      	ldr	r1, [r3, #12]
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d06:	460a      	mov	r2, r1
 8004d08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	78db      	ldrb	r3, [r3, #3]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d128      	bne.n	8004d64 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d110      	bne.n	8004d44 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	0151      	lsls	r1, r2, #5
 8004d34:	69fa      	ldr	r2, [r7, #28]
 8004d36:	440a      	add	r2, r1
 8004d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	e00f      	b.n	8004d64 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	0151      	lsls	r1, r2, #5
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	440a      	add	r2, r1
 8004d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	0151      	lsls	r1, r2, #5
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	440a      	add	r2, r1
 8004d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3720      	adds	r7, #32
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	1ff80000 	.word	0x1ff80000

08004d94 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	785b      	ldrb	r3, [r3, #1]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	f040 80cd 	bne.w	8004f50 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d132      	bne.n	8004e24 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	0151      	lsls	r1, r2, #5
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	440a      	add	r2, r1
 8004dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ddc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004de0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	0151      	lsls	r1, r2, #5
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	440a      	add	r2, r1
 8004df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	0151      	lsls	r1, r2, #5
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	440a      	add	r2, r1
 8004e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e1c:	0cdb      	lsrs	r3, r3, #19
 8004e1e:	04db      	lsls	r3, r3, #19
 8004e20:	6113      	str	r3, [r2, #16]
 8004e22:	e04e      	b.n	8004ec2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	0151      	lsls	r1, r2, #5
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	440a      	add	r2, r1
 8004e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3e:	0cdb      	lsrs	r3, r3, #19
 8004e40:	04db      	lsls	r3, r3, #19
 8004e42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	0151      	lsls	r1, r2, #5
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	440a      	add	r2, r1
 8004e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e66:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	695a      	ldr	r2, [r3, #20]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d903      	bls.n	8004e7c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	0151      	lsls	r1, r2, #5
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	440a      	add	r2, r1
 8004e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb2:	6939      	ldr	r1, [r7, #16]
 8004eb4:	0148      	lsls	r0, r1, #5
 8004eb6:	6979      	ldr	r1, [r7, #20]
 8004eb8:	4401      	add	r1, r0
 8004eba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d11e      	bne.n	8004f06 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d009      	beq.n	8004ee4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004edc:	461a      	mov	r2, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004efe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	e092      	b.n	800502c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	0151      	lsls	r1, r2, #5
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	440a      	add	r2, r1
 8004f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f24:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d07e      	beq.n	800502c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	2101      	movs	r1, #1
 8004f40:	fa01 f303 	lsl.w	r3, r1, r3
 8004f44:	6979      	ldr	r1, [r7, #20]
 8004f46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	634b      	str	r3, [r1, #52]	; 0x34
 8004f4e:	e06d      	b.n	800502c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	0151      	lsls	r1, r2, #5
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	440a      	add	r2, r1
 8004f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f6a:	0cdb      	lsrs	r3, r3, #19
 8004f6c:	04db      	lsls	r3, r3, #19
 8004f6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	0151      	lsls	r1, r2, #5
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	440a      	add	r2, r1
 8004f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f92:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	0151      	lsls	r1, r2, #5
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	440a      	add	r2, r1
 8004fba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd0:	691a      	ldr	r2, [r3, #16]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fda:	6939      	ldr	r1, [r7, #16]
 8004fdc:	0148      	lsls	r0, r1, #5
 8004fde:	6979      	ldr	r1, [r7, #20]
 8004fe0:	4401      	add	r1, r0
 8004fe2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004fea:	79fb      	ldrb	r3, [r7, #7]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d10d      	bne.n	800500c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d009      	beq.n	800500c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	68d9      	ldr	r1, [r3, #12]
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005008:	460a      	mov	r2, r1
 800500a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	0151      	lsls	r1, r2, #5
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	440a      	add	r2, r1
 8005022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005026:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800502a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800503a:	b480      	push	{r7}
 800503c:	b089      	sub	sp, #36	; 0x24
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	4611      	mov	r1, r2
 8005046:	461a      	mov	r2, r3
 8005048:	460b      	mov	r3, r1
 800504a:	71fb      	strb	r3, [r7, #7]
 800504c:	4613      	mov	r3, r2
 800504e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005058:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800505c:	2b00      	cmp	r3, #0
 800505e:	d123      	bne.n	80050a8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005060:	88bb      	ldrh	r3, [r7, #4]
 8005062:	3303      	adds	r3, #3
 8005064:	089b      	lsrs	r3, r3, #2
 8005066:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005068:	2300      	movs	r3, #0
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	e018      	b.n	80050a0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	031a      	lsls	r2, r3, #12
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	4413      	add	r3, r2
 8005076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800507a:	461a      	mov	r2, r3
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	3301      	adds	r3, #1
 8005086:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	3301      	adds	r3, #1
 800508c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	3301      	adds	r3, #1
 8005092:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	3301      	adds	r3, #1
 8005098:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	3301      	adds	r3, #1
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d3e2      	bcc.n	800506e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3724      	adds	r7, #36	; 0x24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b08b      	sub	sp, #44	; 0x2c
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	4613      	mov	r3, r2
 80050c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050cc:	88fb      	ldrh	r3, [r7, #6]
 80050ce:	089b      	lsrs	r3, r3, #2
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050d4:	88fb      	ldrh	r3, [r7, #6]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80050dc:	2300      	movs	r3, #0
 80050de:	623b      	str	r3, [r7, #32]
 80050e0:	e014      	b.n	800510c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	601a      	str	r2, [r3, #0]
    pDest++;
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	3301      	adds	r3, #1
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	3301      	adds	r3, #1
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	3301      	adds	r3, #1
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	3301      	adds	r3, #1
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	3301      	adds	r3, #1
 800510a:	623b      	str	r3, [r7, #32]
 800510c:	6a3a      	ldr	r2, [r7, #32]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	429a      	cmp	r2, r3
 8005112:	d3e6      	bcc.n	80050e2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005114:	8bfb      	ldrh	r3, [r7, #30]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d01e      	beq.n	8005158 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005124:	461a      	mov	r2, r3
 8005126:	f107 0310 	add.w	r3, r7, #16
 800512a:	6812      	ldr	r2, [r2, #0]
 800512c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	b2db      	uxtb	r3, r3
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	fa22 f303 	lsr.w	r3, r2, r3
 800513a:	b2da      	uxtb	r2, r3
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	701a      	strb	r2, [r3, #0]
      i++;
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	3301      	adds	r3, #1
 8005144:	623b      	str	r3, [r7, #32]
      pDest++;
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	3301      	adds	r3, #1
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800514c:	8bfb      	ldrh	r3, [r7, #30]
 800514e:	3b01      	subs	r3, #1
 8005150:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005152:	8bfb      	ldrh	r3, [r7, #30]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1ea      	bne.n	800512e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800515a:	4618      	mov	r0, r3
 800515c:	372c      	adds	r7, #44	; 0x2c
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005166:	b480      	push	{r7}
 8005168:	b085      	sub	sp, #20
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	785b      	ldrb	r3, [r3, #1]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d12c      	bne.n	80051dc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	db12      	blt.n	80051ba <USB_EPSetStall+0x54>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00f      	beq.n	80051ba <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051b8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	e02b      	b.n	8005234 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	db12      	blt.n	8005214 <USB_EPSetStall+0xae>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00f      	beq.n	8005214 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	440a      	add	r2, r1
 800520a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800520e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005212:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800522e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005232:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d128      	bne.n	80052b0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	440a      	add	r2, r1
 8005274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005278:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800527c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	78db      	ldrb	r3, [r3, #3]
 8005282:	2b03      	cmp	r3, #3
 8005284:	d003      	beq.n	800528e <USB_EPClearStall+0x4c>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	78db      	ldrb	r3, [r3, #3]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d138      	bne.n	8005300 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e027      	b.n	8005300 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	78db      	ldrb	r3, [r3, #3]
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d003      	beq.n	80052e0 <USB_EPClearStall+0x9e>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	78db      	ldrb	r3, [r3, #3]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d10f      	bne.n	8005300 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	460b      	mov	r3, r1
 8005318:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800532c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005330:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005342:	68f9      	ldr	r1, [r7, #12]
 8005344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005348:	4313      	orrs	r3, r2
 800534a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005374:	f023 0303 	bic.w	r3, r3, #3
 8005378:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005388:	f023 0302 	bic.w	r3, r3, #2
 800538c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053b6:	f023 0303 	bic.w	r3, r3, #3
 80053ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ca:	f043 0302 	orr.w	r3, r3, #2
 80053ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053de:	b480      	push	{r7}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4013      	ands	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053f6:	68fb      	ldr	r3, [r7, #12]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	4013      	ands	r3, r2
 8005426:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	0c1b      	lsrs	r3, r3, #16
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	4013      	ands	r3, r2
 800545a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	b29b      	uxth	r3, r3
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	4013      	ands	r3, r2
 8005498:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800549a:	68bb      	ldr	r3, [r7, #8]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ca:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	fa22 f303 	lsr.w	r3, r2, r3
 80054d8:	01db      	lsls	r3, r3, #7
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054e2:	78fb      	ldrb	r3, [r7, #3]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4013      	ands	r3, r2
 80054f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054f6:	68bb      	ldr	r3, [r7, #8]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	f003 0301 	and.w	r3, r3, #1
}
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800553e:	f023 0307 	bic.w	r3, r3, #7
 8005542:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005556:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
	...

08005568 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	460b      	mov	r3, r1
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	333c      	adds	r3, #60	; 0x3c
 800557e:	3304      	adds	r3, #4
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	4a26      	ldr	r2, [pc, #152]	; (8005620 <USB_EP0_OutStart+0xb8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d90a      	bls.n	80055a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800559c:	d101      	bne.n	80055a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	e037      	b.n	8005612 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a8:	461a      	mov	r2, r3
 80055aa:	2300      	movs	r3, #0
 80055ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d0:	f043 0318 	orr.w	r3, r3, #24
 80055d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80055e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80055ea:	7afb      	ldrb	r3, [r7, #11]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d10f      	bne.n	8005610 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f6:	461a      	mov	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800560e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	4f54300a 	.word	0x4f54300a

08005624 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3301      	adds	r3, #1
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	4a13      	ldr	r2, [pc, #76]	; (8005684 <USB_CoreReset+0x60>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d901      	bls.n	8005640 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e01a      	b.n	8005676 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	daf3      	bge.n	8005630 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f043 0201 	orr.w	r2, r3, #1
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3301      	adds	r3, #1
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	4a09      	ldr	r2, [pc, #36]	; (8005684 <USB_CoreReset+0x60>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d901      	bls.n	8005668 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e006      	b.n	8005676 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b01      	cmp	r3, #1
 8005672:	d0f1      	beq.n	8005658 <USB_CoreReset+0x34>

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	00030d40 	.word	0x00030d40

08005688 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	460b      	mov	r3, r1
 8005692:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005694:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005698:	f002 f914 	bl	80078c4 <USBD_static_malloc>
 800569c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d105      	bne.n	80056b0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80056ac:	2302      	movs	r3, #2
 80056ae:	e066      	b.n	800577e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	7c1b      	ldrb	r3, [r3, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d119      	bne.n	80056f4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80056c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056c4:	2202      	movs	r2, #2
 80056c6:	2181      	movs	r1, #129	; 0x81
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f001 ffd8 	bl	800767e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80056d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056d8:	2202      	movs	r2, #2
 80056da:	2101      	movs	r1, #1
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f001 ffce 	bl	800767e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2210      	movs	r2, #16
 80056ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80056f2:	e016      	b.n	8005722 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80056f4:	2340      	movs	r3, #64	; 0x40
 80056f6:	2202      	movs	r2, #2
 80056f8:	2181      	movs	r1, #129	; 0x81
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f001 ffbf 	bl	800767e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005706:	2340      	movs	r3, #64	; 0x40
 8005708:	2202      	movs	r2, #2
 800570a:	2101      	movs	r1, #1
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f001 ffb6 	bl	800767e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2210      	movs	r2, #16
 800571e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005722:	2308      	movs	r3, #8
 8005724:	2203      	movs	r2, #3
 8005726:	2182      	movs	r1, #130	; 0x82
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f001 ffa8 	bl	800767e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	7c1b      	ldrb	r3, [r3, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d109      	bne.n	800576c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800575e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005762:	2101      	movs	r1, #1
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f002 f879 	bl	800785c <USBD_LL_PrepareReceive>
 800576a:	e007      	b.n	800577c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005772:	2340      	movs	r3, #64	; 0x40
 8005774:	2101      	movs	r1, #1
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f002 f870 	bl	800785c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	460b      	mov	r3, r1
 8005790:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005792:	2181      	movs	r1, #129	; 0x81
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f001 ff98 	bl	80076ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80057a0:	2101      	movs	r1, #1
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f001 ff91 	bl	80076ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80057b0:	2182      	movs	r1, #130	; 0x82
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f001 ff89 	bl	80076ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00e      	beq.n	80057f0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057e2:	4618      	mov	r0, r3
 80057e4:	f002 f87c 	bl	80078e0 <USBD_static_free>
    pdev->pClassData = NULL;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800580c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005820:	2303      	movs	r3, #3
 8005822:	e0af      	b.n	8005984 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800582c:	2b00      	cmp	r3, #0
 800582e:	d03f      	beq.n	80058b0 <USBD_CDC_Setup+0xb4>
 8005830:	2b20      	cmp	r3, #32
 8005832:	f040 809f 	bne.w	8005974 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	88db      	ldrh	r3, [r3, #6]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d02e      	beq.n	800589c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	b25b      	sxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	da16      	bge.n	8005876 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005854:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	88d2      	ldrh	r2, [r2, #6]
 800585a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	88db      	ldrh	r3, [r3, #6]
 8005860:	2b07      	cmp	r3, #7
 8005862:	bf28      	it	cs
 8005864:	2307      	movcs	r3, #7
 8005866:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	89fa      	ldrh	r2, [r7, #14]
 800586c:	4619      	mov	r1, r3
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f001 fae9 	bl	8006e46 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005874:	e085      	b.n	8005982 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	785a      	ldrb	r2, [r3, #1]
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	88db      	ldrh	r3, [r3, #6]
 8005884:	b2da      	uxtb	r2, r3
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800588c:	6939      	ldr	r1, [r7, #16]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	88db      	ldrh	r3, [r3, #6]
 8005892:	461a      	mov	r2, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 fb02 	bl	8006e9e <USBD_CtlPrepareRx>
      break;
 800589a:	e072      	b.n	8005982 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	7850      	ldrb	r0, [r2, #1]
 80058a8:	2200      	movs	r2, #0
 80058aa:	6839      	ldr	r1, [r7, #0]
 80058ac:	4798      	blx	r3
      break;
 80058ae:	e068      	b.n	8005982 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	2b0b      	cmp	r3, #11
 80058b6:	d852      	bhi.n	800595e <USBD_CDC_Setup+0x162>
 80058b8:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <USBD_CDC_Setup+0xc4>)
 80058ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058be:	bf00      	nop
 80058c0:	080058f1 	.word	0x080058f1
 80058c4:	0800596d 	.word	0x0800596d
 80058c8:	0800595f 	.word	0x0800595f
 80058cc:	0800595f 	.word	0x0800595f
 80058d0:	0800595f 	.word	0x0800595f
 80058d4:	0800595f 	.word	0x0800595f
 80058d8:	0800595f 	.word	0x0800595f
 80058dc:	0800595f 	.word	0x0800595f
 80058e0:	0800595f 	.word	0x0800595f
 80058e4:	0800595f 	.word	0x0800595f
 80058e8:	0800591b 	.word	0x0800591b
 80058ec:	08005945 	.word	0x08005945
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d107      	bne.n	800590c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80058fc:	f107 030a 	add.w	r3, r7, #10
 8005900:	2202      	movs	r2, #2
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f001 fa9e 	bl	8006e46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800590a:	e032      	b.n	8005972 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f001 fa28 	bl	8006d64 <USBD_CtlError>
            ret = USBD_FAIL;
 8005914:	2303      	movs	r3, #3
 8005916:	75fb      	strb	r3, [r7, #23]
          break;
 8005918:	e02b      	b.n	8005972 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b03      	cmp	r3, #3
 8005924:	d107      	bne.n	8005936 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005926:	f107 030d 	add.w	r3, r7, #13
 800592a:	2201      	movs	r2, #1
 800592c:	4619      	mov	r1, r3
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f001 fa89 	bl	8006e46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005934:	e01d      	b.n	8005972 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005936:	6839      	ldr	r1, [r7, #0]
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f001 fa13 	bl	8006d64 <USBD_CtlError>
            ret = USBD_FAIL;
 800593e:	2303      	movs	r3, #3
 8005940:	75fb      	strb	r3, [r7, #23]
          break;
 8005942:	e016      	b.n	8005972 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b03      	cmp	r3, #3
 800594e:	d00f      	beq.n	8005970 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005950:	6839      	ldr	r1, [r7, #0]
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f001 fa06 	bl	8006d64 <USBD_CtlError>
            ret = USBD_FAIL;
 8005958:	2303      	movs	r3, #3
 800595a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800595c:	e008      	b.n	8005970 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800595e:	6839      	ldr	r1, [r7, #0]
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f001 f9ff 	bl	8006d64 <USBD_CtlError>
          ret = USBD_FAIL;
 8005966:	2303      	movs	r3, #3
 8005968:	75fb      	strb	r3, [r7, #23]
          break;
 800596a:	e002      	b.n	8005972 <USBD_CDC_Setup+0x176>
          break;
 800596c:	bf00      	nop
 800596e:	e008      	b.n	8005982 <USBD_CDC_Setup+0x186>
          break;
 8005970:	bf00      	nop
      }
      break;
 8005972:	e006      	b.n	8005982 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005974:	6839      	ldr	r1, [r7, #0]
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f001 f9f4 	bl	8006d64 <USBD_CtlError>
      ret = USBD_FAIL;
 800597c:	2303      	movs	r3, #3
 800597e:	75fb      	strb	r3, [r7, #23]
      break;
 8005980:	bf00      	nop
  }

  return (uint8_t)ret;
 8005982:	7dfb      	ldrb	r3, [r7, #23]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800599e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e04f      	b.n	8005a4e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80059b6:	78fa      	ldrb	r2, [r7, #3]
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	3318      	adds	r3, #24
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d029      	beq.n	8005a20 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80059cc:	78fa      	ldrb	r2, [r7, #3]
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	440b      	add	r3, r1
 80059da:	3318      	adds	r3, #24
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	78f9      	ldrb	r1, [r7, #3]
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	460b      	mov	r3, r1
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	1a5b      	subs	r3, r3, r1
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4403      	add	r3, r0
 80059ec:	3344      	adds	r3, #68	; 0x44
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80059f4:	fb03 f301 	mul.w	r3, r3, r1
 80059f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d110      	bne.n	8005a20 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80059fe:	78fa      	ldrb	r2, [r7, #3]
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3318      	adds	r3, #24
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a12:	78f9      	ldrb	r1, [r7, #3]
 8005a14:	2300      	movs	r3, #0
 8005a16:	2200      	movs	r2, #0
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f001 fefe 	bl	800781a <USBD_LL_Transmit>
 8005a1e:	e015      	b.n	8005a4c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00b      	beq.n	8005a4c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005a48:	78fa      	ldrb	r2, [r7, #3]
 8005a4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e015      	b.n	8005aa4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f001 ff0e 	bl	800789e <USBD_LL_GetRxDataSize>
 8005a82:	4602      	mov	r2, r0
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e01b      	b.n	8005afe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d015      	beq.n	8005afc <USBD_CDC_EP0_RxReady+0x50>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ad6:	2bff      	cmp	r3, #255	; 0xff
 8005ad8:	d010      	beq.n	8005afc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005ae8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005af0:	b292      	uxth	r2, r2
 8005af2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	22ff      	movs	r2, #255	; 0xff
 8005af8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2243      	movs	r2, #67	; 0x43
 8005b14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005b16:	4b03      	ldr	r3, [pc, #12]	; (8005b24 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	20000094 	.word	0x20000094

08005b28 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2243      	movs	r2, #67	; 0x43
 8005b34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005b36:	4b03      	ldr	r3, [pc, #12]	; (8005b44 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	20000050 	.word	0x20000050

08005b48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2243      	movs	r2, #67	; 0x43
 8005b54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005b56:	4b03      	ldr	r3, [pc, #12]	; (8005b64 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	200000d8 	.word	0x200000d8

08005b68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	220a      	movs	r2, #10
 8005b74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005b76:	4b03      	ldr	r3, [pc, #12]	; (8005b84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	2000000c 	.word	0x2000000c

08005b88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e004      	b.n	8005ba6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b087      	sub	sp, #28
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bc4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e008      	b.n	8005be2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b085      	sub	sp, #20
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bfe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e004      	b.n	8005c14 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e016      	b.n	8005c6c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	7c1b      	ldrb	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c50:	2101      	movs	r1, #1
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f001 fe02 	bl	800785c <USBD_LL_PrepareReceive>
 8005c58:	e007      	b.n	8005c6a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c60:	2340      	movs	r3, #64	; 0x40
 8005c62:	2101      	movs	r1, #1
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f001 fdf9 	bl	800785c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e01f      	b.n	8005ccc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	79fa      	ldrb	r2, [r7, #7]
 8005cbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f001 fc75 	bl	80075b0 <USBD_LL_Init>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e016      	b.n	8005d1a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00b      	beq.n	8005d18 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	f107 020e 	add.w	r2, r7, #14
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	4798      	blx	r3
 8005d10:	4602      	mov	r2, r0
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f001 fc8c 	bl	8007648 <USBD_LL_Start>
 8005d30:	4603      	mov	r3, r0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d009      	beq.n	8005d7e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	78fa      	ldrb	r2, [r7, #3]
 8005d74:	4611      	mov	r1, r2
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	4798      	blx	r3
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d007      	beq.n	8005dae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	78fa      	ldrb	r2, [r7, #3]
 8005da8:	4611      	mov	r1, r2
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	4798      	blx	r3
  }

  return USBD_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 ff90 	bl	8006cf0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005dde:	461a      	mov	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005dec:	f003 031f 	and.w	r3, r3, #31
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d01a      	beq.n	8005e2a <USBD_LL_SetupStage+0x72>
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d822      	bhi.n	8005e3e <USBD_LL_SetupStage+0x86>
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <USBD_LL_SetupStage+0x4a>
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d00a      	beq.n	8005e16 <USBD_LL_SetupStage+0x5e>
 8005e00:	e01d      	b.n	8005e3e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e08:	4619      	mov	r1, r3
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fa62 	bl	80062d4 <USBD_StdDevReq>
 8005e10:	4603      	mov	r3, r0
 8005e12:	73fb      	strb	r3, [r7, #15]
      break;
 8005e14:	e020      	b.n	8005e58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fac6 	bl	80063b0 <USBD_StdItfReq>
 8005e24:	4603      	mov	r3, r0
 8005e26:	73fb      	strb	r3, [r7, #15]
      break;
 8005e28:	e016      	b.n	8005e58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fb05 	bl	8006442 <USBD_StdEPReq>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e3c:	e00c      	b.n	8005e58 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f001 fc5b 	bl	8007708 <USBD_LL_StallEP>
 8005e52:	4603      	mov	r3, r0
 8005e54:	73fb      	strb	r3, [r7, #15]
      break;
 8005e56:	bf00      	nop
  }

  return ret;
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b086      	sub	sp, #24
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	607a      	str	r2, [r7, #4]
 8005e6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005e70:	7afb      	ldrb	r3, [r7, #11]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d138      	bne.n	8005ee8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d14a      	bne.n	8005f1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d913      	bls.n	8005ebc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	1ad2      	subs	r2, r2, r3
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	bf28      	it	cs
 8005eae:	4613      	movcs	r3, r2
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f001 f80f 	bl	8006ed8 <USBD_CtlContinueRx>
 8005eba:	e030      	b.n	8005f1e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d10b      	bne.n	8005ee0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d005      	beq.n	8005ee0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f001 f80a 	bl	8006efa <USBD_CtlSendStatus>
 8005ee6:	e01a      	b.n	8005f1e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d114      	bne.n	8005f1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00e      	beq.n	8005f1e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	7afa      	ldrb	r2, [r7, #11]
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	4798      	blx	r3
 8005f10:	4603      	mov	r3, r0
 8005f12:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005f14:	7dfb      	ldrb	r3, [r7, #23]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005f1a:	7dfb      	ldrb	r3, [r7, #23]
 8005f1c:	e000      	b.n	8005f20 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	460b      	mov	r3, r1
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f36:	7afb      	ldrb	r3, [r7, #11]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d16b      	bne.n	8006014 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	3314      	adds	r3, #20
 8005f40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d156      	bne.n	8005ffa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d914      	bls.n	8005f82 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	1ad2      	subs	r2, r2, r3
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 ff84 	bl	8006e7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f74:	2300      	movs	r3, #0
 8005f76:	2200      	movs	r2, #0
 8005f78:	2100      	movs	r1, #0
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f001 fc6e 	bl	800785c <USBD_LL_PrepareReceive>
 8005f80:	e03b      	b.n	8005ffa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d11c      	bne.n	8005fc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d316      	bcc.n	8005fc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d20f      	bcs.n	8005fc8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2100      	movs	r1, #0
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 ff65 	bl	8006e7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fba:	2300      	movs	r3, #0
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f001 fc4b 	bl	800785c <USBD_LL_PrepareReceive>
 8005fc6:	e018      	b.n	8005ffa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d10b      	bne.n	8005fec <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d005      	beq.n	8005fec <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fec:	2180      	movs	r1, #128	; 0x80
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f001 fb8a 	bl	8007708 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 ff93 	bl	8006f20 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006000:	2b01      	cmp	r3, #1
 8006002:	d122      	bne.n	800604a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f7ff fe98 	bl	8005d3a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006012:	e01a      	b.n	800604a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b03      	cmp	r3, #3
 800601e:	d114      	bne.n	800604a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00e      	beq.n	800604a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	7afa      	ldrb	r2, [r7, #11]
 8006036:	4611      	mov	r1, r2
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	4798      	blx	r3
 800603c:	4603      	mov	r3, r0
 800603e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006040:	7dfb      	ldrb	r3, [r7, #23]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006046:	7dfb      	ldrb	r3, [r7, #23]
 8006048:	e000      	b.n	800604c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006084:	2303      	movs	r3, #3
 8006086:	e02f      	b.n	80060e8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00f      	beq.n	80060b2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d009      	beq.n	80060b2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6852      	ldr	r2, [r2, #4]
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	4611      	mov	r1, r2
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060b2:	2340      	movs	r3, #64	; 0x40
 80060b4:	2200      	movs	r2, #0
 80060b6:	2100      	movs	r1, #0
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f001 fae0 	bl	800767e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2240      	movs	r2, #64	; 0x40
 80060ca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060ce:	2340      	movs	r3, #64	; 0x40
 80060d0:	2200      	movs	r2, #0
 80060d2:	2180      	movs	r1, #128	; 0x80
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f001 fad2 	bl	800767e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2240      	movs	r2, #64	; 0x40
 80060e4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	78fa      	ldrb	r2, [r7, #3]
 8006100:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800611e:	b2da      	uxtb	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2204      	movs	r2, #4
 800612a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b04      	cmp	r3, #4
 800614e:	d106      	bne.n	800615e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006156:	b2da      	uxtb	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800617e:	2303      	movs	r3, #3
 8006180:	e012      	b.n	80061a8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b03      	cmp	r3, #3
 800618c:	d10b      	bne.n	80061a6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e014      	b.n	80061f4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	d10d      	bne.n	80061f2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d007      	beq.n	80061f2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	78fa      	ldrb	r2, [r7, #3]
 80061ec:	4611      	mov	r1, r2
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006212:	2303      	movs	r3, #3
 8006214:	e014      	b.n	8006240 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b03      	cmp	r3, #3
 8006220:	d10d      	bne.n	800623e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	2b00      	cmp	r3, #0
 800622c:	d007      	beq.n	800623e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	78fa      	ldrb	r2, [r7, #3]
 8006238:	4611      	mov	r1, r2
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b082      	sub	sp, #8
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006274:	2b00      	cmp	r3, #0
 8006276:	d009      	beq.n	800628c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	6852      	ldr	r2, [r2, #4]
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	4611      	mov	r1, r2
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	4798      	blx	r3
  }

  return USBD_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006296:	b480      	push	{r7}
 8006298:	b087      	sub	sp, #28
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	3301      	adds	r3, #1
 80062ac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80062b4:	8a3b      	ldrh	r3, [r7, #16]
 80062b6:	021b      	lsls	r3, r3, #8
 80062b8:	b21a      	sxth	r2, r3
 80062ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80062be:	4313      	orrs	r3, r2
 80062c0:	b21b      	sxth	r3, r3
 80062c2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80062c4:	89fb      	ldrh	r3, [r7, #14]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
	...

080062d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062ea:	2b40      	cmp	r3, #64	; 0x40
 80062ec:	d005      	beq.n	80062fa <USBD_StdDevReq+0x26>
 80062ee:	2b40      	cmp	r3, #64	; 0x40
 80062f0:	d853      	bhi.n	800639a <USBD_StdDevReq+0xc6>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <USBD_StdDevReq+0x3a>
 80062f6:	2b20      	cmp	r3, #32
 80062f8:	d14f      	bne.n	800639a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	4798      	blx	r3
 8006308:	4603      	mov	r3, r0
 800630a:	73fb      	strb	r3, [r7, #15]
      break;
 800630c:	e04a      	b.n	80063a4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	2b09      	cmp	r3, #9
 8006314:	d83b      	bhi.n	800638e <USBD_StdDevReq+0xba>
 8006316:	a201      	add	r2, pc, #4	; (adr r2, 800631c <USBD_StdDevReq+0x48>)
 8006318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631c:	08006371 	.word	0x08006371
 8006320:	08006385 	.word	0x08006385
 8006324:	0800638f 	.word	0x0800638f
 8006328:	0800637b 	.word	0x0800637b
 800632c:	0800638f 	.word	0x0800638f
 8006330:	0800634f 	.word	0x0800634f
 8006334:	08006345 	.word	0x08006345
 8006338:	0800638f 	.word	0x0800638f
 800633c:	08006367 	.word	0x08006367
 8006340:	08006359 	.word	0x08006359
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f9de 	bl	8006708 <USBD_GetDescriptor>
          break;
 800634c:	e024      	b.n	8006398 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fb43 	bl	80069dc <USBD_SetAddress>
          break;
 8006356:	e01f      	b.n	8006398 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fb82 	bl	8006a64 <USBD_SetConfig>
 8006360:	4603      	mov	r3, r0
 8006362:	73fb      	strb	r3, [r7, #15]
          break;
 8006364:	e018      	b.n	8006398 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006366:	6839      	ldr	r1, [r7, #0]
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fc21 	bl	8006bb0 <USBD_GetConfig>
          break;
 800636e:	e013      	b.n	8006398 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006370:	6839      	ldr	r1, [r7, #0]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fc52 	bl	8006c1c <USBD_GetStatus>
          break;
 8006378:	e00e      	b.n	8006398 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fc81 	bl	8006c84 <USBD_SetFeature>
          break;
 8006382:	e009      	b.n	8006398 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fc90 	bl	8006cac <USBD_ClrFeature>
          break;
 800638c:	e004      	b.n	8006398 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fce7 	bl	8006d64 <USBD_CtlError>
          break;
 8006396:	bf00      	nop
      }
      break;
 8006398:	e004      	b.n	80063a4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800639a:	6839      	ldr	r1, [r7, #0]
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fce1 	bl	8006d64 <USBD_CtlError>
      break;
 80063a2:	bf00      	nop
  }

  return ret;
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop

080063b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063c6:	2b40      	cmp	r3, #64	; 0x40
 80063c8:	d005      	beq.n	80063d6 <USBD_StdItfReq+0x26>
 80063ca:	2b40      	cmp	r3, #64	; 0x40
 80063cc:	d82f      	bhi.n	800642e <USBD_StdItfReq+0x7e>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <USBD_StdItfReq+0x26>
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d12b      	bne.n	800642e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	3b01      	subs	r3, #1
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d81d      	bhi.n	8006420 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	889b      	ldrh	r3, [r3, #4]
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d813      	bhi.n	8006416 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	4798      	blx	r3
 80063fc:	4603      	mov	r3, r0
 80063fe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	88db      	ldrh	r3, [r3, #6]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d110      	bne.n	800642a <USBD_StdItfReq+0x7a>
 8006408:	7bfb      	ldrb	r3, [r7, #15]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10d      	bne.n	800642a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fd73 	bl	8006efa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006414:	e009      	b.n	800642a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fca3 	bl	8006d64 <USBD_CtlError>
          break;
 800641e:	e004      	b.n	800642a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006420:	6839      	ldr	r1, [r7, #0]
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fc9e 	bl	8006d64 <USBD_CtlError>
          break;
 8006428:	e000      	b.n	800642c <USBD_StdItfReq+0x7c>
          break;
 800642a:	bf00      	nop
      }
      break;
 800642c:	e004      	b.n	8006438 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fc97 	bl	8006d64 <USBD_CtlError>
      break;
 8006436:	bf00      	nop
  }

  return ret;
 8006438:	7bfb      	ldrb	r3, [r7, #15]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	889b      	ldrh	r3, [r3, #4]
 8006454:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800645e:	2b40      	cmp	r3, #64	; 0x40
 8006460:	d007      	beq.n	8006472 <USBD_StdEPReq+0x30>
 8006462:	2b40      	cmp	r3, #64	; 0x40
 8006464:	f200 8145 	bhi.w	80066f2 <USBD_StdEPReq+0x2b0>
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00c      	beq.n	8006486 <USBD_StdEPReq+0x44>
 800646c:	2b20      	cmp	r3, #32
 800646e:	f040 8140 	bne.w	80066f2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	4798      	blx	r3
 8006480:	4603      	mov	r3, r0
 8006482:	73fb      	strb	r3, [r7, #15]
      break;
 8006484:	e13a      	b.n	80066fc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	785b      	ldrb	r3, [r3, #1]
 800648a:	2b03      	cmp	r3, #3
 800648c:	d007      	beq.n	800649e <USBD_StdEPReq+0x5c>
 800648e:	2b03      	cmp	r3, #3
 8006490:	f300 8129 	bgt.w	80066e6 <USBD_StdEPReq+0x2a4>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d07f      	beq.n	8006598 <USBD_StdEPReq+0x156>
 8006498:	2b01      	cmp	r3, #1
 800649a:	d03c      	beq.n	8006516 <USBD_StdEPReq+0xd4>
 800649c:	e123      	b.n	80066e6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d002      	beq.n	80064b0 <USBD_StdEPReq+0x6e>
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d016      	beq.n	80064dc <USBD_StdEPReq+0x9a>
 80064ae:	e02c      	b.n	800650a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00d      	beq.n	80064d2 <USBD_StdEPReq+0x90>
 80064b6:	7bbb      	ldrb	r3, [r7, #14]
 80064b8:	2b80      	cmp	r3, #128	; 0x80
 80064ba:	d00a      	beq.n	80064d2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064bc:	7bbb      	ldrb	r3, [r7, #14]
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 f921 	bl	8007708 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064c6:	2180      	movs	r1, #128	; 0x80
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 f91d 	bl	8007708 <USBD_LL_StallEP>
 80064ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064d0:	e020      	b.n	8006514 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80064d2:	6839      	ldr	r1, [r7, #0]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fc45 	bl	8006d64 <USBD_CtlError>
              break;
 80064da:	e01b      	b.n	8006514 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	885b      	ldrh	r3, [r3, #2]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10e      	bne.n	8006502 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80064e4:	7bbb      	ldrb	r3, [r7, #14]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00b      	beq.n	8006502 <USBD_StdEPReq+0xc0>
 80064ea:	7bbb      	ldrb	r3, [r7, #14]
 80064ec:	2b80      	cmp	r3, #128	; 0x80
 80064ee:	d008      	beq.n	8006502 <USBD_StdEPReq+0xc0>
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	88db      	ldrh	r3, [r3, #6]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d104      	bne.n	8006502 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80064f8:	7bbb      	ldrb	r3, [r7, #14]
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 f903 	bl	8007708 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fcf9 	bl	8006efa <USBD_CtlSendStatus>

              break;
 8006508:	e004      	b.n	8006514 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fc29 	bl	8006d64 <USBD_CtlError>
              break;
 8006512:	bf00      	nop
          }
          break;
 8006514:	e0ec      	b.n	80066f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d002      	beq.n	8006528 <USBD_StdEPReq+0xe6>
 8006522:	2b03      	cmp	r3, #3
 8006524:	d016      	beq.n	8006554 <USBD_StdEPReq+0x112>
 8006526:	e030      	b.n	800658a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00d      	beq.n	800654a <USBD_StdEPReq+0x108>
 800652e:	7bbb      	ldrb	r3, [r7, #14]
 8006530:	2b80      	cmp	r3, #128	; 0x80
 8006532:	d00a      	beq.n	800654a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006534:	7bbb      	ldrb	r3, [r7, #14]
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 f8e5 	bl	8007708 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800653e:	2180      	movs	r1, #128	; 0x80
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 f8e1 	bl	8007708 <USBD_LL_StallEP>
 8006546:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006548:	e025      	b.n	8006596 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fc09 	bl	8006d64 <USBD_CtlError>
              break;
 8006552:	e020      	b.n	8006596 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	885b      	ldrh	r3, [r3, #2]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d11b      	bne.n	8006594 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800655c:	7bbb      	ldrb	r3, [r7, #14]
 800655e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006562:	2b00      	cmp	r3, #0
 8006564:	d004      	beq.n	8006570 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006566:	7bbb      	ldrb	r3, [r7, #14]
 8006568:	4619      	mov	r1, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f001 f8eb 	bl	8007746 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fcc2 	bl	8006efa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	4798      	blx	r3
 8006584:	4603      	mov	r3, r0
 8006586:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006588:	e004      	b.n	8006594 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fbe9 	bl	8006d64 <USBD_CtlError>
              break;
 8006592:	e000      	b.n	8006596 <USBD_StdEPReq+0x154>
              break;
 8006594:	bf00      	nop
          }
          break;
 8006596:	e0ab      	b.n	80066f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d002      	beq.n	80065aa <USBD_StdEPReq+0x168>
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d032      	beq.n	800660e <USBD_StdEPReq+0x1cc>
 80065a8:	e097      	b.n	80066da <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065aa:	7bbb      	ldrb	r3, [r7, #14]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d007      	beq.n	80065c0 <USBD_StdEPReq+0x17e>
 80065b0:	7bbb      	ldrb	r3, [r7, #14]
 80065b2:	2b80      	cmp	r3, #128	; 0x80
 80065b4:	d004      	beq.n	80065c0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fbd3 	bl	8006d64 <USBD_CtlError>
                break;
 80065be:	e091      	b.n	80066e4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	da0b      	bge.n	80065e0 <USBD_StdEPReq+0x19e>
 80065c8:	7bbb      	ldrb	r3, [r7, #14]
 80065ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	3310      	adds	r3, #16
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	4413      	add	r3, r2
 80065dc:	3304      	adds	r3, #4
 80065de:	e00b      	b.n	80065f8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065e0:	7bbb      	ldrb	r3, [r7, #14]
 80065e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	4413      	add	r3, r2
 80065f6:	3304      	adds	r3, #4
 80065f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2202      	movs	r2, #2
 8006604:	4619      	mov	r1, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fc1d 	bl	8006e46 <USBD_CtlSendData>
              break;
 800660c:	e06a      	b.n	80066e4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800660e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006612:	2b00      	cmp	r3, #0
 8006614:	da11      	bge.n	800663a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006616:	7bbb      	ldrb	r3, [r7, #14]
 8006618:	f003 020f 	and.w	r2, r3, #15
 800661c:	6879      	ldr	r1, [r7, #4]
 800661e:	4613      	mov	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	440b      	add	r3, r1
 8006628:	3324      	adds	r3, #36	; 0x24
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d117      	bne.n	8006660 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fb96 	bl	8006d64 <USBD_CtlError>
                  break;
 8006638:	e054      	b.n	80066e4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	f003 020f 	and.w	r2, r3, #15
 8006640:	6879      	ldr	r1, [r7, #4]
 8006642:	4613      	mov	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	440b      	add	r3, r1
 800664c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d104      	bne.n	8006660 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fb83 	bl	8006d64 <USBD_CtlError>
                  break;
 800665e:	e041      	b.n	80066e4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006660:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006664:	2b00      	cmp	r3, #0
 8006666:	da0b      	bge.n	8006680 <USBD_StdEPReq+0x23e>
 8006668:	7bbb      	ldrb	r3, [r7, #14]
 800666a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	3310      	adds	r3, #16
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	4413      	add	r3, r2
 800667c:	3304      	adds	r3, #4
 800667e:	e00b      	b.n	8006698 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006680:	7bbb      	ldrb	r3, [r7, #14]
 8006682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006686:	4613      	mov	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	4413      	add	r3, r2
 8006696:	3304      	adds	r3, #4
 8006698:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800669a:	7bbb      	ldrb	r3, [r7, #14]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <USBD_StdEPReq+0x264>
 80066a0:	7bbb      	ldrb	r3, [r7, #14]
 80066a2:	2b80      	cmp	r3, #128	; 0x80
 80066a4:	d103      	bne.n	80066ae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]
 80066ac:	e00e      	b.n	80066cc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80066ae:	7bbb      	ldrb	r3, [r7, #14]
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 f866 	bl	8007784 <USBD_LL_IsStallEP>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2201      	movs	r2, #1
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	e002      	b.n	80066cc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2200      	movs	r2, #0
 80066ca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2202      	movs	r2, #2
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fbb7 	bl	8006e46 <USBD_CtlSendData>
              break;
 80066d8:	e004      	b.n	80066e4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fb41 	bl	8006d64 <USBD_CtlError>
              break;
 80066e2:	bf00      	nop
          }
          break;
 80066e4:	e004      	b.n	80066f0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80066e6:	6839      	ldr	r1, [r7, #0]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fb3b 	bl	8006d64 <USBD_CtlError>
          break;
 80066ee:	bf00      	nop
      }
      break;
 80066f0:	e004      	b.n	80066fc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80066f2:	6839      	ldr	r1, [r7, #0]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fb35 	bl	8006d64 <USBD_CtlError>
      break;
 80066fa:	bf00      	nop
  }

  return ret;
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
	...

08006708 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006716:	2300      	movs	r3, #0
 8006718:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	885b      	ldrh	r3, [r3, #2]
 8006722:	0a1b      	lsrs	r3, r3, #8
 8006724:	b29b      	uxth	r3, r3
 8006726:	3b01      	subs	r3, #1
 8006728:	2b06      	cmp	r3, #6
 800672a:	f200 8128 	bhi.w	800697e <USBD_GetDescriptor+0x276>
 800672e:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <USBD_GetDescriptor+0x2c>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	08006751 	.word	0x08006751
 8006738:	08006769 	.word	0x08006769
 800673c:	080067a9 	.word	0x080067a9
 8006740:	0800697f 	.word	0x0800697f
 8006744:	0800697f 	.word	0x0800697f
 8006748:	0800691f 	.word	0x0800691f
 800674c:	0800694b 	.word	0x0800694b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	7c12      	ldrb	r2, [r2, #16]
 800675c:	f107 0108 	add.w	r1, r7, #8
 8006760:	4610      	mov	r0, r2
 8006762:	4798      	blx	r3
 8006764:	60f8      	str	r0, [r7, #12]
      break;
 8006766:	e112      	b.n	800698e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	7c1b      	ldrb	r3, [r3, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10d      	bne.n	800678c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006778:	f107 0208 	add.w	r2, r7, #8
 800677c:	4610      	mov	r0, r2
 800677e:	4798      	blx	r3
 8006780:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3301      	adds	r3, #1
 8006786:	2202      	movs	r2, #2
 8006788:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800678a:	e100      	b.n	800698e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	f107 0208 	add.w	r2, r7, #8
 8006798:	4610      	mov	r0, r2
 800679a:	4798      	blx	r3
 800679c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3301      	adds	r3, #1
 80067a2:	2202      	movs	r2, #2
 80067a4:	701a      	strb	r2, [r3, #0]
      break;
 80067a6:	e0f2      	b.n	800698e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	885b      	ldrh	r3, [r3, #2]
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b05      	cmp	r3, #5
 80067b0:	f200 80ac 	bhi.w	800690c <USBD_GetDescriptor+0x204>
 80067b4:	a201      	add	r2, pc, #4	; (adr r2, 80067bc <USBD_GetDescriptor+0xb4>)
 80067b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ba:	bf00      	nop
 80067bc:	080067d5 	.word	0x080067d5
 80067c0:	08006809 	.word	0x08006809
 80067c4:	0800683d 	.word	0x0800683d
 80067c8:	08006871 	.word	0x08006871
 80067cc:	080068a5 	.word	0x080068a5
 80067d0:	080068d9 	.word	0x080068d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00b      	beq.n	80067f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	7c12      	ldrb	r2, [r2, #16]
 80067ec:	f107 0108 	add.w	r1, r7, #8
 80067f0:	4610      	mov	r0, r2
 80067f2:	4798      	blx	r3
 80067f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067f6:	e091      	b.n	800691c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fab2 	bl	8006d64 <USBD_CtlError>
            err++;
 8006800:	7afb      	ldrb	r3, [r7, #11]
 8006802:	3301      	adds	r3, #1
 8006804:	72fb      	strb	r3, [r7, #11]
          break;
 8006806:	e089      	b.n	800691c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00b      	beq.n	800682c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	7c12      	ldrb	r2, [r2, #16]
 8006820:	f107 0108 	add.w	r1, r7, #8
 8006824:	4610      	mov	r0, r2
 8006826:	4798      	blx	r3
 8006828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800682a:	e077      	b.n	800691c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fa98 	bl	8006d64 <USBD_CtlError>
            err++;
 8006834:	7afb      	ldrb	r3, [r7, #11]
 8006836:	3301      	adds	r3, #1
 8006838:	72fb      	strb	r3, [r7, #11]
          break;
 800683a:	e06f      	b.n	800691c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00b      	beq.n	8006860 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	7c12      	ldrb	r2, [r2, #16]
 8006854:	f107 0108 	add.w	r1, r7, #8
 8006858:	4610      	mov	r0, r2
 800685a:	4798      	blx	r3
 800685c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800685e:	e05d      	b.n	800691c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fa7e 	bl	8006d64 <USBD_CtlError>
            err++;
 8006868:	7afb      	ldrb	r3, [r7, #11]
 800686a:	3301      	adds	r3, #1
 800686c:	72fb      	strb	r3, [r7, #11]
          break;
 800686e:	e055      	b.n	800691c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00b      	beq.n	8006894 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	7c12      	ldrb	r2, [r2, #16]
 8006888:	f107 0108 	add.w	r1, r7, #8
 800688c:	4610      	mov	r0, r2
 800688e:	4798      	blx	r3
 8006890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006892:	e043      	b.n	800691c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006894:	6839      	ldr	r1, [r7, #0]
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fa64 	bl	8006d64 <USBD_CtlError>
            err++;
 800689c:	7afb      	ldrb	r3, [r7, #11]
 800689e:	3301      	adds	r3, #1
 80068a0:	72fb      	strb	r3, [r7, #11]
          break;
 80068a2:	e03b      	b.n	800691c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00b      	beq.n	80068c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	7c12      	ldrb	r2, [r2, #16]
 80068bc:	f107 0108 	add.w	r1, r7, #8
 80068c0:	4610      	mov	r0, r2
 80068c2:	4798      	blx	r3
 80068c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068c6:	e029      	b.n	800691c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fa4a 	bl	8006d64 <USBD_CtlError>
            err++;
 80068d0:	7afb      	ldrb	r3, [r7, #11]
 80068d2:	3301      	adds	r3, #1
 80068d4:	72fb      	strb	r3, [r7, #11]
          break;
 80068d6:	e021      	b.n	800691c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00b      	beq.n	80068fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	7c12      	ldrb	r2, [r2, #16]
 80068f0:	f107 0108 	add.w	r1, r7, #8
 80068f4:	4610      	mov	r0, r2
 80068f6:	4798      	blx	r3
 80068f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068fa:	e00f      	b.n	800691c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fa30 	bl	8006d64 <USBD_CtlError>
            err++;
 8006904:	7afb      	ldrb	r3, [r7, #11]
 8006906:	3301      	adds	r3, #1
 8006908:	72fb      	strb	r3, [r7, #11]
          break;
 800690a:	e007      	b.n	800691c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fa28 	bl	8006d64 <USBD_CtlError>
          err++;
 8006914:	7afb      	ldrb	r3, [r7, #11]
 8006916:	3301      	adds	r3, #1
 8006918:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800691a:	bf00      	nop
      }
      break;
 800691c:	e037      	b.n	800698e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	7c1b      	ldrb	r3, [r3, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d109      	bne.n	800693a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800692c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692e:	f107 0208 	add.w	r2, r7, #8
 8006932:	4610      	mov	r0, r2
 8006934:	4798      	blx	r3
 8006936:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006938:	e029      	b.n	800698e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fa11 	bl	8006d64 <USBD_CtlError>
        err++;
 8006942:	7afb      	ldrb	r3, [r7, #11]
 8006944:	3301      	adds	r3, #1
 8006946:	72fb      	strb	r3, [r7, #11]
      break;
 8006948:	e021      	b.n	800698e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	7c1b      	ldrb	r3, [r3, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10d      	bne.n	800696e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695a:	f107 0208 	add.w	r2, r7, #8
 800695e:	4610      	mov	r0, r2
 8006960:	4798      	blx	r3
 8006962:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	3301      	adds	r3, #1
 8006968:	2207      	movs	r2, #7
 800696a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800696c:	e00f      	b.n	800698e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800696e:	6839      	ldr	r1, [r7, #0]
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f9f7 	bl	8006d64 <USBD_CtlError>
        err++;
 8006976:	7afb      	ldrb	r3, [r7, #11]
 8006978:	3301      	adds	r3, #1
 800697a:	72fb      	strb	r3, [r7, #11]
      break;
 800697c:	e007      	b.n	800698e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f9ef 	bl	8006d64 <USBD_CtlError>
      err++;
 8006986:	7afb      	ldrb	r3, [r7, #11]
 8006988:	3301      	adds	r3, #1
 800698a:	72fb      	strb	r3, [r7, #11]
      break;
 800698c:	bf00      	nop
  }

  if (err != 0U)
 800698e:	7afb      	ldrb	r3, [r7, #11]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d11e      	bne.n	80069d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	88db      	ldrh	r3, [r3, #6]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d016      	beq.n	80069ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800699c:	893b      	ldrh	r3, [r7, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00e      	beq.n	80069c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	88da      	ldrh	r2, [r3, #6]
 80069a6:	893b      	ldrh	r3, [r7, #8]
 80069a8:	4293      	cmp	r3, r2
 80069aa:	bf28      	it	cs
 80069ac:	4613      	movcs	r3, r2
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80069b2:	893b      	ldrh	r3, [r7, #8]
 80069b4:	461a      	mov	r2, r3
 80069b6:	68f9      	ldr	r1, [r7, #12]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fa44 	bl	8006e46 <USBD_CtlSendData>
 80069be:	e009      	b.n	80069d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f9ce 	bl	8006d64 <USBD_CtlError>
 80069c8:	e004      	b.n	80069d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fa95 	bl	8006efa <USBD_CtlSendStatus>
 80069d0:	e000      	b.n	80069d4 <USBD_GetDescriptor+0x2cc>
    return;
 80069d2:	bf00      	nop
  }
}
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop

080069dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	889b      	ldrh	r3, [r3, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d131      	bne.n	8006a52 <USBD_SetAddress+0x76>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	88db      	ldrh	r3, [r3, #6]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d12d      	bne.n	8006a52 <USBD_SetAddress+0x76>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	885b      	ldrh	r3, [r3, #2]
 80069fa:	2b7f      	cmp	r3, #127	; 0x7f
 80069fc:	d829      	bhi.n	8006a52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	885b      	ldrh	r3, [r3, #2]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d104      	bne.n	8006a20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f9a3 	bl	8006d64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a1e:	e01d      	b.n	8006a5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	7bfa      	ldrb	r2, [r7, #15]
 8006a24:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fed5 	bl	80077dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fa61 	bl	8006efa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d004      	beq.n	8006a48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2202      	movs	r2, #2
 8006a42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a46:	e009      	b.n	8006a5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a50:	e004      	b.n	8006a5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f985 	bl	8006d64 <USBD_CtlError>
  }
}
 8006a5a:	bf00      	nop
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	885b      	ldrh	r3, [r3, #2]
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	4b4c      	ldr	r3, [pc, #304]	; (8006bac <USBD_SetConfig+0x148>)
 8006a7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a7c:	4b4b      	ldr	r3, [pc, #300]	; (8006bac <USBD_SetConfig+0x148>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d905      	bls.n	8006a90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f96c 	bl	8006d64 <USBD_CtlError>
    return USBD_FAIL;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e088      	b.n	8006ba2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d002      	beq.n	8006aa2 <USBD_SetConfig+0x3e>
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d025      	beq.n	8006aec <USBD_SetConfig+0x88>
 8006aa0:	e071      	b.n	8006b86 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006aa2:	4b42      	ldr	r3, [pc, #264]	; (8006bac <USBD_SetConfig+0x148>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d01c      	beq.n	8006ae4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006aaa:	4b40      	ldr	r3, [pc, #256]	; (8006bac <USBD_SetConfig+0x148>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ab4:	4b3d      	ldr	r3, [pc, #244]	; (8006bac <USBD_SetConfig+0x148>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff f948 	bl	8005d50 <USBD_SetClassConfig>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d004      	beq.n	8006ad4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f949 	bl	8006d64 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ad2:	e065      	b.n	8006ba0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fa10 	bl	8006efa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2203      	movs	r2, #3
 8006ade:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006ae2:	e05d      	b.n	8006ba0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fa08 	bl	8006efa <USBD_CtlSendStatus>
      break;
 8006aea:	e059      	b.n	8006ba0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006aec:	4b2f      	ldr	r3, [pc, #188]	; (8006bac <USBD_SetConfig+0x148>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d112      	bne.n	8006b1a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2202      	movs	r2, #2
 8006af8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006afc:	4b2b      	ldr	r3, [pc, #172]	; (8006bac <USBD_SetConfig+0x148>)
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	461a      	mov	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b06:	4b29      	ldr	r3, [pc, #164]	; (8006bac <USBD_SetConfig+0x148>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff f93b 	bl	8005d88 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f9f1 	bl	8006efa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b18:	e042      	b.n	8006ba0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006b1a:	4b24      	ldr	r3, [pc, #144]	; (8006bac <USBD_SetConfig+0x148>)
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d02a      	beq.n	8006b7e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7ff f929 	bl	8005d88 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006b36:	4b1d      	ldr	r3, [pc, #116]	; (8006bac <USBD_SetConfig+0x148>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b40:	4b1a      	ldr	r3, [pc, #104]	; (8006bac <USBD_SetConfig+0x148>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	4619      	mov	r1, r3
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff f902 	bl	8005d50 <USBD_SetClassConfig>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00f      	beq.n	8006b76 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f903 	bl	8006d64 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff f90e 	bl	8005d88 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b74:	e014      	b.n	8006ba0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f9bf 	bl	8006efa <USBD_CtlSendStatus>
      break;
 8006b7c:	e010      	b.n	8006ba0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f9bb 	bl	8006efa <USBD_CtlSendStatus>
      break;
 8006b84:	e00c      	b.n	8006ba0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f8eb 	bl	8006d64 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b8e:	4b07      	ldr	r3, [pc, #28]	; (8006bac <USBD_SetConfig+0x148>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff f8f7 	bl	8005d88 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b9e:	bf00      	nop
  }

  return ret;
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	2000019c 	.word	0x2000019c

08006bb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	88db      	ldrh	r3, [r3, #6]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d004      	beq.n	8006bcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f8cd 	bl	8006d64 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006bca:	e023      	b.n	8006c14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	dc02      	bgt.n	8006bde <USBD_GetConfig+0x2e>
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	dc03      	bgt.n	8006be4 <USBD_GetConfig+0x34>
 8006bdc:	e015      	b.n	8006c0a <USBD_GetConfig+0x5a>
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d00b      	beq.n	8006bfa <USBD_GetConfig+0x4a>
 8006be2:	e012      	b.n	8006c0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3308      	adds	r3, #8
 8006bee:	2201      	movs	r2, #1
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f927 	bl	8006e46 <USBD_CtlSendData>
        break;
 8006bf8:	e00c      	b.n	8006c14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	2201      	movs	r2, #1
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f91f 	bl	8006e46 <USBD_CtlSendData>
        break;
 8006c08:	e004      	b.n	8006c14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f8a9 	bl	8006d64 <USBD_CtlError>
        break;
 8006c12:	bf00      	nop
}
 8006c14:	bf00      	nop
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d81e      	bhi.n	8006c72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	88db      	ldrh	r3, [r3, #6]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d004      	beq.n	8006c46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f890 	bl	8006d64 <USBD_CtlError>
        break;
 8006c44:	e01a      	b.n	8006c7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d005      	beq.n	8006c62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	f043 0202 	orr.w	r2, r3, #2
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	330c      	adds	r3, #12
 8006c66:	2202      	movs	r2, #2
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f8eb 	bl	8006e46 <USBD_CtlSendData>
      break;
 8006c70:	e004      	b.n	8006c7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f875 	bl	8006d64 <USBD_CtlError>
      break;
 8006c7a:	bf00      	nop
  }
}
 8006c7c:	bf00      	nop
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	885b      	ldrh	r3, [r3, #2]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d106      	bne.n	8006ca4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f92b 	bl	8006efa <USBD_CtlSendStatus>
  }
}
 8006ca4:	bf00      	nop
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d80b      	bhi.n	8006cdc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	885b      	ldrh	r3, [r3, #2]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d10c      	bne.n	8006ce6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f910 	bl	8006efa <USBD_CtlSendStatus>
      }
      break;
 8006cda:	e004      	b.n	8006ce6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f840 	bl	8006d64 <USBD_CtlError>
      break;
 8006ce4:	e000      	b.n	8006ce8 <USBD_ClrFeature+0x3c>
      break;
 8006ce6:	bf00      	nop
  }
}
 8006ce8:	bf00      	nop
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	781a      	ldrb	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	781a      	ldrb	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	3301      	adds	r3, #1
 8006d18:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f7ff fabb 	bl	8006296 <SWAPBYTE>
 8006d20:	4603      	mov	r3, r0
 8006d22:	461a      	mov	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3301      	adds	r3, #1
 8006d32:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f7ff faae 	bl	8006296 <SWAPBYTE>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3301      	adds	r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f7ff faa1 	bl	8006296 <SWAPBYTE>
 8006d54:	4603      	mov	r3, r0
 8006d56:	461a      	mov	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	80da      	strh	r2, [r3, #6]
}
 8006d5c:	bf00      	nop
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d6e:	2180      	movs	r1, #128	; 0x80
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fcc9 	bl	8007708 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d76:	2100      	movs	r1, #0
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fcc5 	bl	8007708 <USBD_LL_StallEP>
}
 8006d7e:	bf00      	nop
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b086      	sub	sp, #24
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	60f8      	str	r0, [r7, #12]
 8006d8e:	60b9      	str	r1, [r7, #8]
 8006d90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d036      	beq.n	8006e0a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006da0:	6938      	ldr	r0, [r7, #16]
 8006da2:	f000 f836 	bl	8006e12 <USBD_GetLen>
 8006da6:	4603      	mov	r3, r0
 8006da8:	3301      	adds	r3, #1
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	4413      	add	r3, r2
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	7812      	ldrb	r2, [r2, #0]
 8006dbe:	701a      	strb	r2, [r3, #0]
  idx++;
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	4413      	add	r3, r2
 8006dcc:	2203      	movs	r2, #3
 8006dce:	701a      	strb	r2, [r3, #0]
  idx++;
 8006dd0:	7dfb      	ldrb	r3, [r7, #23]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006dd6:	e013      	b.n	8006e00 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	4413      	add	r3, r2
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	7812      	ldrb	r2, [r2, #0]
 8006de2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	3301      	adds	r3, #1
 8006de8:	613b      	str	r3, [r7, #16]
    idx++;
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
 8006dec:	3301      	adds	r3, #1
 8006dee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	4413      	add	r3, r2
 8006df6:	2200      	movs	r2, #0
 8006df8:	701a      	strb	r2, [r3, #0]
    idx++;
 8006dfa:	7dfb      	ldrb	r3, [r7, #23]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e7      	bne.n	8006dd8 <USBD_GetString+0x52>
 8006e08:	e000      	b.n	8006e0c <USBD_GetString+0x86>
    return;
 8006e0a:	bf00      	nop
  }
}
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b085      	sub	sp, #20
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006e22:	e005      	b.n	8006e30 <USBD_GetLen+0x1e>
  {
    len++;
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	3301      	adds	r3, #1
 8006e28:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1f5      	bne.n	8006e24 <USBD_GetLen+0x12>
  }

  return len;
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b084      	sub	sp, #16
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2202      	movs	r2, #2
 8006e56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 fcd4 	bl	800781a <USBD_LL_Transmit>

  return USBD_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 fcc3 	bl	800781a <USBD_LL_Transmit>

  return USBD_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2203      	movs	r2, #3
 8006eae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 fcc7 	bl	800785c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	2100      	movs	r1, #0
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f000 fcb6 	bl	800785c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b082      	sub	sp, #8
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2204      	movs	r2, #4
 8006f06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	2100      	movs	r1, #0
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fc82 	bl	800781a <USBD_LL_Transmit>

  return USBD_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2205      	movs	r2, #5
 8006f2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f30:	2300      	movs	r3, #0
 8006f32:	2200      	movs	r2, #0
 8006f34:	2100      	movs	r1, #0
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fc90 	bl	800785c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
	...

08006f48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	4912      	ldr	r1, [pc, #72]	; (8006f98 <MX_USB_DEVICE_Init+0x50>)
 8006f50:	4812      	ldr	r0, [pc, #72]	; (8006f9c <MX_USB_DEVICE_Init+0x54>)
 8006f52:	f7fe fe8f 	bl	8005c74 <USBD_Init>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006f5c:	f7f9 fe3c 	bl	8000bd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006f60:	490f      	ldr	r1, [pc, #60]	; (8006fa0 <MX_USB_DEVICE_Init+0x58>)
 8006f62:	480e      	ldr	r0, [pc, #56]	; (8006f9c <MX_USB_DEVICE_Init+0x54>)
 8006f64:	f7fe feb6 	bl	8005cd4 <USBD_RegisterClass>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006f6e:	f7f9 fe33 	bl	8000bd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006f72:	490c      	ldr	r1, [pc, #48]	; (8006fa4 <MX_USB_DEVICE_Init+0x5c>)
 8006f74:	4809      	ldr	r0, [pc, #36]	; (8006f9c <MX_USB_DEVICE_Init+0x54>)
 8006f76:	f7fe fe07 	bl	8005b88 <USBD_CDC_RegisterInterface>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f80:	f7f9 fe2a 	bl	8000bd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f84:	4805      	ldr	r0, [pc, #20]	; (8006f9c <MX_USB_DEVICE_Init+0x54>)
 8006f86:	f7fe fecc 	bl	8005d22 <USBD_Start>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d001      	beq.n	8006f94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006f90:	f7f9 fe22 	bl	8000bd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f94:	bf00      	nop
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	20000130 	.word	0x20000130
 8006f9c:	20000418 	.word	0x20000418
 8006fa0:	20000018 	.word	0x20000018
 8006fa4:	2000011c 	.word	0x2000011c

08006fa8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006fac:	2200      	movs	r2, #0
 8006fae:	4905      	ldr	r1, [pc, #20]	; (8006fc4 <CDC_Init_FS+0x1c>)
 8006fb0:	4805      	ldr	r0, [pc, #20]	; (8006fc8 <CDC_Init_FS+0x20>)
 8006fb2:	f7fe fdfe 	bl	8005bb2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006fb6:	4905      	ldr	r1, [pc, #20]	; (8006fcc <CDC_Init_FS+0x24>)
 8006fb8:	4803      	ldr	r0, [pc, #12]	; (8006fc8 <CDC_Init_FS+0x20>)
 8006fba:	f7fe fe18 	bl	8005bee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006fbe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	20000ee8 	.word	0x20000ee8
 8006fc8:	20000418 	.word	0x20000418
 8006fcc:	200006e8 	.word	0x200006e8

08006fd0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006fd4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	6039      	str	r1, [r7, #0]
 8006fea:	71fb      	strb	r3, [r7, #7]
 8006fec:	4613      	mov	r3, r2
 8006fee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006ff0:	79fb      	ldrb	r3, [r7, #7]
 8006ff2:	2b23      	cmp	r3, #35	; 0x23
 8006ff4:	d84a      	bhi.n	800708c <CDC_Control_FS+0xac>
 8006ff6:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <CDC_Control_FS+0x1c>)
 8006ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffc:	0800708d 	.word	0x0800708d
 8007000:	0800708d 	.word	0x0800708d
 8007004:	0800708d 	.word	0x0800708d
 8007008:	0800708d 	.word	0x0800708d
 800700c:	0800708d 	.word	0x0800708d
 8007010:	0800708d 	.word	0x0800708d
 8007014:	0800708d 	.word	0x0800708d
 8007018:	0800708d 	.word	0x0800708d
 800701c:	0800708d 	.word	0x0800708d
 8007020:	0800708d 	.word	0x0800708d
 8007024:	0800708d 	.word	0x0800708d
 8007028:	0800708d 	.word	0x0800708d
 800702c:	0800708d 	.word	0x0800708d
 8007030:	0800708d 	.word	0x0800708d
 8007034:	0800708d 	.word	0x0800708d
 8007038:	0800708d 	.word	0x0800708d
 800703c:	0800708d 	.word	0x0800708d
 8007040:	0800708d 	.word	0x0800708d
 8007044:	0800708d 	.word	0x0800708d
 8007048:	0800708d 	.word	0x0800708d
 800704c:	0800708d 	.word	0x0800708d
 8007050:	0800708d 	.word	0x0800708d
 8007054:	0800708d 	.word	0x0800708d
 8007058:	0800708d 	.word	0x0800708d
 800705c:	0800708d 	.word	0x0800708d
 8007060:	0800708d 	.word	0x0800708d
 8007064:	0800708d 	.word	0x0800708d
 8007068:	0800708d 	.word	0x0800708d
 800706c:	0800708d 	.word	0x0800708d
 8007070:	0800708d 	.word	0x0800708d
 8007074:	0800708d 	.word	0x0800708d
 8007078:	0800708d 	.word	0x0800708d
 800707c:	0800708d 	.word	0x0800708d
 8007080:	0800708d 	.word	0x0800708d
 8007084:	0800708d 	.word	0x0800708d
 8007088:	0800708d 	.word	0x0800708d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800708c:	bf00      	nop
  }

  return (USBD_OK);
 800708e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80070a6:	6879      	ldr	r1, [r7, #4]
 80070a8:	4805      	ldr	r0, [pc, #20]	; (80070c0 <CDC_Receive_FS+0x24>)
 80070aa:	f7fe fda0 	bl	8005bee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80070ae:	4804      	ldr	r0, [pc, #16]	; (80070c0 <CDC_Receive_FS+0x24>)
 80070b0:	f7fe fdb6 	bl	8005c20 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80070b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	20000418 	.word	0x20000418

080070c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	4613      	mov	r3, r2
 80070d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80070d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
	...

080070e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	4603      	mov	r3, r0
 80070f0:	6039      	str	r1, [r7, #0]
 80070f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2212      	movs	r2, #18
 80070f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80070fa:	4b03      	ldr	r3, [pc, #12]	; (8007108 <USBD_FS_DeviceDescriptor+0x20>)
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	2000014c 	.word	0x2000014c

0800710c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	6039      	str	r1, [r7, #0]
 8007116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2204      	movs	r2, #4
 800711c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800711e:	4b03      	ldr	r3, [pc, #12]	; (800712c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	20000160 	.word	0x20000160

08007130 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	4603      	mov	r3, r0
 8007138:	6039      	str	r1, [r7, #0]
 800713a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800713c:	79fb      	ldrb	r3, [r7, #7]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d105      	bne.n	800714e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	4907      	ldr	r1, [pc, #28]	; (8007164 <USBD_FS_ProductStrDescriptor+0x34>)
 8007146:	4808      	ldr	r0, [pc, #32]	; (8007168 <USBD_FS_ProductStrDescriptor+0x38>)
 8007148:	f7ff fe1d 	bl	8006d86 <USBD_GetString>
 800714c:	e004      	b.n	8007158 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	4904      	ldr	r1, [pc, #16]	; (8007164 <USBD_FS_ProductStrDescriptor+0x34>)
 8007152:	4805      	ldr	r0, [pc, #20]	; (8007168 <USBD_FS_ProductStrDescriptor+0x38>)
 8007154:	f7ff fe17 	bl	8006d86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007158:	4b02      	ldr	r3, [pc, #8]	; (8007164 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	200016e8 	.word	0x200016e8
 8007168:	080079bc 	.word	0x080079bc

0800716c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	6039      	str	r1, [r7, #0]
 8007176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	4904      	ldr	r1, [pc, #16]	; (800718c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800717c:	4804      	ldr	r0, [pc, #16]	; (8007190 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800717e:	f7ff fe02 	bl	8006d86 <USBD_GetString>
  return USBD_StrDesc;
 8007182:	4b02      	ldr	r3, [pc, #8]	; (800718c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	200016e8 	.word	0x200016e8
 8007190:	080079d4 	.word	0x080079d4

08007194 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	6039      	str	r1, [r7, #0]
 800719e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	221a      	movs	r2, #26
 80071a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80071a6:	f000 f843 	bl	8007230 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80071aa:	4b02      	ldr	r3, [pc, #8]	; (80071b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	20000164 	.word	0x20000164

080071b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4603      	mov	r3, r0
 80071c0:	6039      	str	r1, [r7, #0]
 80071c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80071c4:	79fb      	ldrb	r3, [r7, #7]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d105      	bne.n	80071d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	4907      	ldr	r1, [pc, #28]	; (80071ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80071ce:	4808      	ldr	r0, [pc, #32]	; (80071f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071d0:	f7ff fdd9 	bl	8006d86 <USBD_GetString>
 80071d4:	e004      	b.n	80071e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	4904      	ldr	r1, [pc, #16]	; (80071ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80071da:	4805      	ldr	r0, [pc, #20]	; (80071f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071dc:	f7ff fdd3 	bl	8006d86 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071e0:	4b02      	ldr	r3, [pc, #8]	; (80071ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	200016e8 	.word	0x200016e8
 80071f0:	080079e8 	.word	0x080079e8

080071f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	4603      	mov	r3, r0
 80071fc:	6039      	str	r1, [r7, #0]
 80071fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007200:	79fb      	ldrb	r3, [r7, #7]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d105      	bne.n	8007212 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	4907      	ldr	r1, [pc, #28]	; (8007228 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800720a:	4808      	ldr	r0, [pc, #32]	; (800722c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800720c:	f7ff fdbb 	bl	8006d86 <USBD_GetString>
 8007210:	e004      	b.n	800721c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	4904      	ldr	r1, [pc, #16]	; (8007228 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007216:	4805      	ldr	r0, [pc, #20]	; (800722c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007218:	f7ff fdb5 	bl	8006d86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800721c:	4b02      	ldr	r3, [pc, #8]	; (8007228 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	200016e8 	.word	0x200016e8
 800722c:	080079f4 	.word	0x080079f4

08007230 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007236:	4b0f      	ldr	r3, [pc, #60]	; (8007274 <Get_SerialNum+0x44>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800723c:	4b0e      	ldr	r3, [pc, #56]	; (8007278 <Get_SerialNum+0x48>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007242:	4b0e      	ldr	r3, [pc, #56]	; (800727c <Get_SerialNum+0x4c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4413      	add	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d009      	beq.n	800726a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007256:	2208      	movs	r2, #8
 8007258:	4909      	ldr	r1, [pc, #36]	; (8007280 <Get_SerialNum+0x50>)
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 f814 	bl	8007288 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007260:	2204      	movs	r2, #4
 8007262:	4908      	ldr	r1, [pc, #32]	; (8007284 <Get_SerialNum+0x54>)
 8007264:	68b8      	ldr	r0, [r7, #8]
 8007266:	f000 f80f 	bl	8007288 <IntToUnicode>
  }
}
 800726a:	bf00      	nop
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	1fff7a10 	.word	0x1fff7a10
 8007278:	1fff7a14 	.word	0x1fff7a14
 800727c:	1fff7a18 	.word	0x1fff7a18
 8007280:	20000166 	.word	0x20000166
 8007284:	20000176 	.word	0x20000176

08007288 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	4613      	mov	r3, r2
 8007294:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007296:	2300      	movs	r3, #0
 8007298:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800729a:	2300      	movs	r3, #0
 800729c:	75fb      	strb	r3, [r7, #23]
 800729e:	e027      	b.n	80072f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	0f1b      	lsrs	r3, r3, #28
 80072a4:	2b09      	cmp	r3, #9
 80072a6:	d80b      	bhi.n	80072c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	0f1b      	lsrs	r3, r3, #28
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	4619      	mov	r1, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	440b      	add	r3, r1
 80072b8:	3230      	adds	r2, #48	; 0x30
 80072ba:	b2d2      	uxtb	r2, r2
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	e00a      	b.n	80072d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	0f1b      	lsrs	r3, r3, #28
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	7dfb      	ldrb	r3, [r7, #23]
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	4619      	mov	r1, r3
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	440b      	add	r3, r1
 80072d0:	3237      	adds	r2, #55	; 0x37
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	011b      	lsls	r3, r3, #4
 80072da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	3301      	adds	r3, #1
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	4413      	add	r3, r2
 80072e6:	2200      	movs	r2, #0
 80072e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
 80072ec:	3301      	adds	r3, #1
 80072ee:	75fb      	strb	r3, [r7, #23]
 80072f0:	7dfa      	ldrb	r2, [r7, #23]
 80072f2:	79fb      	ldrb	r3, [r7, #7]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d3d3      	bcc.n	80072a0 <IntToUnicode+0x18>
  }
}
 80072f8:	bf00      	nop
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
	...

08007308 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08a      	sub	sp, #40	; 0x28
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007310:	f107 0314 	add.w	r3, r7, #20
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	605a      	str	r2, [r3, #4]
 800731a:	609a      	str	r2, [r3, #8]
 800731c:	60da      	str	r2, [r3, #12]
 800731e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007328:	d147      	bne.n	80073ba <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800732a:	2300      	movs	r3, #0
 800732c:	613b      	str	r3, [r7, #16]
 800732e:	4b25      	ldr	r3, [pc, #148]	; (80073c4 <HAL_PCD_MspInit+0xbc>)
 8007330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007332:	4a24      	ldr	r2, [pc, #144]	; (80073c4 <HAL_PCD_MspInit+0xbc>)
 8007334:	f043 0301 	orr.w	r3, r3, #1
 8007338:	6313      	str	r3, [r2, #48]	; 0x30
 800733a:	4b22      	ldr	r3, [pc, #136]	; (80073c4 <HAL_PCD_MspInit+0xbc>)
 800733c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	613b      	str	r3, [r7, #16]
 8007344:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800734a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800734c:	2300      	movs	r3, #0
 800734e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007350:	2300      	movs	r3, #0
 8007352:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007354:	f107 0314 	add.w	r3, r7, #20
 8007358:	4619      	mov	r1, r3
 800735a:	481b      	ldr	r0, [pc, #108]	; (80073c8 <HAL_PCD_MspInit+0xc0>)
 800735c:	f7f9 feec 	bl	8001138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007360:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007366:	2302      	movs	r3, #2
 8007368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800736a:	2300      	movs	r3, #0
 800736c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800736e:	2300      	movs	r3, #0
 8007370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007372:	230a      	movs	r3, #10
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007376:	f107 0314 	add.w	r3, r7, #20
 800737a:	4619      	mov	r1, r3
 800737c:	4812      	ldr	r0, [pc, #72]	; (80073c8 <HAL_PCD_MspInit+0xc0>)
 800737e:	f7f9 fedb 	bl	8001138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007382:	4b10      	ldr	r3, [pc, #64]	; (80073c4 <HAL_PCD_MspInit+0xbc>)
 8007384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007386:	4a0f      	ldr	r2, [pc, #60]	; (80073c4 <HAL_PCD_MspInit+0xbc>)
 8007388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800738c:	6353      	str	r3, [r2, #52]	; 0x34
 800738e:	2300      	movs	r3, #0
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	4b0c      	ldr	r3, [pc, #48]	; (80073c4 <HAL_PCD_MspInit+0xbc>)
 8007394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007396:	4a0b      	ldr	r2, [pc, #44]	; (80073c4 <HAL_PCD_MspInit+0xbc>)
 8007398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800739c:	6453      	str	r3, [r2, #68]	; 0x44
 800739e:	4b09      	ldr	r3, [pc, #36]	; (80073c4 <HAL_PCD_MspInit+0xbc>)
 80073a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80073aa:	2200      	movs	r2, #0
 80073ac:	2100      	movs	r1, #0
 80073ae:	2043      	movs	r0, #67	; 0x43
 80073b0:	f7f9 fe8b 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80073b4:	2043      	movs	r0, #67	; 0x43
 80073b6:	f7f9 fea4 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80073ba:	bf00      	nop
 80073bc:	3728      	adds	r7, #40	; 0x28
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	40023800 	.word	0x40023800
 80073c8:	40020000 	.word	0x40020000

080073cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80073e0:	4619      	mov	r1, r3
 80073e2:	4610      	mov	r0, r2
 80073e4:	f7fe fce8 	bl	8005db8 <USBD_LL_SetupStage>
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007402:	78fa      	ldrb	r2, [r7, #3]
 8007404:	6879      	ldr	r1, [r7, #4]
 8007406:	4613      	mov	r3, r2
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	1a9b      	subs	r3, r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	440b      	add	r3, r1
 8007410:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	78fb      	ldrb	r3, [r7, #3]
 8007418:	4619      	mov	r1, r3
 800741a:	f7fe fd22 	bl	8005e62 <USBD_LL_DataOutStage>
}
 800741e:	bf00      	nop
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b082      	sub	sp, #8
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	460b      	mov	r3, r1
 8007430:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007438:	78fa      	ldrb	r2, [r7, #3]
 800743a:	6879      	ldr	r1, [r7, #4]
 800743c:	4613      	mov	r3, r2
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	1a9b      	subs	r3, r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	440b      	add	r3, r1
 8007446:	3348      	adds	r3, #72	; 0x48
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	78fb      	ldrb	r3, [r7, #3]
 800744c:	4619      	mov	r1, r3
 800744e:	f7fe fd6b 	bl	8005f28 <USBD_LL_DataInStage>
}
 8007452:	bf00      	nop
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b082      	sub	sp, #8
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007468:	4618      	mov	r0, r3
 800746a:	f7fe fe7f 	bl	800616c <USBD_LL_SOF>
}
 800746e:	bf00      	nop
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800747e:	2301      	movs	r3, #1
 8007480:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d102      	bne.n	8007490 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800748a:	2300      	movs	r3, #0
 800748c:	73fb      	strb	r3, [r7, #15]
 800748e:	e008      	b.n	80074a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	2b02      	cmp	r3, #2
 8007496:	d102      	bne.n	800749e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007498:	2301      	movs	r3, #1
 800749a:	73fb      	strb	r3, [r7, #15]
 800749c:	e001      	b.n	80074a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800749e:	f7f9 fb9b 	bl	8000bd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074a8:	7bfa      	ldrb	r2, [r7, #15]
 80074aa:	4611      	mov	r1, r2
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fe fe1f 	bl	80060f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fe fdcb 	bl	8006054 <USBD_LL_Reset>
}
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fe1a 	bl	8006110 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6812      	ldr	r2, [r2, #0]
 80074ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074ee:	f043 0301 	orr.w	r3, r3, #1
 80074f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d005      	beq.n	8007508 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074fc:	4b04      	ldr	r3, [pc, #16]	; (8007510 <HAL_PCD_SuspendCallback+0x48>)
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	4a03      	ldr	r2, [pc, #12]	; (8007510 <HAL_PCD_SuspendCallback+0x48>)
 8007502:	f043 0306 	orr.w	r3, r3, #6
 8007506:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007508:	bf00      	nop
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	e000ed00 	.word	0xe000ed00

08007514 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe fe0a 	bl	800613c <USBD_LL_Resume>
}
 8007528:	bf00      	nop
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	460b      	mov	r3, r1
 800753a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007542:	78fa      	ldrb	r2, [r7, #3]
 8007544:	4611      	mov	r1, r2
 8007546:	4618      	mov	r0, r3
 8007548:	f7fe fe58 	bl	80061fc <USBD_LL_IsoOUTIncomplete>
}
 800754c:	bf00      	nop
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007566:	78fa      	ldrb	r2, [r7, #3]
 8007568:	4611      	mov	r1, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f7fe fe20 	bl	80061b0 <USBD_LL_IsoINIncomplete>
}
 8007570:	bf00      	nop
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe fe5e 	bl	8006248 <USBD_LL_DevConnected>
}
 800758c:	bf00      	nop
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe fe5b 	bl	800625e <USBD_LL_DevDisconnected>
}
 80075a8:	bf00      	nop
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d13c      	bne.n	800763a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80075c0:	4a20      	ldr	r2, [pc, #128]	; (8007644 <USBD_LL_Init+0x94>)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a1e      	ldr	r2, [pc, #120]	; (8007644 <USBD_LL_Init+0x94>)
 80075cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80075d0:	4b1c      	ldr	r3, [pc, #112]	; (8007644 <USBD_LL_Init+0x94>)
 80075d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80075d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80075d8:	4b1a      	ldr	r3, [pc, #104]	; (8007644 <USBD_LL_Init+0x94>)
 80075da:	2204      	movs	r2, #4
 80075dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80075de:	4b19      	ldr	r3, [pc, #100]	; (8007644 <USBD_LL_Init+0x94>)
 80075e0:	2202      	movs	r2, #2
 80075e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80075e4:	4b17      	ldr	r3, [pc, #92]	; (8007644 <USBD_LL_Init+0x94>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80075ea:	4b16      	ldr	r3, [pc, #88]	; (8007644 <USBD_LL_Init+0x94>)
 80075ec:	2202      	movs	r2, #2
 80075ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80075f0:	4b14      	ldr	r3, [pc, #80]	; (8007644 <USBD_LL_Init+0x94>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80075f6:	4b13      	ldr	r3, [pc, #76]	; (8007644 <USBD_LL_Init+0x94>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80075fc:	4b11      	ldr	r3, [pc, #68]	; (8007644 <USBD_LL_Init+0x94>)
 80075fe:	2200      	movs	r2, #0
 8007600:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007602:	4b10      	ldr	r3, [pc, #64]	; (8007644 <USBD_LL_Init+0x94>)
 8007604:	2200      	movs	r2, #0
 8007606:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007608:	4b0e      	ldr	r3, [pc, #56]	; (8007644 <USBD_LL_Init+0x94>)
 800760a:	2200      	movs	r2, #0
 800760c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800760e:	480d      	ldr	r0, [pc, #52]	; (8007644 <USBD_LL_Init+0x94>)
 8007610:	f7fa fedd 	bl	80023ce <HAL_PCD_Init>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800761a:	f7f9 fadd 	bl	8000bd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800761e:	2180      	movs	r1, #128	; 0x80
 8007620:	4808      	ldr	r0, [pc, #32]	; (8007644 <USBD_LL_Init+0x94>)
 8007622:	f7fc f83a 	bl	800369a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007626:	2240      	movs	r2, #64	; 0x40
 8007628:	2100      	movs	r1, #0
 800762a:	4806      	ldr	r0, [pc, #24]	; (8007644 <USBD_LL_Init+0x94>)
 800762c:	f7fb ffee 	bl	800360c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007630:	2280      	movs	r2, #128	; 0x80
 8007632:	2101      	movs	r1, #1
 8007634:	4803      	ldr	r0, [pc, #12]	; (8007644 <USBD_LL_Init+0x94>)
 8007636:	f7fb ffe9 	bl	800360c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	200018e8 	.word	0x200018e8

08007648 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800765e:	4618      	mov	r0, r3
 8007660:	f7fa ffd2 	bl	8002608 <HAL_PCD_Start>
 8007664:	4603      	mov	r3, r0
 8007666:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007668:	7bfb      	ldrb	r3, [r7, #15]
 800766a:	4618      	mov	r0, r3
 800766c:	f000 f942 	bl	80078f4 <USBD_Get_USB_Status>
 8007670:	4603      	mov	r3, r0
 8007672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007674:	7bbb      	ldrb	r3, [r7, #14]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b084      	sub	sp, #16
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	4608      	mov	r0, r1
 8007688:	4611      	mov	r1, r2
 800768a:	461a      	mov	r2, r3
 800768c:	4603      	mov	r3, r0
 800768e:	70fb      	strb	r3, [r7, #3]
 8007690:	460b      	mov	r3, r1
 8007692:	70bb      	strb	r3, [r7, #2]
 8007694:	4613      	mov	r3, r2
 8007696:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80076a6:	78bb      	ldrb	r3, [r7, #2]
 80076a8:	883a      	ldrh	r2, [r7, #0]
 80076aa:	78f9      	ldrb	r1, [r7, #3]
 80076ac:	f7fb fbb6 	bl	8002e1c <HAL_PCD_EP_Open>
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 f91c 	bl	80078f4 <USBD_Get_USB_Status>
 80076bc:	4603      	mov	r3, r0
 80076be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	460b      	mov	r3, r1
 80076d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076e4:	78fa      	ldrb	r2, [r7, #3]
 80076e6:	4611      	mov	r1, r2
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7fb fbff 	bl	8002eec <HAL_PCD_EP_Close>
 80076ee:	4603      	mov	r3, r0
 80076f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 f8fd 	bl	80078f4 <USBD_Get_USB_Status>
 80076fa:	4603      	mov	r3, r0
 80076fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007722:	78fa      	ldrb	r2, [r7, #3]
 8007724:	4611      	mov	r1, r2
 8007726:	4618      	mov	r0, r3
 8007728:	f7fb fcd7 	bl	80030da <HAL_PCD_EP_SetStall>
 800772c:	4603      	mov	r3, r0
 800772e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	4618      	mov	r0, r3
 8007734:	f000 f8de 	bl	80078f4 <USBD_Get_USB_Status>
 8007738:	4603      	mov	r3, r0
 800773a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800773c:	7bbb      	ldrb	r3, [r7, #14]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	460b      	mov	r3, r1
 8007750:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007760:	78fa      	ldrb	r2, [r7, #3]
 8007762:	4611      	mov	r1, r2
 8007764:	4618      	mov	r0, r3
 8007766:	f7fb fd1c 	bl	80031a2 <HAL_PCD_EP_ClrStall>
 800776a:	4603      	mov	r3, r0
 800776c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	4618      	mov	r0, r3
 8007772:	f000 f8bf 	bl	80078f4 <USBD_Get_USB_Status>
 8007776:	4603      	mov	r3, r0
 8007778:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800777a:	7bbb      	ldrb	r3, [r7, #14]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007796:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007798:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800779c:	2b00      	cmp	r3, #0
 800779e:	da0b      	bge.n	80077b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80077a0:	78fb      	ldrb	r3, [r7, #3]
 80077a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077a6:	68f9      	ldr	r1, [r7, #12]
 80077a8:	4613      	mov	r3, r2
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	1a9b      	subs	r3, r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	440b      	add	r3, r1
 80077b2:	333e      	adds	r3, #62	; 0x3e
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	e00b      	b.n	80077d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077be:	68f9      	ldr	r1, [r7, #12]
 80077c0:	4613      	mov	r3, r2
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	1a9b      	subs	r3, r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	440b      	add	r3, r1
 80077ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80077ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	460b      	mov	r3, r1
 80077e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077f6:	78fa      	ldrb	r2, [r7, #3]
 80077f8:	4611      	mov	r1, r2
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fb fae9 	bl	8002dd2 <HAL_PCD_SetAddress>
 8007800:	4603      	mov	r3, r0
 8007802:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	4618      	mov	r0, r3
 8007808:	f000 f874 	bl	80078f4 <USBD_Get_USB_Status>
 800780c:	4603      	mov	r3, r0
 800780e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007810:	7bbb      	ldrb	r3, [r7, #14]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b086      	sub	sp, #24
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
 8007826:	460b      	mov	r3, r1
 8007828:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007838:	7af9      	ldrb	r1, [r7, #11]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	f7fb fc02 	bl	8003046 <HAL_PCD_EP_Transmit>
 8007842:	4603      	mov	r3, r0
 8007844:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007846:	7dfb      	ldrb	r3, [r7, #23]
 8007848:	4618      	mov	r0, r3
 800784a:	f000 f853 	bl	80078f4 <USBD_Get_USB_Status>
 800784e:	4603      	mov	r3, r0
 8007850:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007852:	7dbb      	ldrb	r3, [r7, #22]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	607a      	str	r2, [r7, #4]
 8007866:	603b      	str	r3, [r7, #0]
 8007868:	460b      	mov	r3, r1
 800786a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800787a:	7af9      	ldrb	r1, [r7, #11]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	f7fb fb7e 	bl	8002f80 <HAL_PCD_EP_Receive>
 8007884:	4603      	mov	r3, r0
 8007886:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007888:	7dfb      	ldrb	r3, [r7, #23]
 800788a:	4618      	mov	r0, r3
 800788c:	f000 f832 	bl	80078f4 <USBD_Get_USB_Status>
 8007890:	4603      	mov	r3, r0
 8007892:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007894:	7dbb      	ldrb	r3, [r7, #22]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b082      	sub	sp, #8
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	460b      	mov	r3, r1
 80078a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078b0:	78fa      	ldrb	r2, [r7, #3]
 80078b2:	4611      	mov	r1, r2
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fb fbae 	bl	8003016 <HAL_PCD_EP_GetRxCount>
 80078ba:	4603      	mov	r3, r0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80078cc:	4b03      	ldr	r3, [pc, #12]	; (80078dc <USBD_static_malloc+0x18>)
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	200001a0 	.word	0x200001a0

080078e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]

}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	4603      	mov	r3, r0
 80078fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007902:	79fb      	ldrb	r3, [r7, #7]
 8007904:	2b03      	cmp	r3, #3
 8007906:	d817      	bhi.n	8007938 <USBD_Get_USB_Status+0x44>
 8007908:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <USBD_Get_USB_Status+0x1c>)
 800790a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790e:	bf00      	nop
 8007910:	08007921 	.word	0x08007921
 8007914:	08007927 	.word	0x08007927
 8007918:	0800792d 	.word	0x0800792d
 800791c:	08007933 	.word	0x08007933
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	73fb      	strb	r3, [r7, #15]
    break;
 8007924:	e00b      	b.n	800793e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007926:	2303      	movs	r3, #3
 8007928:	73fb      	strb	r3, [r7, #15]
    break;
 800792a:	e008      	b.n	800793e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800792c:	2301      	movs	r3, #1
 800792e:	73fb      	strb	r3, [r7, #15]
    break;
 8007930:	e005      	b.n	800793e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007932:	2303      	movs	r3, #3
 8007934:	73fb      	strb	r3, [r7, #15]
    break;
 8007936:	e002      	b.n	800793e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007938:	2303      	movs	r3, #3
 800793a:	73fb      	strb	r3, [r7, #15]
    break;
 800793c:	bf00      	nop
  }
  return usb_status;
 800793e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <__libc_init_array>:
 800794c:	b570      	push	{r4, r5, r6, lr}
 800794e:	4d0d      	ldr	r5, [pc, #52]	; (8007984 <__libc_init_array+0x38>)
 8007950:	4c0d      	ldr	r4, [pc, #52]	; (8007988 <__libc_init_array+0x3c>)
 8007952:	1b64      	subs	r4, r4, r5
 8007954:	10a4      	asrs	r4, r4, #2
 8007956:	2600      	movs	r6, #0
 8007958:	42a6      	cmp	r6, r4
 800795a:	d109      	bne.n	8007970 <__libc_init_array+0x24>
 800795c:	4d0b      	ldr	r5, [pc, #44]	; (800798c <__libc_init_array+0x40>)
 800795e:	4c0c      	ldr	r4, [pc, #48]	; (8007990 <__libc_init_array+0x44>)
 8007960:	f000 f820 	bl	80079a4 <_init>
 8007964:	1b64      	subs	r4, r4, r5
 8007966:	10a4      	asrs	r4, r4, #2
 8007968:	2600      	movs	r6, #0
 800796a:	42a6      	cmp	r6, r4
 800796c:	d105      	bne.n	800797a <__libc_init_array+0x2e>
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	f855 3b04 	ldr.w	r3, [r5], #4
 8007974:	4798      	blx	r3
 8007976:	3601      	adds	r6, #1
 8007978:	e7ee      	b.n	8007958 <__libc_init_array+0xc>
 800797a:	f855 3b04 	ldr.w	r3, [r5], #4
 800797e:	4798      	blx	r3
 8007980:	3601      	adds	r6, #1
 8007982:	e7f2      	b.n	800796a <__libc_init_array+0x1e>
 8007984:	08007a24 	.word	0x08007a24
 8007988:	08007a24 	.word	0x08007a24
 800798c:	08007a24 	.word	0x08007a24
 8007990:	08007a28 	.word	0x08007a28

08007994 <memset>:
 8007994:	4402      	add	r2, r0
 8007996:	4603      	mov	r3, r0
 8007998:	4293      	cmp	r3, r2
 800799a:	d100      	bne.n	800799e <memset+0xa>
 800799c:	4770      	bx	lr
 800799e:	f803 1b01 	strb.w	r1, [r3], #1
 80079a2:	e7f9      	b.n	8007998 <memset+0x4>

080079a4 <_init>:
 80079a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a6:	bf00      	nop
 80079a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079aa:	bc08      	pop	{r3}
 80079ac:	469e      	mov	lr, r3
 80079ae:	4770      	bx	lr

080079b0 <_fini>:
 80079b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b2:	bf00      	nop
 80079b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079b6:	bc08      	pop	{r3}
 80079b8:	469e      	mov	lr, r3
 80079ba:	4770      	bx	lr
